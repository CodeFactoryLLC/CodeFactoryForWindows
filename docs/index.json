{
  "api/CodeFactory.ActionException.html": {
    "href": "api/CodeFactory.ActionException.html",
    "title": "Class ActionException | CodeFactory for Windows",
    "keywords": "Class ActionException Exception that is raised when an error occurred that kept a code factory command from finishing execution. Inheritance object Exception CodeFactoryException ActionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class ActionException : CodeFactoryException, ISerializable Constructors ActionException(string) Creates a command exception. Declaration public ActionException(string message) Parameters Type Name Description string message The error message to be captured by the exception ActionException(string, Exception) Creates a command exception. Declaration public ActionException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.CodeFactoryException.html": {
    "href": "api/CodeFactory.CodeFactoryException.html",
    "title": "Class CodeFactoryException | CodeFactory for Windows",
    "keywords": "Class CodeFactoryException Base exception class all code factory generated exceptions are based on. Inheritance object Exception CodeFactoryException ActionException DocumentException ModelException<TModelTypes> ModelLoadException VisualStudioException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class CodeFactoryException : Exception, ISerializable Constructors CodeFactoryException() Creates a general code factory exception. Declaration public CodeFactoryException() CodeFactoryException(string) Creates a general code factory exception. Declaration public CodeFactoryException(string message) Parameters Type Name Description string message The error message to be captured by the exception. CodeFactoryException(string, Exception) Creates a model exception. Declaration public CodeFactoryException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception. Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.CodeFactoryMessages.html": {
    "href": "api/CodeFactory.CodeFactoryMessages.html",
    "title": "Class CodeFactoryMessages | CodeFactory for Windows",
    "keywords": "Class CodeFactoryMessages A strongly-typed resource class, for looking up localized strings, etc. Inheritance object CodeFactoryMessages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class CodeFactoryMessages Properties BaseDocumentException Looks up a localized string similar to An internal error occurred could not complete the document operation.. Declaration public static string BaseDocumentException { get; } Property Value Type Description string CodeFactoryError Looks up a localized string similar to An unhandled error occurred and the current code factory operation failed to complete. Please try again.. Declaration public static string CodeFactoryError { get; } Property Value Type Description string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description CultureInfo LoadErrorsUnhandledError Looks up a localized string similar to An internal error occurred while loading the errors, was not able to retrieve the error messages.. Declaration public static string LoadErrorsUnhandledError { get; } Property Value Type Description string ModelLoadError Looks up a localized string similar to An error occurred while loading the model. Review the model to confirm that the model was able to complete loading. . Declaration public static string ModelLoadError { get; } Property Value Type Description string ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager"
  },
  "api/CodeFactory.Document.DocumentException.html": {
    "href": "api/CodeFactory.Document.DocumentException.html",
    "title": "Class DocumentException | CodeFactory for Windows",
    "keywords": "Class DocumentException Exception management class that host information about exceptions that occurred while managing documents in code factory. Inheritance object Exception CodeFactoryException DocumentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public class DocumentException : CodeFactoryException, ISerializable Constructors DocumentException() Creates a document exception. Declaration public DocumentException() DocumentException(string) Creates a document exception. Declaration public DocumentException(string message) Parameters Type Name Description string message The error message to be captured by the exception DocumentException(string, Exception) Creates a document exception. Declaration public DocumentException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.Document.DocumentLine.html": {
    "href": "api/CodeFactory.Document.DocumentLine.html",
    "title": "Class DocumentLine | CodeFactory for Windows",
    "keywords": "Class DocumentLine Data class that holds the document line information. Inheritance object DocumentLine Implements IDocumentLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public class DocumentLine : IDocumentLine Constructors DocumentLine(long, int, string) Constructor that creates an instance of the DocumentLine Declaration protected DocumentLine(long number, int length, string content) Parameters Type Name Description long number The line number within the document. int length The number of characters that are in the line. string content The content of the line. Properties Content The content of the line. Declaration public string Content { get; } Property Value Type Description string Length The number of characters that are in the line. Declaration public int Length { get; } Property Value Type Description int Number The line number within the document. Declaration public long Number { get; } Property Value Type Description long Methods Init(long, int, string) Creates an immutable instance of the DocumentLine Declaration public static DocumentLine Init(long number, int length, string content) Parameters Type Name Description long number The line number within the document. int length The number of characters that are in the line. string content The content of the line. Returns Type Description DocumentLine Implements IDocumentLine"
  },
  "api/CodeFactory.Document.DocumentLocation.html": {
    "href": "api/CodeFactory.Document.DocumentLocation.html",
    "title": "Class DocumentLocation | CodeFactory for Windows",
    "keywords": "Class DocumentLocation Document location data class, used to determine a point within a document. This is used for gathering and setting model information. Inheritance object DocumentLocation Implements IDocumentLocation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public class DocumentLocation : IDocumentLocation Constructors DocumentLocation(int, int) Initializes a new instance of a DocumentLocation data class. Declaration protected DocumentLocation(int lineNumber, int characterPosition) Parameters Type Name Description int lineNumber The line number within the file. int characterPosition The character position within the line. Properties CharacterPosition The character position within the line. Declaration public int CharacterPosition { get; } Property Value Type Description int LineNumber The line number within the file. Declaration public int LineNumber { get; } Property Value Type Description int Methods Init(int, int) Returns an Immutable instance of data class that implements IDocumentLocation contract definition. Declaration public static DocumentLocation Init(int lineNumber, int characterPosition) Parameters Type Name Description int lineNumber The line number within the file. int characterPosition The character position within the line. Returns Type Description DocumentLocation Immutable instance of the document location. Implements IDocumentLocation"
  },
  "api/CodeFactory.Document.html": {
    "href": "api/CodeFactory.Document.html",
    "title": "Namespace CodeFactory.Document | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.Document Classes DocumentException Exception management class that host information about exceptions that occurred while managing documents in code factory. DocumentLine Data class that holds the document line information. DocumentLocation Document location data class, used to determine a point within a document. This is used for gathering and setting model information. Interfaces IDocumentContent The contents of a document loaded from code factory. IDocumentLine Metadata about a line from a document that has been returned from code factory. IDocumentLocation Definition of the information to identify a location within a document."
  },
  "api/CodeFactory.Document.IDocumentContent.html": {
    "href": "api/CodeFactory.Document.IDocumentContent.html",
    "title": "Interface IDocumentContent | CodeFactory for Windows",
    "keywords": "Interface IDocumentContent The contents of a document loaded from code factory. Inherited Members IReadOnlyList<string>.this[int] IReadOnlyCollection<string>.Count IEnumerable<string>.GetEnumerator() Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public interface IDocumentContent : IReadOnlyList<string>, IReadOnlyCollection<string>, IEnumerable<string>, IEnumerable"
  },
  "api/CodeFactory.Document.IDocumentLine.html": {
    "href": "api/CodeFactory.Document.IDocumentLine.html",
    "title": "Interface IDocumentLine | CodeFactory for Windows",
    "keywords": "Interface IDocumentLine Metadata about a line from a document that has been returned from code factory. Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public interface IDocumentLine Properties Content The content of the line. Declaration string Content { get; } Property Value Type Description string Length The number of characters that are in the line. Declaration int Length { get; } Property Value Type Description int Number The line number within the document. Declaration long Number { get; } Property Value Type Description long"
  },
  "api/CodeFactory.Document.IDocumentLocation.html": {
    "href": "api/CodeFactory.Document.IDocumentLocation.html",
    "title": "Interface IDocumentLocation | CodeFactory for Windows",
    "keywords": "Interface IDocumentLocation Definition of the information to identify a location within a document. Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public interface IDocumentLocation Properties CharacterPosition The character position within the line. Declaration int CharacterPosition { get; } Property Value Type Description int LineNumber The line number within the file. Declaration int LineNumber { get; } Property Value Type Description int"
  },
  "api/CodeFactory.html": {
    "href": "api/CodeFactory.html",
    "title": "Namespace CodeFactory | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory Classes ActionException Exception that is raised when an error occurred that kept a code factory command from finishing execution. CodeFactoryException Base exception class all code factory generated exceptions are based on. CodeFactoryMessages A strongly-typed resource class, for looking up localized strings, etc. ModelException<TModelTypes> Exception class that is designed to capture exception information during the creation of a model. ModelLoadException Exception class that captures information about errors during the creation of a code factory model. ModelStore<T> Stores code factory models so they can be extracted when needed. SourceFormatter Base implementation of source code formatting. This allows for control of formatted output from CodeFactory. UnsupportedSdkLibraryException Exception class that tracks when a CodeFactory library is using an unsupported version of the SDK. Interfaces ICommandBase<TModel> Minimum implementation for all code factory commands. ICommand<TModel> Base implementation for all code factory commands. IModelStatus Status information about a code factory model that has been created. IModel<TModelTypes> Base implementation of a code factory model. All models will be derived from this base model definition. ISourceFormatter Base implementation all source formatters that support CodeFactory must implement."
  },
  "api/CodeFactory.ICommand-1.html": {
    "href": "api/CodeFactory.ICommand-1.html",
    "title": "Interface ICommand<TModel> | CodeFactory for Windows",
    "keywords": "Interface ICommand<TModel> Base implementation for all code factory commands. Inherited Members ICommandBase<TModel>.ExecuteCommandAsync(TModel) Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public interface ICommand<TModel> : ICommandBase<TModel> where TModel : class Type Parameters Name Description TModel Target code factory model to be provided for the command. Methods EnableCommandAsync(TModel) Validation logic that will determine if this command should be enabled for execution. Declaration Task<bool> EnableCommandAsync(TModel result) Parameters Type Name Description TModel result The target model data that will be used to determine if this command should be enabled. Returns Type Description Task<bool> Boolean flag that will tell code factory to enable this command or disable it."
  },
  "api/CodeFactory.ICommandBase-1.html": {
    "href": "api/CodeFactory.ICommandBase-1.html",
    "title": "Interface ICommandBase<TModel> | CodeFactory for Windows",
    "keywords": "Interface ICommandBase<TModel> Minimum implementation for all code factory commands. Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public interface ICommandBase<TModel> where TModel : class Type Parameters Name Description TModel Target code factory model to be provided for the command. Methods ExecuteCommandAsync(TModel) Code factory framework calls this method when the command has been executed. Declaration Task ExecuteCommandAsync(TModel result) Parameters Type Name Description TModel result The code factory model that has generated and provided to the command to process. Returns Type Description Task"
  },
  "api/CodeFactory.IModel-1.html": {
    "href": "api/CodeFactory.IModel-1.html",
    "title": "Interface IModel<TModelTypes> | CodeFactory for Windows",
    "keywords": "Interface IModel<TModelTypes> Base implementation of a code factory model. All models will be derived from this base model definition. Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public interface IModel<TModelTypes> where TModelTypes : struct, IComparable, IFormattable, IConvertible Type Parameters Name Description TModelTypes Enumeration of the model types that this model supports. Properties HasErrors Flag that determines if this model has errors. Declaration bool HasErrors { get; } Property Value Type Description bool IsLoaded Flag that determines if this model was able to load. Declaration bool IsLoaded { get; } Property Value Type Description bool ModelErrors List of all errors that occurred in this model. Declaration IReadOnlyList<ModelException<TModelTypes>> ModelErrors { get; } Property Value Type Description IReadOnlyList<ModelException<TModelTypes>> ModelType Determines the type of model that has been loaded. Declaration TModelTypes ModelType { get; } Property Value Type Description TModelTypes"
  },
  "api/CodeFactory.IModelStatus.html": {
    "href": "api/CodeFactory.IModelStatus.html",
    "title": "Interface IModelStatus | CodeFactory for Windows",
    "keywords": "Interface IModelStatus Status information about a code factory model that has been created. Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public interface IModelStatus Properties HasErrors Flag that determines if this model or one of the children of this model has an error. Declaration bool HasErrors { get; } Property Value Type Description bool IsLoaded Flag that determines if this model was able to load. Declaration bool IsLoaded { get; } Property Value Type Description bool Methods GetErrors() Gets the ModelLoadException from the current model and all child models of this model. Declaration IReadOnlyList<ModelLoadException> GetErrors() Returns Type Description IReadOnlyList<ModelLoadException> Returns a IReadOnlyList<T> of the ModelLoadException exceptions or an empty list if no exceptions exist."
  },
  "api/CodeFactory.ISourceFormatter.html": {
    "href": "api/CodeFactory.ISourceFormatter.html",
    "title": "Interface ISourceFormatter | CodeFactory for Windows",
    "keywords": "Interface ISourceFormatter Base implementation all source formatters that support CodeFactory must implement. Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public interface ISourceFormatter Methods AppendCode(string) Appends code to the end of the current line in the formatter. Declaration void AppendCode(string code) Parameters Type Name Description string code The code to append. AppendCodeBlock(int, IEnumerable<string>) Appends a target indent level to a already formatted block of code. Declaration void AppendCodeBlock(int indentLevel, IEnumerable<string> codeBlock) Parameters Type Name Description int indentLevel The target indent level to be added to the existing code block. IEnumerable<string> codeBlock The block of code to append to. AppendCodeBlock(int, string) Appends a target indent level to a already formatted block of code. Declaration void AppendCodeBlock(int indentLevel, string codeBlock) Parameters Type Name Description int indentLevel The target indent level to be added to the existing code block. string codeBlock The block of code to append to. AppendCodeLine(int) Appends a new line of code to the formatter. Declaration void AppendCodeLine(int indentLevel) Parameters Type Name Description int indentLevel The number of indent levels to add to the source code. AppendCodeLine(int, string) Appends a new line of code to the formatter. Declaration void AppendCodeLine(int indentLevel, string code) Parameters Type Name Description int indentLevel The number of indent levels to add to the source code. string code The code to add to the formatter. ResetFormatter() Clears the formatter to be reused. Declaration void ResetFormatter() ReturnSource() Returns the formatted source code. Declaration string ReturnSource() Returns Type Description string Formatted SourceCode."
  },
  "api/CodeFactory.ModelException-1.html": {
    "href": "api/CodeFactory.ModelException-1.html",
    "title": "Class ModelException<TModelTypes> | CodeFactory for Windows",
    "keywords": "Class ModelException<TModelTypes> Exception class that is designed to capture exception information during the creation of a model. Inheritance object Exception CodeFactoryException ModelException<TModelTypes> Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class ModelException<TModelTypes> : CodeFactoryException, ISerializable where TModelTypes : struct, IComparable, IFormattable, IConvertible Type Parameters Name Description TModelTypes Target enumeration of model types that this exception will support. Constructors ModelException(TModelTypes) Creates a model exception. Declaration public ModelException(TModelTypes modelType) Parameters Type Name Description TModelTypes modelType The type of model that had issues ModelException(TModelTypes, string) Creates a model exception. Declaration public ModelException(TModelTypes modelType, string message) Parameters Type Name Description TModelTypes modelType The type of model that had issues string message The error message to be captured by the exception ModelException(TModelTypes, string, Exception) Creates a model exception. Declaration public ModelException(TModelTypes modelType, string message, Exception innerException) Parameters Type Name Description TModelTypes modelType The type of model that had issues string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Properties ModelType The source type of the model that had an error when loading. Declaration public TModelTypes ModelType { get; } Property Value Type Description TModelTypes Implements ISerializable"
  },
  "api/CodeFactory.ModelLoadException.html": {
    "href": "api/CodeFactory.ModelLoadException.html",
    "title": "Class ModelLoadException | CodeFactory for Windows",
    "keywords": "Class ModelLoadException Exception class that captures information about errors during the creation of a code factory model. Inheritance object Exception CodeFactoryException ModelLoadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class ModelLoadException : CodeFactoryException, ISerializable Constructors ModelLoadException(string) Creates a model load exception. Declaration public ModelLoadException(string modelType = null) Parameters Type Name Description string modelType Optional parameter that stores the name of the target model type. ModelLoadException(string, Exception, string) Creates a model load exception. Declaration public ModelLoadException(string message, Exception innerException, string modelType = null) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. string modelType Optional parameter that stores the name of the target model type. ModelLoadException(string, string) Creates a model load exception. Declaration public ModelLoadException(string message, string modelType = null) Parameters Type Name Description string message The error message to be captured by the exception string modelType Optional parameter that stores the name of the target model type. Implements ISerializable"
  },
  "api/CodeFactory.ModelStore-1.html": {
    "href": "api/CodeFactory.ModelStore-1.html",
    "title": "Class ModelStore<T> | CodeFactory for Windows",
    "keywords": "Class ModelStore<T> Stores code factory models so they can be extracted when needed. Inheritance object ModelStore<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class ModelStore<T> where T : class Type Parameters Name Description T The type of model that is being stored. Constructors ModelStore() Initialization of the model store Declaration public ModelStore() Methods AddModel(string, T) Adds a model to the model store. Declaration public void AddModel(string index, T model) Parameters Type Name Description string index The unique index for the model. T model The model to be added to the store. The model cannot be null otherwise it will not be added. GetModel(string) Gets a target model from the store. Declaration public T GetModel(string index) Parameters Type Name Description string index Index number of the model to load. Returns Type Description T The stored model or null if the model could not be returned. Remarks Thread safe operation."
  },
  "api/CodeFactory.SourceCode.html": {
    "href": "api/CodeFactory.SourceCode.html",
    "title": "Namespace CodeFactory.SourceCode | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.SourceCode Classes SourceLocation Data model that implements the contract ISourceLocation Interfaces ISourceFiles Interface that stores where target source code originated from. ISourceLocation Notes the location in a source document where the model starts and ends in definition. Enums SourceCodeType Enumeration of the source code types that are supported by code factory."
  },
  "api/CodeFactory.SourceCode.ISourceFiles.html": {
    "href": "api/CodeFactory.SourceCode.ISourceFiles.html",
    "title": "Interface ISourceFiles | CodeFactory for Windows",
    "keywords": "Interface ISourceFiles Interface that stores where target source code originated from. Namespace: CodeFactory.SourceCode Assembly: CodeFactory.dll Syntax public interface ISourceFiles Properties ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration string ModelSourceFile { get; } Property Value Type Description string SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string>"
  },
  "api/CodeFactory.SourceCode.ISourceLocation.html": {
    "href": "api/CodeFactory.SourceCode.ISourceLocation.html",
    "title": "Interface ISourceLocation | CodeFactory for Windows",
    "keywords": "Interface ISourceLocation Notes the location in a source document where the model starts and ends in definition. Namespace: CodeFactory.SourceCode Assembly: CodeFactory.dll Syntax public interface ISourceLocation Properties EndLocation The ending location for the definition of the source. Declaration DocumentLocation EndLocation { get; } Property Value Type Description DocumentLocation StartLocation The starting location for the definition of the source. Declaration DocumentLocation StartLocation { get; } Property Value Type Description DocumentLocation"
  },
  "api/CodeFactory.SourceCode.SourceCodeType.html": {
    "href": "api/CodeFactory.SourceCode.SourceCodeType.html",
    "title": "Enum SourceCodeType | CodeFactory for Windows",
    "keywords": "Enum SourceCodeType Enumeration of the source code types that are supported by code factory. Namespace: CodeFactory.SourceCode Assembly: CodeFactory.dll Syntax public enum SourceCodeType Fields Name Description CSharp The source code is implemented in the C# programming language. Unknown The source code type is not supported or unknown to code factory. VisualBasic The source code is implemented in the visual basic programming language."
  },
  "api/CodeFactory.SourceCode.SourceLocation.html": {
    "href": "api/CodeFactory.SourceCode.SourceLocation.html",
    "title": "Class SourceLocation | CodeFactory for Windows",
    "keywords": "Class SourceLocation Data model that implements the contract ISourceLocation Inheritance object SourceLocation Implements ISourceLocation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.SourceCode Assembly: CodeFactory.dll Syntax public class SourceLocation : ISourceLocation Properties EndLocation The ending location for the definition of the source. Declaration public DocumentLocation EndLocation { get; } Property Value Type Description DocumentLocation StartLocation The starting location for the definition of the source. Declaration public DocumentLocation StartLocation { get; } Property Value Type Description DocumentLocation Methods Init(int, int, int, int) Create a instance of the SourceLocation data class. Declaration public static ISourceLocation Init(int startLine, int startPosition, int endLine, int endPosition) Parameters Type Name Description int startLine The starting line number for the source. int startPosition The starting character position for the source. int endLine The end line number for the source. int endPosition The end character position for the source. Returns Type Description ISourceLocation New instance of the SourceLocation returned as ISourceLocation. Implements ISourceLocation"
  },
  "api/CodeFactory.SourceFormatter.html": {
    "href": "api/CodeFactory.SourceFormatter.html",
    "title": "Class SourceFormatter | CodeFactory for Windows",
    "keywords": "Class SourceFormatter Base implementation of source code formatting. This allows for control of formatted output from CodeFactory. Inheritance object SourceFormatter Implements ISourceFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class SourceFormatter : ISourceFormatter Constructors SourceFormatter(string) Creates a new instance of the SourceFormatter Declaration public SourceFormatter(string indentStatement = \"\\t\") Parameters Type Name Description string indentStatement Optional parameter that allows you to set the target type of indent that will occur with each code statement. Methods AppendCode(string) Appends code to the end of the current line in the formatter. Declaration public void AppendCode(string code) Parameters Type Name Description string code The code to append. AppendCodeBlock(int, IEnumerable<string>) Appends a target indent level to a already formatted block of code. Declaration public void AppendCodeBlock(int indentLevel, IEnumerable<string> codeBlock) Parameters Type Name Description int indentLevel The target indent level to be added to the existing code block. IEnumerable<string> codeBlock The block of code to append to. AppendCodeBlock(int, string) Appends a target indent level to a already formatted block of code. Declaration public void AppendCodeBlock(int indentLevel, string codeBlock) Parameters Type Name Description int indentLevel The target indent level to be added to the existing code block. string codeBlock The block of code to append to. AppendCodeLine(int) Appends a new line of code to the formatter. Declaration public void AppendCodeLine(int indentLevel) Parameters Type Name Description int indentLevel The number of indent levels to add to the source code. AppendCodeLine(int, string) Appends a new line of code to the formatter. Declaration public void AppendCodeLine(int indentLevel, string code) Parameters Type Name Description int indentLevel The number of indent levels to add to the source code. string code The code to add to the formatter. ResetFormatter() Clears the formatter to be reused. Declaration public void ResetFormatter() ReturnSource() Returns the formatted source code. Declaration public string ReturnSource() Returns Type Description string Formatted SourceCode. Implements ISourceFormatter"
  },
  "api/CodeFactory.UnsupportedSdkLibraryException.html": {
    "href": "api/CodeFactory.UnsupportedSdkLibraryException.html",
    "title": "Class UnsupportedSdkLibraryException | CodeFactory for Windows",
    "keywords": "Class UnsupportedSdkLibraryException Exception class that tracks when a CodeFactory library is using an unsupported version of the SDK. Inheritance object Exception UnsupportedSdkLibraryException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class UnsupportedSdkLibraryException : Exception, ISerializable Constructors UnsupportedSdkLibraryException(string, string, string, string) Creates an instance of the exception UnsupportedSdkLibraryException Declaration public UnsupportedSdkLibraryException(string assemblyName, string assemblyVersion, string sdkMinVersion, string sdkMaxVersion) Parameters Type Name Description string assemblyName Name of the assembly that is not supported. string assemblyVersion The SDK version that was used to create the assembly. string sdkMinVersion The minimum supported SDK version. string sdkMaxVersion The maximum supported SDK version. Properties AssemblyName The name of the assembly that is was compiled on an unsupported SDK version. Declaration public string AssemblyName { get; } Property Value Type Description string AssemblyVersion The assembly SDK version that was used when building the assembly. Declaration public string AssemblyVersion { get; } Property Value Type Description string SdkMaxVersion The maximum supported SDK version. Declaration public string SdkMaxVersion { get; } Property Value Type Description string SdkMinVersion The minimum supported SDK version. Declaration public string SdkMinVersion { get; } Property Value Type Description string Implements ISerializable"
  },
  "api/CodeFactory.WinVs.AssemblyCFEnvironment.html": {
    "href": "api/CodeFactory.WinVs.AssemblyCFEnvironment.html",
    "title": "Class AssemblyCFEnvironment | CodeFactory for Windows",
    "keywords": "Class AssemblyCFEnvironment Assembly attribute that tracks the CodeFactory environment that this library runs in. Inheritance object Attribute AssemblyCFEnvironment Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class AssemblyCFEnvironment : Attribute Constructors AssemblyCFEnvironment() Initializes a new instance of the attribute with no data. Declaration public AssemblyCFEnvironment() AssemblyCFEnvironment(string) Initializes a new instance of the attribute. Declaration public AssemblyCFEnvironment(string value) Parameters Type Name Description string value The type of CodeFactory library being created. Properties Value The value assigned to the assembly attribute. Declaration public string Value { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.AssemblyCFSdkVersion.html": {
    "href": "api/CodeFactory.WinVs.AssemblyCFSdkVersion.html",
    "title": "Class AssemblyCFSdkVersion | CodeFactory for Windows",
    "keywords": "Class AssemblyCFSdkVersion Assembly attribute that tracks the CodeFactory SDK that was used to build this assembly. Inheritance object Attribute AssemblyCFSdkVersion Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class AssemblyCFSdkVersion : Attribute Constructors AssemblyCFSdkVersion() Initializes a new instance of the attribute with no data. Declaration public AssemblyCFSdkVersion() AssemblyCFSdkVersion(string) Initializes a new instance of the attribute. Declaration public AssemblyCFSdkVersion(string value) Parameters Type Name Description string value The type of CodeFactory library being created. Properties Value The value assigned to the assembly attribute. Declaration public string Value { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Commands.ConfigCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigCommand.html",
    "title": "Class ConfigCommand | CodeFactory for Windows",
    "keywords": "Class ConfigCommand Stores the configuration for a CodeFactory command. Inheritance object ConfigCommand Implements IConfigGuidance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public class ConfigCommand : IConfigGuidance Properties Category The target category the command belongs to. Declaration public string Category { get; set; } Property Value Type Description string CommandType The fully qualified type name of the command that is used by this configuration. Declaration public string CommandType { get; set; } Property Value Type Description string ExecutionProject The project the command is executed in. Declaration public ConfigProject ExecutionProject { get; set; } Property Value Type Description ConfigProject Guidance Instructions for what data is to go into the configuration. Declaration public string Guidance { get; set; } Property Value Type Description string Name The name assigned to represent the command being executed. Declaration public string Name { get; set; } Property Value Type Description string Parameters Parameters that are used with the command implementation. Declaration public ImmutableList<ConfigParameter> Parameters { get; set; } Property Value Type Description ImmutableList<ConfigParameter> Projects Additional projects that will provide source and target projects used by the executing command. Declaration public ImmutableList<ConfigProject> Projects { get; set; } Property Value Type Description ImmutableList<ConfigProject> Methods AddParameter(ConfigParameter) Fluent method that adds a parameter to the command. Declaration public ConfigCommand AddParameter(ConfigParameter parameter) Parameters Type Name Description ConfigParameter parameter The parameter to add to the command. Returns Type Description ConfigCommand Updated command source. AddProject(ConfigProject) Fluent method that adds a project to the command. Declaration public ConfigCommand AddProject(ConfigProject project) Parameters Type Name Description ConfigProject project The project to add to the command. Returns Type Description ConfigCommand Updated command source. Parameter(string) Gets the target parameter that has been assigned to this command source. Declaration public ConfigParameter Parameter(string name) Parameters Type Name Description string name Name of the parameter to lookup. Returns Type Description ConfigParameter The parameter source or null if the parameter was not found. ParameterValue(string) Gets the target parameter value that has been assigned to a parameter source assigned to this command source. Declaration public string ParameterValue(string name) Parameters Type Name Description string name Name of the parameter to lookup. Returns Type Description string The parameter value or null. Project(string) Gets a project configured from this command by the name of the target project. Declaration public ConfigProject Project(string name) Parameters Type Name Description string name The name of the project to retrieve. Returns Type Description ConfigProject The project source or null if the target project could not be found. UpdateExecutionProject(ConfigProject) Fluent method that updates the commands execution project. Declaration public ConfigCommand UpdateExecutionProject(ConfigProject executionProject) Parameters Type Name Description ConfigProject executionProject Project configuration for the execution project. Returns Type Description ConfigCommand Updated command source. Implements IConfigGuidance Extension Methods ConfigManager.RegisterCommandWithDefaultConfiguration(ConfigCommand)"
  },
  "api/CodeFactory.WinVs.Commands.ConfigFolder.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigFolder.html",
    "title": "Class ConfigFolder | CodeFactory for Windows",
    "keywords": "Class ConfigFolder Configuration information about a target project folder. Inheritance object ConfigFolder Implements IConfigGuidance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public class ConfigFolder : IConfigGuidance Properties Guidance Instructions for what data is to go into the configuration. Declaration public string Guidance { get; set; } Property Value Type Description string Name Name that is associated with this directory location. Declaration public string Name { get; set; } Property Value Type Description string Path The relative path from the source that hosts this project folder. Declaration public string Path { get; set; } Property Value Type Description string Required Flag that determines if the folder is required in order for the automation to run. Declaration public bool Required { get; set; } Property Value Type Description bool Implements IConfigGuidance"
  },
  "api/CodeFactory.WinVs.Commands.ConfigManager.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigManager.html",
    "title": "Class ConfigManager | CodeFactory for Windows",
    "keywords": "Class ConfigManager Managers the loading and saving of solution configurations. Inheritance object ConfigManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public static class ConfigManager Properties Configuration The configuration loaded into the configuration manager, will be null if not loaded. Declaration public static ConfigSolution Configuration { get; } Property Value Type Description ConfigSolution ConfigurationName The name of the loaded configuration. Will be null if the configuration is not loaded. Declaration public static string ConfigurationName { get; } Property Value Type Description string HasConfiguration Flag that determines if a configuration has been loaded. Declaration public static bool HasConfiguration { get; } Property Value Type Description bool HasDefaultConfiguration Flag that determines if a default configuration has been loaded. Declaration public static bool HasDefaultConfiguration { get; } Property Value Type Description bool Methods CreateDefaultConfigurationAsync(VsSolution, string, string) Will check to see if a default configuration exists. if it does not will create a new default configuration. Declaration public static Task CreateDefaultConfigurationAsync(VsSolution solution, string configName, string fileName) Parameters Type Name Description VsSolution solution The solution model from code factory. string configName The name assigned to configuration. string fileName The file name without the extension. Returns Type Description Task HasAutomationConfigAsync(VsSolution, string) Determines if a ADK configuration is stored in the solution. Declaration public static Task<bool> HasAutomationConfigAsync(VsSolution solution, string fileName) Parameters Type Name Description VsSolution solution Solution model hosting the configuration model. string fileName The file name without the extension. Returns Type Description Task<bool> True file exists or false if not. LoadCommandByFolderAsync(string, string, VsModel, FolderLoadType) Identifies the command source for the executing command where the command is expected to execute from a project folder. Declaration public static Task<ConfigCommand> LoadCommandByFolderAsync(string commandType, string projectFolder, VsModel commandResult, FolderLoadType loadType = FolderLoadType.TargetFolderOnly) Parameters Type Name Description string commandType The fully qualified name of the command type to evaluated. string projectFolder the name of the Project Source project folder to be loaded. VsModel commandResult The loaded model from the requesting command to load the command source. FolderLoadType loadType The type of evaluation that should be performed. Returns Type Description Task<ConfigCommand> The command source that meetings the criteria or null if no command source meet the criteria. LoadCommandByProjectAsync(string, VsModel) Identifies the command source for the executing command where the command is expected to execute from a target project. Declaration public static Task<ConfigCommand> LoadCommandByProjectAsync(string commandType, VsModel commandResult) Parameters Type Name Description string commandType The fully qualified name of the command type to evaluated. VsModel commandResult The loaded model from the requesting command to load the command source. Returns Type Description Task<ConfigCommand> The command source that meetings the criteria or null if no command source meet the criteria. LoadConfiguration(VsSolution, string, IVsActions) Loads a ADK configuration from a target configuration file. Declaration public static ConfigSolution LoadConfiguration(VsSolution solution, string fileName, IVsActions actions) Parameters Type Name Description VsSolution solution The solution model used to locate the configuration to be loaded. string fileName The file name without the extension. IVsActions actions The Visual Studio automation for CodeFactory. Returns Type Description ConfigSolution Loaded solution configuration. RegisterCommandWithDefaultConfiguration(ConfigCommand) Registers a command configuration with the configuration manager to be used when building a default configuration. Declaration public static void RegisterCommandWithDefaultConfiguration(this ConfigCommand command) Parameters Type Name Description ConfigCommand command Command configuration to be registered SaveConfigurationAsync(VsSolution, ConfigSolution, IVsActions, string) Saves a ADK configuration to a target directory. Declaration public static Task SaveConfigurationAsync(VsSolution solution, ConfigSolution configuration, IVsActions actions, string fileName) Parameters Type Name Description VsSolution solution The CodeFactory solution model to save the configuration to. ConfigSolution configuration The solution configuration to be saved to disk. IVsActions actions The Visual Studio automation for CodeFactory. string fileName The file name of the configuration file without the extension. Returns Type Description Task Exceptions Type Condition ArgumentNullException Raised if provided parameters are null. ArgumentException Raised if the file path is not provided. CodeFactoryException Raised if the save cannot be completed. SetConfiguration(ConfigSolution, IVsActions) Register a loaded configuration with the configuration manager. Declaration public static void SetConfiguration(ConfigSolution configuration, IVsActions actions) Parameters Type Name Description ConfigSolution configuration The loaded configuration. IVsActions actions The Visual Studio automation for CodeFactory. Exceptions Type Condition ArgumentNullException"
  },
  "api/CodeFactory.WinVs.Commands.ConfigParameter.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigParameter.html",
    "title": "Class ConfigParameter | CodeFactory for Windows",
    "keywords": "Class ConfigParameter Configuration information about a target parameter to be used in CodeFactory automation. Inheritance object ConfigParameter Implements IConfigGuidance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public class ConfigParameter : IConfigGuidance Properties Guidance Instructions for what data is to go into the configuration. Declaration public string Guidance { get; set; } Property Value Type Description string Name Name of the parameter itself. Declaration public string Name { get; set; } Property Value Type Description string Value The value that is assigned to the parameter. Declaration public string Value { get; set; } Property Value Type Description string Implements IConfigGuidance"
  },
  "api/CodeFactory.WinVs.Commands.ConfigProject.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigProject.html",
    "title": "Class ConfigProject | CodeFactory for Windows",
    "keywords": "Class ConfigProject Holds the configuration for a target project and any target project folder under the project that are needed in the configuration. Inheritance object ConfigProject Implements IConfigGuidance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public class ConfigProject : IConfigGuidance Properties Folders ConfigFolder that are part of the project. Declaration public ImmutableList<ConfigFolder> Folders { get; set; } Property Value Type Description ImmutableList<ConfigFolder> Guidance Instructions for what data is to go into the configuration. Declaration public string Guidance { get; set; } Property Value Type Description string Name The configuration name assigned to the project. Declaration public string Name { get; set; } Property Value Type Description string Parameters Parameters that are assigned to the project. Declaration public ImmutableList<ConfigParameter> Parameters { get; set; } Property Value Type Description ImmutableList<ConfigParameter> ProjectName The target project in the solution this configuration talks to. Declaration public string ProjectName { get; set; } Property Value Type Description string Methods AddFolder(ConfigFolder) Fluent method that adds a folder to the project source. Declaration public ConfigProject AddFolder(ConfigFolder folder) Parameters Type Name Description ConfigFolder folder Target folder to add to the project. Returns Type Description ConfigProject Updated project source. AddParameter(ConfigParameter) Fluent method that adds a parameter to the project source. Declaration public ConfigProject AddParameter(ConfigParameter parameter) Parameters Type Name Description ConfigParameter parameter The parameter to add to the project. Returns Type Description ConfigProject Updated project source. Folder(string) Gets the folder from the hosting project. Declaration public ConfigFolder Folder(string name) Parameters Type Name Description string name The name of the folder to retrieve. Returns Type Description ConfigFolder The folder or null if it is not found. Parameter(string) Gets the parameter source from the hosting project. Declaration public ConfigParameter Parameter(string name) Parameters Type Name Description string name The name of the parameter to retrieve. Returns Type Description ConfigParameter The parameter source or null if it is not found. ParameterValue(string) Get the value for a parameter that is hosted in the project. Declaration public string ParameterValue(string name) Parameters Type Name Description string name The name of the parameter to get the value from. Returns Type Description string The value of the parameter or null if the parameter is not found. Implements IConfigGuidance"
  },
  "api/CodeFactory.WinVs.Commands.ConfigSolution.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigSolution.html",
    "title": "Class ConfigSolution | CodeFactory for Windows",
    "keywords": "Class ConfigSolution The configuration information for a solution to be automated. Inheritance object ConfigSolution Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public class ConfigSolution Properties Commands Configuration of the commands that were loaded. Declaration public ImmutableList<ConfigCommand> Commands { get; set; } Property Value Type Description ImmutableList<ConfigCommand> Name Name assigned to the configuration that is loaded by the solution. Declaration public string Name { get; set; } Property Value Type Description string Methods AddCommand(ConfigCommand) Fluent method that adds a command to the solution configuration. Declaration public ConfigSolution AddCommand(ConfigCommand command) Parameters Type Name Description ConfigCommand command Command to add to the source configuration. Returns Type Description ConfigSolution Updated solution configuration. CommandByName(string) Accesses a target command by the name assigned to the command. Declaration public ConfigCommand CommandByName(string name) Parameters Type Name Description string name The name of the command to retrieve Returns Type Description ConfigCommand The specific command or null if the command was not found. CommandsByCategory(string) Accesses target commands by the category that was assigned to the command. Declaration public IReadOnlyList<ConfigCommand> CommandsByCategory(string category) Parameters Type Name Description string category The category in which the commands where saved as. Returns Type Description IReadOnlyList<ConfigCommand> The found command sources or an empty list. CommandsByType(string) Accesses target commands by the type of command that has been saved. Declaration public IReadOnlyList<ConfigCommand> CommandsByType(string commandType) Parameters Type Name Description string commandType The type of command to retrieve from the configuration. Returns Type Description IReadOnlyList<ConfigCommand> The found command sources or an empty list."
  },
  "api/CodeFactory.WinVs.Commands.FolderLoadType.html": {
    "href": "api/CodeFactory.WinVs.Commands.FolderLoadType.html",
    "title": "Enum FolderLoadType | CodeFactory for Windows",
    "keywords": "Enum FolderLoadType Enumeration that determines how a command source that targets commands in folders should be checked. Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public enum FolderLoadType Fields Name Description Optional Target folder is optional and can be anywhere in the solution. TargetFolderAndSubFolder The command must of executed in the configured folder or a child of the target folder. TargetFolderOnly The command must of executed in the configured folder."
  },
  "api/CodeFactory.WinVs.Commands.html": {
    "href": "api/CodeFactory.WinVs.Commands.html",
    "title": "Namespace CodeFactory.WinVs.Commands | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Commands Classes ConfigCommand Stores the configuration for a CodeFactory command. ConfigFolder Configuration information about a target project folder. ConfigManager Managers the loading and saving of solution configurations. ConfigParameter Configuration information about a target parameter to be used in CodeFactory automation. ConfigProject Holds the configuration for a target project and any target project folder under the project that are needed in the configuration. ConfigSolution The configuration information for a solution to be automated. VsCommandBase<TModel> Base implementation for a factory command that supports integration with visual studio. VsEnviromentCommandBase<TModel> Base implementation for a environment command that supports integration with the Visual studio IDE environment directly. Interfaces IConfigGuidance Contract definition for guidance for command configuration IVsCommandInformation Interface that provides information used by code factory to load the command. IVsConfigurableCommand<TModel> IVsEnvironmentCommand<TModel> Base implementation for all code factory commands that are directly executed by the Visual Studio Enviornment. IVsFactoryCommand<TModel> Common implementation all code factory commands for visual studio must display. Enums FolderLoadType Enumeration that determines how a command source that targets commands in folders should be checked. VsCommandType Enumeration that determines the type of visual studio command is being executed."
  },
  "api/CodeFactory.WinVs.Commands.IConfigGuidance.html": {
    "href": "api/CodeFactory.WinVs.Commands.IConfigGuidance.html",
    "title": "Interface IConfigGuidance | CodeFactory for Windows",
    "keywords": "Interface IConfigGuidance Contract definition for guidance for command configuration Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public interface IConfigGuidance Properties Guidance Instructions for what data is to go into the configuration. Declaration string Guidance { get; set; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Commands.IDE.html": {
    "href": "api/CodeFactory.WinVs.Commands.IDE.html",
    "title": "Namespace CodeFactory.WinVs.Commands.IDE | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Commands.IDE Classes SolutionLoadCommandBase Base implementation of the solution explorer command ISolutionLoadCommand Interfaces ISolutionLoadCommand Code factory command that triggers once the solution has been loaded. Will only be called once."
  },
  "api/CodeFactory.WinVs.Commands.IDE.ISolutionLoadCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.IDE.ISolutionLoadCommand.html",
    "title": "Interface ISolutionLoadCommand | CodeFactory for Windows",
    "keywords": "Interface ISolutionLoadCommand Code factory command that triggers once the solution has been loaded. Will only be called once. Inherited Members IVsEnvironmentCommand<VsSolution>.ExecuteCommandAsync(VsSolution) IVsEnvironmentCommand<VsSolution>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType Namespace: CodeFactory.WinVs.Commands.IDE Assembly: CodeFactory.WinVs.dll Syntax public interface ISolutionLoadCommand : IVsEnvironmentCommand<VsSolution>, IVsCommandInformation"
  },
  "api/CodeFactory.WinVs.Commands.IDE.SolutionLoadCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.IDE.SolutionLoadCommandBase.html",
    "title": "Class SolutionLoadCommandBase | CodeFactory for Windows",
    "keywords": "Class SolutionLoadCommandBase Base implementation of the solution explorer command ISolutionLoadCommand Inheritance object VsEnviromentCommandBase<VsSolution> SolutionLoadCommandBase Implements ISolutionLoadCommand IVsEnvironmentCommand<VsSolution> IVsCommandInformation Inherited Members VsEnviromentCommandBase<VsSolution>._commandTitle VsEnviromentCommandBase<VsSolution>._commandDescription VsEnviromentCommandBase<VsSolution>._logger VsEnviromentCommandBase<VsSolution>.CommandTitle VsEnviromentCommandBase<VsSolution>.CommandDescription VsEnviromentCommandBase<VsSolution>.CommandType VsEnviromentCommandBase<VsSolution>.VisualStudioActions VsEnviromentCommandBase<VsSolution>.ExecuteCommandAsync(VsSolution) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands.IDE Assembly: CodeFactory.WinVs.dll Syntax public abstract class SolutionLoadCommandBase : VsEnviromentCommandBase<VsSolution>, ISolutionLoadCommand, IVsEnvironmentCommand<VsSolution>, IVsCommandInformation Constructors SolutionLoadCommandBase(ILogger, IVsActions, string, string) Declaration protected SolutionLoadCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements ISolutionLoadCommand IVsEnvironmentCommand<TModel> IVsCommandInformation"
  },
  "api/CodeFactory.WinVs.Commands.IVsCommandInformation.html": {
    "href": "api/CodeFactory.WinVs.Commands.IVsCommandInformation.html",
    "title": "Interface IVsCommandInformation | CodeFactory for Windows",
    "keywords": "Interface IVsCommandInformation Interface that provides information used by code factory to load the command. Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public interface IVsCommandInformation Properties CommandDescription An optional description that describes what this factory command is intended for. Declaration string CommandDescription { get; } Property Value Type Description string CommandTitle Command title that will be displayed within visual studio. Declaration string CommandTitle { get; } Property Value Type Description string CommandType The target type of command that is being loaded. Declaration VsCommandType CommandType { get; } Property Value Type Description VsCommandType"
  },
  "api/CodeFactory.WinVs.Commands.IVsConfigurableCommand-1.html": {
    "href": "api/CodeFactory.WinVs.Commands.IVsConfigurableCommand-1.html",
    "title": "Interface IVsConfigurableCommand<TModel> | CodeFactory for Windows",
    "keywords": "Interface IVsConfigurableCommand<TModel> Inherited Members IVsFactoryCommand<TModel>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<TModel>.EnableCommandAsync(TModel) ICommandBase<TModel>.ExecuteCommandAsync(TModel) Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public interface IVsConfigurableCommand<TModel> : IVsFactoryCommand<TModel>, IVsCommandInformation, ICommand<TModel>, ICommandBase<TModel> where TModel : class Type Parameters Name Description TModel Methods LoadExternalConfigDefinition() Loads the external configuration definition for this command. Declaration ConfigCommand LoadExternalConfigDefinition() Returns Type Description ConfigCommand Will return the command configuration or null if this command does not support external configurations."
  },
  "api/CodeFactory.WinVs.Commands.IVsEnvironmentCommand-1.html": {
    "href": "api/CodeFactory.WinVs.Commands.IVsEnvironmentCommand-1.html",
    "title": "Interface IVsEnvironmentCommand<TModel> | CodeFactory for Windows",
    "keywords": "Interface IVsEnvironmentCommand<TModel> Base implementation for all code factory commands that are directly executed by the Visual Studio Enviornment. Inherited Members IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public interface IVsEnvironmentCommand<TModel> : IVsCommandInformation where TModel : class Type Parameters Name Description TModel Target code factory model to be provided for the command. Properties VisualStudioActions Global visual studio commands that can be accessed from this visual studio command. Declaration IVsActions VisualStudioActions { get; } Property Value Type Description IVsActions Methods ExecuteCommandAsync(TModel) Code factory framework calls this method when the command has been executed. Declaration Task ExecuteCommandAsync(TModel result) Parameters Type Name Description TModel result The code factory model that has generated and provided to the command to process. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Commands.IVsFactoryCommand-1.html": {
    "href": "api/CodeFactory.WinVs.Commands.IVsFactoryCommand-1.html",
    "title": "Interface IVsFactoryCommand<TModel> | CodeFactory for Windows",
    "keywords": "Interface IVsFactoryCommand<TModel> Common implementation all code factory commands for visual studio must display. Inherited Members IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<TModel>.EnableCommandAsync(TModel) ICommandBase<TModel>.ExecuteCommandAsync(TModel) Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public interface IVsFactoryCommand<TModel> : IVsCommandInformation, ICommand<TModel>, ICommandBase<TModel> where TModel : class Type Parameters Name Description TModel The target mode that will be returned by this code factory command. Properties VisualStudioActions Global visual studio commands that can be accessed from this visual studio command. Declaration IVsActions VisualStudioActions { get; } Property Value Type Description IVsActions"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.CSharpSourceCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.CSharpSourceCommandBase.html",
    "title": "Class CSharpSourceCommandBase | CodeFactory for Windows",
    "keywords": "Class CSharpSourceCommandBase Base implementation of the solution explorer command ICSharpSourceCommand Inheritance object VsCommandBase<VsCSharpSource> CSharpSourceCommandBase Implements IVsConfigurableCommand<VsCSharpSource> ICSharpSourceCommand IVsFactoryCommand<VsCSharpSource> IVsCommandInformation ICommand<VsCSharpSource> ICommandBase<VsCSharpSource> Inherited Members VsCommandBase<VsCSharpSource>._commandTitle VsCommandBase<VsCSharpSource>._commandDescription VsCommandBase<VsCSharpSource>._logger VsCommandBase<VsCSharpSource>.LoadExternalConfigDefinition() VsCommandBase<VsCSharpSource>.CommandTitle VsCommandBase<VsCSharpSource>.CommandDescription VsCommandBase<VsCSharpSource>.CommandType VsCommandBase<VsCSharpSource>.EnableCommandAsync(VsCSharpSource) VsCommandBase<VsCSharpSource>.ExecuteCommandAsync(VsCSharpSource) VsCommandBase<VsCSharpSource>.VisualStudioActions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class CSharpSourceCommandBase : VsCommandBase<VsCSharpSource>, IVsConfigurableCommand<VsCSharpSource>, ICSharpSourceCommand, IVsFactoryCommand<VsCSharpSource>, IVsCommandInformation, ICommand<VsCSharpSource>, ICommandBase<VsCSharpSource> Constructors CSharpSourceCommandBase(ILogger, IVsActions, string, string) Declaration protected CSharpSourceCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> ICSharpSourceCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.html",
    "title": "Namespace CodeFactory.WinVs.Commands.SolutionExplorer | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Commands.SolutionExplorer Classes CSharpSourceCommandBase Base implementation of the solution explorer command ICSharpSourceCommand ProjectCommandBase Base implementation of the solution explorer command IProjectCommand ProjectDocumentCommandBase Base implementation of the solution explorer command IProjectDocumentCommand ProjectFolderCommandBase Base implementation of the solution explorer command IProjectFolderCommand SolutionCommandBase Base implementation of the solution explorer command ISolutionCommand SolutionDocumentCommandBase Base implementation of the solution explorer command ISolutionDocumentCommand SolutionFolderCommandBase Base implementation of the solution explorer command ISolutionFolderCommand Interfaces ICSharpSourceCommand Code factory command that is triggered from the context menu of a document that hosts a c# code file in the solution explorer window. IProjectCommand Code factory command that is triggered from the context menu of a project in the solution explorer window. IProjectDocumentCommand Code factory command that is triggered from the context menu of a project document in the solution explorer window. IProjectFolderCommand Code factory command that is triggered from the context menu of a project folder in the solution explorer window. ISolutionCommand Code factory command that triggers from the context menu of solution node in solution explorer. ISolutionDocumentCommand Code factory command that is triggered from the context menu of a solution document in the solution explorer window. ISolutionFolderCommand Code factory command that is triggered from the context menu of the a solution folder in the solution explorer window."
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ICSharpSourceCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ICSharpSourceCommand.html",
    "title": "Interface ICSharpSourceCommand | CodeFactory for Windows",
    "keywords": "Interface ICSharpSourceCommand Code factory command that is triggered from the context menu of a document that hosts a c# code file in the solution explorer window. Inherited Members IVsFactoryCommand<VsCSharpSource>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsCSharpSource>.EnableCommandAsync(VsCSharpSource) ICommandBase<VsCSharpSource>.ExecuteCommandAsync(VsCSharpSource) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface ICSharpSourceCommand : IVsFactoryCommand<VsCSharpSource>, IVsCommandInformation, ICommand<VsCSharpSource>, ICommandBase<VsCSharpSource>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectCommand.html",
    "title": "Interface IProjectCommand | CodeFactory for Windows",
    "keywords": "Interface IProjectCommand Code factory command that is triggered from the context menu of a project in the solution explorer window. Inherited Members IVsFactoryCommand<VsProject>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsProject>.EnableCommandAsync(VsProject) ICommandBase<VsProject>.ExecuteCommandAsync(VsProject) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface IProjectCommand : IVsFactoryCommand<VsProject>, IVsCommandInformation, ICommand<VsProject>, ICommandBase<VsProject>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectDocumentCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectDocumentCommand.html",
    "title": "Interface IProjectDocumentCommand | CodeFactory for Windows",
    "keywords": "Interface IProjectDocumentCommand Code factory command that is triggered from the context menu of a project document in the solution explorer window. Inherited Members IVsFactoryCommand<VsDocument>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsDocument>.EnableCommandAsync(VsDocument) ICommandBase<VsDocument>.ExecuteCommandAsync(VsDocument) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface IProjectDocumentCommand : IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument>, ICommandBase<VsDocument>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectFolderCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectFolderCommand.html",
    "title": "Interface IProjectFolderCommand | CodeFactory for Windows",
    "keywords": "Interface IProjectFolderCommand Code factory command that is triggered from the context menu of a project folder in the solution explorer window. Inherited Members IVsFactoryCommand<VsProjectFolder>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsProjectFolder>.EnableCommandAsync(VsProjectFolder) ICommandBase<VsProjectFolder>.ExecuteCommandAsync(VsProjectFolder) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface IProjectFolderCommand : IVsFactoryCommand<VsProjectFolder>, IVsCommandInformation, ICommand<VsProjectFolder>, ICommandBase<VsProjectFolder>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionCommand.html",
    "title": "Interface ISolutionCommand | CodeFactory for Windows",
    "keywords": "Interface ISolutionCommand Code factory command that triggers from the context menu of solution node in solution explorer. Inherited Members IVsFactoryCommand<VsSolution>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsSolution>.EnableCommandAsync(VsSolution) ICommandBase<VsSolution>.ExecuteCommandAsync(VsSolution) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface ISolutionCommand : IVsFactoryCommand<VsSolution>, IVsCommandInformation, ICommand<VsSolution>, ICommandBase<VsSolution>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionDocumentCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionDocumentCommand.html",
    "title": "Interface ISolutionDocumentCommand | CodeFactory for Windows",
    "keywords": "Interface ISolutionDocumentCommand Code factory command that is triggered from the context menu of a solution document in the solution explorer window. Inherited Members IVsFactoryCommand<VsDocument>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsDocument>.EnableCommandAsync(VsDocument) ICommandBase<VsDocument>.ExecuteCommandAsync(VsDocument) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface ISolutionDocumentCommand : IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument>, ICommandBase<VsDocument>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionFolderCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionFolderCommand.html",
    "title": "Interface ISolutionFolderCommand | CodeFactory for Windows",
    "keywords": "Interface ISolutionFolderCommand Code factory command that is triggered from the context menu of the a solution folder in the solution explorer window. Inherited Members IVsFactoryCommand<VsSolutionFolder>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsSolutionFolder>.EnableCommandAsync(VsSolutionFolder) ICommandBase<VsSolutionFolder>.ExecuteCommandAsync(VsSolutionFolder) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface ISolutionFolderCommand : IVsFactoryCommand<VsSolutionFolder>, IVsCommandInformation, ICommand<VsSolutionFolder>, ICommandBase<VsSolutionFolder>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectCommandBase.html",
    "title": "Class ProjectCommandBase | CodeFactory for Windows",
    "keywords": "Class ProjectCommandBase Base implementation of the solution explorer command IProjectCommand Inheritance object VsCommandBase<VsProject> ProjectCommandBase Implements IVsConfigurableCommand<VsProject> IProjectCommand IVsFactoryCommand<VsProject> IVsCommandInformation ICommand<VsProject> ICommandBase<VsProject> Inherited Members VsCommandBase<VsProject>._commandTitle VsCommandBase<VsProject>._commandDescription VsCommandBase<VsProject>._logger VsCommandBase<VsProject>.LoadExternalConfigDefinition() VsCommandBase<VsProject>.CommandTitle VsCommandBase<VsProject>.CommandDescription VsCommandBase<VsProject>.CommandType VsCommandBase<VsProject>.EnableCommandAsync(VsProject) VsCommandBase<VsProject>.ExecuteCommandAsync(VsProject) VsCommandBase<VsProject>.VisualStudioActions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class ProjectCommandBase : VsCommandBase<VsProject>, IVsConfigurableCommand<VsProject>, IProjectCommand, IVsFactoryCommand<VsProject>, IVsCommandInformation, ICommand<VsProject>, ICommandBase<VsProject> Constructors ProjectCommandBase(ILogger, IVsActions, string, string) Declaration protected ProjectCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> IProjectCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectDocumentCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectDocumentCommandBase.html",
    "title": "Class ProjectDocumentCommandBase | CodeFactory for Windows",
    "keywords": "Class ProjectDocumentCommandBase Base implementation of the solution explorer command IProjectDocumentCommand Inheritance object VsCommandBase<VsDocument> ProjectDocumentCommandBase Implements IVsConfigurableCommand<VsDocument> IProjectDocumentCommand IVsFactoryCommand<VsDocument> IVsCommandInformation ICommand<VsDocument> ICommandBase<VsDocument> Inherited Members VsCommandBase<VsDocument>._commandTitle VsCommandBase<VsDocument>._commandDescription VsCommandBase<VsDocument>._logger VsCommandBase<VsDocument>.LoadExternalConfigDefinition() VsCommandBase<VsDocument>.CommandTitle VsCommandBase<VsDocument>.CommandDescription VsCommandBase<VsDocument>.CommandType VsCommandBase<VsDocument>.EnableCommandAsync(VsDocument) VsCommandBase<VsDocument>.ExecuteCommandAsync(VsDocument) VsCommandBase<VsDocument>.VisualStudioActions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class ProjectDocumentCommandBase : VsCommandBase<VsDocument>, IVsConfigurableCommand<VsDocument>, IProjectDocumentCommand, IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument>, ICommandBase<VsDocument> Constructors ProjectDocumentCommandBase(ILogger, IVsActions, string, string) Declaration protected ProjectDocumentCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> IProjectDocumentCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectFolderCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectFolderCommandBase.html",
    "title": "Class ProjectFolderCommandBase | CodeFactory for Windows",
    "keywords": "Class ProjectFolderCommandBase Base implementation of the solution explorer command IProjectFolderCommand Inheritance object VsCommandBase<VsProjectFolder> ProjectFolderCommandBase Implements IVsConfigurableCommand<VsProjectFolder> IProjectFolderCommand IVsFactoryCommand<VsProjectFolder> IVsCommandInformation ICommand<VsProjectFolder> ICommandBase<VsProjectFolder> Inherited Members VsCommandBase<VsProjectFolder>._commandTitle VsCommandBase<VsProjectFolder>._commandDescription VsCommandBase<VsProjectFolder>._logger VsCommandBase<VsProjectFolder>.LoadExternalConfigDefinition() VsCommandBase<VsProjectFolder>.CommandTitle VsCommandBase<VsProjectFolder>.CommandDescription VsCommandBase<VsProjectFolder>.CommandType VsCommandBase<VsProjectFolder>.EnableCommandAsync(VsProjectFolder) VsCommandBase<VsProjectFolder>.ExecuteCommandAsync(VsProjectFolder) VsCommandBase<VsProjectFolder>.VisualStudioActions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class ProjectFolderCommandBase : VsCommandBase<VsProjectFolder>, IVsConfigurableCommand<VsProjectFolder>, IProjectFolderCommand, IVsFactoryCommand<VsProjectFolder>, IVsCommandInformation, ICommand<VsProjectFolder>, ICommandBase<VsProjectFolder> Constructors ProjectFolderCommandBase(ILogger, IVsActions, string, string) Declaration protected ProjectFolderCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> IProjectFolderCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionCommandBase.html",
    "title": "Class SolutionCommandBase | CodeFactory for Windows",
    "keywords": "Class SolutionCommandBase Base implementation of the solution explorer command ISolutionCommand Inheritance object VsCommandBase<VsSolution> SolutionCommandBase Implements IVsConfigurableCommand<VsSolution> ISolutionCommand IVsFactoryCommand<VsSolution> IVsCommandInformation ICommand<VsSolution> ICommandBase<VsSolution> Inherited Members VsCommandBase<VsSolution>._commandTitle VsCommandBase<VsSolution>._commandDescription VsCommandBase<VsSolution>._logger VsCommandBase<VsSolution>.LoadExternalConfigDefinition() VsCommandBase<VsSolution>.CommandTitle VsCommandBase<VsSolution>.CommandDescription VsCommandBase<VsSolution>.CommandType VsCommandBase<VsSolution>.EnableCommandAsync(VsSolution) VsCommandBase<VsSolution>.ExecuteCommandAsync(VsSolution) VsCommandBase<VsSolution>.VisualStudioActions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class SolutionCommandBase : VsCommandBase<VsSolution>, IVsConfigurableCommand<VsSolution>, ISolutionCommand, IVsFactoryCommand<VsSolution>, IVsCommandInformation, ICommand<VsSolution>, ICommandBase<VsSolution> Constructors SolutionCommandBase(ILogger, IVsActions, string, string) Declaration protected SolutionCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> ISolutionCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionDocumentCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionDocumentCommandBase.html",
    "title": "Class SolutionDocumentCommandBase | CodeFactory for Windows",
    "keywords": "Class SolutionDocumentCommandBase Base implementation of the solution explorer command ISolutionDocumentCommand Inheritance object VsCommandBase<VsDocument> SolutionDocumentCommandBase Implements IVsConfigurableCommand<VsDocument> ISolutionDocumentCommand IVsFactoryCommand<VsDocument> IVsCommandInformation ICommand<VsDocument> ICommandBase<VsDocument> Inherited Members VsCommandBase<VsDocument>._commandTitle VsCommandBase<VsDocument>._commandDescription VsCommandBase<VsDocument>._logger VsCommandBase<VsDocument>.LoadExternalConfigDefinition() VsCommandBase<VsDocument>.CommandTitle VsCommandBase<VsDocument>.CommandDescription VsCommandBase<VsDocument>.CommandType VsCommandBase<VsDocument>.EnableCommandAsync(VsDocument) VsCommandBase<VsDocument>.ExecuteCommandAsync(VsDocument) VsCommandBase<VsDocument>.VisualStudioActions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class SolutionDocumentCommandBase : VsCommandBase<VsDocument>, IVsConfigurableCommand<VsDocument>, ISolutionDocumentCommand, IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument>, ICommandBase<VsDocument> Constructors SolutionDocumentCommandBase(ILogger, IVsActions, string, string) Declaration protected SolutionDocumentCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> ISolutionDocumentCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionFolderCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionFolderCommandBase.html",
    "title": "Class SolutionFolderCommandBase | CodeFactory for Windows",
    "keywords": "Class SolutionFolderCommandBase Base implementation of the solution explorer command ISolutionFolderCommand Inheritance object VsCommandBase<VsSolutionFolder> SolutionFolderCommandBase Implements IVsConfigurableCommand<VsSolutionFolder> ISolutionFolderCommand IVsFactoryCommand<VsSolutionFolder> IVsCommandInformation ICommand<VsSolutionFolder> ICommandBase<VsSolutionFolder> Inherited Members VsCommandBase<VsSolutionFolder>._commandTitle VsCommandBase<VsSolutionFolder>._commandDescription VsCommandBase<VsSolutionFolder>._logger VsCommandBase<VsSolutionFolder>.LoadExternalConfigDefinition() VsCommandBase<VsSolutionFolder>.CommandTitle VsCommandBase<VsSolutionFolder>.CommandDescription VsCommandBase<VsSolutionFolder>.CommandType VsCommandBase<VsSolutionFolder>.EnableCommandAsync(VsSolutionFolder) VsCommandBase<VsSolutionFolder>.ExecuteCommandAsync(VsSolutionFolder) VsCommandBase<VsSolutionFolder>.VisualStudioActions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class SolutionFolderCommandBase : VsCommandBase<VsSolutionFolder>, IVsConfigurableCommand<VsSolutionFolder>, ISolutionFolderCommand, IVsFactoryCommand<VsSolutionFolder>, IVsCommandInformation, ICommand<VsSolutionFolder>, ICommandBase<VsSolutionFolder> Constructors SolutionFolderCommandBase(ILogger, IVsActions, string, string) Declaration protected SolutionFolderCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> ISolutionFolderCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.VsCommandBase-1.html": {
    "href": "api/CodeFactory.WinVs.Commands.VsCommandBase-1.html",
    "title": "Class VsCommandBase<TModel> | CodeFactory for Windows",
    "keywords": "Class VsCommandBase<TModel> Base implementation for a factory command that supports integration with visual studio. Inheritance object VsCommandBase<TModel> CSharpSourceCommandBase ProjectCommandBase ProjectDocumentCommandBase ProjectFolderCommandBase SolutionCommandBase SolutionDocumentCommandBase SolutionFolderCommandBase Implements IVsConfigurableCommand<TModel> IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsCommandBase<TModel> : IVsConfigurableCommand<TModel>, IVsFactoryCommand<TModel>, IVsCommandInformation, ICommand<TModel>, ICommandBase<TModel> where TModel : class Type Parameters Name Description TModel The target visual studio model type to be returned from the visual studio command. Constructors VsCommandBase(ILogger, IVsActions, VsCommandType, string, string) Base constructor used it initialize a visual studio command. Declaration protected VsCommandBase(ILogger logger, IVsActions commands, VsCommandType commandType, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger The code factory logger to be used by the logger. IVsActions commands The global visual studio commands that can be used by this visual studio command. VsCommandType commandType The target type of command being created. string commandTitle The title displayed in visual studio for this command. string commandDescription A brief description of the purpose of this command. Fields _commandDescription Backing field for the property CommandDescription Declaration protected readonly string _commandDescription Field Value Type Description string _commandTitle Backing field for the property CommandTitle Declaration protected readonly string _commandTitle Field Value Type Description string _logger Logging method that is used by the command to log to the code factory logging framework. Declaration protected readonly ILogger _logger Field Value Type Description ILogger Properties CommandDescription An optional discription that discribes what this factory command is intended for. Declaration public string CommandDescription { get; } Property Value Type Description string CommandTitle Action title that will be displayed within visual studio. Declaration public string CommandTitle { get; } Property Value Type Description string CommandType The target type of command that is being loaded. Declaration public VsCommandType CommandType { get; } Property Value Type Description VsCommandType VisualStudioActions Global visual studio commands that can be accessed from this visual studio command. Declaration public IVsActions VisualStudioActions { get; } Property Value Type Description IVsActions Methods EnableCommandAsync(TModel) Validation logic that will determine if this command should be enabled for execution. Declaration public abstract Task<bool> EnableCommandAsync(TModel result) Parameters Type Name Description TModel result The target model data that will be used to determine if this command should be enabled. Returns Type Description Task<bool> Boolean flag that will tell code factory to enable this command or disable it. ExecuteCommandAsync(TModel) Code factory framework calls this method when the command has been executed. Declaration public abstract Task ExecuteCommandAsync(TModel result) Parameters Type Name Description TModel result The code factory model that has generated and provided to the command to process. Returns Type Description Task LoadExternalConfigDefinition() Loads the external configuration definition for this command. Declaration public abstract ConfigCommand LoadExternalConfigDefinition() Returns Type Description ConfigCommand Will return the command configuration or null if this command does not support external configurations. Implements IVsConfigurableCommand<TModel> IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.VsCommandType.html": {
    "href": "api/CodeFactory.WinVs.Commands.VsCommandType.html",
    "title": "Enum VsCommandType | CodeFactory for Windows",
    "keywords": "Enum VsCommandType Enumeration that determines the type of visual studio command is being executed. Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public enum VsCommandType Fields Name Description IDESolutionLoad IDE level command that is fired once the solution has been loaded. Will only be triggered once the solution is loaded. SolutionExplorerCSharpSourceCode Solution explorer command that is triggered from the context menu from a project document that supports source code. SolutionExplorerProject Solution explorer command that is triggered from the context menu from a project node. SolutionExplorerProjectDocument Solution explorer command that is triggered from the context menu from a project document node. SolutionExplorerProjectFolder Solution explorer command that is triggered from the context menu from a project folder node. SolutionExplorerSolution Solution explorer command that is triggered from the context menu from the solution node. SolutionExplorerSolutionDocument Solution explorer command that is triggered from the context menu from a solution document node. SolutionExplorerSolutionFolder Solution explorer command that is triggered from the context menu from a solution folder node. Unknown The command type is unknown"
  },
  "api/CodeFactory.WinVs.Commands.VsEnviromentCommandBase-1.html": {
    "href": "api/CodeFactory.WinVs.Commands.VsEnviromentCommandBase-1.html",
    "title": "Class VsEnviromentCommandBase<TModel> | CodeFactory for Windows",
    "keywords": "Class VsEnviromentCommandBase<TModel> Base implementation for a environment command that supports integration with the Visual studio IDE environment directly. Inheritance object VsEnviromentCommandBase<TModel> SolutionLoadCommandBase Implements IVsEnvironmentCommand<TModel> IVsCommandInformation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsEnviromentCommandBase<TModel> : IVsEnvironmentCommand<TModel>, IVsCommandInformation where TModel : class Type Parameters Name Description TModel The target visual studio model type to be returned from the visual studio environment command. Constructors VsEnviromentCommandBase(ILogger, IVsActions, VsCommandType, string, string) Base constructor used it initialize a visual studio command. Declaration protected VsEnviromentCommandBase(ILogger logger, IVsActions commands, VsCommandType commandType, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger The code factory logger to be used by the logger. IVsActions commands The global visual studio commands that can be used by this visual studio command. VsCommandType commandType The target type of command being created. string commandTitle The title displayed in visual studio for this command. string commandDescription A brief description of the purpose of this command. Fields _commandDescription Backing field for the property CommandDescription Declaration protected readonly string _commandDescription Field Value Type Description string _commandTitle Backing field for the property CommandTitle Declaration protected readonly string _commandTitle Field Value Type Description string _logger Logging method that is used by the command to log to the code factory logging framework. Declaration protected readonly ILogger _logger Field Value Type Description ILogger Properties CommandDescription An optional discription that discribes what this factory command is intended for. Declaration public string CommandDescription { get; } Property Value Type Description string CommandTitle Action title that will be displayed within visual studio. Declaration public string CommandTitle { get; } Property Value Type Description string CommandType The target type of command that is being loaded. Declaration public VsCommandType CommandType { get; } Property Value Type Description VsCommandType VisualStudioActions Global visual studio commands that can be accessed from this visual studio command. Declaration public IVsActions VisualStudioActions { get; } Property Value Type Description IVsActions Methods ExecuteCommandAsync(TModel) Code factory framework calls this method when the command has been executed. Declaration public abstract Task ExecuteCommandAsync(TModel result) Parameters Type Name Description TModel result The code factory model that has generated and provided to the command to process. Returns Type Description Task Implements IVsEnvironmentCommand<TModel> IVsCommandInformation"
  },
  "api/CodeFactory.WinVs.FileHelper.html": {
    "href": "api/CodeFactory.WinVs.FileHelper.html",
    "title": "Class FileHelper | CodeFactory for Windows",
    "keywords": "Class FileHelper Static helper class that contains functions to support file management with visual studio. Inheritance object FileHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public static class FileHelper Properties InvalidFileNameCharacters The invalid characters not allowed in a file name. Declaration public static string InvalidFileNameCharacters { get; } Property Value Type Description string Methods ContainsInvalidFileNameCharacter(string) Provided file name is checked to determine if it has Declaration public static bool ContainsInvalidFileNameCharacter(string fileName) Parameters Type Name Description string fileName The filename to be evaluated. Returns Type Description bool True if invalid characters exists or false if the file does not have invalid characters."
  },
  "api/CodeFactory.WinVs.html": {
    "href": "api/CodeFactory.WinVs.html",
    "title": "Namespace CodeFactory.WinVs | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs Classes AssemblyCFEnvironment Assembly attribute that tracks the CodeFactory environment that this library runs in. AssemblyCFSdkVersion Assembly attribute that tracks the CodeFactory SDK that was used to build this assembly. FileHelper Static helper class that contains functions to support file management with visual studio. PathHelper Static helper class that contains functions to support path management with visual studio. VisualStudioException Base exception class for all visual studio specific exceptions that occur in code factory. VisualStudioMessages A strongly-typed resource class, for looking up localized strings, etc. VsActionsExtensions Extension methods that support IVSActions Interfaces IVsActions Code factory commands that are globally used in Visual Studio. IVsEnvironmentActions Visual Studio actions handle interaction with Visual Studio itself."
  },
  "api/CodeFactory.WinVs.IVsActions.html": {
    "href": "api/CodeFactory.WinVs.IVsActions.html",
    "title": "Interface IVsActions | CodeFactory for Windows",
    "keywords": "Interface IVsActions Code factory commands that are globally used in Visual Studio. Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public interface IVsActions Properties DocumentActions Visual Studio actions that work with the IVsDocument model. Declaration IVsDocumentActions DocumentActions { get; } Property Value Type Description IVsDocumentActions EnvironmentActions Visual Studio actions that directly interact with Visual Studio itself. Declaration IVsEnvironmentActions EnvironmentActions { get; } Property Value Type Description IVsEnvironmentActions ProjectActions Visual Studio actions that work with the IVsProject model. Declaration IVsProjectActions ProjectActions { get; } Property Value Type Description IVsProjectActions ProjectFolderActions Visual Studio actions that work with the IVsProjectFolder model. Declaration IVsProjectFolderActions ProjectFolderActions { get; } Property Value Type Description IVsProjectFolderActions ProjectReferenceActions Visual Studio actions that work with the IVsReference model. Declaration IVsReferenceActions ProjectReferenceActions { get; } Property Value Type Description IVsReferenceActions SolutionActions Visual Studio actions that work with the IVsSolution model. Declaration IVsSolutionActions SolutionActions { get; } Property Value Type Description IVsSolutionActions SolutionFolderActions Visual Studio actions that work with the IVsSolutionFolder model. Declaration IVsSolutionFolderActions SolutionFolderActions { get; } Property Value Type Description IVsSolutionFolderActions SourceActions Visual Studio actions that work with source models. Declaration IVsSourceActions SourceActions { get; } Property Value Type Description IVsSourceActions UserInterfaceActions Visual Studio actions that work the the Visual Studio user interface. Declaration IVsUIActions UserInterfaceActions { get; } Property Value Type Description IVsUIActions Methods GetCSharpProjectFileFromSourceAsync(CsSource) Gets the hosting C# source project file from for the CsSource model. Declaration Task<VsCSharpSource> GetCSharpProjectFileFromSourceAsync(CsSource sourceCode) Parameters Type Name Description CsSource sourceCode The source code to get the C# source from. Returns Type Description Task<VsCSharpSource> The target c# source project file or null if the project is not defined for the source code. GetCSharpSourceAsync(string) Loads the CsSource from the target code file provided. Declaration Task<CsSource> GetCSharpSourceAsync(string filePath) Parameters Type Name Description string filePath Fully qualified path to the c# code file to load. Returns Type Description Task<CsSource> The C# source model or null if the model could not be loaded. GetProjectFileFromSourceAsync(CsSource) Gets the hosting C# source project file from for the CsSource model. Declaration Task<VsDocument> GetProjectFileFromSourceAsync(CsSource sourceCode) Parameters Type Name Description CsSource sourceCode The source code to get the C# source from. Returns Type Description Task<VsDocument> The target project file or null if the project is not defined for the source code. GetProjectFromSourceAsync(CsSource) Gets the hosting project for the CsSource model. Declaration Task<VsProject> GetProjectFromSourceAsync(CsSource sourceCode) Parameters Type Name Description CsSource sourceCode The source code to get the project from. Returns Type Description Task<VsProject> The target project or null if the project is not defined for the source code. GetSolutionAsync() Gets the most current model of the solution. Declaration Task<VsSolution> GetSolutionAsync() Returns Type Description Task<VsSolution> The solution model. Extension Methods VsActionsExtensions.GetCSharpSourceAsync(IVsActions, CsContainer) VsActionsExtensions.GetCSharpSourceAsync(IVsActions, CsMember) VsActionsExtensions.GetProjectFolderFromConfigAsync(IVsActions, ConfigProject, string, bool) VsActionsExtensions.GetProjectFromConfigAsync(IVsActions, ConfigProject) VsActionsExtensions.GetTargetProjectAsync(IVsActions, string)"
  },
  "api/CodeFactory.WinVs.IVsEnvironmentActions.html": {
    "href": "api/CodeFactory.WinVs.IVsEnvironmentActions.html",
    "title": "Interface IVsEnvironmentActions | CodeFactory for Windows",
    "keywords": "Interface IVsEnvironmentActions Visual Studio actions handle interaction with Visual Studio itself. Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public interface IVsEnvironmentActions Methods WriteToCodeFactoryOutputWindowAsync(string) Writes the provided message to the CodeFactory output window in Visual Studio. Declaration Task WriteToCodeFactoryOutputWindowAsync(string message) Parameters Type Name Description string message The message to be written to the output window. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Loader.CodeFactoryConfigurationLoader.html": {
    "href": "api/CodeFactory.WinVs.Loader.CodeFactoryConfigurationLoader.html",
    "title": "Class CodeFactoryConfigurationLoader | CodeFactory for Windows",
    "keywords": "Class CodeFactoryConfigurationLoader Utility class that loads a CFA file libraries into memory and creates instances of all the visual studio actions and makes them available to visual studio for usage. Inheritance object CodeFactoryConfigurationLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public static class CodeFactoryConfigurationLoader Fields CodeFactoryDirectoryName Constant that holds the name of the code factory directory. Declaration public const string CodeFactoryDirectoryName = \"CodeFactory\" Field Value Type Description string CodeFactoryExtension Constant that holds the name of the code factory file extension. Declaration public const string CodeFactoryExtension = \".cfa\" Field Value Type Description string Methods GetAssembliesToLoadFromPackage(string, VsFactoryConfiguration) Helper method that gets the list of all the assembly files that need to copied from the code factory package. Declaration public static List<string> GetAssembliesToLoadFromPackage(string packageDirectory, VsFactoryConfiguration config) Parameters Type Name Description string packageDirectory The target directory all files are to be copied to. VsFactoryConfiguration config The factory configuration to load the files from. Returns Type Description List<string> List of the assembly and support files to load, or null if a load failure error occurred. LoadCodeFactoryConfiguration(string, string, IVsActions) Loads a code factory configuration into memory and returns the target visual studio actions to be used by code factory. Declaration public static IVsCodeFactoryLoadStatus LoadCodeFactoryConfiguration(string codeFactoryPackageFile, string unpackDirectory, IVsActions actions) Parameters Type Name Description string codeFactoryPackageFile The fully qualified path to the code factory package file. string unpackDirectory The fully qualified path to the unpackDirectory for the code factory libraries. IVsActions actions The implementation of the actions interface to be injected into each created visual studio action. Returns Type Description IVsCodeFactoryLoadStatus LoadFactoryLibraries(VsFactoryConfiguration, string) Loads the factory libraries into the running visual studio instance. Declaration public static LibraryLoadStatus LoadFactoryLibraries(VsFactoryConfiguration config, string packageDirectory) Parameters Type Name Description VsFactoryConfiguration config The code factory configuration to load assemblies from. string packageDirectory The directory where the packages are found. Returns Type Description LibraryLoadStatus Data object that holds the status of loaded factory libraries. This will always return an instance of the status. LocateFactoryPackage(string) Helper method that determines if a code factory extension file is located in the directory. This will return the first CFA file that is located in the directory. Declaration public static string LocateFactoryPackage(string sourceDirectory) Parameters Type Name Description string sourceDirectory The directory to search for the code factory extension file. Returns Type Description string The fully qualified path to the code factory extension file, or null if no file was found."
  },
  "api/CodeFactory.WinVs.Loader.ConfigManager.html": {
    "href": "api/CodeFactory.WinVs.Loader.ConfigManager.html",
    "title": "Class ConfigManager | CodeFactory for Windows",
    "keywords": "Class ConfigManager Static class that manages the creation and reading of code factory configuration files. Inheritance object ConfigManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public static class ConfigManager Fields DEBUG_CONFIG_FILE_NAME Constant that holds the name of the debug version of the config file. Declaration public const string DEBUG_CONFIG_FILE_NAME = \"debug.cfConfig\" Field Value Type Description string PACKAGE_CONFIG_FILE_NAME Constant that holds the name of the configuration file to be stored in the configuration package. Declaration public const string PACKAGE_CONFIG_FILE_NAME = \"config.cfConfig\" Field Value Type Description string PACKAGE_CONFIG_NAMESPACE Constant that holds the xml namespace for the package configuration information. Declaration public const string PACKAGE_CONFIG_NAMESPACE = \"http://schema.codefactory.software/codefactory/v1.0/package/config\" Field Value Type Description string PACKAGE_CONFIG_VIRTUAL_FILEPATH Constant that holds the replacement string information for the logical path for configuration data. Declaration public const string PACKAGE_CONFIG_VIRTUAL_FILEPATH = \"Config\\\\{0}\" Field Value Type Description string PACKAGE_FILE_EXTENSION Constant that holds the file extension for code factory extension. Declaration public const string PACKAGE_FILE_EXTENSION = \".cfa\" Field Value Type Description string PACKAGE_LIBRARIES_NAMESPACE Constant that holds the xml namespace for the package libraries information. Declaration public const string PACKAGE_LIBRARIES_NAMESPACE = \"http://schema.codefactory.software/codefactory/v1.0/package/libraries\" Field Value Type Description string PACKAGE_LIBRARIES_VIRTUAL_FILEPATH Constant that holds the replacement string information for the logical path for library data. Declaration public const string PACKAGE_LIBRARIES_VIRTUAL_FILEPATH = \"Libraries\\\\{0}\" Field Value Type Description string Methods CopyStreamData(Stream, Stream) Extension method that copies data from one stream to another. Declaration public static bool CopyStreamData(this Stream source, Stream targetStream) Parameters Type Name Description Stream source Source stream to read from. Stream targetStream Target stream to write data to. Returns Type Description bool Flag that determines if the stream copy completed successfully. CreateCodeFactoryPackage(VsFactoryConfiguration, string, string) Creates a code factory package that consolidates the needed libraries and configuration for a code factory into one file. Declaration public static bool CreateCodeFactoryPackage(VsFactoryConfiguration sourceConfiguration, string targetDirectory, string targetPackageName) Parameters Type Name Description VsFactoryConfiguration sourceConfiguration The loaded factory configuration information to be loaded into a package file. string targetDirectory The directory the package will be placed in. string targetPackageName The file name of the package that will be created. The package extension of cfa will be appended to the package name. Returns Type Description bool CreatePackageFile(VsFactoryConfiguration, List<VsPackageFileConfig>, string) Static helper method that creates a code factory extension file. Declaration public static bool CreatePackageFile(VsFactoryConfiguration config, List<VsPackageFileConfig> packageFiles, string packageFilePath) Parameters Type Name Description VsFactoryConfiguration config The factory configuration to load into the factory extension file. List<VsPackageFileConfig> packageFiles List of the package files to load into the factory extension file. string packageFilePath The fully qualified name of the package file to be created. Returns Type Description bool Flag that determines if the factory file was created or not. ExtractLibrariesFromPackage(string, string, List<string>) Extracts a library file from the package and writes it to the target directory and library name. Declaration public static VsPackageExtractResult ExtractLibrariesFromPackage(string packageFilePath, string targetDirectory, List<string> libraries) Parameters Type Name Description string packageFilePath The fully qualified file path for the code factory package. string targetDirectory The directory the library should be copied to. List<string> libraries List of the files to be extracted to the target directory. Returns Type Description VsPackageExtractResult The results of the extract are always returned. LoadFactoryConfiguration(string) Loads the factory configuration from the package. Declaration public static PackageReadResult<VsFactoryConfiguration> LoadFactoryConfiguration(string packageFilePath) Parameters Type Name Description string packageFilePath The fully qualified path to the Code Factory package. Returns Type Description PackageReadResult<VsFactoryConfiguration> Package read result with either the error that occurred or the fully loaded factory configuration."
  },
  "api/CodeFactory.WinVs.Loader.ConfigurationMessages.html": {
    "href": "api/CodeFactory.WinVs.Loader.ConfigurationMessages.html",
    "title": "Class ConfigurationMessages | CodeFactory for Windows",
    "keywords": "Class ConfigurationMessages A strongly-typed resource class, for looking up localized strings, etc. Inheritance object ConfigurationMessages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class ConfigurationMessages Properties CannotLocatePackageDirectory Looks up a localized string similar to The package directory '{0}'. Does not exist exist, cannot load the code factory package configuration. No automation will be loaded.. Declaration public static string CannotLocatePackageDirectory { get; } Property Value Type Description string CommandLineHelpMessage Looks up a localized string similar to Utility that create a CodeFactory configuration and package.\\r\\nThe following are the command switches supported by the configurtion manager.\\r\\nThe configuration manager will ignore unknown switches.\\r\\n\\r\\nSwitches\\r\\n? = Displays this help message\\r\\n\\r\\nHelp = displays this help message\\r\\n\\r\\n/Help = Displays this help message\\r\\n\\r\\n/DebugConfig <PathToDLL> = creates a debug configuration for the current project.\\r\\n. Declaration public static string CommandLineHelpMessage { get; } Property Value Type Description string CommandLineTitle Looks up a localized string similar to Code Factory Packaging Utility Version {0}\\r\\nCopyright 2013 LifeCycle Delivery Services, Inc.\\r\\n. Declaration public static string CommandLineTitle { get; } Property Value Type Description string ConfigNotInPackage Looks up a localized string similar to Cannot find the factory configuration in the package file '{0}'. Declaration public static string ConfigNotInPackage { get; } Property Value Type Description string ConfigurationFileCreatedSuccessfully Looks up a localized string similar to Successfully created the configuration file '{0}'.\\r\\nConfiguration file has the following resources defined.\\r\\nAutomation Libraries - '{1}' \\r\\nSupporting Libraries - '{2}' \\r\\nAutomation Actions -'{3}' \\r\\n. Declaration public static string ConfigurationFileCreatedSuccessfully { get; } Property Value Type Description string ConfigurationFileNotFound Looks up a localized string similar to The code factory . Declaration public static string ConfigurationFileNotFound { get; } Property Value Type Description string ConfigurationFileNotProvided Looks up a localized string similar to Cannot load the factory configuration file, becuase no configuration file was provided.. Declaration public static string ConfigurationFileNotProvided { get; } Property Value Type Description string CreatingConfigurationFile Looks up a localized string similar to Creating the configuration file '{0}'. Declaration public static string CreatingConfigurationFile { get; } Property Value Type Description string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description CultureInfo DeletingConfigurationFile Looks up a localized string similar to Deleting the configuration file '{0}'. Declaration public static string DeletingConfigurationFile { get; } Property Value Type Description string DirectoryDoesNotExistForConfigFile Looks up a localized string similar to Cannot find the directory that will be used to store the configuration file.. Declaration public static string DirectoryDoesNotExistForConfigFile { get; } Property Value Type Description string FactoryConfigCouldNotBeloaded Looks up a localized string similar to The factory configuration could not be loaded from the package file '{0}'. Declaration public static string FactoryConfigCouldNotBeloaded { get; } Property Value Type Description string FailedToCreateConfigurationFile Looks up a localized string similar to Failed to create the configuration file '{0}', the following error occurred during the creation process, '{1}'. Declaration public static string FailedToCreateConfigurationFile { get; } Property Value Type Description string FailedToDeleteConfigFile Looks up a localized string similar to Failed to delete the configuration file '{0}', the following error occurred during the delete process, '{1}'. Declaration public static string FailedToDeleteConfigFile { get; } Property Value Type Description string FailedToLoadAction Looks up a localized string similar to The code factory command '{0}', could not be loaded. This factory command will not avaliable for usage.. Declaration public static string FailedToLoadAction { get; } Property Value Type Description string FailedToLoadConfigurationData Looks up a localized string similar to Failed to load configuration data, will not be able to create a configuration file.. Declaration public static string FailedToLoadConfigurationData { get; } Property Value Type Description string InvalidAssemblyPath Looks up a localized string similar to The code factory command '{0}', could not be loaded due to an invalid assembly path. This factory command will not be loaded.. Declaration public static string InvalidAssemblyPath { get; } Property Value Type Description string LibrariesNotLoaded Looks up a localized string similar to An error occurred and the Code Factory libraries could not be loaded.. Declaration public static string LibrariesNotLoaded { get; } Property Value Type Description string LibraryLoadError Looks up a localized string similar to An error occurred while loading the library '{0}', no automation will be loaded.. Declaration public static string LibraryLoadError { get; } Property Value Type Description string LibraryNotInPackage Looks up a localized string similar to The library '{0}' was not found in the package. No automation will be loaded.. Declaration public static string LibraryNotInPackage { get; } Property Value Type Description string LibraryNotLoaded Looks up a localized string similar to One of the code factory libraries was not loaded. No automation will be loaded.. Declaration public static string LibraryNotLoaded { get; } Property Value Type Description string NoLibraryDirectory Looks up a localized string similar to No directory was provided. cannot load libraries.. Declaration public static string NoLibraryDirectory { get; } Property Value Type Description string NoPackageDirectory Looks up a localized string similar to No package directory was provided cannot load the code factory package configuration. No automation will be loaded.. Declaration public static string NoPackageDirectory { get; } Property Value Type Description string NoPackageFile Looks up a localized string similar to No package file was provided, cannot load libraries.. Declaration public static string NoPackageFile { get; } Property Value Type Description string NoVisualStudioActions Looks up a localized string similar to Code factory did not provide an instance of the commands to be injected into visual studio commands being loaded. No automation will be loaded.. Declaration public static string NoVisualStudioActions { get; } Property Value Type Description string PackageDirectoryCannotBeCreated Looks up a localized string similar to The package directory for the package '{0}' could not be created. Cannot load the code factory automation.. Declaration public static string PackageDirectoryCannotBeCreated { get; } Property Value Type Description string PackageDirectoryDoesNotExist Looks up a localized string similar to The target package directory of '{0}', does not exist. cannot load the package.. Declaration public static string PackageDirectoryDoesNotExist { get; } Property Value Type Description string PackageFileNotFound Looks up a localized string similar to The package file '{0}' could not be found. No automation functionality will be loaded.. Declaration public static string PackageFileNotFound { get; } Property Value Type Description string PackageLoadError Looks up a localized string similar to An error occurred while loading the code factory package. No automation will be avaliable with this project.. Declaration public static string PackageLoadError { get; } Property Value Type Description string ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager"
  },
  "api/CodeFactory.WinVs.Loader.html": {
    "href": "api/CodeFactory.WinVs.Loader.html",
    "title": "Namespace CodeFactory.WinVs.Loader | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Loader Classes CodeFactoryConfigurationLoader Utility class that loads a CFA file libraries into memory and creates instances of all the visual studio actions and makes them available to visual studio for usage. ConfigManager Static class that manages the creation and reading of code factory configuration files. ConfigurationMessages A strongly-typed resource class, for looking up localized strings, etc. LibraryLoadStatus Data class that tracks if the code factory libraries were loaded into memory correctly. LibraryManager PackageReadResult<T> Data class that returns the results from reading from different parts of a Code Factory package. SdkSupport Data class that holds the supported versions of the SDK that can be loaded. TypeExtensions Class that holds extension methods that support management of the type system in .Net VsActionConfiguration Data model class that implements the interface IVsActionConfiguration VsAutomationLibrary Data model that implements the interface IVsAutomationLibrary VsCodeFactoryLoadStatus Data model that implements the interface IVsCodeFactoryLoadStatus VsFactoryConfiguration Data model that implements the IVsFactoryConfiguration interface. VsLibraryConfiguration Immutable data model that implements the interface IVsLibraryConfiguration VsPackageExtractResult Data class that stores the results of extracting files from a Code Factory package. VsPackageFileConfig Model class that implements the interface IVsPackageFileConfig Interfaces IVsActionConfiguration Configuration data model that holds loading information for loading a target visual studio command into code factory. IVsAutomationLibrary IVsCodeFactoryLoadStatus Status of loading all code factory visual studio commands from a CFA configuration. IVsFactoryConfiguration Configuration model definition all data needed to load a code factory configuration into visual studio. IVsLibraryConfiguration Data model that stores all the information needed to load a DLL into visual studio. IVsPackageFileConfig Model definition that tracks information about where files are located and where to place them in the package definition. Enums LibraryErrorType Enumeration that stores the type error that has occurred while loading a library."
  },
  "api/CodeFactory.WinVs.Loader.IVsActionConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsActionConfiguration.html",
    "title": "Interface IVsActionConfiguration | CodeFactory for Windows",
    "keywords": "Interface IVsActionConfiguration Configuration data model that holds loading information for loading a target visual studio command into code factory. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsActionConfiguration Properties ActionAssemblyFullName The assembly full name for an command. Declaration string ActionAssemblyFullName { get; } Property Value Type Description string Title The title that is assigned to the command. Declaration string Title { get; } Property Value Type Description string VisualStudioActionType The type of visual studio command being loaded. Declaration VsCommandType VisualStudioActionType { get; } Property Value Type Description VsCommandType"
  },
  "api/CodeFactory.WinVs.Loader.IVsAutomationLibrary.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsAutomationLibrary.html",
    "title": "Interface IVsAutomationLibrary | CodeFactory for Windows",
    "keywords": "Interface IVsAutomationLibrary Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsAutomationLibrary Properties LibraryActions enumeration of the commands that are supported by this library. Declaration List<VsActionConfiguration> LibraryActions { get; } Property Value Type Description List<VsActionConfiguration> LibraryFilePath Fully qualified path to the library file. Declaration string LibraryFilePath { get; } Property Value Type Description string SupportLibraries enumeration of the supporting libraries required for automation library to function. Declaration List<VsLibraryConfiguration> SupportLibraries { get; } Property Value Type Description List<VsLibraryConfiguration>"
  },
  "api/CodeFactory.WinVs.Loader.IVsCodeFactoryLoadStatus.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsCodeFactoryLoadStatus.html",
    "title": "Interface IVsCodeFactoryLoadStatus | CodeFactory for Windows",
    "keywords": "Interface IVsCodeFactoryLoadStatus Status of loading all code factory visual studio commands from a CFA configuration. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsCodeFactoryLoadStatus Properties ErrorMessages The error messages that was captured while trying to load the code factory commands. This will be null if is false. Declaration List<string> ErrorMessages { get; } Property Value Type Description List<string> HasErrors Flag that determines if errors occurred while loading the code factory commands. Declaration bool HasErrors { get; } Property Value Type Description bool IsLoaded Flag that determines if visual studio commands were able to be loaded for the code factory package. Declaration bool IsLoaded { get; } Property Value Type Description bool VisualStudioFactoryActions Enumeration of the factory commands that were loaded. This will be an empty enumeration if IsLoaded is false. Declaration IEnumerable<IVsCommandInformation> VisualStudioFactoryActions { get; } Property Value Type Description IEnumerable<IVsCommandInformation>"
  },
  "api/CodeFactory.WinVs.Loader.IVsFactoryConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsFactoryConfiguration.html",
    "title": "Interface IVsFactoryConfiguration | CodeFactory for Windows",
    "keywords": "Interface IVsFactoryConfiguration Configuration model definition all data needed to load a code factory configuration into visual studio. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsFactoryConfiguration Properties CodeFactoryActions Enumeration of the commands to be loaded into the code factory. Declaration List<VsActionConfiguration> CodeFactoryActions { get; } Property Value Type Description List<VsActionConfiguration> CodeFactoryLibraries Enumeration of the code factory libraries that need to be loaded. Declaration List<VsLibraryConfiguration> CodeFactoryLibraries { get; } Property Value Type Description List<VsLibraryConfiguration> Id The unique identifier that is assigned to the factory configuration. Declaration Guid Id { get; } Property Value Type Description Guid Name The name assigned to this automation configuration. Declaration string Name { get; } Property Value Type Description string SdkVersion The version of the CodeFactory SDK that was used to build the automation. Declaration string SdkVersion { get; } Property Value Type Description string SupportLibraries Enumeration of the support libraries that need to be loaded to run the code factory libraries. Declaration List<VsLibraryConfiguration> SupportLibraries { get; } Property Value Type Description List<VsLibraryConfiguration>"
  },
  "api/CodeFactory.WinVs.Loader.IVsLibraryConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsLibraryConfiguration.html",
    "title": "Interface IVsLibraryConfiguration | CodeFactory for Windows",
    "keywords": "Interface IVsLibraryConfiguration Data model that stores all the information needed to load a DLL into visual studio. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsLibraryConfiguration Properties AssemblyFilePath File path to where the assembly is found. This will be null if the assembly is stored in the GAC. Declaration string AssemblyFilePath { get; } Property Value Type Description string AssemblyStrongName The fully qualified name of the assembly to be loaded. This will be null if not stored in the GAC. Declaration string AssemblyStrongName { get; } Property Value Type Description string ErrorDetails Stores the exception message for the error. Declaration string ErrorDetails { get; } Property Value Type Description string ErrorType Enumeration that stores the type of error that has occurred while loading the library configuration. Declaration LibraryErrorType ErrorType { get; } Property Value Type Description LibraryErrorType HasDebugInformation Flag that determines if the PDB file is found wit the assembly in the file path. This will be false if it is stored in the GAC. Declaration bool HasDebugInformation { get; } Property Value Type Description bool HasErrors Flag that determines if their were errors loading the library configuration. Declaration bool HasErrors { get; } Property Value Type Description bool IsStoredInGac Flag that determines if the assembly is stored in the Global Assembly Cache on the computer. Declaration bool IsStoredInGac { get; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Loader.IVsPackageFileConfig.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsPackageFileConfig.html",
    "title": "Interface IVsPackageFileConfig | CodeFactory for Windows",
    "keywords": "Interface IVsPackageFileConfig Model definition that tracks information about where files are located and where to place them in the package definition. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsPackageFileConfig Properties AssemblyPackagePath The logical location in the package the assembly will be stored. Declaration string AssemblyPackagePath { get; } Property Value Type Description string AssemblyPhysicalPath Physical location of the assembly to add to the package. Declaration string AssemblyPhysicalPath { get; } Property Value Type Description string HasDebugDatabaseFile Flag that determines if the package library has a debug database file. Declaration bool HasDebugDatabaseFile { get; } Property Value Type Description bool PDBPackagePath The logical location in the package the PDB will be stored. Declaration string PDBPackagePath { get; } Property Value Type Description string PDBPhysicalPath Physical location of the PDB to add to the package. Declaration string PDBPhysicalPath { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Loader.LibraryErrorType.html": {
    "href": "api/CodeFactory.WinVs.Loader.LibraryErrorType.html",
    "title": "Enum LibraryErrorType | CodeFactory for Windows",
    "keywords": "Enum LibraryErrorType Enumeration that stores the type error that has occurred while loading a library. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public enum LibraryErrorType Fields Name Description AssemblyLoadError An error occurred while trying to load the assembly. FileNotFound The library file could not be found. InvalidLibrary The library is incorrectly formatted and cannot be loaded by the code factory framework. LoadException A general exception occurred while loading the library. None No error has occurred while loading the library."
  },
  "api/CodeFactory.WinVs.Loader.LibraryLoadStatus.html": {
    "href": "api/CodeFactory.WinVs.Loader.LibraryLoadStatus.html",
    "title": "Class LibraryLoadStatus | CodeFactory for Windows",
    "keywords": "Class LibraryLoadStatus Data class that tracks if the code factory libraries were loaded into memory correctly. Inheritance object LibraryLoadStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class LibraryLoadStatus Constructors LibraryLoadStatus() Default constructor that initializes the properties. Declaration public LibraryLoadStatus() Properties Errors List of end user formatted errors. Declaration public List<string> Errors { get; set; } Property Value Type Description List<string> HasErrors Flag that determines if errors occurred while loading libraries. Declaration public bool HasErrors { get; set; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Loader.LibraryManager.html": {
    "href": "api/CodeFactory.WinVs.Loader.LibraryManager.html",
    "title": "Class LibraryManager | CodeFactory for Windows",
    "keywords": "Class LibraryManager Inheritance object LibraryManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public static class LibraryManager Methods GetExternalDependentLibraries(Assembly, string) Static extension method information configuration information about external assemblies used by the source assembly. Declaration public static List<VsLibraryConfiguration> GetExternalDependentLibraries(this Assembly source, string assemblyDirectory) Parameters Type Name Description Assembly source Source assembly to get external dependencies from. string assemblyDirectory The directory in which the external dependent libraries are stored at. Returns Type Description List<VsLibraryConfiguration> List of dependent libraries or null if not dependent libraries were found. GetLibraryActions(Assembly) Extension method that loads all library commands from the current assembly. Declaration public static List<VsActionConfiguration> GetLibraryActions(this Assembly source) Parameters Type Name Description Assembly source Source assembly that holds the commands to be loaded. Returns Type Description List<VsActionConfiguration> List of the library command information or null if the assembly information can't be loaded. GetLibraryInformation(string) Loads the information about an automation library. Declaration public static VsAutomationLibrary GetLibraryInformation(string filePath) Parameters Type Name Description string filePath The fully qualified path to the automation library file to load information from. Returns Type Description VsAutomationLibrary Fully populated automation library information, or null if the library could not be loaded."
  },
  "api/CodeFactory.WinVs.Loader.PackageReadResult-1.html": {
    "href": "api/CodeFactory.WinVs.Loader.PackageReadResult-1.html",
    "title": "Class PackageReadResult<T> | CodeFactory for Windows",
    "keywords": "Class PackageReadResult<T> Data class that returns the results from reading from different parts of a Code Factory package. Inheritance object PackageReadResult<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class PackageReadResult<T> where T : class Type Parameters Name Description T Properties Error Error message that occurred while reading from the package. This will be null if there is no error. Declaration public string Error { get; set; } Property Value Type Description string HasError Flag that determines if an error has occurred during the reading of a part of a package. Declaration public bool HasError { get; set; } Property Value Type Description bool Result The result that was returned from reading the package. This will be null if there was an error. Declaration public T Result { get; set; } Property Value Type Description T"
  },
  "api/CodeFactory.WinVs.Loader.SdkSupport.html": {
    "href": "api/CodeFactory.WinVs.Loader.SdkSupport.html",
    "title": "Class SdkSupport | CodeFactory for Windows",
    "keywords": "Class SdkSupport Data class that holds the supported versions of the SDK that can be loaded. Inheritance object SdkSupport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public static class SdkSupport Fields CodeFactoryAssemblyName Declaration public const string CodeFactoryAssemblyName = \"CodeFactory\" Field Value Type Description string CodeFactorySdkVersionAttributeName The name of the assembly type for the CodeFactory SDK version attribute. Declaration public const string CodeFactorySdkVersionAttributeName = \"AssemblyCFSdkVersion\" Field Value Type Description string MaxVersion The maximum version of the SDK that can be loaded and used. Declaration public const string MaxVersion = \"2.23158.0.1\" Field Value Type Description string MinVersion The minimum version of the SDK that can be loaded and used. Declaration public const string MinVersion = \"2.23149.0.1\" Field Value Type Description string NuGetSdkVersion The target version of the NuGet package this SDK is deployed from. Declaration public const string NuGetSdkVersion = \"2.23158.1-PreRelease\" Field Value Type Description string Methods SupportedAssembly(Assembly) Checks the assembly to see if it was created by a CodeFactory SDK. If so it checks the version to confirms it can be used by the runtime. Declaration public static void SupportedAssembly(Assembly sourceAssembly) Parameters Type Name Description Assembly sourceAssembly"
  },
  "api/CodeFactory.WinVs.Loader.TypeExtensions.html": {
    "href": "api/CodeFactory.WinVs.Loader.TypeExtensions.html",
    "title": "Class TypeExtensions | CodeFactory for Windows",
    "keywords": "Class TypeExtensions Class that holds extension methods that support management of the type system in .Net Inheritance object TypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public static class TypeExtensions Methods InheritsInterface(Type, Type) Extension method that confirms if a target interface type is implemented in the supplied type. Declaration public static bool InheritsInterface(this Type source, Type targetInterface) Parameters Type Name Description Type source The source type to validate. Type targetInterface The definition of the target interface to search for. Returns Type Description bool True if implemented or false if not found."
  },
  "api/CodeFactory.WinVs.Loader.VsActionConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsActionConfiguration.html",
    "title": "Class VsActionConfiguration | CodeFactory for Windows",
    "keywords": "Class VsActionConfiguration Data model class that implements the interface IVsActionConfiguration Inheritance object VsActionConfiguration Implements IVsActionConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax [MessagePackObject(false)] public class VsActionConfiguration : IVsActionConfiguration Properties ActionAssemblyFullName The assembly full name for an command. Declaration [Key(0)] public string ActionAssemblyFullName { get; set; } Property Value Type Description string Title The title that is assigned to the command. Declaration [Key(1)] public string Title { get; set; } Property Value Type Description string VisualStudioActionType The type of visual studio command being loaded. Declaration [Key(2)] public VsCommandType VisualStudioActionType { get; set; } Property Value Type Description VsCommandType Implements IVsActionConfiguration"
  },
  "api/CodeFactory.WinVs.Loader.VsAutomationLibrary.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsAutomationLibrary.html",
    "title": "Class VsAutomationLibrary | CodeFactory for Windows",
    "keywords": "Class VsAutomationLibrary Data model that implements the interface IVsAutomationLibrary Inheritance object VsAutomationLibrary Implements IVsAutomationLibrary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class VsAutomationLibrary : IVsAutomationLibrary Properties LibraryActions enumeration of the commands that are supported by this library. Declaration public List<VsActionConfiguration> LibraryActions { get; set; } Property Value Type Description List<VsActionConfiguration> LibraryFilePath Fully qualified path to the library file. Declaration public string LibraryFilePath { get; set; } Property Value Type Description string SupportLibraries enumeration of the supporting libraries required for automation library to function. Declaration public List<VsLibraryConfiguration> SupportLibraries { get; set; } Property Value Type Description List<VsLibraryConfiguration> Implements IVsAutomationLibrary"
  },
  "api/CodeFactory.WinVs.Loader.VsCodeFactoryLoadStatus.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsCodeFactoryLoadStatus.html",
    "title": "Class VsCodeFactoryLoadStatus | CodeFactory for Windows",
    "keywords": "Class VsCodeFactoryLoadStatus Data model that implements the interface IVsCodeFactoryLoadStatus Inheritance object VsCodeFactoryLoadStatus Implements IVsCodeFactoryLoadStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class VsCodeFactoryLoadStatus : IVsCodeFactoryLoadStatus Properties ErrorMessages The error messages that was captured while trying to load the code factory commands. This will be null if is false. Declaration public List<string> ErrorMessages { get; set; } Property Value Type Description List<string> HasErrors Flag that determines if errors occurred while loading the code factory commands. Declaration public bool HasErrors { get; set; } Property Value Type Description bool IsLoaded Flag that determines if visual studio commands were able to be loaded for the code factory package. Declaration public bool IsLoaded { get; set; } Property Value Type Description bool VisualStudioFactoryActions Enumeration of the factory commands that were loaded. This will be an empty enumeration if IsLoaded is false. Declaration public IEnumerable<IVsCommandInformation> VisualStudioFactoryActions { get; set; } Property Value Type Description IEnumerable<IVsCommandInformation> Implements IVsCodeFactoryLoadStatus"
  },
  "api/CodeFactory.WinVs.Loader.VsFactoryConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsFactoryConfiguration.html",
    "title": "Class VsFactoryConfiguration | CodeFactory for Windows",
    "keywords": "Class VsFactoryConfiguration Data model that implements the IVsFactoryConfiguration interface. Inheritance object VsFactoryConfiguration Implements IVsFactoryConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax [MessagePackObject(false)] public class VsFactoryConfiguration : IVsFactoryConfiguration Properties CodeFactoryActions Enumeration of the commands to be loaded into the code factory. Declaration [Key(5)] public List<VsActionConfiguration> CodeFactoryActions { get; set; } Property Value Type Description List<VsActionConfiguration> CodeFactoryLibraries Enumeration of the code factory libraries that need to be loaded. Declaration [Key(4)] public List<VsLibraryConfiguration> CodeFactoryLibraries { get; set; } Property Value Type Description List<VsLibraryConfiguration> Id The unique identifier that is assigned to the factory configuration. Declaration [Key(1)] public Guid Id { get; set; } Property Value Type Description Guid Name The name assigned to this automation configuration. Declaration [Key(0)] public string Name { get; set; } Property Value Type Description string SdkVersion The version of the CodeFactory SDK that was used to build the automation. Declaration [Key(2)] public string SdkVersion { get; set; } Property Value Type Description string SupportLibraries Enumeration of the support libraries that need to be loaded to run the code factory libraries. Declaration [Key(3)] public List<VsLibraryConfiguration> SupportLibraries { get; set; } Property Value Type Description List<VsLibraryConfiguration> Implements IVsFactoryConfiguration"
  },
  "api/CodeFactory.WinVs.Loader.VsLibraryConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsLibraryConfiguration.html",
    "title": "Class VsLibraryConfiguration | CodeFactory for Windows",
    "keywords": "Class VsLibraryConfiguration Immutable data model that implements the interface IVsLibraryConfiguration Inheritance object VsLibraryConfiguration Implements IVsLibraryConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax [MessagePackObject(false)] public class VsLibraryConfiguration : IVsLibraryConfiguration Properties AssemblyFilePath File path to where the assembly is found. This will be null if the assembly is stored in the GAC. Declaration [Key(4)] public string AssemblyFilePath { get; set; } Property Value Type Description string AssemblyStrongName The fully qualified name of the assembly to be loaded. This will be null if not stored in the GAC. Declaration [Key(5)] public string AssemblyStrongName { get; set; } Property Value Type Description string ErrorDetails Stores the exception message for the error. Declaration [Key(3)] public string ErrorDetails { get; set; } Property Value Type Description string ErrorType Enumeration that stores the type of error that has occurred while loading the library configuration. Declaration [Key(2)] public LibraryErrorType ErrorType { get; set; } Property Value Type Description LibraryErrorType HasDebugInformation Flag that determines if the PDB file is found wit the assembly in the file path. This will be false if it is stored in the GAC. Declaration [Key(6)] public bool HasDebugInformation { get; set; } Property Value Type Description bool HasErrors Flag that determines if their were errors loading the library configuration. Declaration [Key(1)] public bool HasErrors { get; set; } Property Value Type Description bool IsStoredInGac Flag that determines if the assembly is stored in the Global Assembly Cache on the computer. Declaration [Key(0)] public bool IsStoredInGac { get; set; } Property Value Type Description bool Implements IVsLibraryConfiguration"
  },
  "api/CodeFactory.WinVs.Loader.VsPackageExtractResult.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsPackageExtractResult.html",
    "title": "Class VsPackageExtractResult | CodeFactory for Windows",
    "keywords": "Class VsPackageExtractResult Data class that stores the results of extracting files from a Code Factory package. Inheritance object VsPackageExtractResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class VsPackageExtractResult Constructors VsPackageExtractResult() Default constructor that initializes the properties. Declaration public VsPackageExtractResult() Properties Errors List of the human readable error messaged that occurred. This will be null if HasErrors is false. Declaration public List<string> Errors { get; set; } Property Value Type Description List<string> HasErrors Flag that determines if there were errors extracting an of the files from the package. Declaration public bool HasErrors { get; set; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Loader.VsPackageFileConfig.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsPackageFileConfig.html",
    "title": "Class VsPackageFileConfig | CodeFactory for Windows",
    "keywords": "Class VsPackageFileConfig Model class that implements the interface IVsPackageFileConfig Inheritance object VsPackageFileConfig Implements IVsPackageFileConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class VsPackageFileConfig : IVsPackageFileConfig Properties AssemblyPackagePath The logical location in the package the assembly will be stored. Declaration public string AssemblyPackagePath { get; set; } Property Value Type Description string AssemblyPhysicalPath Physical location of the assembly to add to the package. Declaration public string AssemblyPhysicalPath { get; set; } Property Value Type Description string HasDebugDatabaseFile Flag that determines if the package library has a debug database file. Declaration public bool HasDebugDatabaseFile { get; set; } Property Value Type Description bool PDBPackagePath The logical location in the package the PDB will be stored. Declaration public string PDBPackagePath { get; set; } Property Value Type Description string PDBPhysicalPath Physical location of the PDB to add to the package. Declaration public string PDBPhysicalPath { get; set; } Property Value Type Description string Implements IVsPackageFileConfig"
  },
  "api/CodeFactory.WinVs.Logging.html": {
    "href": "api/CodeFactory.WinVs.Logging.html",
    "title": "Namespace CodeFactory.WinVs.Logging | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Logging Classes LogManager Manager class that returns the correct instance of the logger managed by code factory. LoggingProperties The name of the properties that are included in logging. Interfaces ILogger Standard logging interface used by Code factory to log information about the execution of code factory."
  },
  "api/CodeFactory.WinVs.Logging.ILogger.html": {
    "href": "api/CodeFactory.WinVs.Logging.ILogger.html",
    "title": "Interface ILogger | CodeFactory for Windows",
    "keywords": "Interface ILogger Standard logging interface used by Code factory to log information about the execution of code factory. Namespace: CodeFactory.WinVs.Logging Assembly: CodeFactory.WinVs.dll Syntax public interface ILogger Methods Critical(string, Exception, string, int) Logs critical level information about the executing code base. This level is always logged when enabled. Declaration void Critical(string message, Exception exception, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. Exception exception The exception that occurred that needs to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Critical(string, string, int) Logs critical level information about the executing code base. This level is always logged when enabled. Declaration void Critical(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Debug(string, string, int) Logs debug level information. This level is used for application debugging. Declaration void Debug(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. DebugEnter(string, int) Logs the entering into a member. This is an debuglevel log message. Declaration void DebugEnter(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged. Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs. Important the compiler will populate this value automatically. DebugExit(string, int) Logs the exiting of a member. This is an debug level log message. Declaration void DebugExit(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Error(string, Exception, string, int) Logs error level information about the executing code base. This level is always logged when enabled. Declaration void Error(string message, Exception exception, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. Exception exception The exception that occurred that needs to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Error(string, string, int) Logs error level information about the executing code base. This level is always logged when enabled. Declaration void Error(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. InfoEnter(string, int) Logs the entering into a member. This is an information level log message. Declaration void InfoEnter(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged. Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs. Important the compiler will populate this value automatically. InfoExit(string, int) Logs the exiting of a member. This is an information level log message. Declaration void InfoExit(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Information(string, string, int) Logs general information about the executing code base. This is the default logging level. Declaration void Information(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Trace(string, string, int) Logs detailed execution information. This level is used for application tracing. Declaration void Trace(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. TraceEnter(string, int) Logs the entering into a member. This is an trace level log message. Declaration void TraceEnter(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged. Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs. Important the compiler will populate this value automatically. TraceExit(string, int) Logs the exiting of a member. This is an trace level log message. Declaration void TraceExit(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Warning(string, Exception, string, int) Logs warning level information about the executing code base. This level is always logged when enabled. Declaration void Warning(string message, Exception exception, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. Exception exception The exception that occurred that needs to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Warning(string, string, int) Logs warning level information about the executing code base. This level is always logged when enabled. Declaration void Warning(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically."
  },
  "api/CodeFactory.WinVs.Logging.LoggingProperties.html": {
    "href": "api/CodeFactory.WinVs.Logging.LoggingProperties.html",
    "title": "Class LoggingProperties | CodeFactory for Windows",
    "keywords": "Class LoggingProperties The name of the properties that are included in logging. Inheritance object LoggingProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Logging Assembly: CodeFactory.WinVs.dll Syntax public static class LoggingProperties Fields LineNumber Constant that stores the property name to log a line number. Declaration public const string LineNumber = \"LineNumber\" Field Value Type Description string MemberName Constant that stores the property name to log a member name. Declaration public const string MemberName = \"MemberName\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Logging.LogManager.html": {
    "href": "api/CodeFactory.WinVs.Logging.LogManager.html",
    "title": "Class LogManager | CodeFactory for Windows",
    "keywords": "Class LogManager Manager class that returns the correct instance of the logger managed by code factory. Inheritance object LogManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Logging Assembly: CodeFactory.WinVs.dll Syntax public static class LogManager Methods GetLogger(Type) Loads the target logger instance. Declaration public static ILogger GetLogger(Type loggerType) Parameters Type Name Description Type loggerType The type the logger will support. Returns Type Description ILogger Instance of the target code factory logger. GetLogger<T>() Loads the target logger instance. Declaration public static ILogger GetLogger<T>() where T : class Returns Type Description ILogger Instance of the target code factory logger. Type Parameters Name Description T The target class type to be logged."
  },
  "api/CodeFactory.WinVs.Models.CSharp.AttributeParameterKind.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.AttributeParameterKind.html",
    "title": "Enum AttributeParameterKind | CodeFactory for Windows",
    "keywords": "Enum AttributeParameterKind Enumeration that determines the type of attribute parameter data that is being returned. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum AttributeParameterKind Fields Name Description Array Is an array of multiple parameter values. Enum Is an enumeration item. Type Is a target named type. Unknown The return data is unknown. Value Is a simple value."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseBoundsCheckBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseBoundsCheckBlock.html",
    "title": "Class BaseBoundsCheckBlock | CodeFactory for Windows",
    "keywords": "Class BaseBoundsCheckBlock Base class implementation for generation of bounds checking logic. Inheritance object BaseBoundsCheckBlock BoundsCheckBlockNull BoundsCheckBlockString Implements IBoundsCheckBlock IBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseBoundsCheckBlock : IBoundsCheckBlock, IBlock Constructors BaseBoundsCheckBlock(string, bool, ILoggerBlock) Initializes the base class for the bounds check. Declaration protected BaseBoundsCheckBlock(string name, bool ignoreWhenDefaultValueIsSet, ILoggerBlock loggerBlock) Parameters Type Name Description string name The unique name that identifies the type of bounds check being implemented. bool ignoreWhenDefaultValueIsSet Flag that determines if the bounds checking should be ignored if a default value is set. ILoggerBlock loggerBlock Logger block used with bounds check logic. Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType IgnoreWhenDefaultValueIsSet Flag that determines if a bounds check should be ignored if the parameter has a default value set. Declaration public bool IgnoreWhenDefaultValueIsSet { get; } Property Value Type Description bool LoggerBlock The logger block assigned to this bounds check. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Name Unique name assigned to identify the type of bounds check being performed. Declaration public string Name { get; } Property Value Type Description string Methods GenerateBoundsCheck(CsMethod, CsParameter) Generates the bounds check syntax if the parameter meets the criteria for a bounds check. Declaration public abstract (bool hasBoundsCheck, string boundsCheckSyntax) GenerateBoundsCheck(CsMethod sourceMethod, CsParameter checkParameter) Parameters Type Name Description CsMethod sourceMethod The target method the parameter belongs to. CsParameter checkParameter The parameter to build the bounds check for. Returns Type Description (bool hasBoundsCheck, string boundsCheckSyntax) Returns a tuple that contains a boolean that determines if the bounds check syntax was created for the parameter. Implements IBoundsCheckBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseCatchBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseCatchBlock.html",
    "title": "Class BaseCatchBlock | CodeFactory for Windows",
    "keywords": "Class BaseCatchBlock Base class implementation of the catch block Inheritance object BaseCatchBlock CatchBlockStandard Implements ICatchBlock IBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseCatchBlock : ICatchBlock, IBlock Constructors BaseCatchBlock(ILoggerBlock) Base constructor for the BaseCatchBlock Declaration protected BaseCatchBlock(ILoggerBlock loggerBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the logger block. Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType LoggerBlock The logger block supporting the catch block, this is optional. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods BuildCatchBlock(string, IEnumerable<NamedSyntax>, string) Builds the catch block Declaration protected abstract string BuildCatchBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the catch block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the catch block,optional parameter. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(IEnumerable<NamedSyntax>, string) Generates the catch block Declaration public string GenerateCatchBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string) Generates the catch block Declaration public string GenerateCatchBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string, IEnumerable<NamedSyntax>, string) Generates the catch block Declaration public string GenerateCatchBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the catch block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string, string) Generates the catch block Declaration public string GenerateCatchBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block Implements ICatchBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseCustomBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseCustomBlock.html",
    "title": "Class BaseCustomBlock | CodeFactory for Windows",
    "keywords": "Class BaseCustomBlock Inheritance object BaseCustomBlock Implements ICustomBlock IBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseCustomBlock : ICustomBlock, IBlock Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType Methods BuildBlock(string, IEnumerable<NamedSyntax>, string) Generates the block Declaration protected abstract string BuildBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the block, optional parameter. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(IEnumerable<NamedSyntax>, string) Generates the block Declaration public string GenerateBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string) Generates the block Declaration public string GenerateBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string, IEnumerable<NamedSyntax>, string) Generates the block Declaration public string GenerateBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string, string) Generates the block Declaration public string GenerateBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block Implements ICustomBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseEventBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseEventBuilder.html",
    "title": "Class BaseEventBuilder | CodeFactory for Windows",
    "keywords": "Class BaseEventBuilder Base implementation for event builders. Inheritance object BaseEventBuilder EventBuilderStandard Implements IEventBuilder IBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseEventBuilder : IEventBuilder, IBuilder Properties BuilderType The type of builder that has been implemented. Declaration public BuilderType BuilderType { get; } Property Value Type Description BuilderType Methods BuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and returns the defined syntax to the caller. Declaration public Task<string> BuildEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task<string> Formatted event definition. GenerateBuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and returns the defined syntax to the caller. Declaration protected abstract Task<string> GenerateBuildEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task<string> Formatted event definition. InjectEventAsync(CsEvent, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and injects into the managed source container. Declaration public Task InjectEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.EventAfter, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the event will be injected, default is after the event definitions string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task Implements IEventBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseFieldBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseFieldBuilder.html",
    "title": "Class BaseFieldBuilder | CodeFactory for Windows",
    "keywords": "Class BaseFieldBuilder Base class implementation for all field builders. Inheritance object BaseFieldBuilder Implements IFieldBuilder IBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseFieldBuilder : IFieldBuilder, IBuilder Properties BuilderType The type of builder that has been implemented. Declaration public BuilderType BuilderType { get; } Property Value Type Description BuilderType Methods BuildFieldAsync(CsField, ISourceManager, int, string, CsType, CsSecurity, bool, IEnumerable<string>, string, bool, bool, bool, string, string, IEnumerable<NamedSyntax>, FieldNameFormatting) Generates the syntax for the field and returns the defined syntax to the caller. Declaration public Task<string> BuildFieldAsync(CsField sourceModel, ISourceManager manager, int indentLevel, string fieldName = null, CsType type = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, string defaultValueSyntax = null, bool staticKeyword = false, bool constantKeyword = false, bool readonlyKeyword = false, string xmlDocumentationSummaryTag = null, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, FieldNameFormatting nameFormat = null) Parameters Type Name Description CsField sourceModel Target field model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string fieldName Optional, the name to create the field as, default is null. CsType type Optional, the c# formatted type name including namespace to set the field to, default is null. CsSecurity security Optional, the security level to set the field to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the event, default is null. string defaultValueSyntax Optional, the default value to set the field to, default is null. bool staticKeyword Optional, set the field to be static, default is false. bool constantKeyword Optional, set the field to be a constant field, default is false. bool readonlyKeyword Optional, set the field to be read only. string xmlDocumentationSummaryTag Optional, set custom information for xml document summary tag. string syntax Provided syntax that will be used in generating the field definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the field definition. FieldNameFormatting nameFormat Optional parameter that determines the name formatting to use with the field. Returns Type Description Task<string> Formatted field definition. GenerateBuildFieldAsync(CsField, ISourceManager, int, string, CsType, CsSecurity, bool, IEnumerable<string>, string, bool, bool, bool, string, string, IEnumerable<NamedSyntax>, FieldNameFormatting) Generates the syntax for the field and returns the defined syntax to the caller. Declaration protected abstract Task<string> GenerateBuildFieldAsync(CsField sourceModel, ISourceManager manager, int indentLevel, string fieldName = null, CsType type = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, string defaultValueSyntax = null, bool staticKeyword = false, bool constantKeyword = false, bool readonlyKeyword = false, string xmlDocumentationSummaryTag = null, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, FieldNameFormatting nameFormat = null) Parameters Type Name Description CsField sourceModel Target field model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string fieldName Optional, the name to create the field as, default is null. CsType type Optional, the c# formatted type name including namespace to set the field to, default is null. CsSecurity security Optional, the security level to set the field to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the event, default is null. string defaultValueSyntax Optional, the default value to set the field to, default is null. bool staticKeyword Optional, set the field to be static, default is false. bool constantKeyword Optional, set the field to be a constant field, default is false. bool readonlyKeyword Optional, set the field to be read only. string xmlDocumentationSummaryTag Optional, set custom information for xml document summary tag. string syntax Provided syntax that will be used in generating the field definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the field definition. FieldNameFormatting nameFormat Optional parameter that determines the name formatting to use with the field. Returns Type Description Task<string> Formatted field definition. InjectFieldAsync(CsField, ISourceManager, int, InjectionLocation, string, CsType, CsSecurity, bool, IEnumerable<string>, string, bool, bool, bool, string, string, IEnumerable<NamedSyntax>, FieldNameFormatting) Generates the syntax for the field and injects into the managed source container. Declaration public Task InjectFieldAsync(CsField sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.FieldAfter, string fieldName = null, CsType type = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, string defaultValueSyntax = null, bool staticKeyword = false, bool constantKeyword = false, bool readonlyKeyword = false, string xmlDocumentationSummaryTag = null, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, FieldNameFormatting nameFormat = null) Parameters Type Name Description CsField sourceModel Target field model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the field will be injected, default is after the field definitions string fieldName Optional, the name to create the field as, default is null. CsType type Optional, the c# formatted type name including namespace to set the field to, default is null. CsSecurity security Optional, the security level to set the field to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the event, default is null. string defaultValueSyntax Optional, the default value to set the field to, default is null. bool staticKeyword Optional, set the field to be static, default is false. bool constantKeyword Optional, set the field to be a constant field, default is false. bool readonlyKeyword Optional, set the field to be read only. string xmlDocumentationSummaryTag Optional, set custom information for xml document summary tag. string syntax Provided syntax that will be used in generating the field definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the field definition. FieldNameFormatting nameFormat Optional parameter that determines the name formatting to use with the field. Returns Type Description Task Implements IFieldBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseFinallyBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseFinallyBlock.html",
    "title": "Class BaseFinallyBlock | CodeFactory for Windows",
    "keywords": "Class BaseFinallyBlock Base class implementation of the finally block Inheritance object BaseFinallyBlock FinallyBlockStandard Implements IFinallyBlock IBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseFinallyBlock : IFinallyBlock, IBlock Constructors BaseFinallyBlock(ILoggerBlock) Base constructure for the BaseFinallyBlock Declaration protected BaseFinallyBlock(ILoggerBlock loggerBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the loggerblock. Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType LoggerBlock The logger block supporting the finally block, this is optional. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods BuildFinallyBlock(string, IEnumerable<NamedSyntax>, string) Builds the finally block Declaration protected abstract string BuildFinallyBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the finally block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the finally block,optional parameter. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(IEnumerable<NamedSyntax>, string) Generates the finally block Declaration public string GenerateFinallyBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string) Generates the finally block Declaration public string GenerateFinallyBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string, IEnumerable<NamedSyntax>, string) Generates the finally block Declaration public string GenerateFinallyBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the finally block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string, string) Generates the finally block Declaration public string GenerateFinallyBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block Implements IFinallyBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseLoggerBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseLoggerBlock.html",
    "title": "Class BaseLoggerBlock | CodeFactory for Windows",
    "keywords": "Class BaseLoggerBlock Base implementation of a logger block. Inheritance object BaseLoggerBlock LoggerBlockMicrosoft Implements ILoggerBlock IBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseLoggerBlock : ILoggerBlock, IBlock Constructors BaseLoggerBlock(string, string, string, string, string, string, string) Constructor for the base class implementation. Declaration protected BaseLoggerBlock(string fieldName, string traceMethodName, string debugMethodName, string informationMethodName, string warningMethodName, string errorMethodName, string criticalMethodName) Parameters Type Name Description string fieldName The name of the logger field. string traceMethodName The name of the trace method. string debugMethodName The name of the debug method. string informationMethodName The name of the information method. string warningMethodName The name of the warning method. string errorMethodName The name of the error method. string criticalMethodName The name of the critical method. Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType CriticalMethodName Method name for the critical method. Declaration public string CriticalMethodName { get; } Property Value Type Description string DebugMethodName Method name for the debug method. Declaration public string DebugMethodName { get; } Property Value Type Description string ErrorMethodName Method name for the error method. Declaration public string ErrorMethodName { get; } Property Value Type Description string InformationMethodName Method name for the information method. Declaration public string InformationMethodName { get; } Property Value Type Description string LoggerFieldName the field name used for Generating logger Name. Declaration public string LoggerFieldName { get; } Property Value Type Description string TraceMethodName Method name for the trace method. Declaration public string TraceMethodName { get; } Property Value Type Description string WarningMethodName Method name for the warning method. Declaration public string WarningMethodName { get; } Property Value Type Description string Methods GenerateEnterLogging(LogLevel, string) Generates a logging message entering the target member name. Declaration public abstract string GenerateEnterLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. GenerateExitLogging(LogLevel, string) Generates a logging message exiting the target member name. Declaration public abstract string GenerateExitLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. GenerateLogging(LogLevel, string, bool, string) Create formatted logging to be used with automation. Declaration public abstract string GenerateLogging(LogLevel level, string message, bool isFormattedMessage = false, string exceptionName = null) Parameters Type Name Description LogLevel level The logging level for the logger Name. string message the target message for logging. bool isFormattedMessage optional parameter that determines if the string uses a $ formatted string for the message with double quotes in the formatted output. string exceptionName Optional parameter to pass the exception field name to be included with the logging. Returns Type Description string The formatted logging Name to be Generated. If no message is provided will return null. LogMethodName(LogLevel) Returns the name of the method used by the logging framework based on the provided logging level. Declaration public string LogMethodName(LogLevel level) Parameters Type Name Description LogLevel level The logging level to get the method name for. Returns Type Description string The logging method name based on the logging level. Implements ILoggerBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseMethodBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseMethodBuilder.html",
    "title": "Class BaseMethodBuilder | CodeFactory for Windows",
    "keywords": "Class BaseMethodBuilder Base implementation for method builders. Inheritance object BaseMethodBuilder MethodBuilderStandard Implements IMethodBuilder IBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseMethodBuilder : IMethodBuilder, IBuilder Constructors BaseMethodBuilder(ILoggerBlock, IEnumerable<IBoundsCheckBlock>, ITryBlock) Base constructor for method builders. Declaration protected BaseMethodBuilder(ILoggerBlock loggerBlock = null, IEnumerable<IBoundsCheckBlock> boundsCheckBlocks = null, ITryBlock tryBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Logger block to be used by the method builder, default is null. IEnumerable<IBoundsCheckBlock> boundsCheckBlocks Enumeration of bounds check blocks to be used by the method builder, default is null. ITryBlock tryBlock Try block to be used by the method builder, default is null. Properties BoundsChecksBlocks Bound check blocks assigned to this builder, this is optional and will be an empty list if none are provided. Declaration public IEnumerable<IBoundsCheckBlock> BoundsChecksBlocks { get; } Property Value Type Description IEnumerable<IBoundsCheckBlock> BuilderType The type of builder that has been implemented. Declaration public BuilderType BuilderType { get; } Property Value Type Description BuilderType LoggerBlock The logger assigned to this builder, this is optional and can be null. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock TryBlock Try block assigned to this builder, this is optional and can be null. Declaration public ITryBlock TryBlock { get; } Property Value Type Description ITryBlock Methods BuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and returns the defined syntax to the caller. Declaration public Task<string> BuildMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task<string> Formatted method definition. GenerateBuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and returns the defined syntax to the caller. Declaration public abstract Task<string> GenerateBuildMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task<string> Formatted method definition. InjectMethodAsync(CsMethod, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and injects into the managed source container. Declaration public Task InjectMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.MethodAfter, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the method will be injected, default is after the method definitions string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task Implements IMethodBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BasePropertyBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BasePropertyBuilder.html",
    "title": "Class BasePropertyBuilder | CodeFactory for Windows",
    "keywords": "Class BasePropertyBuilder Base class implementation for all property builders. Inheritance object BasePropertyBuilder PropertyBuilderStandard Implements IPropertyBuilder IBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BasePropertyBuilder : IPropertyBuilder, IBuilder Constructors BasePropertyBuilder(ILoggerBlock, ITryBlock) Base constructor that initializes base class logic. Declaration protected BasePropertyBuilder(ILoggerBlock loggerBlock = null, ITryBlock tryBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional logger block that can be used with building, default is null. ITryBlock tryBlock Optional try block that can be used with building, default is null. Properties BuilderType The type of builder that has been implemented. Declaration public BuilderType BuilderType { get; } Property Value Type Description BuilderType LoggerBlock Logger block that can be used to add logging. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock TryBlock Try block that can be used for syntax implementation. Declaration public ITryBlock TryBlock { get; } Property Value Type Description ITryBlock Methods BuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and returns the defined syntax to the caller. Declaration public Task<string> BuildPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task<string> Formatted property definition. GenerateBuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and returns the defined syntax to the caller. Declaration public abstract Task<string> GenerateBuildPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task<string> Formatted property definition. InjectPropertyAsync(CsProperty, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and injects into the managed source container. Declaration public Task InjectPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.PropertyAfter, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the property will be injected, default is after the property definitions string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task Implements IPropertyBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseSyntaxBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseSyntaxBuilder.html",
    "title": "Class BaseSyntaxBuilder | CodeFactory for Windows",
    "keywords": "Class BaseSyntaxBuilder Base implementation for syntax builders. Inheritance object BaseSyntaxBuilder Implements ISyntaxBuilder IBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseSyntaxBuilder : ISyntaxBuilder, IBuilder Properties BuilderType The type of builder that has been implemented. Declaration public BuilderType BuilderType { get; } Property Value Type Description BuilderType Methods BuildSyntaxAsync(CsModel, ISourceManager, int) Generates syntax from the provided model. Declaration public Task<string> BuildSyntaxAsync(CsModel sourceModel, ISourceManager manager, int indentLevel) Parameters Type Name Description CsModel sourceModel Source C# model to generate syntax from. ISourceManager manager Source manager to provide access to namespace manager and namespace mapping information. int indentLevel The level to indent when generating the syntax. Returns Type Description Task<string> Generated syntax. BuildSyntaxAsync(IEnumerable<NamedModel>, ISourceManager, int) Generates syntax from the provided model. Declaration public Task<string> BuildSyntaxAsync(IEnumerable<NamedModel> sourceModels, ISourceManager manager, int indentLevel) Parameters Type Name Description IEnumerable<NamedModel> sourceModels Enumeration of named source C# models to generate syntax from. ISourceManager manager Source manager to provide access to namespace manager and namespace mapping information. int indentLevel The level to indent when generating the syntax. Returns Type Description Task<string> Generated syntax. GenerateBuildSyntaxAsync(ISourceManager, int, CsModel, IEnumerable<NamedModel>) Generates syntax from the provided model. Declaration protected abstract Task<string> GenerateBuildSyntaxAsync(ISourceManager manager, int indentLevel, CsModel sourceModel = null, IEnumerable<NamedModel> sourceModels = null) Parameters Type Name Description ISourceManager manager Source manager to provide access to namespace manager and namespace mapping information. int indentLevel The level to indent when generating the syntax. CsModel sourceModel Optional, source C# model to generate syntax from, default is null. IEnumerable<NamedModel> sourceModels Optional, enumeration of named source C# models to generate syntax from, default is null. Returns Type Description Task<string> Generated syntax. Implements ISyntaxBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseTryBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseTryBlock.html",
    "title": "Class BaseTryBlock | CodeFactory for Windows",
    "keywords": "Class BaseTryBlock Base class implementation of the try block Inheritance object BaseTryBlock TryBlockStandard Implements ITryBlock IBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseTryBlock : ITryBlock, IBlock Constructors BaseTryBlock(ILoggerBlock, IEnumerable<ICatchBlock>, IFinallyBlock) Base constructure for the BaseTryBlock Declaration protected BaseTryBlock(ILoggerBlock loggerBlock = null, IEnumerable<ICatchBlock> catchBlocks = null, IFinallyBlock finallyBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the loggerblock. IEnumerable<ICatchBlock> catchBlocks Optional parameter catch blocks that support the try block. IFinallyBlock finallyBlock Optional parameter finally block that supports the try block. Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType CatchBlocks Catch blocks that support the try block, these are optional. Declaration public IEnumerable<ICatchBlock> CatchBlocks { get; } Property Value Type Description IEnumerable<ICatchBlock> FinallyBlock Finally blick that supports the try block, this is optional. Declaration public IFinallyBlock FinallyBlock { get; } Property Value Type Description IFinallyBlock LoggerBlock The logger block supporting the try block, this is optional. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods BuildTryBlock(string, IEnumerable<NamedSyntax>, string) Builds the try block Declaration protected abstract string BuildTryBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the try block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the try block,optional parameter. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(IEnumerable<NamedSyntax>, string) Generates the try block Declaration public string GenerateTryBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string) Generates the try block Declaration public string GenerateTryBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string, IEnumerable<NamedSyntax>, string) Generates the try block Declaration public string GenerateTryBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the try block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string, string) Generates the try block Declaration public string GenerateTryBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block Implements ITryBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BoundsCheckBlockNull.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BoundsCheckBlockNull.html",
    "title": "Class BoundsCheckBlockNull | CodeFactory for Windows",
    "keywords": "Class BoundsCheckBlockNull Bounds checks for nulls in non value parameter types. Inheritance object BaseBoundsCheckBlock BoundsCheckBlockNull Implements IBoundsCheckBlock IBlock Inherited Members BaseBoundsCheckBlock.BlockType BaseBoundsCheckBlock.Name BaseBoundsCheckBlock.IgnoreWhenDefaultValueIsSet BaseBoundsCheckBlock.LoggerBlock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class BoundsCheckBlockNull : BaseBoundsCheckBlock, IBoundsCheckBlock, IBlock Constructors BoundsCheckBlockNull(bool, ILoggerBlock) Initializes the bounds check block. Declaration public BoundsCheckBlockNull(bool ignoreWhenDefaultValueIsSet, ILoggerBlock loggerBlock) Parameters Type Name Description bool ignoreWhenDefaultValueIsSet Flag that determines if the bounds checking should be ignored if a default value is set. ILoggerBlock loggerBlock Logger block used with bounds check logic. Methods GenerateBoundsCheck(CsMethod, CsParameter) Generates the bounds check syntax if the parameter meets the criteria for a bounds check. Declaration public override (bool hasBoundsCheck, string boundsCheckSyntax) GenerateBoundsCheck(CsMethod sourceMethod, CsParameter checkParameter) Parameters Type Name Description CsMethod sourceMethod The target method the parameter belongs to. CsParameter checkParameter The parameter to build the bounds check for. Returns Type Description (bool hasBoundsCheck, string boundsCheckSyntax) Returns a tuple that contains a boolean that determines if the bounds check syntax was created for the parameter. Overrides BaseBoundsCheckBlock.GenerateBoundsCheck(CsMethod, CsParameter) Implements IBoundsCheckBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BoundsCheckBlockString.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BoundsCheckBlockString.html",
    "title": "Class BoundsCheckBlockString | CodeFactory for Windows",
    "keywords": "Class BoundsCheckBlockString Bounds checks a parameter that has a string is not null or empty. Inheritance object BaseBoundsCheckBlock BoundsCheckBlockString Implements IBoundsCheckBlock IBlock Inherited Members BaseBoundsCheckBlock.BlockType BaseBoundsCheckBlock.Name BaseBoundsCheckBlock.IgnoreWhenDefaultValueIsSet BaseBoundsCheckBlock.LoggerBlock object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class BoundsCheckBlockString : BaseBoundsCheckBlock, IBoundsCheckBlock, IBlock Constructors BoundsCheckBlockString(bool, ILoggerBlock) Initializes the bounds check block. Declaration public BoundsCheckBlockString(bool ignoreWhenDefaultValueIsSet, ILoggerBlock loggerBlock) Parameters Type Name Description bool ignoreWhenDefaultValueIsSet Flag that determines if the bounds checking should be ignored if a default value is set. ILoggerBlock loggerBlock Logger block used with bounds check logic. Methods GenerateBoundsCheck(CsMethod, CsParameter) Generates the bounds check syntax if the parameter meets the criteria for a bounds check. Declaration public override (bool hasBoundsCheck, string boundsCheckSyntax) GenerateBoundsCheck(CsMethod sourceMethod, CsParameter checkParameter) Parameters Type Name Description CsMethod sourceMethod The target method the parameter belongs to. CsParameter checkParameter The parameter to build the bounds check for. Returns Type Description (bool hasBoundsCheck, string boundsCheckSyntax) Returns a tuple that contains a boolean that determines if the bounds check syntax was created for the parameter. Overrides BaseBoundsCheckBlock.GenerateBoundsCheck(CsMethod, CsParameter) Implements IBoundsCheckBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BuilderType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BuilderType.html",
    "title": "Enum BuilderType | CodeFactory for Windows",
    "keywords": "Enum BuilderType The type of builder supported by CodeFactory automation. Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public enum BuilderType Fields Name Description Event Builds a event definition. Field Builds a member field definition. Method Buildsa method definition. Property Builds a property definition. Syntax Builds syntax from source C# model definitions."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.CatchBlockStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.CatchBlockStandard.html",
    "title": "Class CatchBlockStandard | CodeFactory for Windows",
    "keywords": "Class CatchBlockStandard Catch basic code block standard implementation. Supports injection of syntax inside the catch block, or generation of standard logging and rethrow of exception. Inheritance object BaseCatchBlock CatchBlockStandard Implements ICatchBlock IBlock Inherited Members BaseCatchBlock.BlockType BaseCatchBlock.LoggerBlock BaseCatchBlock.GenerateCatchBlock(string) BaseCatchBlock.GenerateCatchBlock(string, string) BaseCatchBlock.GenerateCatchBlock(IEnumerable<NamedSyntax>, string) BaseCatchBlock.GenerateCatchBlock(string, IEnumerable<NamedSyntax>, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class CatchBlockStandard : BaseCatchBlock, ICatchBlock, IBlock Constructors CatchBlockStandard(ILoggerBlock) Creates a instance of the code block. Declaration public CatchBlockStandard(ILoggerBlock loggerBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the logger block. Methods BuildCatchBlock(string, IEnumerable<NamedSyntax>, string) Builds the catch block Declaration protected override string BuildCatchBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the catch block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the catch block,optional parameter. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block Overrides BaseCatchBlock.BuildCatchBlock(string, IEnumerable<NamedSyntax>, string) Implements ICatchBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.CodeBlockType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.CodeBlockType.html",
    "title": "Enum CodeBlockType | CodeFactory for Windows",
    "keywords": "Enum CodeBlockType Categories of code block types used with building C# code. Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public enum CodeBlockType Fields Name Description BoundsCheck Implements a bounds check block of code. Catch Implements a catch code block statement. Custom Code block is a custom implementation of a code block. Finally Implements a finally code block statement. Logging Implements a logging code block. Try Implements a try code block statement."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.EventBuilderStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.EventBuilderStandard.html",
    "title": "Class EventBuilderStandard | CodeFactory for Windows",
    "keywords": "Class EventBuilderStandard Builder that builds a standard event definition in C# language. Inheritance object BaseEventBuilder EventBuilderStandard Implements IEventBuilder IBuilder Inherited Members BaseEventBuilder.BuilderType BaseEventBuilder.BuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) BaseEventBuilder.InjectEventAsync(CsEvent, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class EventBuilderStandard : BaseEventBuilder, IEventBuilder, IBuilder Constructors EventBuilderStandard() Creates a new instance of EventBuilderStandard Declaration public EventBuilderStandard() Methods GenerateBuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and returns the defined syntax to the caller. Declaration protected override Task<string> GenerateBuildEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task<string> Formatted event definition. Overrides BaseEventBuilder.GenerateBuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Implements IEventBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.FieldNameFormatting.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.FieldNameFormatting.html",
    "title": "Class FieldNameFormatting | CodeFactory for Windows",
    "keywords": "Class FieldNameFormatting Helper class that provides name formatting options to be used with field builders. Inheritance object NameFormatting FieldNameFormatting Inherited Members NameFormatting.NamePrefix NameFormatting.NameSuffix object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class FieldNameFormatting : NameFormatting Properties UseCamelCase Flag that determines if the field name should use camel case. Declaration public bool UseCamelCase { get; set; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.FinallyBlockStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.FinallyBlockStandard.html",
    "title": "Class FinallyBlockStandard | CodeFactory for Windows",
    "keywords": "Class FinallyBlockStandard Finally basic code block standard implementation. Supports injection of syntax inside the finally block. Inheritance object BaseFinallyBlock FinallyBlockStandard Implements IFinallyBlock IBlock Inherited Members BaseFinallyBlock.BlockType BaseFinallyBlock.LoggerBlock BaseFinallyBlock.GenerateFinallyBlock(string) BaseFinallyBlock.GenerateFinallyBlock(string, string) BaseFinallyBlock.GenerateFinallyBlock(IEnumerable<NamedSyntax>, string) BaseFinallyBlock.GenerateFinallyBlock(string, IEnumerable<NamedSyntax>, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class FinallyBlockStandard : BaseFinallyBlock, IFinallyBlock, IBlock Constructors FinallyBlockStandard(ILoggerBlock) Creates a instance of the code block. Declaration public FinallyBlockStandard(ILoggerBlock loggerBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the logger block. Methods BuildFinallyBlock(string, IEnumerable<NamedSyntax>, string) Builds the finally block Declaration protected override string BuildFinallyBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the finally block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the finally block,optional parameter. string memberName Returns Type Description string Returns the generated finally block Overrides BaseFinallyBlock.BuildFinallyBlock(string, IEnumerable<NamedSyntax>, string) Implements IFinallyBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.html",
    "title": "Namespace CodeFactory.WinVs.Models.CSharp.Builder | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Models.CSharp.Builder Classes BaseBoundsCheckBlock Base class implementation for generation of bounds checking logic. BaseCatchBlock Base class implementation of the catch block BaseCustomBlock BaseEventBuilder Base implementation for event builders. BaseFieldBuilder Base class implementation for all field builders. BaseFinallyBlock Base class implementation of the finally block BaseLoggerBlock Base implementation of a logger block. BaseMethodBuilder Base implementation for method builders. BasePropertyBuilder Base class implementation for all property builders. BaseSyntaxBuilder Base implementation for syntax builders. BaseTryBlock Base class implementation of the try block BoundsCheckBlockNull Bounds checks for nulls in non value parameter types. BoundsCheckBlockString Bounds checks a parameter that has a string is not null or empty. CatchBlockStandard Catch basic code block standard implementation. Supports injection of syntax inside the catch block, or generation of standard logging and rethrow of exception. EventBuilderStandard Builder that builds a standard event definition in C# language. FieldNameFormatting Helper class that provides name formatting options to be used with field builders. FinallyBlockStandard Finally basic code block standard implementation. Supports injection of syntax inside the finally block. LoggerBlockMicrosoft Logger block that supports the ILogger implementation. MethodBuilderStandard Standard builder implementation for a method. Method supports logger, catch blocks, and as try block. MethodNameFormatting Helper class that provides name formatting options to be used with builders. NameFormatting Helper class that provides name formatting options to be used with builders. NamedModel Data class that provides a C# model by a target name. Used in blocks and builders when more then one set of models needs to be provided. NamedSyntax Data class that provides syntax by a target name. Used in blocks and builders when more then one set of syntax needs to be provided. PropertyBuilderStandard Builds a standard property with no backing fields using the get and set accessors. SourceClassManager Manages changes to a hosting CsSource model and the target CsClass model hosted in source code. SourceContainerManager<TContainerType> Base class implementation of the ISourceContainerManager<TContainerType> contract. SourceInterfaceManager Manages changes to a hosting CsSource model and the target CsInterface model hosted in source code. SourceManagerExtensions Extension methods that support classes that implement the ISourceManager interface. SourceStructureManager Manages changes to a hosting CsSource model and the target CsStructure model hosted in source code. SyntaxBuilderFieldStandard Syntax builder that generates C# field syntax. TryBlockStandard Try basic code block standard implementation. Supports injection of syntax inside the try block, it also will generate the catch and finally blocks if they are provided. Interfaces IBlock Contract definition all Blocks must implement IBoundsCheckBlock Contract all bounds checking code blocks must implement. IBuildManagement Definition of core management functionality that is used during build of functionality. IBuilder Base contract defintion all builders must inherit from. ICatchBlock Contract definition all catch block implementation should implement. ICustomBlock Contract definition all custom blocks implementation should implement. IEventBuilder Base contract all event builders have to implement. IFieldBuilder Base contract all field builders have to implement. IFinallyBlock Contract definition all finally block implementation should implement. ILoggerBlock Contract definition for implementation of a logger block. IMethodBuilder Base contract all method builders have to implement. IPropertyBuilder Base contract all property builders have to implement. ISourceContainerManager<TContainerType> Contract that is used to track the source code and target container that is being updated. ISourceManager Contract that manages the update to the source tracked by the manager implementation ISyntaxBuilder Default contract all syntax builders must implement. ITryBlock Contract definition all try block implementation should implement. Enums BuilderType The type of builder supported by CodeFactory automation. CodeBlockType Categories of code block types used with building C# code. InjectionLocation Determines the location with a source code file to inject generated builder syntax."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IBlock.html",
    "title": "Interface IBlock | CodeFactory for Windows",
    "keywords": "Interface IBlock Contract definition all Blocks must implement Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IBlock Properties BlockType The type of code block that has been implemented. Declaration CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IBoundsCheckBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IBoundsCheckBlock.html",
    "title": "Interface IBoundsCheckBlock | CodeFactory for Windows",
    "keywords": "Interface IBoundsCheckBlock Contract all bounds checking code blocks must implement. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IBoundsCheckBlock : IBlock Properties IgnoreWhenDefaultValueIsSet Flag that determines if a bounds check should be ignored if the parameter has a default value set. Declaration bool IgnoreWhenDefaultValueIsSet { get; } Property Value Type Description bool LoggerBlock The logger block assigned to this bounds check. Declaration ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Name Unique name assigned to identify the type of bounds check being performed. Declaration string Name { get; } Property Value Type Description string Methods GenerateBoundsCheck(CsMethod, CsParameter) Generates the bounds check syntax if the parameter meets the criteria for a bounds check. Declaration (bool hasBoundsCheck, string boundsCheckSyntax) GenerateBoundsCheck(CsMethod sourceMethod, CsParameter checkParameter) Parameters Type Name Description CsMethod sourceMethod The target method the parameter belongs to. CsParameter checkParameter The parameter to build the bounds check for. Returns Type Description (bool hasBoundsCheck, string boundsCheckSyntax) Returns a tuple that contains a boolean that determines if the bounds check syntax was created for the parameter."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IBuilder.html",
    "title": "Interface IBuilder | CodeFactory for Windows",
    "keywords": "Interface IBuilder Base contract defintion all builders must inherit from. Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IBuilder Properties BuilderType The type of builder that has been implemented. Declaration BuilderType BuilderType { get; } Property Value Type Description BuilderType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IBuildManagement.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IBuildManagement.html",
    "title": "Interface IBuildManagement | CodeFactory for Windows",
    "keywords": "Interface IBuildManagement Definition of core management functionality that is used during build of functionality. Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IBuildManagement Properties MappedNamespaces Mapped namespaces used for model moving from a source to a new target. Declaration List<MapNamespace> MappedNamespaces { get; } Property Value Type Description List<MapNamespace> NamespaceManager The namespace manager that is used for updating source. Declaration NamespaceManager NamespaceManager { get; } Property Value Type Description NamespaceManager VsActions The code factory actions for visual studio to be used with updates to the source. Declaration IVsActions VsActions { get; } Property Value Type Description IVsActions Methods LoadNamespaceManager() Loads a new instance of a NamespaceManager from the current source and assigns it to the NamespaceManager property. Declaration void LoadNamespaceManager() Exceptions Type Condition ArgumentNullException Thrown if either the source is null. UpdateMappedNamespaces(List<MapNamespace>) Refreshes the mapped namespaces. Declaration void UpdateMappedNamespaces(List<MapNamespace> mappedNamespaces) Parameters Type Name Description List<MapNamespace> mappedNamespaces the mapped namespaces to add to management. UpdateNamespaceManager(NamespaceManager) Refreshes the current version of the namespace manager for the sources. Declaration void UpdateNamespaceManager(NamespaceManager namespaceManager) Parameters Type Name Description NamespaceManager namespaceManager Updated namespace to register Exceptions Type Condition ArgumentNullException Thrown if the namespace manager is null. UsingStatementAddAsync(string, string) Creates a new using statement in the source if the using statement does not exist. It will also reload the namespace manager and update it. Declaration Task UsingStatementAddAsync(string nameSpace, string alias = null) Parameters Type Name Description string nameSpace Namespace to add to the source file. string alias Optional parameter to assign a alias to the using statement. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source is null."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ICatchBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ICatchBlock.html",
    "title": "Interface ICatchBlock | CodeFactory for Windows",
    "keywords": "Interface ICatchBlock Contract definition all catch block implementation should implement. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ICatchBlock : IBlock Properties LoggerBlock The logger block supporting the catch block, this is optional. Declaration ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods GenerateCatchBlock(IEnumerable<NamedSyntax>, string) Generates the catch block Declaration string GenerateCatchBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string) Generates the catch block Declaration string GenerateCatchBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string, IEnumerable<NamedSyntax>, string) Generates the Catch block Declaration string GenerateCatchBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the Catch block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the Catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string, string) Generates the catch block Declaration string GenerateCatchBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ICustomBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ICustomBlock.html",
    "title": "Interface ICustomBlock | CodeFactory for Windows",
    "keywords": "Interface ICustomBlock Contract definition all custom blocks implementation should implement. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ICustomBlock : IBlock Methods GenerateBlock(IEnumerable<NamedSyntax>, string) Generates the block Declaration string GenerateBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string) Generates the block Declaration string GenerateBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string, IEnumerable<NamedSyntax>, string) Generates the block Declaration string GenerateBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string, string) Generates the block Declaration string GenerateBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IEventBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IEventBuilder.html",
    "title": "Interface IEventBuilder | CodeFactory for Windows",
    "keywords": "Interface IEventBuilder Base contract all event builders have to implement. Inherited Members IBuilder.BuilderType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IEventBuilder : IBuilder Methods BuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and returns the defined syntax to the caller. Declaration Task<string> BuildEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task<string> Formatted event definition. InjectEventAsync(CsEvent, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and injects into the managed source container. Declaration Task InjectEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.EventAfter, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the event will be injected, default is after the event definitions string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IFieldBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IFieldBuilder.html",
    "title": "Interface IFieldBuilder | CodeFactory for Windows",
    "keywords": "Interface IFieldBuilder Base contract all field builders have to implement. Inherited Members IBuilder.BuilderType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IFieldBuilder : IBuilder Methods BuildFieldAsync(CsField, ISourceManager, int, string, CsType, CsSecurity, bool, IEnumerable<string>, string, bool, bool, bool, string, string, IEnumerable<NamedSyntax>, FieldNameFormatting) Generates the syntax for the field and returns the defined syntax to the caller. Declaration Task<string> BuildFieldAsync(CsField sourceModel, ISourceManager manager, int indentLevel, string fieldName = null, CsType type = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, string defaultValueSyntax = null, bool staticKeyword = false, bool constantKeyword = false, bool readonlyKeyword = false, string xmlDocumentationSummaryTag = null, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, FieldNameFormatting nameFormat = null) Parameters Type Name Description CsField sourceModel Target field model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string fieldName Optional, the name to create the field as, default is null. CsType type Optional, the c# formatted type name including namespace to set the field to, default is null. CsSecurity security Optional, the security level to set the field to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. string defaultValueSyntax Optional, the default value to set the field to, default is null. bool staticKeyword Optional, set the field to be static, default is false. bool constantKeyword Optional, set the field to be a constant field, default is false. bool readonlyKeyword Optional, set the field to be read only. string xmlDocumentationSummaryTag string syntax Provided syntax that will be used in generating the field definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the field definition. FieldNameFormatting nameFormat Optional parameter that determines the name formatting to use with the field. Returns Type Description Task<string> Formatted field definition. InjectFieldAsync(CsField, ISourceManager, int, InjectionLocation, string, CsType, CsSecurity, bool, IEnumerable<string>, string, bool, bool, bool, string, string, IEnumerable<NamedSyntax>, FieldNameFormatting) Generates the syntax for the field and injects into the managed source container. Declaration Task InjectFieldAsync(CsField sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.FieldAfter, string fieldName = null, CsType type = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, string defaultValueSyntax = null, bool staticKeyword = false, bool constantKeyword = false, bool readonlyKeyword = false, string xmlDocumentationSummaryTag = null, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, FieldNameFormatting nameFormat = null) Parameters Type Name Description CsField sourceModel Target field model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the field will be injected, default is after the field definitions string fieldName Optional, the name to create the field as, default is null. CsType type Optional, the c# formatted type name including namespace to set the field to, default is null. CsSecurity security Optional, the security level to set the field to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. string defaultValueSyntax Optional, the default value to set the field to, default is null. bool staticKeyword Optional, set the field to be static, default is false. bool constantKeyword Optional, set the field to be a constant field, default is false. bool readonlyKeyword Optional, set the field to be read only. string xmlDocumentationSummaryTag string syntax Provided syntax that will be used in generating the field definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the field definition. FieldNameFormatting nameFormat Optional parameter that determines the name formatting to use with the field. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IFinallyBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IFinallyBlock.html",
    "title": "Interface IFinallyBlock | CodeFactory for Windows",
    "keywords": "Interface IFinallyBlock Contract definition all finally block implementation should implement. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IFinallyBlock : IBlock Properties LoggerBlock The logger block supporting the finally block, this is optional. Declaration ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods GenerateFinallyBlock(IEnumerable<NamedSyntax>, string) Generates the finally block Declaration string GenerateFinallyBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string) Generates the finally block Declaration string GenerateFinallyBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string, IEnumerable<NamedSyntax>, string) Generates the Finally block Declaration string GenerateFinallyBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the Finally block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the Finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string, string) Generates the finally block Declaration string GenerateFinallyBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ILoggerBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ILoggerBlock.html",
    "title": "Interface ILoggerBlock | CodeFactory for Windows",
    "keywords": "Interface ILoggerBlock Contract definition for implementation of a logger block. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ILoggerBlock : IBlock Properties CriticalMethodName Method name for the critical method. Declaration string CriticalMethodName { get; } Property Value Type Description string DebugMethodName Method name for the debug method. Declaration string DebugMethodName { get; } Property Value Type Description string ErrorMethodName Method name for the error method. Declaration string ErrorMethodName { get; } Property Value Type Description string InformationMethodName Method name for the information method. Declaration string InformationMethodName { get; } Property Value Type Description string LoggerFieldName The field name used for Generateing logger Name. Declaration string LoggerFieldName { get; } Property Value Type Description string TraceMethodName Method name for the trace method. Declaration string TraceMethodName { get; } Property Value Type Description string WarningMethodName Method name for the warning method. Declaration string WarningMethodName { get; } Property Value Type Description string Methods GenerateEnterLogging(LogLevel, string) Generates a logging message entering the target member name. Declaration string GenerateEnterLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. GenerateExitLogging(LogLevel, string) Generates a logging message exiting the target member name. Declaration string GenerateExitLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. GenerateLogging(LogLevel, string, bool, string) Create formatted logging to be used with automation. Declaration string GenerateLogging(LogLevel level, string message, bool isFormattedMessage = false, string exceptionName = null) Parameters Type Name Description LogLevel level The logging level for the logger Name. string message the target message for logging. bool isFormattedMessage optional parameter that determines if the string uses a $ formatted string for the message. string exceptionName Optional parameter to pass the exception field name to be included with the logging. Returns Type Description string The formatted logging Name to be Generateed. If no message is provided will return null. LogMethodName(LogLevel) Returns the name of the method used by the logging framework based on the provided logging level. Declaration string LogMethodName(LogLevel level) Parameters Type Name Description LogLevel level The logging level to get the method name for. Returns Type Description string The logging method name based on the logging level."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IMethodBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IMethodBuilder.html",
    "title": "Interface IMethodBuilder | CodeFactory for Windows",
    "keywords": "Interface IMethodBuilder Base contract all method builders have to implement. Inherited Members IBuilder.BuilderType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IMethodBuilder : IBuilder Methods BuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and returns the defined syntax to the caller. Declaration Task<string> BuildMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task<string> Formatted method definition. InjectMethodAsync(CsMethod, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and injects into the managed source container. Declaration Task InjectMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.MethodAfter, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the method will be injected, default is after the method definitions string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.InjectionLocation.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.InjectionLocation.html",
    "title": "Enum InjectionLocation | CodeFactory for Windows",
    "keywords": "Enum InjectionLocation Determines the location with a source code file to inject generated builder syntax. Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public enum InjectionLocation Fields Name Description ConstructorAfter Injects right after the definition of the constructor methods section of the container. ConstructorBefore Injects right before the definition of the constructor methods section of the container. ContainerAfter Injects right after the definition of the target container. ContainerBefore Injects right before the definition of the target container. ContainerBeginning Injects inside the container at the beginning of the containers definition. ContainerEnd Injects inside the container at the end of the containers definition. EventAfter Injects right after the definition of the events section of the container. EventBefore Injects right before the definition of the wvents section of the container. FieldAfter Injects right after the definition of the fields section of the container. FieldBefore Injects before the definition of the fields section of the container. MethodAfter Injects right after the definition of the methods section of the container. MethodBefore Injects right before the definition of the methods section of the container. NestedClassAfter Injects right after the definition of the nested classes section of the container. NestedClassBefore Injects right before the definition of the nested classes section of the container. NestedEnumAfter Injects right after the definition of the nested enums section of the container. NestedEnumBefore Injects right before the definition of the nested enums section of the container. NestedInterfaceAfter Injects right after the definition of the nested interfaces section of the container. NestedInterfaceBefore Injects right before the definition of the nested interfaces section of the container. NestedStructureAfter Injects right after the definition of the nested structures section of the container. NestedStructureBefore Injects right before the definition of the nested structures section of the container. None Do not inject the code at any location in the source control file. PropertyAfter Injects right after the definition of the properties section of the container. PropertyBefore Injects right before the definition of the properties section of the container. SourceBeginning Injects at the beginning of the source source file. SourceEnd Injects at the end of the source file."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IPropertyBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IPropertyBuilder.html",
    "title": "Interface IPropertyBuilder | CodeFactory for Windows",
    "keywords": "Interface IPropertyBuilder Base contract all property builders have to implement. Inherited Members IBuilder.BuilderType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IPropertyBuilder : IBuilder Methods BuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and returns the defined syntax to the caller. Declaration Task<string> BuildPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task<string> Formatted property definition. InjectPropertyAsync(CsProperty, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and injects into the managed source container. Declaration Task InjectPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.PropertyAfter, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the property will be injected, default is after the property definitions string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ISourceContainerManager-1.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ISourceContainerManager-1.html",
    "title": "Interface ISourceContainerManager<TContainerType> | CodeFactory for Windows",
    "keywords": "Interface ISourceContainerManager<TContainerType> Contract that is used to track the source code and target container that is being updated. Inherited Members ISourceManager.Source ISourceManager.AddByInjectionLocationAsync(string, InjectionLocation) ISourceManager.SourceAddToBeginningAsync(string) ISourceManager.SourceAddToEndAsync(string) ISourceManager.ContainerAddBeforeAsync(string) ISourceManager.ContainerAddAfterAsync(string) ISourceManager.ContainerAddToBeginningAsync(string) ISourceManager.ContainerAddToEndAsync(string) ISourceManager.UsingStatementsAddBeforeAsync(string) ISourceManager.UsingStatementsAddAfterAsync(string) ISourceManager.FieldsAddBeforeAsync(string) ISourceManager.FieldsAddAfterAsync(string) ISourceManager.ConstructorsAddBeforeAsync(string) ISourceManager.ConstructorsAddAfterAsync(string) ISourceManager.PropertiesAddBeforeAsync(string) ISourceManager.PropertiesAddAfterAsync(string) ISourceManager.EventsAddBeforeAsync(string) ISourceManager.EventsAddAfterAsync(string) ISourceManager.MethodsAddBeforeAsync(string) ISourceManager.MethodsAddAfterAsync(string) ISourceManager.MemberAddBeforeAsync(CsMember, string) ISourceManager.MemberAddAfterAsync(CsMember, string) ISourceManager.MemberCommentOut(CsMember, string) ISourceManager.MemberReplaceAsync(CsMember, string) ISourceManager.MemberRemoveAsync(CsMember) ISourceManager.NestedEnumAddBeforeAsync(string) ISourceManager.NestedEnumAddAfterAsync(string) ISourceManager.NestedEnumRemoveAsync(CsEnum) ISourceManager.NestedEnumReplaceAsync(CsEnum, string) ISourceManager.NestedInterfaceAddBeforeAsync(string) ISourceManager.NestedInterfaceAddAfterAsync(string) ISourceManager.NestedInterfaceRemoveAsync(CsInterface) ISourceManager.NestedInterfaceReplaceAsync(CsInterface, string) ISourceManager.NestedStructuresAddBeforeAsync(string) ISourceManager.NestedStructuresAddAfterAsync(string) ISourceManager.NestedStructureRemoveAsync(CsStructure) ISourceManager.NestedStructureReplaceAsync(CsStructure, string) ISourceManager.NestedClassesAddBeforeAsync(string) ISourceManager.NestedClassesAddAfterAsync(string) ISourceManager.NestedClassesRemoveAsync(CsClass) ISourceManager.NestedClassesReplaceAsync(CsClass, string) ISourceManager.AddMissingUsingStatementsAsync(CsMethod) ISourceManager.AddMissingUsingStatementsAsync(CsProperty) ISourceManager.AddMissingUsingStatementsAsync(CsEvent) ISourceManager.AddMissingUsingStatementsAsync(CsField) ISourceManager.AddMissingUsingStatementsAsync(CsAttribute) ISourceManager.AddMissingUsingStatementsAsync(CsType) IBuildManagement.VsActions IBuildManagement.NamespaceManager IBuildManagement.MappedNamespaces IBuildManagement.UpdateMappedNamespaces(List<MapNamespace>) IBuildManagement.UpdateNamespaceManager(NamespaceManager) IBuildManagement.LoadNamespaceManager() IBuildManagement.UsingStatementAddAsync(string, string) Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ISourceContainerManager<TContainerType> : ISourceManager, IBuildManagement where TContainerType : CsContainer Type Parameters Name Description TContainerType Target type of the container that is being updated. Properties Container Target container being updated. Declaration TContainerType Container { get; } Property Value Type Description TContainerType Methods AddMissingUsingStatementsAsync() Checks all types definitions for the loaded container if the container is not loaded will not add missing using statements. Declaration Task AddMissingUsingStatementsAsync() Returns Type Description Task UpdateSources(CsSource, TContainerType) Refreshes the current version of the update sources. Declaration void UpdateSources(CsSource source, TContainerType container) Parameters Type Name Description CsSource source The updated CsSource. TContainerType container The updates hosting CsContainer type. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ISourceManager.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ISourceManager.html",
    "title": "Interface ISourceManager | CodeFactory for Windows",
    "keywords": "Interface ISourceManager Contract that manages the update to the source tracked by the manager implementation Inherited Members IBuildManagement.VsActions IBuildManagement.NamespaceManager IBuildManagement.MappedNamespaces IBuildManagement.UpdateMappedNamespaces(List<MapNamespace>) IBuildManagement.UpdateNamespaceManager(NamespaceManager) IBuildManagement.LoadNamespaceManager() IBuildManagement.UsingStatementAddAsync(string, string) Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ISourceManager : IBuildManagement Properties Source Target source that is being updated. Declaration CsSource Source { get; } Property Value Type Description CsSource Methods AddByInjectionLocationAsync(string, InjectionLocation) Adds the provided syntax to the target injection location provided. Declaration Task AddByInjectionLocationAsync(string syntax, InjectionLocation location) Parameters Type Name Description string syntax Target syntax to be added. InjectionLocation location The location within the source code file to inject at. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. AddMissingUsingStatementsAsync(CsAttribute) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsAttribute sourceAttribute) Parameters Type Name Description CsAttribute sourceAttribute The target model to check using statements on. Returns Type Description Task Missing using statements added or the original update source if no additional using statements needed. AddMissingUsingStatementsAsync(CsEvent) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsEvent sourceEvent) Parameters Type Name Description CsEvent sourceEvent The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsField) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsField sourceField) Parameters Type Name Description CsField sourceField The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsMethod) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsMethod sourceMethod) Parameters Type Name Description CsMethod sourceMethod The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsProperty) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsProperty sourceProperty) Parameters Type Name Description CsProperty sourceProperty The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsType) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsType sourceType) Parameters Type Name Description CsType sourceType The target model to check using statements on. Returns Type Description Task Missing using statements added or the original update source if no additional using statements needed. ConstructorsAddAfterAsync(string) Add the provided syntax after the constructor definitions. Declaration Task ConstructorsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeAsync(string) Add the provided syntax before the constructor definitions. Declaration Task ConstructorsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddAfterAsync(string) Adds the provided syntax after containers definition. Declaration Task ContainerAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddBeforeAsync(string) Adds the provided syntax before the containers definition. Declaration Task ContainerAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToBeginningAsync(string) Adds the provided syntax to the beginning of the containers definition. Declaration Task ContainerAddToBeginningAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToEndAsync(string) Adds the provided syntax to the end of the containers definition. Declaration Task ContainerAddToEndAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddAfterAsync(string) Add the provided syntax after the event definitions. Declaration Task EventsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddBeforeAsync(string) Add the provided syntax before the event definitions. Declaration Task EventsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterAsync(string) Adds the provided syntax after the field definitions. Declaration Task FieldsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeAsync(string) Adds the provided syntax before the field definitions. Declaration Task FieldsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberAddAfterAsync(CsMember, string) Add the syntax after the target member. Declaration Task MemberAddAfterAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberAddBeforeAsync(CsMember, string) Add the syntax before the target member. Declaration Task MemberAddBeforeAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberCommentOut(CsMember, string) Comments out member from the source container. Declaration Task MemberCommentOut(CsMember member, string commentSyntax = \"//\") Parameters Type Name Description CsMember member Target member. string commentSyntax Optional parameters sets the syntax to use when commenting out the member. This will default to use '//' Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberRemoveAsync(CsMember) Removes the target member. Declaration Task MemberRemoveAsync(CsMember member) Parameters Type Name Description CsMember member Target member. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberReplaceAsync(CsMember, string) Syntax replaces the target member. Declaration Task MemberReplaceAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddAfterAsync(string) Add the provided syntax after the method definitions. Declaration Task MethodsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddBeforeAsync(string) Add the provided syntax before the method definitions. Declaration Task MethodsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddAfterAsync(string) Add the provided syntax after the nested classes definitions. Declaration Task NestedClassesAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddBeforeAsync(string) Add the provided syntax before the nested classes definitions. Declaration Task NestedClassesAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesRemoveAsync(CsClass) Removes the nested class. Declaration Task NestedClassesRemoveAsync(CsClass nested) Parameters Type Name Description CsClass nested The target nested class. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesReplaceAsync(CsClass, string) Replaces the nested class with the provided syntax Declaration Task NestedClassesReplaceAsync(CsClass nested, string syntax) Parameters Type Name Description CsClass nested The target nested class. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddAfterAsync(string) Add the provided syntax after the nested enumeration definitions. Declaration Task NestedEnumAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddBeforeAsync(string) Add the provided syntax before the nested enumeration definitions. Declaration Task NestedEnumAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumRemoveAsync(CsEnum) Removes the nested enumeration. Declaration Task NestedEnumRemoveAsync(CsEnum nested) Parameters Type Name Description CsEnum nested The target nested enumeration. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumReplaceAsync(CsEnum, string) Replaces the nested enumeration with the provided syntax Declaration Task NestedEnumReplaceAsync(CsEnum nested, string syntax) Parameters Type Name Description CsEnum nested The target nested enumeration. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddAfterAsync(string) Add the provided syntax after the nested interface definitions. Declaration Task NestedInterfaceAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddBeforeAsync(string) Add the provided syntax before the nested interface definitions. Declaration Task NestedInterfaceAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceRemoveAsync(CsInterface) Removes the nested interface. Declaration Task NestedInterfaceRemoveAsync(CsInterface nested) Parameters Type Name Description CsInterface nested The target nested interface. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceReplaceAsync(CsInterface, string) Replaces the nested interface with the provided syntax Declaration Task NestedInterfaceReplaceAsync(CsInterface nested, string syntax) Parameters Type Name Description CsInterface nested The target nested interface. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructureRemoveAsync(CsStructure) Removes the nested structure. Declaration Task NestedStructureRemoveAsync(CsStructure nested) Parameters Type Name Description CsStructure nested The target nested structure. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructureReplaceAsync(CsStructure, string) Replaces the nested structure with the provided syntax Declaration Task NestedStructureReplaceAsync(CsStructure nested, string syntax) Parameters Type Name Description CsStructure nested The target nested structure. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddAfterAsync(string) Add the provided syntax after the nested structures definitions. Declaration Task NestedStructuresAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddBeforeAsync(string) Add the provided syntax before the nested structures definitions. Declaration Task NestedStructuresAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddAfterAsync(string) Add the provided syntax after the property definitions. Declaration Task PropertiesAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddBeforeAsync(string) Add the provided syntax before the property definitions. Declaration Task PropertiesAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToBeginningAsync(string) Adds the provided syntax to the beginning of the source file. Declaration Task SourceAddToBeginningAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToEndAsync(string) Adds the provided syntax to the end of the source file. Declaration Task SourceAddToEndAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UsingStatementsAddAfterAsync(string) Adds the provided syntax before the first using statement definition. Declaration Task UsingStatementsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UsingStatementsAddBeforeAsync(string) Adds the provided syntax before the first using statement definition. Declaration Task UsingStatementsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ISyntaxBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ISyntaxBuilder.html",
    "title": "Interface ISyntaxBuilder | CodeFactory for Windows",
    "keywords": "Interface ISyntaxBuilder Default contract all syntax builders must implement. Inherited Members IBuilder.BuilderType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ISyntaxBuilder : IBuilder Methods BuildSyntaxAsync(CsModel, ISourceManager, int) Generates syntax from the provided model. Declaration Task<string> BuildSyntaxAsync(CsModel sourceModel, ISourceManager manager, int indentLevel) Parameters Type Name Description CsModel sourceModel Source C# model to generate syntax from. ISourceManager manager Source manager to provide access to namespace manager and namespace mapping information. int indentLevel The level to indent when generating the syntax. Returns Type Description Task<string> Generated syntax. BuildSyntaxAsync(IEnumerable<NamedModel>, ISourceManager, int) Generates syntax from the provided model. Declaration Task<string> BuildSyntaxAsync(IEnumerable<NamedModel> sourceModels, ISourceManager manager, int indentLevel) Parameters Type Name Description IEnumerable<NamedModel> sourceModels Enumeration of named source C# models to generate syntax from. ISourceManager manager Source manager to provide access to namespace manager and namespace mapping information. int indentLevel The level to indent when generating the syntax. Returns Type Description Task<string> Generated syntax."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ITryBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ITryBlock.html",
    "title": "Interface ITryBlock | CodeFactory for Windows",
    "keywords": "Interface ITryBlock Contract definition all try block implementation should implement. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ITryBlock : IBlock Properties CatchBlocks Catch blocks that support the try block, these are optional. Declaration IEnumerable<ICatchBlock> CatchBlocks { get; } Property Value Type Description IEnumerable<ICatchBlock> FinallyBlock Finally blick that supports the try block, this is optional. Declaration IFinallyBlock FinallyBlock { get; } Property Value Type Description IFinallyBlock LoggerBlock The logger block supporting the try block, this is optional. Declaration ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods GenerateTryBlock(IEnumerable<NamedSyntax>, string) Generates the try block Declaration string GenerateTryBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string) Generates the try block Declaration string GenerateTryBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string, IEnumerable<NamedSyntax>, string) Generates the Try block Declaration string GenerateTryBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the Try block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the Try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string, string) Generates the try block Declaration string GenerateTryBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.LoggerBlockMicrosoft.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.LoggerBlockMicrosoft.html",
    "title": "Class LoggerBlockMicrosoft | CodeFactory for Windows",
    "keywords": "Class LoggerBlockMicrosoft Logger block that supports the ILogger implementation. Inheritance object BaseLoggerBlock LoggerBlockMicrosoft Implements ILoggerBlock IBlock Inherited Members BaseLoggerBlock.BlockType BaseLoggerBlock.LoggerFieldName BaseLoggerBlock.TraceMethodName BaseLoggerBlock.DebugMethodName BaseLoggerBlock.InformationMethodName BaseLoggerBlock.WarningMethodName BaseLoggerBlock.ErrorMethodName BaseLoggerBlock.CriticalMethodName BaseLoggerBlock.LogMethodName(LogLevel) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class LoggerBlockMicrosoft : BaseLoggerBlock, ILoggerBlock, IBlock Constructors LoggerBlockMicrosoft(string) Creates a new instance of the LoggerBlockMicrosoft Declaration public LoggerBlockMicrosoft(string fieldName) Parameters Type Name Description string fieldName The name of the logger field. Methods GenerateEnterLogging(LogLevel, string) Generates a logging message entering the target member name. Declaration public override string GenerateEnterLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. Overrides BaseLoggerBlock.GenerateEnterLogging(LogLevel, string) GenerateExitLogging(LogLevel, string) Generates a logging message exiting the target member name. Declaration public override string GenerateExitLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. Overrides BaseLoggerBlock.GenerateExitLogging(LogLevel, string) GenerateLogging(LogLevel, string, bool, string) Create formatted logging to be used with automation. Declaration public override string GenerateLogging(LogLevel level, string message, bool isFormattedMessage = false, string exceptionName = null) Parameters Type Name Description LogLevel level The logging level for the logger Name. string message the target message for logging. bool isFormattedMessage optional parameter that determines if the string uses a $ formatted string for the message with double quotes in the formatted output. string exceptionName Optional parameter to pass the exception field name to be included with the logging. Returns Type Description string The formatted logging Name to be Generated. If no message is provided will return null. Overrides BaseLoggerBlock.GenerateLogging(LogLevel, string, bool, string) Implements ILoggerBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.MethodBuilderStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.MethodBuilderStandard.html",
    "title": "Class MethodBuilderStandard | CodeFactory for Windows",
    "keywords": "Class MethodBuilderStandard Standard builder implementation for a method. Method supports logger, catch blocks, and as try block. Inheritance object BaseMethodBuilder MethodBuilderStandard Implements IMethodBuilder IBuilder Inherited Members BaseMethodBuilder.LoggerBlock BaseMethodBuilder.BoundsChecksBlocks BaseMethodBuilder.TryBlock BaseMethodBuilder.BuilderType BaseMethodBuilder.BuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) BaseMethodBuilder.InjectMethodAsync(CsMethod, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class MethodBuilderStandard : BaseMethodBuilder, IMethodBuilder, IBuilder Constructors MethodBuilderStandard(ILoggerBlock, IEnumerable<IBoundsCheckBlock>, ITryBlock) Creates a instance of the MethodBuilderStandard. Declaration public MethodBuilderStandard(ILoggerBlock loggerBlock = null, IEnumerable<IBoundsCheckBlock> boundsCheckBlocks = null, ITryBlock tryBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Logger block to be used by the method builder, default is null. IEnumerable<IBoundsCheckBlock> boundsCheckBlocks Enumeration of bounds check blocks to be used by the method builder, default is null. ITryBlock tryBlock Try block to be used by the method builder, default is null. Methods GenerateBuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and returns the defined syntax to the caller. Declaration public override Task<string> GenerateBuildMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task<string> Formatted method definition. Overrides BaseMethodBuilder.GenerateBuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Implements IMethodBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.MethodNameFormatting.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.MethodNameFormatting.html",
    "title": "Class MethodNameFormatting | CodeFactory for Windows",
    "keywords": "Class MethodNameFormatting Helper class that provides name formatting options to be used with builders. Inheritance object NameFormatting MethodNameFormatting Inherited Members NameFormatting.NamePrefix NameFormatting.NameSuffix object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class MethodNameFormatting : NameFormatting Properties AsyncPrefix The method name will start with a defined async prefix. Declaration public string AsyncPrefix { get; set; } Property Value Type Description string AsyncSuffix The method name will start with a defined async suffix. Declaration public string AsyncSuffix { get; set; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.NamedModel.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.NamedModel.html",
    "title": "Class NamedModel | CodeFactory for Windows",
    "keywords": "Class NamedModel Data class that provides a C# model by a target name. Used in blocks and builders when more then one set of models needs to be provided. Inheritance object NamedModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class NamedModel Constructors NamedModel(string, string) Creates a new instance of NamedModel Declaration public NamedModel(string name, string model) Parameters Type Name Description string name The name to be used to identify the model. string model C# model used to be used in blocks or builders. Properties Model C# model used to be used in blocks or builders. Declaration public string Model { get; } Property Value Type Description string Name The name to be used to identify the model. Declaration public string Name { get; } Property Value Type Description string Methods Create(string, string) Creates a new instance of NamedModel Declaration public static NamedModel Create(string name, string model) Parameters Type Name Description string name The name to be used to identify the C# model. string model C# model used to be used in blocks or builders. Returns Type Description NamedModel"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.NamedSyntax.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.NamedSyntax.html",
    "title": "Class NamedSyntax | CodeFactory for Windows",
    "keywords": "Class NamedSyntax Data class that provides syntax by a target name. Used in blocks and builders when more then one set of syntax needs to be provided. Inheritance object NamedSyntax Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class NamedSyntax Constructors NamedSyntax(string, string) Creates a new instance of NamedSyntax Declaration public NamedSyntax(string name, string syntax) Parameters Type Name Description string name The name to be used to identify the syntax. string syntax syntax used to be used in blocks or builders. Properties Name The name to be used to identify the syntax. Declaration public string Name { get; } Property Value Type Description string Syntax syntax used to be used in blocks or builders. Declaration public string Syntax { get; } Property Value Type Description string Methods Create(string, string) Creates a new instance of NamedSyntax Declaration public static NamedSyntax Create(string name, string syntax) Parameters Type Name Description string name The name to be used to identify the syntax. string syntax syntax used to be used in blocks or builders. Returns Type Description NamedSyntax"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.NameFormatting.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.NameFormatting.html",
    "title": "Class NameFormatting | CodeFactory for Windows",
    "keywords": "Class NameFormatting Helper class that provides name formatting options to be used with builders. Inheritance object NameFormatting FieldNameFormatting MethodNameFormatting Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class NameFormatting Properties NamePrefix The name should include the following prefix if not null. Is null by default. Declaration public string NamePrefix { get; set; } Property Value Type Description string NameSuffix The name should include the following suffix if not null. Is null by default. Declaration public string NameSuffix { get; set; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.PropertyBuilderStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.PropertyBuilderStandard.html",
    "title": "Class PropertyBuilderStandard | CodeFactory for Windows",
    "keywords": "Class PropertyBuilderStandard Builds a standard property with no backing fields using the get and set accessors. Inheritance object BasePropertyBuilder PropertyBuilderStandard Implements IPropertyBuilder IBuilder Inherited Members BasePropertyBuilder.BuilderType BasePropertyBuilder.LoggerBlock BasePropertyBuilder.TryBlock BasePropertyBuilder.BuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) BasePropertyBuilder.InjectPropertyAsync(CsProperty, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class PropertyBuilderStandard : BasePropertyBuilder, IPropertyBuilder, IBuilder Constructors PropertyBuilderStandard() Creates a new instance of the PropertyBuilderStandard Declaration public PropertyBuilderStandard() Methods GenerateBuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and returns the defined syntax to the caller. Declaration public override Task<string> GenerateBuildPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task<string> Formatted property definition. Overrides BasePropertyBuilder.GenerateBuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Implements IPropertyBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceClassManager.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceClassManager.html",
    "title": "Class SourceClassManager | CodeFactory for Windows",
    "keywords": "Class SourceClassManager Manages changes to a hosting CsSource model and the target CsClass model hosted in source code. Inheritance object SourceContainerManager<CsClass> SourceClassManager Implements ISourceContainerManager<CsClass> ISourceManager IBuildManagement Inherited Members SourceContainerManager<CsClass>.ContainerPath SourceContainerManager<CsClass>.Source SourceContainerManager<CsClass>.Container SourceContainerManager<CsClass>.VsActions SourceContainerManager<CsClass>.NamespaceManager SourceContainerManager<CsClass>.MappedNamespaces SourceContainerManager<CsClass>.UpdateMappedNamespaces(List<MapNamespace>) SourceContainerManager<CsClass>.UpdateSources(CsSource, CsClass) SourceContainerManager<CsClass>.UpdateNamespaceManager(NamespaceManager) SourceContainerManager<CsClass>.LoadNamespaceManager() SourceContainerManager<CsClass>.UsingStatementAddAsync(string, string) SourceContainerManager<CsClass>.SourceAddToBeginningAsync(string) SourceContainerManager<CsClass>.SourceAddToEndAsync(string) SourceContainerManager<CsClass>.ContainerAddBeforeAsync(string) SourceContainerManager<CsClass>.ContainerAddAfterAsync(string) SourceContainerManager<CsClass>.ContainerAddToBeginningAsync(string) SourceContainerManager<CsClass>.ContainerAddToEndAsync(string) SourceContainerManager<CsClass>.UsingStatementsAddBeforeAsync(string) SourceContainerManager<CsClass>.UsingStatementsAddAfterAsync(string) SourceContainerManager<CsClass>.PropertiesAddBeforeAsync(string) SourceContainerManager<CsClass>.PropertiesAddAfterAsync(string) SourceContainerManager<CsClass>.EventsAddBeforeAsync(string) SourceContainerManager<CsClass>.EventsAddAfterAsync(string) SourceContainerManager<CsClass>.MethodsAddBeforeAsync(string) SourceContainerManager<CsClass>.MethodsAddAfterAsync(string) SourceContainerManager<CsClass>.MemberAddBeforeAsync(CsMember, string) SourceContainerManager<CsClass>.MemberAddAfterAsync(CsMember, string) SourceContainerManager<CsClass>.MemberCommentOut(CsMember, string) SourceContainerManager<CsClass>.MemberReplaceAsync(CsMember, string) SourceContainerManager<CsClass>.MemberRemoveAsync(CsMember) SourceContainerManager<CsClass>.NestedEnumAddBeforeAsync(string) SourceContainerManager<CsClass>.NestedEnumAddAfterAsync(string) SourceContainerManager<CsClass>.NestedEnumRemoveAsync(CsEnum) SourceContainerManager<CsClass>.NestedEnumReplaceAsync(CsEnum, string) SourceContainerManager<CsClass>.NestedInterfaceAddBeforeAsync(string) SourceContainerManager<CsClass>.NestedInterfaceAddAfterAsync(string) SourceContainerManager<CsClass>.NestedInterfaceRemoveAsync(CsInterface) SourceContainerManager<CsClass>.NestedInterfaceReplaceAsync(CsInterface, string) SourceContainerManager<CsClass>.NestedStructuresAddBeforeAsync(string) SourceContainerManager<CsClass>.NestedStructuresAddAfterAsync(string) SourceContainerManager<CsClass>.NestedStructureRemoveAsync(CsStructure) SourceContainerManager<CsClass>.NestedStructureReplaceAsync(CsStructure, string) SourceContainerManager<CsClass>.NestedClassesAddBeforeAsync(string) SourceContainerManager<CsClass>.NestedClassesAddAfterAsync(string) SourceContainerManager<CsClass>.NestedClassesRemoveAsync(CsClass) SourceContainerManager<CsClass>.NestedClassesReplaceAsync(CsClass, string) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsMethod) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsProperty) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsEvent) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsField) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsAttribute) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsType) SourceContainerManager<CsClass>.AddByInjectionLocationAsync(string, InjectionLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class SourceClassManager : SourceContainerManager<CsClass>, ISourceContainerManager<CsClass>, ISourceManager, IBuildManagement Constructors SourceClassManager(CsSource, CsClass, IVsActions, NamespaceManager, List<MapNamespace>) Constructor for the source class manager. Declaration public SourceClassManager(CsSource source, CsClass container, IVsActions vsActions, NamespaceManager namespaceManager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsSource source The C# source code to be managed. CsClass container The target class to be managed. IVsActions vsActions The CodeFactory API for Visual Studio. NamespaceManager namespaceManager Optional parameter that sets the default namespace manager to use, default is null. List<MapNamespace> mappedNamespaces Optional parameter that sets the mapped namespaces used for namespace management. Methods AddMissingUsingStatementsAsync() Checks all types definitions for the loaded container if the container is not loaded will not add missing using statements. Declaration public override Task AddMissingUsingStatementsAsync() Returns Type Description Task Overrides SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync() ConstructorsAddAfterAsync(string) Add the provided syntax after the constructor definitions. Declaration public override Task ConstructorsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsClass>.ConstructorsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeAsync(string) Add the provided syntax before the constructor definitions. Declaration public override Task ConstructorsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsClass>.ConstructorsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterAsync(string) Adds the provided syntax after the field definitions. Declaration public override Task FieldsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsClass>.FieldsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeAsync(string) Adds the provided syntax before the field definitions. Declaration public override Task FieldsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsClass>.FieldsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. Implements ISourceContainerManager<TContainerType> ISourceManager IBuildManagement"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceContainerManager-1.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceContainerManager-1.html",
    "title": "Class SourceContainerManager<TContainerType> | CodeFactory for Windows",
    "keywords": "Class SourceContainerManager<TContainerType> Base class implementation of the ISourceContainerManager<TContainerType> contract. Inheritance object SourceContainerManager<TContainerType> SourceClassManager SourceInterfaceManager SourceStructureManager Implements ISourceContainerManager<TContainerType> ISourceManager IBuildManagement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class SourceContainerManager<TContainerType> : ISourceContainerManager<TContainerType>, ISourceManager, IBuildManagement where TContainerType : CsContainer Type Parameters Name Description TContainerType Target CsContainer type. Constructors SourceContainerManager(CsSource, TContainerType, IVsActions, NamespaceManager, List<MapNamespace>) Base constructor for source container managers. Declaration protected SourceContainerManager(CsSource source, TContainerType container, IVsActions vsActions, NamespaceManager namespaceManager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsSource source The C# source code to be managed. TContainerType container The target container to be managed. IVsActions vsActions The CodeFactory API for Visual Studio. NamespaceManager namespaceManager Optional parameter that sets the default namespace manager to use, default is null. List<MapNamespace> mappedNamespaces Optional parameter that sets the mapped namespaces used for namespace management. Fields ContainerPath Declaration protected readonly string ContainerPath Field Value Type Description string Properties Container Target container being updated. Declaration public TContainerType Container { get; } Property Value Type Description TContainerType MappedNamespaces Mapped namespaces used for model moving from a source to a new target. Declaration public List<MapNamespace> MappedNamespaces { get; } Property Value Type Description List<MapNamespace> NamespaceManager The namespace manager that is used for updating source. Declaration public NamespaceManager NamespaceManager { get; } Property Value Type Description NamespaceManager Source Target source that is being updated. Declaration public CsSource Source { get; } Property Value Type Description CsSource VsActions The code factory actions for visual studio to be used with updates to the source. Declaration public IVsActions VsActions { get; } Property Value Type Description IVsActions Methods AddByInjectionLocationAsync(string, InjectionLocation) Adds the provided syntax to the target injection location provided. Declaration public Task AddByInjectionLocationAsync(string syntax, InjectionLocation location) Parameters Type Name Description string syntax Target syntax to be added. InjectionLocation location The location within the source code file to inject at. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. AddMissingUsingStatementsAsync() Checks all types definitions for the loaded container if the container is not loaded will not add missing using statements. Declaration public abstract Task AddMissingUsingStatementsAsync() Returns Type Description Task AddMissingUsingStatementsAsync(CsAttribute) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsAttribute sourceAttribute) Parameters Type Name Description CsAttribute sourceAttribute The target model to check using statements on. Returns Type Description Task Missing using statements added or the original update source if no additional using statements needed. AddMissingUsingStatementsAsync(CsEvent) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsEvent sourceEvent) Parameters Type Name Description CsEvent sourceEvent The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsField) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsField sourceField) Parameters Type Name Description CsField sourceField The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsMethod) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsMethod sourceMethod) Parameters Type Name Description CsMethod sourceMethod The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsProperty) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsProperty sourceProperty) Parameters Type Name Description CsProperty sourceProperty The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsType) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsType sourceType) Parameters Type Name Description CsType sourceType The target model to check using statements on. Returns Type Description Task Missing using statements added or the original update source if no additional using statements needed. ConstructorsAddAfterAsync(string) Add the provided syntax after the constructor definitions. Declaration public abstract Task ConstructorsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeAsync(string) Add the provided syntax before the constructor definitions. Declaration public abstract Task ConstructorsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddAfterAsync(string) Adds the provided syntax after containers definition. Declaration public Task ContainerAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddBeforeAsync(string) Adds the provided syntax before the containers definition. Declaration public Task ContainerAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToBeginningAsync(string) Adds the provided syntax to the beginning of the containers definition. Declaration public Task ContainerAddToBeginningAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToEndAsync(string) Adds the provided syntax to the end of the containers definition. Declaration public Task ContainerAddToEndAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddAfterAsync(string) Add the provided syntax after the event definitions. Declaration public Task EventsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddBeforeAsync(string) Add the provided syntax before the event definitions. Declaration public Task EventsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterAsync(string) Adds the provided syntax after the field definitions. Declaration public abstract Task FieldsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeAsync(string) Adds the provided syntax before the field definitions. Declaration public abstract Task FieldsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. LoadNamespaceManager() Loads a new instance of a from the current source and assigns it to the property. Declaration public void LoadNamespaceManager() Exceptions Type Condition ArgumentNullException Thrown if either the source or container is null. MemberAddAfterAsync(CsMember, string) Add the syntax after the target member. Declaration public Task MemberAddAfterAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberAddBeforeAsync(CsMember, string) Add the syntax before the target member. Declaration public Task MemberAddBeforeAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberCommentOut(CsMember, string) Comments out member from the source container. Declaration public Task MemberCommentOut(CsMember member, string commentSyntax = \"//\") Parameters Type Name Description CsMember member Target member. string commentSyntax Optional parameters sets the syntax to use when commenting out the member. This will default to use '//' Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberRemoveAsync(CsMember) Removes the target member. Declaration public Task MemberRemoveAsync(CsMember member) Parameters Type Name Description CsMember member Target member. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberReplaceAsync(CsMember, string) Syntax replaces the target member. Declaration public Task MemberReplaceAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddAfterAsync(string) Add the provided syntax after the method definitions. Declaration public Task MethodsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddBeforeAsync(string) Add the provided syntax before the method definitions. Declaration public Task MethodsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddAfterAsync(string) Add the provided syntax after the nested classes definitions. Declaration public Task NestedClassesAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddBeforeAsync(string) Add the provided syntax before the nested classes definitions. Declaration public Task NestedClassesAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesRemoveAsync(CsClass) Removes the nested class. Declaration public Task NestedClassesRemoveAsync(CsClass nested) Parameters Type Name Description CsClass nested The target nested class. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesReplaceAsync(CsClass, string) Replaces the nested class with the provided syntax Declaration public Task NestedClassesReplaceAsync(CsClass nested, string syntax) Parameters Type Name Description CsClass nested The target nested class. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddAfterAsync(string) Add the provided syntax after the nested enumeration definitions. Declaration public Task NestedEnumAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddBeforeAsync(string) Add the provided syntax before the nested enumeration definitions. Declaration public Task NestedEnumAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumRemoveAsync(CsEnum) Removes the nested enumeration. Declaration public Task NestedEnumRemoveAsync(CsEnum nested) Parameters Type Name Description CsEnum nested The target nested enumeration. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumReplaceAsync(CsEnum, string) Replaces the nested enumeration with the provided syntax Declaration public Task NestedEnumReplaceAsync(CsEnum nested, string syntax) Parameters Type Name Description CsEnum nested The target nested enumeration. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddAfterAsync(string) Add the provided syntax after the nested interface definitions. Declaration public Task NestedInterfaceAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddBeforeAsync(string) Add the provided syntax before the nested interface definitions. Declaration public Task NestedInterfaceAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceRemoveAsync(CsInterface) Removes the nested interface. Declaration public Task NestedInterfaceRemoveAsync(CsInterface nested) Parameters Type Name Description CsInterface nested The target nested interface. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceReplaceAsync(CsInterface, string) Replaces the nested interface with the provided syntax Declaration public Task NestedInterfaceReplaceAsync(CsInterface nested, string syntax) Parameters Type Name Description CsInterface nested The target nested interface. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructureRemoveAsync(CsStructure) Removes the nested structure. Declaration public Task NestedStructureRemoveAsync(CsStructure nested) Parameters Type Name Description CsStructure nested The target nested structure. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructureReplaceAsync(CsStructure, string) Replaces the nested structure with the provided syntax Declaration public Task NestedStructureReplaceAsync(CsStructure nested, string syntax) Parameters Type Name Description CsStructure nested The target nested structure. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddAfterAsync(string) Add the provided syntax after the nested structures definitions. Declaration public Task NestedStructuresAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddBeforeAsync(string) Add the provided syntax before the nested structures definitions. Declaration public Task NestedStructuresAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddAfterAsync(string) Add the provided syntax after the property definitions. Declaration public Task PropertiesAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddBeforeAsync(string) Add the provided syntax before the property definitions. Declaration public Task PropertiesAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToBeginningAsync(string) Adds the provided syntax to the beginning of the source file. Declaration public Task SourceAddToBeginningAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToEndAsync(string) Adds the provided syntax to the end of the source file. Declaration public Task SourceAddToEndAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UpdateMappedNamespaces(List<MapNamespace>) Refreshes the mapped namespaces. Declaration public void UpdateMappedNamespaces(List<MapNamespace> mappedNamespaces) Parameters Type Name Description List<MapNamespace> mappedNamespaces the mapped namespaces to add to management. UpdateNamespaceManager(NamespaceManager) Refreshes the current version of the namespace manager for the sources. Declaration public void UpdateNamespaceManager(NamespaceManager namespaceManager) Parameters Type Name Description NamespaceManager namespaceManager Updated namespace to register Exceptions Type Condition ArgumentNullException Thrown if the namespace manager is null. UpdateSources(CsSource, TContainerType) Refreshes the current version of the update sources. Declaration public void UpdateSources(CsSource source, TContainerType container) Parameters Type Name Description CsSource source The updated CsSource. TContainerType container The updates hosting CsContainer type. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null. UsingStatementAddAsync(string, string) Creates a new using statement in the source if the using statement does not exist. It will also reload the namespace manager and update it. Declaration public Task UsingStatementAddAsync(string nameSpace, string alias = null) Parameters Type Name Description string nameSpace Namespace to add to the source file. string alias Optional parameter to assign a alias to the using statement. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if the source is null. UsingStatementsAddAfterAsync(string) Adds the provided syntax before the first using statement definition. Declaration public Task UsingStatementsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UsingStatementsAddBeforeAsync(string) Adds the provided syntax before the first using statement definition. Declaration public Task UsingStatementsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. Implements ISourceContainerManager<TContainerType> ISourceManager IBuildManagement"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceInterfaceManager.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceInterfaceManager.html",
    "title": "Class SourceInterfaceManager | CodeFactory for Windows",
    "keywords": "Class SourceInterfaceManager Manages changes to a hosting CsSource model and the target CsInterface model hosted in source code. Inheritance object SourceContainerManager<CsInterface> SourceInterfaceManager Implements ISourceContainerManager<CsInterface> ISourceManager IBuildManagement Inherited Members SourceContainerManager<CsInterface>.ContainerPath SourceContainerManager<CsInterface>.Source SourceContainerManager<CsInterface>.Container SourceContainerManager<CsInterface>.VsActions SourceContainerManager<CsInterface>.NamespaceManager SourceContainerManager<CsInterface>.MappedNamespaces SourceContainerManager<CsInterface>.UpdateMappedNamespaces(List<MapNamespace>) SourceContainerManager<CsInterface>.UpdateSources(CsSource, CsInterface) SourceContainerManager<CsInterface>.UpdateNamespaceManager(NamespaceManager) SourceContainerManager<CsInterface>.LoadNamespaceManager() SourceContainerManager<CsInterface>.UsingStatementAddAsync(string, string) SourceContainerManager<CsInterface>.SourceAddToBeginningAsync(string) SourceContainerManager<CsInterface>.SourceAddToEndAsync(string) SourceContainerManager<CsInterface>.ContainerAddBeforeAsync(string) SourceContainerManager<CsInterface>.ContainerAddAfterAsync(string) SourceContainerManager<CsInterface>.ContainerAddToBeginningAsync(string) SourceContainerManager<CsInterface>.ContainerAddToEndAsync(string) SourceContainerManager<CsInterface>.UsingStatementsAddBeforeAsync(string) SourceContainerManager<CsInterface>.UsingStatementsAddAfterAsync(string) SourceContainerManager<CsInterface>.PropertiesAddBeforeAsync(string) SourceContainerManager<CsInterface>.PropertiesAddAfterAsync(string) SourceContainerManager<CsInterface>.EventsAddBeforeAsync(string) SourceContainerManager<CsInterface>.EventsAddAfterAsync(string) SourceContainerManager<CsInterface>.MethodsAddBeforeAsync(string) SourceContainerManager<CsInterface>.MethodsAddAfterAsync(string) SourceContainerManager<CsInterface>.MemberAddBeforeAsync(CsMember, string) SourceContainerManager<CsInterface>.MemberAddAfterAsync(CsMember, string) SourceContainerManager<CsInterface>.MemberCommentOut(CsMember, string) SourceContainerManager<CsInterface>.MemberReplaceAsync(CsMember, string) SourceContainerManager<CsInterface>.MemberRemoveAsync(CsMember) SourceContainerManager<CsInterface>.NestedEnumAddBeforeAsync(string) SourceContainerManager<CsInterface>.NestedEnumAddAfterAsync(string) SourceContainerManager<CsInterface>.NestedEnumRemoveAsync(CsEnum) SourceContainerManager<CsInterface>.NestedEnumReplaceAsync(CsEnum, string) SourceContainerManager<CsInterface>.NestedInterfaceAddBeforeAsync(string) SourceContainerManager<CsInterface>.NestedInterfaceAddAfterAsync(string) SourceContainerManager<CsInterface>.NestedInterfaceRemoveAsync(CsInterface) SourceContainerManager<CsInterface>.NestedInterfaceReplaceAsync(CsInterface, string) SourceContainerManager<CsInterface>.NestedStructuresAddBeforeAsync(string) SourceContainerManager<CsInterface>.NestedStructuresAddAfterAsync(string) SourceContainerManager<CsInterface>.NestedStructureRemoveAsync(CsStructure) SourceContainerManager<CsInterface>.NestedStructureReplaceAsync(CsStructure, string) SourceContainerManager<CsInterface>.NestedClassesAddBeforeAsync(string) SourceContainerManager<CsInterface>.NestedClassesAddAfterAsync(string) SourceContainerManager<CsInterface>.NestedClassesRemoveAsync(CsClass) SourceContainerManager<CsInterface>.NestedClassesReplaceAsync(CsClass, string) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsMethod) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsProperty) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsEvent) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsField) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsAttribute) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsType) SourceContainerManager<CsInterface>.AddByInjectionLocationAsync(string, InjectionLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class SourceInterfaceManager : SourceContainerManager<CsInterface>, ISourceContainerManager<CsInterface>, ISourceManager, IBuildManagement Constructors SourceInterfaceManager(CsSource, CsInterface, IVsActions, NamespaceManager, List<MapNamespace>) Constructor for the source interface manager. Declaration public SourceInterfaceManager(CsSource source, CsInterface container, IVsActions vsActions, NamespaceManager namespaceManager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsSource source The C# source code to be managed. CsInterface container The target interface to be managed. IVsActions vsActions The CodeFactory API for Visual Studio. NamespaceManager namespaceManager Optional parameter that sets the default namespace manager to use, default is null. List<MapNamespace> mappedNamespaces Optional parameter that sets the mapped namespaces used for namespace management. Methods AddMissingUsingStatementsAsync() Checks all types definitions for the loaded container if the container is not loaded will not add missing using statements. Declaration public override Task AddMissingUsingStatementsAsync() Returns Type Description Task Overrides SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync() ConstructorsAddAfterAsync(string) Add the provided syntax after the constructor definitions. Declaration public override Task ConstructorsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsInterface>.ConstructorsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeAsync(string) Add the provided syntax before the constructor definitions. Declaration public override Task ConstructorsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsInterface>.ConstructorsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterAsync(string) Adds the provided syntax after the field definitions. Declaration public override Task FieldsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsInterface>.FieldsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeAsync(string) Adds the provided syntax before the field definitions. Declaration public override Task FieldsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsInterface>.FieldsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. Implements ISourceContainerManager<TContainerType> ISourceManager IBuildManagement"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceManagerExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceManagerExtensions.html",
    "title": "Class SourceManagerExtensions | CodeFactory for Windows",
    "keywords": "Class SourceManagerExtensions Extension methods that support classes that implement the ISourceManager interface. Inheritance object SourceManagerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public static class SourceManagerExtensions"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceStructureManager.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceStructureManager.html",
    "title": "Class SourceStructureManager | CodeFactory for Windows",
    "keywords": "Class SourceStructureManager Manages changes to a hosting CsSource model and the target CsStructure model hosted in source code. Inheritance object SourceContainerManager<CsStructure> SourceStructureManager Implements ISourceContainerManager<CsStructure> ISourceManager IBuildManagement Inherited Members SourceContainerManager<CsStructure>.ContainerPath SourceContainerManager<CsStructure>.Source SourceContainerManager<CsStructure>.Container SourceContainerManager<CsStructure>.VsActions SourceContainerManager<CsStructure>.NamespaceManager SourceContainerManager<CsStructure>.MappedNamespaces SourceContainerManager<CsStructure>.UpdateMappedNamespaces(List<MapNamespace>) SourceContainerManager<CsStructure>.UpdateSources(CsSource, CsStructure) SourceContainerManager<CsStructure>.UpdateNamespaceManager(NamespaceManager) SourceContainerManager<CsStructure>.LoadNamespaceManager() SourceContainerManager<CsStructure>.UsingStatementAddAsync(string, string) SourceContainerManager<CsStructure>.SourceAddToBeginningAsync(string) SourceContainerManager<CsStructure>.SourceAddToEndAsync(string) SourceContainerManager<CsStructure>.ContainerAddBeforeAsync(string) SourceContainerManager<CsStructure>.ContainerAddAfterAsync(string) SourceContainerManager<CsStructure>.ContainerAddToBeginningAsync(string) SourceContainerManager<CsStructure>.ContainerAddToEndAsync(string) SourceContainerManager<CsStructure>.UsingStatementsAddBeforeAsync(string) SourceContainerManager<CsStructure>.UsingStatementsAddAfterAsync(string) SourceContainerManager<CsStructure>.PropertiesAddBeforeAsync(string) SourceContainerManager<CsStructure>.PropertiesAddAfterAsync(string) SourceContainerManager<CsStructure>.EventsAddBeforeAsync(string) SourceContainerManager<CsStructure>.EventsAddAfterAsync(string) SourceContainerManager<CsStructure>.MethodsAddBeforeAsync(string) SourceContainerManager<CsStructure>.MethodsAddAfterAsync(string) SourceContainerManager<CsStructure>.MemberAddBeforeAsync(CsMember, string) SourceContainerManager<CsStructure>.MemberAddAfterAsync(CsMember, string) SourceContainerManager<CsStructure>.MemberCommentOut(CsMember, string) SourceContainerManager<CsStructure>.MemberReplaceAsync(CsMember, string) SourceContainerManager<CsStructure>.MemberRemoveAsync(CsMember) SourceContainerManager<CsStructure>.NestedEnumAddBeforeAsync(string) SourceContainerManager<CsStructure>.NestedEnumAddAfterAsync(string) SourceContainerManager<CsStructure>.NestedEnumRemoveAsync(CsEnum) SourceContainerManager<CsStructure>.NestedEnumReplaceAsync(CsEnum, string) SourceContainerManager<CsStructure>.NestedInterfaceAddBeforeAsync(string) SourceContainerManager<CsStructure>.NestedInterfaceAddAfterAsync(string) SourceContainerManager<CsStructure>.NestedInterfaceRemoveAsync(CsInterface) SourceContainerManager<CsStructure>.NestedInterfaceReplaceAsync(CsInterface, string) SourceContainerManager<CsStructure>.NestedStructuresAddBeforeAsync(string) SourceContainerManager<CsStructure>.NestedStructuresAddAfterAsync(string) SourceContainerManager<CsStructure>.NestedStructureRemoveAsync(CsStructure) SourceContainerManager<CsStructure>.NestedStructureReplaceAsync(CsStructure, string) SourceContainerManager<CsStructure>.NestedClassesAddBeforeAsync(string) SourceContainerManager<CsStructure>.NestedClassesAddAfterAsync(string) SourceContainerManager<CsStructure>.NestedClassesRemoveAsync(CsClass) SourceContainerManager<CsStructure>.NestedClassesReplaceAsync(CsClass, string) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsMethod) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsProperty) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsEvent) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsField) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsAttribute) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsType) SourceContainerManager<CsStructure>.AddByInjectionLocationAsync(string, InjectionLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class SourceStructureManager : SourceContainerManager<CsStructure>, ISourceContainerManager<CsStructure>, ISourceManager, IBuildManagement Constructors SourceStructureManager(CsSource, CsStructure, IVsActions, NamespaceManager, List<MapNamespace>) Constructor for the source class manager. Declaration public SourceStructureManager(CsSource source, CsStructure container, IVsActions vsActions, NamespaceManager namespaceManager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsSource source The C# source code to be managed. CsStructure container The target structure to be managed. IVsActions vsActions The CodeFactory API for Visual Studio. NamespaceManager namespaceManager Optional parameter that sets the default namespace manager to use, default is null. List<MapNamespace> mappedNamespaces Optional parameter that sets the mapped namespaces used for namespace management. Methods AddMissingUsingStatementsAsync() Checks all types definitions for the loaded container if the container is not loaded will not add missing using statements. Declaration public override Task AddMissingUsingStatementsAsync() Returns Type Description Task Overrides SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync() ConstructorsAddAfterAsync(string) Add the provided syntax after the constructor definitions. Declaration public override Task ConstructorsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsStructure>.ConstructorsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeAsync(string) Add the provided syntax before the constructor definitions. Declaration public override Task ConstructorsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsStructure>.ConstructorsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterAsync(string) Adds the provided syntax after the field definitions. Declaration public override Task FieldsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsStructure>.FieldsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeAsync(string) Adds the provided syntax before the field definitions. Declaration public override Task FieldsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsStructure>.FieldsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. Implements ISourceContainerManager<TContainerType> ISourceManager IBuildManagement"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SyntaxBuilderFieldStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SyntaxBuilderFieldStandard.html",
    "title": "Class SyntaxBuilderFieldStandard | CodeFactory for Windows",
    "keywords": "Class SyntaxBuilderFieldStandard Syntax builder that generates C# field syntax. Inheritance object SyntaxBuilderFieldStandard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class SyntaxBuilderFieldStandard Constructors SyntaxBuilderFieldStandard() Creates a new instance of the SyntaxBuilderFieldStandard Declaration public SyntaxBuilderFieldStandard() Methods GenerateFieldSyntaxAsync(string, ISourceManager, CsType, int, CsSecurity, string, string, bool, bool, bool, FieldNameFormatting) Generates a C# field definition Declaration public Task<string> GenerateFieldSyntaxAsync(string name, ISourceManager manager, CsType type, int indentLevel, CsSecurity security = CsSecurity.Private, string defaultValueSyntax = null, string summaryDocumentation = null, bool constKeyword = false, bool staticKeyword = false, bool readOnlyKeyword = false, FieldNameFormatting nameFormatting = null) Parameters Type Name Description string name Name of the field to create. ISourceManager manager Manager that holds the namespace manager and the mapped namespaces used for formatting. CsType type The C# type model the field represents. int indentLevel Number of levels to indent the syntax on creation. CsSecurity security Optional, security for the field, default is private. string defaultValueSyntax Optional, syntax that holds the default value to set the field to. This must be fully formatted C# code. default is null. string summaryDocumentation Optional the summary description for the field, default is null. bool constKeyword Optional, flag that determines if the const keyword should be added to the field, default is false. bool staticKeyword Optional, flag that determines if the static keyword should be added to the field, default is false. bool readOnlyKeyword Optional, flag that determines if the readonly keyword should be added to the field, default is false. FieldNameFormatting nameFormatting Optional, formatting requirements for the field name, default is null Returns Type Description Task<string> The full syntax for definition of the field. Exceptions Type Condition ArgumentNullException"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.TryBlockStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.TryBlockStandard.html",
    "title": "Class TryBlockStandard | CodeFactory for Windows",
    "keywords": "Class TryBlockStandard Try basic code block standard implementation. Supports injection of syntax inside the try block, it also will generate the catch and finally blocks if they are provided. Inheritance object BaseTryBlock TryBlockStandard Implements ITryBlock IBlock Inherited Members BaseTryBlock.BlockType BaseTryBlock.LoggerBlock BaseTryBlock.CatchBlocks BaseTryBlock.FinallyBlock BaseTryBlock.GenerateTryBlock(string) BaseTryBlock.GenerateTryBlock(string, string) BaseTryBlock.GenerateTryBlock(IEnumerable<NamedSyntax>, string) BaseTryBlock.GenerateTryBlock(string, IEnumerable<NamedSyntax>, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class TryBlockStandard : BaseTryBlock, ITryBlock, IBlock Constructors TryBlockStandard(ILoggerBlock, IEnumerable<ICatchBlock>, IFinallyBlock) Creates a instance of the code block. Declaration public TryBlockStandard(ILoggerBlock loggerBlock = null, IEnumerable<ICatchBlock> catchBlocks = null, IFinallyBlock finallyBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the logger block. IEnumerable<ICatchBlock> catchBlocks Optional parameter catch blocks that support the try block. IFinallyBlock finallyBlock Optional parameter finally block that supports the try block. Methods BuildTryBlock(string, IEnumerable<NamedSyntax>, string) Builds the try block Declaration protected override string BuildTryBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the try block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the try block,optional parameter. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block Overrides BaseTryBlock.BuildTryBlock(string, IEnumerable<NamedSyntax>, string) Implements ITryBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsAttribute.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsAttribute.html",
    "title": "Class CsAttribute | CodeFactory for Windows",
    "keywords": "Class CsAttribute Data model that represents an attribute. Inheritance object CsModel CsAttribute Implements ICsAttribute ICsModel IModelStatus IParent ISourceFiles Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsAttribute : CsModel, ICsAttribute, ICsModel, IModelStatus, IParent, ISourceFiles Constructors CsAttribute(bool, bool, bool, SourceCodeType, string, IReadOnlyList<string>, bool, string, IReadOnlyList<CsAttributeParameter>, CsType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsAttribute Declaration protected CsAttribute(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasParameters, string parentPath, IReadOnlyList<CsAttributeParameter> parameters, CsType type, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. string modelSourceFile The soure code file for the model. IReadOnlyList<string> sourceFiles The list of source files the attribute is defined in. bool hasParameters Flag that determines if the attribute has parameters. string parentPath The fully qualified lookup path to the parent model for this attribute. IReadOnlyList<CsAttributeParameter> parameters The list of parameters assigned to the attribute. CsType type The target type of the attribute. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties HasParameters Flag that determines if the attribute has parameters Declaration public bool HasParameters { get; } Property Value Type Description bool ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Parameters Enumeration of the parameters that are assigned to the attribute. This will be an empty list if HasParameters is false. Declaration public IReadOnlyList<CsAttributeParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsAttributeParameter> Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Type The type information for the attribute itself. Declaration public CsType Type { get; } Property Value Type Description CsType Methods AddAfterAsync(string) Adds the source code directly after the definition of the CsAttributein the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the CsAttributein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsAttributein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsAttributein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the attribute from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the attribute from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the attribute is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the attribute is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the attribute is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the attribute defined in. Returns Type Description Task<ISourceLocation> The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current attribute with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current attribute with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsAttribute ICsModel IModelStatus IParent ISourceFiles Extension Methods GenerateCSharpAttributeExtensions.GenerateCSharpAttributeSignature(CsAttribute, NamespaceManager, List<MapNamespace>)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsAttributeParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsAttributeParameter.html",
    "title": "Class CsAttributeParameter | CodeFactory for Windows",
    "keywords": "Class CsAttributeParameter Data model that represents a attribute parameter. Inheritance object CsModel CsAttributeParameter Implements ICsAttributeParameter ICsModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsAttributeParameter : CsModel, ICsAttributeParameter, ICsModel, IModelStatus Constructors CsAttributeParameter(bool, bool, bool, SourceCodeType, bool, string, CsAttributeParameterValue, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsAttributeParameter Declaration protected CsAttributeParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, bool hasNamedParameter, string name, CsAttributeParameterValue value, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. bool hasNamedParameter Flag that determines if the attribute parameter is a named parameter. string name The name of the parameter, should be null if not named. CsAttributeParameterValue value The value assigned to the parameter. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties HasNamedParameter Flag that determines if the attribute parameter is a named value, or just part of the attributes constructor. Declaration public bool HasNamedParameter { get; } Property Value Type Description bool Name The name of the parameter, if this is not a named parameter then it will be set to null Declaration public string Name { get; } Property Value Type Description string Value The value that was assigned to the parameter. Declaration public CsAttributeParameterValue Value { get; } Property Value Type Description CsAttributeParameterValue Implements ICsAttributeParameter ICsModel IModelStatus"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsAttributeParameterValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsAttributeParameterValue.html",
    "title": "Class CsAttributeParameterValue | CodeFactory for Windows",
    "keywords": "Class CsAttributeParameterValue Data class that represents an attributes parameter value. Inheritance object CsModel CsAttributeParameterValue Implements ICsAttributeParameterValue ICsModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsAttributeParameterValue : CsModel, ICsAttributeParameterValue, ICsModel, IModelStatus Constructors CsAttributeParameterValue(bool, bool, bool, SourceCodeType, AttributeParameterKind, string, string, CsType, IReadOnlyList<CsAttributeParameterValue>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsAttributeParameterValue Declaration protected CsAttributeParameterValue(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, AttributeParameterKind parameterKind, string value, string enumValue, CsType typeValue, IReadOnlyList<CsAttributeParameterValue> values, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. AttributeParameterKind parameterKind The kind of attribute parameter. string value The value of the attribute parameter. string enumValue The value of the enumeration if the parameter is an enumeration. CsType typeValue The type if the parameter is a single value. IReadOnlyList<CsAttributeParameterValue> values The list of values if the parameter has more then one value. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties EnumValue The enum value provides the name of the enumeration value that was provided. This will be populated if the property is set to 'Enum' Declaration public string EnumValue { get; } Property Value Type Description string ParameterKind Determines the kind of parameter that has been returned. Declaration public AttributeParameterKind ParameterKind { get; } Property Value Type Description AttributeParameterKind TypeValue The type definition of the parameter that was passed. This will be populated if the property ParameterKind is set to 'Type' Declaration public CsType TypeValue { get; } Property Value Type Description CsType Value Gets the raw value assigned to the parameter. This will be populated if the property is not set to 'Array' Declaration public string Value { get; } Property Value Type Description string Values Gets an enumeration of all the parameter values that were assigned to the attribute parameter. This will be populated if the property ParameterKind is set to 'Array' Declaration public IReadOnlyList<CsAttributeParameterValue> Values { get; } Property Value Type Description IReadOnlyList<CsAttributeParameterValue> Implements ICsAttributeParameterValue ICsModel IModelStatus Extension Methods GenerateCSharpAttributeExtensions.GenerateCSharpAttributeParameterValueSignature(CsAttributeParameterValue)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsClass.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsClass.html",
    "title": "Class CsClass | CodeFactory for Windows",
    "keywords": "Class CsClass Data model that represents a class implementation. Inheritance object CsModel CsContainer CsContainerWithNestedContainers CsClass Implements ICsNestedModel ICsClass ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsContainerWithNestedContainers.NestedModels CsContainerWithNestedContainers.NestedClasses CsContainerWithNestedContainers.NestedInterfaces CsContainerWithNestedContainers.NestedStructures CsContainerWithNestedContainers.NestedEnums CsContainerWithNestedContainers.NestedType CsContainerWithNestedContainers.IsNested CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.AddBeforeDocsAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.DeleteDocsAsync() CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsClass : CsContainerWithNestedContainers, ICsNestedModel, ICsClass, ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsClass(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, bool, CsNestedType, bool, bool, bool, CsClass, IReadOnlyList<ICsNestedModel>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsClass Declaration protected CsClass(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isNested, CsNestedType nestedType, bool isStatic, bool isAbstract, bool isSealed, CsClass baseClass, IReadOnlyList<ICsNestedModel> nestedModels, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. bool isNested Flag that determines if the container type is nested in another type definition. CsNestedType nestedType Enumeration of the type of nesting the container is. bool isStatic Flag that determines if the model is static. bool isAbstract Flag that determines if the model is abstract. bool isSealed Flag that determines if the model is sealed. CsClass baseClass The class model that is base class of this class. IReadOnlyList<ICsNestedModel> nestedModels List of nested models assigned to this container. This is an optional parameter and can be null string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties BaseClass The base class assigned to this class. This will be null if HasBase is false. Declaration public CsClass BaseClass { get; } Property Value Type Description CsClass Constructors List of the constructors implemented in this class. Declaration public IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Destructor The destructor implemented in this class. Declaration public CsMethod Destructor { get; } Property Value Type Description CsMethod Fields List of the fields implemented in this class. Declaration public IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> IsAbstract Flat that determines if this is an abstract class. Declaration public bool IsAbstract { get; } Property Value Type Description bool IsSealed Flag that determines if this class has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this class is static. Declaration public bool IsStatic { get; } Property Value Type Description bool Implements ICsNestedModel ICsClass ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetMissingInterfaceMembers(CsClass, List<MapNamespace>) CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsContainer.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsContainer.html",
    "title": "Class CsContainer | CodeFactory for Windows",
    "keywords": "Class CsContainer Data model that implements the base implement for all models that support members. Inheritance object CsModel CsContainer CsContainerWithNestedContainers CsRecord CsRecordStructure Implements ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsContainer : CsModel, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsContainer(bool, bool, bool, SourceCodeType, CsModelType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsContainerType, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsContainer Declaration protected CsContainer(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsContainerType containerType, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source file the model was loaded from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsContainerType containerType The type of container this model represents. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> ContainerType The type of container model that has been implemented. Declaration public CsContainerType ContainerType { get; } Property Value Type Description CsContainerType Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description string Events Enumeration of the events assigned to this container. If HasEvents is false this will be null. Declaration public IReadOnlyList<CsEvent> Events { get; } Property Value Type Description IReadOnlyList<CsEvent> GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList<CsGenericParameter> GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description bool HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description bool InheritedInterfaces List of the interfaces that are inherited by this container. Declaration public IReadOnlyList<CsInterface> InheritedInterfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string Members List of the members that are implemented in this container. Declaration public IReadOnlyList<CsMember> Members { get; } Property Value Type Description IReadOnlyList<CsMember> Methods List of the methods that are implemented in this container. Declaration public IReadOnlyList<CsMethod> Methods { get; } Property Value Type Description IReadOnlyList<CsMethod> ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name of the container. Declaration public string Name { get; } Property Value Type Description string Namespace The namespace the container objects belongs to. Declaration public string Namespace { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Properties List of the properties that are implemented in this container. Declaration public IReadOnlyList<CsProperty> Properties { get; } Property Value Type Description IReadOnlyList<CsProperty> Security The security scope assigned to the container. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsContainerin the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsContainerin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the container definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddToBeginningAsync(string) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration public abstract Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToBeginningAsync(string, string) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddToBeginningAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndAsync(string) Adds the source code inside of the container at the end of where members are defined in the container. Declaration public abstract Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndAsync(string, string) Adds the source code inside of the container at the end of where members are defined in the container. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddToEndAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. DeleteAsync() Deletes the definition of the container from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the container from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the container is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration public abstract Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. GetBodySourceLocationAsync() Gets the starting and ending locations of the body located in the container. Declaration public abstract Task<ISourceLocation> GetBodySourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetBodySourceLocationAsync(string) Gets the starting and ending locations of the body located in the container. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetBodySourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task<ISourceLocation> The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetBodySyntaxAsync() The source code syntax that is stored in the body of the container model. This will be null if the container was not loaded from source code. Declaration public abstract Task<string> GetBodySyntaxAsync() Returns Type Description Task<string> GetSourceLocationAsync() Gets the starting and ending locations within the document where the container is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the container is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task<ISourceLocation> The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current container with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current container with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. Implements ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsContainerExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsContainerExtensions.html",
    "title": "Class CsContainerExtensions | CodeFactory for Windows",
    "keywords": "Class CsContainerExtensions Extension management class that manages models that implement CsContainer. Inheritance object CsContainerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsContainerExtensions Methods GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) Loads all members from a target model that implements CsContainer and returns all members and the comparison hash code for each member. Declaration public static IReadOnlyList<KeyValuePair<int, CsMember>> GetComparisonMembers(this CsContainer source, MemberComparisonType comparisonType = MemberComparisonType.Base, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsContainer source The target container to load members from. MemberComparisonType comparisonType The type of hash code to build for comparision. Default comparison type is set to the base comparison. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description IReadOnlyList<KeyValuePair<int, CsMember>> List of all the hash codes and the members for each hashcode. Exceptions Type Condition ArgumentNullException Thrown if the source container is null. GetMissingInterfaceMembers(CsClass, List<MapNamespace>) Creates a list of the interface members that are not implemented in the CsClass model. Declaration public static IReadOnlyList<CsMember> GetMissingInterfaceMembers(this CsClass source, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsClass source The source model to check. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description IReadOnlyList<CsMember> List of models that are missing or an empty list if there are no missing members. Exceptions Type Condition ArgumentNullException Throws an argument null exception if the model does not exist. GetMissingInterfaceMembers(CsStructure, List<MapNamespace>) Creates a list of the interface members that are not implemented in the CsStructure model. Declaration public static IReadOnlyList<CsMember> GetMissingInterfaceMembers(this CsStructure source, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsStructure source The source model to check. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description IReadOnlyList<CsMember> List of models that are missing or an empty list if there are no missing members. Exceptions Type Condition ArgumentNullException Throws an argument null exception if the model does not exist."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsContainerType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsContainerType.html",
    "title": "Enum CsContainerType | CodeFactory for Windows",
    "keywords": "Enum CsContainerType Definition of the different types of container based members are supported by the C# source code type. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsContainerType Fields Name Description Class The container implements a class model. Interface The container implements a interface model. Record The container implements a record model. RecordStructure The container implements a record structure model. Structure The container implements a structure model. Unknown The container is of an unknown type."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsContainerWithNestedContainers.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsContainerWithNestedContainers.html",
    "title": "Class CsContainerWithNestedContainers | CodeFactory for Windows",
    "keywords": "Class CsContainerWithNestedContainers Data model that implements the base implement for all models that support members. Inheritance object CsModel CsContainer CsContainerWithNestedContainers CsClass CsInterface CsStructure Implements ICsNestedContainers ICsContainer ICsGeneric ICsNestedModel ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.AddBeforeDocsAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.DeleteDocsAsync() CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsContainerWithNestedContainers : CsContainer, ICsNestedContainers, ICsContainer, ICsGeneric, ICsNestedModel, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsContainerWithNestedContainers(bool, bool, bool, SourceCodeType, CsModelType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsContainerType, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, bool, CsNestedType, IReadOnlyList<ICsNestedModel>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsContainerWithNestedContainers Declaration protected CsContainerWithNestedContainers(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsContainerType containerType, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isNested, CsNestedType nestedType, IReadOnlyList<ICsNestedModel> nestedModels = null, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source file the model was loaded from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsContainerType containerType The type of container this model represents. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. bool isNested Flag that determines if the container type is nested in another type definition. CsNestedType nestedType Enumeration of the type of nesting the container is. IReadOnlyList<ICsNestedModel> nestedModels List of nested models assigned to this container. This is an optional parameter and can be null string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties IsNested Flag that determines if this model is nested in a parent model. Declaration public bool IsNested { get; } Property Value Type Description bool NestedClasses Classes that are nested in this container. Declaration public IReadOnlyList<CsClass> NestedClasses { get; } Property Value Type Description IReadOnlyList<CsClass> NestedEnums Enums that are nested in this container. Declaration public IReadOnlyList<CsEnum> NestedEnums { get; } Property Value Type Description IReadOnlyList<CsEnum> NestedInterfaces Interfaces that are nested in this container. Declaration public IReadOnlyList<CsInterface> NestedInterfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> NestedModels Models that are nested in the implementation of this container. Declaration public IReadOnlyList<ICsNestedModel> NestedModels { get; } Property Value Type Description IReadOnlyList<ICsNestedModel> NestedStructures Structures that are nested in this container. Declaration public IReadOnlyList<CsStructure> NestedStructures { get; } Property Value Type Description IReadOnlyList<CsStructure> NestedType Identifies the type of model that has been nested. Declaration public CsNestedType NestedType { get; } Property Value Type Description CsNestedType Implements ICsNestedContainers ICsContainer ICsGeneric ICsNestedModel ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsDelegate.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsDelegate.html",
    "title": "Class CsDelegate | CodeFactory for Windows",
    "keywords": "Class CsDelegate Data model that represents the definition of a delegate. Inheritance object CsModel CsDelegate Implements ICsDelegate ICsModel IModelStatus ICsAttributes ICsGeneric IDocumentation IParent ILookup ISourceFiles Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsDelegate : CsModel, ICsDelegate, ICsModel, IModelStatus, ICsAttributes, ICsGeneric, IDocumentation, IParent, ILookup, ISourceFiles Constructors CsDelegate(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, bool, string, string, string, IReadOnlyList<string>, string, string, bool, bool, string, CsSecurity, CsType, IReadOnlyList<CsParameter>, CsMethod, CsMethod, CsMethod, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsDelegate Declaration protected CsDelegate(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, bool hasDocumentation, string documentation, string lookupPath, string modelSourceFile, IReadOnlyList<string> sourceFiles, string name, string ns, bool hasParameters, bool isVoid, string parentPath, CsSecurity security, CsType returnType, IReadOnlyList<CsParameter> parameters, CsMethod invokeMethod, CsMethod beginInvokeMethod, CsMethod endInvokeMethod, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the delegate is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the delegate. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the delegate. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string modelSourceFile The source code file the model was created from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. string name The name of the model. string ns The namespace this delegate is assigned to. bool hasParameters Flag that determines if the delegate had parameters. bool isVoid Flag that determines if the return type is void. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. CsType returnType The type definition for the return type. IReadOnlyList<CsParameter> parameters The parameters assigned to the delegate. CsMethod invokeMethod The invoke method definition assigned to this delegate. CsMethod beginInvokeMethod The begin invoke method definition assigned to this delegate. CsMethod endInvokeMethod The end invoke method definition assigned to this delegate. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> BeginInvokeMethod The begin invoke delegate definition for this delegate. Declaration public CsMethod BeginInvokeMethod { get; } Property Value Type Description CsMethod Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description string EndInvokeMethod The end invoke delegate definition for this delegate. Declaration public CsMethod EndInvokeMethod { get; } Property Value Type Description CsMethod GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList<CsGenericParameter> GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description bool HasParameters Flag that determines if the delegate has parameters assigned to it. Declaration public bool HasParameters { get; } Property Value Type Description bool HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description bool InvokeMethod The invoke delegate definition for this delegate. Declaration public CsMethod InvokeMethod { get; } Property Value Type Description CsMethod IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description bool IsVoid Flag that determines if the delegate return is a void. Declaration public bool IsVoid { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name assigned to the this item. Declaration public string Name { get; } Property Value Type Description string Namespace The namespace the delegate is assigned to. Declaration public string Namespace { get; } Property Value Type Description string Parameters List of the parameters that have been assigned to the delegate. If HasParameters property is set to false this will be an empty list. Declaration public IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsParameter> Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel ReturnType The type information about the return type assigned to the delegate. Declaration public CsType ReturnType { get; } Property Value Type Description CsType Security The security scope that has been assigned to this item. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the delegate definition not before the documentation or attributes that are assigned. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. DeleteAsync() Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration public abstract Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. Implements ICsDelegate ICsModel IModelStatus ICsAttributes ICsGeneric IDocumentation IParent ILookup ISourceFiles Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsEnum.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsEnum.html",
    "title": "Class CsEnum | CodeFactory for Windows",
    "keywords": "Class CsEnum Data model that represents an enumeration definition. Inheritance object CsModel CsEnum Implements ICsEnum ICsNestedModel ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsEnum : CsModel, ICsEnum, ICsNestedModel, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsEnum(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, bool, string, string, string, IReadOnlyList<string>, string, string, CsSecurity, IReadOnlyList<CsEnumValue>, bool, CsNestedType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsEnum Declaration protected CsEnum(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string parentPath, bool hasDocumentation, string documentation, string lookupPath, string modelSourceFile, IReadOnlyList<string> sourceFiles, string name, string ns, CsSecurity security, IReadOnlyList<CsEnumValue> values, bool isNested, CsNestedType nestedType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string parentPath The fully qualified lookup path for the parent model to this one. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. string name The name of the model. string ns CsSecurity security The security scope assigned to this model. IReadOnlyList<CsEnumValue> values The enumeration values assigned to this enumeration. bool isNested Flag that determines if the container type is nested in another type definition. CsNestedType nestedType Enumeration of the type of nesting the container is. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description string HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description bool IsNested Flag that determines if this model is nested in a parent model. Declaration public bool IsNested { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name of the enumeration. Declaration public string Name { get; } Property Value Type Description string Namespace The namespace the enumeration belongs to. Declaration public string Namespace { get; } Property Value Type Description string NestedType Identifies the type of model that has been nested. Declaration public CsNestedType NestedType { get; } Property Value Type Description CsNestedType Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Security The security scope assigned to the enumeration. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Values List of the enumeration values implemented in this enumeration. Declaration public IReadOnlyList<CsEnumValue> Values { get; } Property Value Type Description IReadOnlyList<CsEnumValue> Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsEnumin the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsEnumin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the enum definition not before the documentation or attributes that are assigned. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddToBeginningAsync(string) Adds the source code inside of the enumeration at the beginning of where members are defined in the enumeration. Declaration public abstract Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndAsync(string) Adds the source code inside of the enumeration at the end of where members are defined in the enumeration. Declaration public abstract Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. DeleteAsync() Deletes the definition of the enumeration from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the enumeration has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the enumeration from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the enumeration is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the enumeration has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration public abstract Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. GetBodySourceLocationAsync() Gets the starting and ending locations of the body located in the enum. Declaration public abstract Task<ISourceLocation> GetBodySourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location in the enum. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the enumeration is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the enumeration. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the enumeration is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the enumeration defined in. Returns Type Description Task<ISourceLocation> The source location for the enumeration. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current enumeration with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current enumeration with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. Implements ICsEnum ICsNestedModel ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods GenerateCSharpEnumExtensions.GenerateCSharpEnumValue(CsEnum, string) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsEnumValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsEnumValue.html",
    "title": "Class CsEnumValue | CodeFactory for Windows",
    "keywords": "Class CsEnumValue Data model that represents a defined value for an enumeration. Inheritance object CsModel CsEnumValue Implements ICsEnumValue ICsModel IModelStatus ICsAttributes IDocumentation IParent ILookup ISourceFiles Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsEnumValue : CsModel, ICsEnumValue, ICsModel, IModelStatus, ICsAttributes, IDocumentation, IParent, ILookup, ISourceFiles Constructors CsEnumValue(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, bool, string, string, string, IReadOnlyList<string>, string, string, CsSecurity, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsEnumValue Declaration protected CsEnumValue(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string parentPath, bool hasDocumentation, string documentation, string lookupPath, string modelSourceFile, IReadOnlyList<string> sourceFiles, string name, string value, CsSecurity security, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string parentPath The fully qualified lookup path for the parent model to this one. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. string name The name of the model. string value The value assigned to the enumeration value. CsSecurity security The security scope assigned to this model. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description string HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name of the enumeration value. Declaration public string Name { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Security The security scope assigned to the enumeration value. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Value The value that has been assigned to the enumeration value. Declaration public string Value { get; } Property Value Type Description string Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsEnumValuein the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsEnumValuein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the member definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. DeleteAsync() Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the delegate from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration public abstract Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the delegate is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current delegate with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. Implements ICsEnumValue ICsModel IModelStatus ICsAttributes IDocumentation IParent ILookup ISourceFiles Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsEvent.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsEvent.html",
    "title": "Class CsEvent | CodeFactory for Windows",
    "keywords": "Class CsEvent Data model that represents the definition of an event. Inheritance object CsModel CsMember CsEvent Implements ICsEvent ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsMember.HasAttributes CsMember.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.AddBeforeDocsAsync(string) CsMember.AddAfterDocsAsync(string) CsMember.ReplaceDocsAsync(string) CsMember.DeleteDocsAsync() CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.ModelSourceFile CsMember.AddBeforeAsync(string, string) CsMember.AddBeforeAsync(string) CsMember.AddBeforeAsync(string, bool) CsMember.AddAfterAsync(string, string) CsMember.AddAfterAsync(string) CsMember.DeleteAsync(string) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(string) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(string, string) CsMember.ReplaceAsync(string) CsMember.CommentOutSyntaxAsync(string) CsMember.GetMemberSyntaxAsync() CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsEvent : CsMember, ICsEvent, ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsEvent(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, IReadOnlyList<string>, bool, string, string, string, string, CsSecurity, bool, bool, bool, bool, bool, CsDelegate, CsMethod, CsMethod, CsMethod, CsType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsEvent Declaration protected CsEvent(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool isAbstract, bool isVirtual, bool isOverride, bool isSealed, bool isStatic, CsDelegate eventHandlerDelegate, CsMethod raiseMethod, CsMethod addMethod, CsMethod removeMethod, CsType eventType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. bool isAbstract Flag that determines if the model is abstract. bool isVirtual Flag that determines if the model is virtual. bool isOverride Flag that determines if the model is overridden. bool isSealed Flag that determines if the model is sealed. bool isStatic Flag that determines if the model is static. CsDelegate eventHandlerDelegate Delegate model for this event. CsMethod raiseMethod Model for the raise method for this event. CsMethod addMethod Model for the add method for this event. CsMethod removeMethod Model for the remove method for this event. CsType eventType The type definition that supports this event. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties AddMethod The method that adds a subscription to the event. Declaration public CsMethod AddMethod { get; } Property Value Type Description CsMethod EventHandlerDelegate The event handler delegate used by the event. Declaration public CsDelegate EventHandlerDelegate { get; } Property Value Type Description CsDelegate EventType The event handler type that is assigned to the event. Declaration public CsType EventType { get; } Property Value Type Description CsType IsAbstract Flag that determines if the event has been implemented as an abstract event. Declaration public bool IsAbstract { get; } Property Value Type Description bool IsOverride Flag that determines if the event has been overridden. Declaration public bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the event has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if the event is static. Declaration public bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the event is implemented as virtual. Declaration public bool IsVirtual { get; } Property Value Type Description bool RaiseMethod The method definition to raise the event. Declaration public CsMethod RaiseMethod { get; } Property Value Type Description CsMethod RemoveMethod The method that removes a subscription to the event. Declaration public CsMethod RemoveMethod { get; } Property Value Type Description CsMethod Implements ICsEvent ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods CsEventExtensions.GetComparisonHashCode(CsEvent, bool, bool, bool, List<MapNamespace>, string, string) GenerateCSharpCsEventExtensions.GenerateCSharpEventDeclaration(CsEvent, NamespaceManager, List<MapNamespace>, string, bool, CsSecurity, bool, bool, bool, bool, bool, bool, bool, string, string) GenerateCSharpCsEventExtensions.GenerateCSharpInterfaceEventDeclaration(CsEvent, NamespaceManager, List<MapNamespace>, string, string) CsMemberExtensions.GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsEventExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsEventExtensions.html",
    "title": "Class CsEventExtensions | CodeFactory for Windows",
    "keywords": "Class CsEventExtensions Extension methods that support the CsEvent model. Inheritance object CsEventExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsEventExtensions Methods GetComparisonHashCode(CsEvent, bool, bool, bool, List<MapNamespace>, string, string) Creates a comparision hashcode from a CsMethod model. Declaration public static int GetComparisonHashCode(this CsEvent source, bool includeSecurity = true, bool includeKeywords = true, bool includeAbstractKeyword = false, List<MapNamespace> mappedNamespaces = null, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsEvent source Source model to use to build the hash. bool includeSecurity Optional parameter that includes security in the comparision hash, default value is true. bool includeKeywords Optional parameter that includes keywords in the comparision hash, default value is true. bool includeAbstractKeyword Optional parameter that includes abstract keyword in the comparision hash, default value is false. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description int Computed hash value for the method signature."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsField.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsField.html",
    "title": "Class CsField | CodeFactory for Windows",
    "keywords": "Class CsField Data model that represents a field definition. Inheritance object CsModel CsMember CsField Implements ICsField ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsMember.HasAttributes CsMember.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.AddBeforeDocsAsync(string) CsMember.AddAfterDocsAsync(string) CsMember.ReplaceDocsAsync(string) CsMember.DeleteDocsAsync() CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.ModelSourceFile CsMember.AddBeforeAsync(string, string) CsMember.AddBeforeAsync(string) CsMember.AddBeforeAsync(string, bool) CsMember.AddAfterAsync(string, string) CsMember.AddAfterAsync(string) CsMember.DeleteAsync(string) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(string) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(string, string) CsMember.ReplaceAsync(string) CsMember.CommentOutSyntaxAsync(string) CsMember.GetMemberSyntaxAsync() CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsField : CsMember, ICsField, ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsField(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, IReadOnlyList<string>, bool, string, string, string, string, CsSecurity, bool, bool, bool, string, CsType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsField Declaration protected CsField(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool isReadOnly, bool isStatic, bool isConstant, string constantValue, CsType dataType, string sourceDocument, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. bool isReadOnly Flag that determines if the model is read only. bool isStatic Flag that determines if the model is a static definition. bool isConstant Flag that determines if the field is a constant definition. string constantValue The value assigned to the field if it is a constant definition. CsType dataType The type definition for the field. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties ConstantValue The value that was assigned to the constant. Will return as the string representation of the value. Declaration public string ConstantValue { get; } Property Value Type Description string DataType The data type assigned to the field. Declaration public CsType DataType { get; } Property Value Type Description CsType IsConstant Flag that determines if the field is a constant. Declaration public bool IsConstant { get; } Property Value Type Description bool IsReadOnly Flag that determines if this field is set to readonly. Declaration public bool IsReadOnly { get; } Property Value Type Description bool IsStatic Flag that determines if the field is set to be static. Declaration public bool IsStatic { get; } Property Value Type Description bool Implements ICsField ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods CsFieldExtensions.GetComparisonHashCode(CsField, CsSecurity, bool, List<MapNamespace>, bool, string, string) GenerateCSharpCsFieldExtensions.GenerateCSharpFieldDeclaration(CsField, NamespaceManager, List<MapNamespace>, bool, CsSecurity, bool, string, string) CsMemberExtensions.GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsFieldExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsFieldExtensions.html",
    "title": "Class CsFieldExtensions | CodeFactory for Windows",
    "keywords": "Class CsFieldExtensions Extension methods that support the CsField model. Inheritance object CsFieldExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsFieldExtensions Methods GetComparisonHashCode(CsField, CsSecurity, bool, List<MapNamespace>, bool, string, string) Creates a comparision hashcode from a CsMethod model. Declaration public static int GetComparisonHashCode(this CsField source, CsSecurity targetSecurity = CsSecurity.Unknown, bool includeKeywords = true, List<MapNamespace> mappedNamespaces = null, bool useCamelCase = false, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsField source Source model to use to build the hash. CsSecurity targetSecurity Optional parameter that determines the target security to set field to for comparision purposes, default is unknown which will use the current security. bool includeKeywords Optional parameter that includes keywords in the comparision hash, default value is true. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool useCamelCase string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description int Computed hash value for the method signature."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsGenericParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsGenericParameter.html",
    "title": "Class CsGenericParameter | CodeFactory for Windows",
    "keywords": "Class CsGenericParameter Data model that represents the a generic parameter definition. Inheritance object CsModel CsGenericParameter Implements ICsGenericParameter ICsModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsGenericParameter : CsModel, ICsGenericParameter, ICsModel, IModelStatus Constructors CsGenericParameter(bool, bool, bool, SourceCodeType, CsModelType, bool, bool, bool, bool, bool, IReadOnlyList<CsType>, CsType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsGenericParameter Declaration protected CsGenericParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, bool hasOutKeyword, bool hasNewConstraint, bool hasClassConstraint, bool hasStructConstraint, bool hasConstraintTypes, IReadOnlyList<CsType> constrainingTypes, CsType type, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. bool hasOutKeyword Flag that determines if parameter has out keyword assigned. bool hasNewConstraint Flag that determines if generic parameter supports new keyword. bool hasClassConstraint flag that determines if the generic parameter has a constraint requirement to classes. bool hasStructConstraint Flag that determines if the generic parameter has a constraint requirement to structures. bool hasConstraintTypes Flag that determines if the generic parameter has additional type constraints. IReadOnlyList<CsType> constrainingTypes List of of additional constraints the generic parameter supports. CsType type The type definition for the generic type string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties ConstrainingTypes The constraining types the generic parameter must ad hear to. If there are no constraining types an empty list will be returned. Declaration public IReadOnlyList<CsType> ConstrainingTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasClassConstraint Flag that determines if the generic parameter has a constraint that it must implement from a class. Declaration public bool HasClassConstraint { get; } Property Value Type Description bool HasConstraintTypes Flag that determines if the generic parameter has constraining types the parameter must ad hear to. Declaration public bool HasConstraintTypes { get; } Property Value Type Description bool HasNewConstraint Flag that determines if the generic parameter has a constraint that is must support construction of a new type. Declaration public bool HasNewConstraint { get; } Property Value Type Description bool HasOutKeyword Flag that determines if the generic parameter uses the out keyword. Declaration public bool HasOutKeyword { get; } Property Value Type Description bool HasStructConstraint Flag that determines if the generic parameter has a constraint that is must implement from a structure. Declaration public bool HasStructConstraint { get; } Property Value Type Description bool Type The type definition of the generic parameter. Declaration public CsType Type { get; } Property Value Type Description CsType Implements ICsGenericParameter ICsModel IModelStatus Extension Methods GenerateCSharpGenericParameterExtensions.GenerateCSharpGenericWhereClauseSignature(CsGenericParameter, NamespaceManager, List<MapNamespace>)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsInterface.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsInterface.html",
    "title": "Class CsInterface | CodeFactory for Windows",
    "keywords": "Class CsInterface Data model that represents in definition of an interface. Inheritance object CsModel CsContainer CsContainerWithNestedContainers CsInterface Implements ICsNestedModel ICsInterface ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsContainerWithNestedContainers.NestedModels CsContainerWithNestedContainers.NestedClasses CsContainerWithNestedContainers.NestedInterfaces CsContainerWithNestedContainers.NestedStructures CsContainerWithNestedContainers.NestedEnums CsContainerWithNestedContainers.NestedType CsContainerWithNestedContainers.IsNested CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.AddBeforeDocsAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.DeleteDocsAsync() CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsInterface : CsContainerWithNestedContainers, ICsNestedModel, ICsInterface, ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsInterface(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, bool, CsNestedType, IReadOnlyList<ICsNestedModel>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsInterface Declaration protected CsInterface(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isNested, CsNestedType nestedType, IReadOnlyList<ICsNestedModel> nestedModels = null, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. bool isNested Flag that determines if the container type is nested in another type definition. CsNestedType nestedType Enumeration of the type of nesting the container is. IReadOnlyList<ICsNestedModel> nestedModels List of nested models assigned to this container. This is an optional parameter and can be null string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Implements ICsNestedModel ICsInterface ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsKnownLanguageType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsKnownLanguageType.html",
    "title": "Enum CsKnownLanguageType | CodeFactory for Windows",
    "keywords": "Enum CsKnownLanguageType Enumeration that identifies well know types used by the C# language. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsKnownLanguageType Fields Name Description Boolean The well known data type of bool Character The well know data type of char that stores a character. DateTime Well known type that holds a date and a time DateTime Decimal The well known data type is a decimal floating point number ±1.0 x 10-28 to ±7.9228 x 10 to the 28 power decimal Double The well known data type is a double precision floating point number ±5.0 × 10−324 to ±1.7 × 10 to the 308 power double NotWellKnown The language type definition is not well known (Default Value) Object Implements the well known type object. PlatformPointer Well known type that represents a pointer that is platform specific UIntPtr Pointer Well known type that is used to represent the location of a pointer or handle IntPtr Signed16BitInteger The well known data type is a signed 16 bit integer -32,768 to 32,767 short Signed32BitInteger The well known data type is a signed 32 bit integer -2,147,483,648 to 2,147,483,647 int Signed64BitInteger The well known data type is a signed 64 bit integer -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 long Signed8BitInteger The well know data type is a signed 8 bit integer -128 to 127 sbyte. Single The well known data type is a single precision floating point number ±1.5 x 10−45 to ±3.4 x 10 to the 38 power float String Well know type that contains an immutable sequence of UTF-16 code units string UnSigned8BitInteger The well know data type is an unsigned 8 bit integer 0 to 255 byte Unsigned16BitInteger The well know data type is a unsigned 16 bit integer 0 to 65,535 ushort Unsigned32BitInteger The well know data type is a unsigned 32 bit integer 0 to 4,294,967,295 uint Unsigned64BitInteger The well known data type is a unsigned 64 bit integer 0 to 18,446,744,073,709,551,615 ulong Void Is a special return type that specifies no value will be returned. void"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMember.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMember.html",
    "title": "Class CsMember | CodeFactory for Windows",
    "keywords": "Class CsMember Data model that builds the base class definition for all member types. Inheritance object CsModel CsMember CsEvent CsField CsMethod CsProperty Implements ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsMember : CsModel, ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsMember(bool, bool, bool, SourceCodeType, CsModelType, IReadOnlyList<CsAttribute>, string, IReadOnlyList<string>, bool, string, string, string, string, CsSecurity, CsMemberType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsMember Declaration protected CsMember(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, IReadOnlyList<CsAttribute> attributes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, CsMemberType memberType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of model that represents this member. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. CsMemberType memberType The type of member this model represents. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description string HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string MemberType The type of member the model is. Declaration public CsMemberType MemberType { get; } Property Value Type Description CsMemberType ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name assigned to the member. Declaration public string Name { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Security The security scope that has been assigned to the member. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsMemberin the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsMemberin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the member definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. CommentOutSyntaxAsync(string) Comments out the member hosting syntax. Declaration public abstract Task<CsSource> CommentOutSyntaxAsync(string commentSyntax = \"//\") Parameters Type Name Description string commentSyntax Optional parameter that sets the syntax used to comment out the member defaults to '//' Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the member has been commented out. This will return the current instance if the model was not loaded from source. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the member from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the member from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the member is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration public abstract Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. GetMemberSyntaxAsync() Gets the syntax that defined the member model. Declaration public abstract Task<string> GetMemberSyntaxAsync() Returns Type Description Task<string> The syntax that makes up the member or null if the syntax cannot be loaded. This will be null if the model was not loaded from source code. GetSourceLocationAsync() Gets the starting and ending locations within the document where the member is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the member is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the member defined in. Returns Type Description Task<ISourceLocation> The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current member with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current member with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. Implements ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods CsMemberExtensions.GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMemberExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMemberExtensions.html",
    "title": "Class CsMemberExtensions | CodeFactory for Windows",
    "keywords": "Class CsMemberExtensions Extension methods that support model that implement the CsMember interface. Inheritance object CsMemberExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsMemberExtensions Methods GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) Gets the hash code for a formatted model signature using the C# format. Declaration public static int GetMemberComparisonHashCode(this CsMember source, MemberComparisonType comparisonType = MemberComparisonType.Base, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsMember source The sources ICsModel model. MemberComparisonType comparisonType The type of comparision format to use when generating the hashcode. Default is set to the base comparision type. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description int The has code of the formatted model. Exceptions Type Condition ArgumentNullException This is thrown if the model is null."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMemberType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMemberType.html",
    "title": "Enum CsMemberType | CodeFactory for Windows",
    "keywords": "Enum CsMemberType Enumeration of the types of members that are supported in the c# source code type. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsMemberType Fields Name Description Event The member is a event model. Field The member is a field model. Method The member is a method model. Property The member is a property model. Unknown The member type is currently not known."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMethod.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMethod.html",
    "title": "Class CsMethod | CodeFactory for Windows",
    "keywords": "Class CsMethod Data model that represents a method definition. Inheritance object CsModel CsMember CsMethod Implements ICsMethod ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup ICsGeneric Inherited Members CsMember.HasAttributes CsMember.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.AddBeforeDocsAsync(string) CsMember.AddAfterDocsAsync(string) CsMember.ReplaceDocsAsync(string) CsMember.DeleteDocsAsync() CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.ModelSourceFile CsMember.AddBeforeAsync(string, string) CsMember.AddBeforeAsync(string) CsMember.AddBeforeAsync(string, bool) CsMember.AddAfterAsync(string, string) CsMember.AddAfterAsync(string) CsMember.DeleteAsync(string) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(string) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(string, string) CsMember.ReplaceAsync(string) CsMember.CommentOutSyntaxAsync(string) CsMember.GetMemberSyntaxAsync() CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsMethod : CsMember, ICsMethod, ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup, ICsGeneric Constructors CsMethod(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, IReadOnlyList<string>, bool, string, string, string, string, CsSecurity, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, bool, bool, bool, bool, bool, bool, bool, bool, bool, CsMethodType, CsType, IReadOnlyList<CsParameter>, SyntaxType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsMethod Declaration protected CsMethod(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, bool hasParameters, bool isAbstract, bool isVirtual, bool isSealed, bool isOverride, bool isStatic, bool isVoid, bool isAsync, bool isExtension, CsMethodType methodType, CsType returnType, IReadOnlyList<CsParameter> parameters, SyntaxType contentSyntax = SyntaxType.Unknown, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string modelSourceFile Source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. bool isGeneric Flag that determines if the method is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the method. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the method. bool hasParameters Flag that determines if the method had parameters. bool isAbstract Flag that determines if the model is abstract. bool isVirtual Flag that determines if the model is virtual. bool isSealed Flag that determines if the model is sealed. bool isOverride Flag that determines if the model is overridden. bool isStatic Flag that determines if the model is static. bool isVoid Flag that determines if the return type is void. bool isAsync Flag that determines if the method has the async keyword assigned. bool isExtension Flag that determines if the method is an extension method. CsMethodType methodType The type of method that was implemented. CsType returnType The type definition for the return type. IReadOnlyList<CsParameter> parameters The parameters assigned to the method. SyntaxType contentSyntax How syntax is stored in the method. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList<CsGenericParameter> GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasParameters Flag that determines if the method has parameters assigned to it. Declaration public bool HasParameters { get; } Property Value Type Description bool HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description bool IsAbstract Flag that determines if the method has been implemented as abstract. Declaration public bool IsAbstract { get; } Property Value Type Description bool IsAsync Flag that determines if the method implements the Async keyword. Declaration public bool IsAsync { get; } Property Value Type Description bool IsExtension Flag that determines if the method is an extension method. Declaration public bool IsExtension { get; } Property Value Type Description bool IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description bool IsOverride Flag that determines if the method has been overridden. Declaration public bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the method has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this is a static method. Declaration public bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the method has been implemented as virtual. Declaration public bool IsVirtual { get; } Property Value Type Description bool IsVoid Flag that determines if the methods return type is void. Declaration public bool IsVoid { get; } Property Value Type Description bool MethodType Determines the type of method that was loaded into this model. Declaration public CsMethodType MethodType { get; } Property Value Type Description CsMethodType Parameters Enumeration of the parameters that have been assigned to the method. If HasParameters property is set to false this will be null. Declaration public IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsParameter> ReturnType The type information about the return type assigned to the method. if flag IsVoid is true then the return type will be set to null. Declaration public CsType ReturnType { get; } Property Value Type Description CsType SyntaxContent Determines how the internal syntax for the method is stored. Declaration public SyntaxType SyntaxContent { get; } Property Value Type Description SyntaxType Methods AddToBeginningBodySyntaxAsync(string) Adds the source code to the beginning of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSource> AddToBeginningBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToBeginningBodySyntaxAsync(string, string) Adds the source code to the beginning of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddToBeginningBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToEndBodySyntaxAsync(string) Adds the source code to the end of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSource> AddToEndBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToEndBodySyntaxAsync(string, string) Adds the source code to the end of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddToEndBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. DeleteBodySyntaxAsync() Deletes the source syntax from the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSource> DeleteBodySyntaxAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. DeleteBodySyntaxAsync(string) Deletes the source syntax from the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteBodySyntaxAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. GetBodySyntaxAsync() The source code syntax that is stored in the body of the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Body. Declaration public abstract Task<string> GetBodySyntaxAsync() Returns Type Description Task<string> GetBodySyntaxListAsync() The source code syntax that is stored in the body of the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Body. This will return each line of code that has a line feed or return as a separate string. Declaration public abstract Task<List<string>> GetBodySyntaxListAsync() Returns Type Description Task<List<string>> GetExpressionSyntaxAsync() Gets the expression that has been assigned to the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Expression. Declaration public abstract Task<string> GetExpressionSyntaxAsync() Returns Type Description Task<string> ReplaceBodySyntaxAsync(string) Replaces the syntax in the body of the method. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSource> ReplaceBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceBodySyntaxAsync(string, string) Replaces the syntax in the body of the method. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the body of the method. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceExpressionAsync(string) Replaces the expression assigned to the method with the provided source code. The ContentSyntax must be set to Expression or else an exception will be thrown. Declaration public abstract Task<CsSource> ReplaceExpressionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that will replace the original expression. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceExpressionAsync(string, string) Replaces the expression assigned to the method with the provided source code. The ContentSyntax must be set to Expression or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceExpressionAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that will replace the original expression. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. Implements ICsMethod ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup ICsGeneric Extension Methods CsMemberExtensions.GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) CsMethodExtentions.GetComparisonHashCode(CsMethod, bool, bool, bool, List<MapNamespace>, bool, string, string, string, string) GenerateCSharpMethodExtensions.GenerateCSharpMethodName(CsMethod, bool, string, string, string, string) GenerateCSharpMethodExtensions.GenerateCSharpMethodSignature(CsMethod, NamespaceManager, bool, bool, CsSecurity, bool, bool, bool, bool, bool, bool, bool, List<MapNamespace>, bool, string, string, bool, string, string, string) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMethodExtentions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMethodExtentions.html",
    "title": "Class CsMethodExtentions | CodeFactory for Windows",
    "keywords": "Class CsMethodExtentions Extension methods that support the CsMethod model. Inheritance object CsMethodExtentions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsMethodExtentions Methods GetComparisonHashCode(CsMethod, bool, bool, bool, List<MapNamespace>, bool, string, string, string, string) Creates a comparision hashcode from a CsMethod model. Declaration public static int GetComparisonHashCode(this CsMethod source, bool includeSecurity = true, bool includeKeywords = true, bool includeAbstractKeyword = false, List<MapNamespace> mappedNamespaces = null, bool forceAsyncDefinition = false, string asyncPrefix = null, string asyncSuffix = null, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsMethod source Source model to use to build the hash. bool includeSecurity Optional parameter that includes security in the comparision hash, default value is true. bool includeKeywords Optional parameter that includes keywords in the comparision hash, default value is true. bool includeAbstractKeyword Optional parameter that includes abstract keyword in the comparision hash, default value is false. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool forceAsyncDefinition Optional parameter that forces the method to confirm to an async signature, default value is false. string asyncPrefix Optional parameter that is used with forceAsyncDefinition that includes an expected prefix on the method name, default value is null. string asyncSuffix Optional parameter that is used with forceAsyncDefinition that includes an expected suffix on the method name, default value is Async. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description int Computed hash value for the method signature."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMethodType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMethodType.html",
    "title": "Enum CsMethodType | CodeFactory for Windows",
    "keywords": "Enum CsMethodType Enumeration of the type of methods that are supported in C#. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsMethodType Fields Name Description Add The method is a add method that adds subscription to a event. Constructor The method is a constructor for a supporting class or structure. Destructor The method is a destructor for a supporting class. Get The method supports the get functionality from a property. Init The method supports the init functionality from a property or an indexer. Invoke The method supports the Invoke functionality from a delegate. Local The method is a local method and imbedded in another method Member The method is a member of a supporting interface, class or structure. PartialDefinition This method is the definition for a partial method. PartialImplementation This method is the implementation for a partial method. Raise The method supports the raise functionality from an event. Remove The method is a remove method that removes subscription from an event. Set The method supports the set functionality from a property. Unknown The type of method is unknown"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsModel.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsModel.html",
    "title": "Class CsModel | CodeFactory for Windows",
    "keywords": "Class CsModel Base class that all C# compiler based data models derive from. Inheritance object CsModel CsAttribute CsAttributeParameter CsAttributeParameterValue CsContainer CsDelegate CsEnum CsEnumValue CsGenericParameter CsMember CsNamespace CsParameter CsParameterDefaultValue CsSource CsTupleTypeParameter CsType CsUsingStatement Implements ICsModel IModelStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsModel : ICsModel, IModelStatus Constructors CsModel(bool, bool, bool, SourceCodeType, CsModelType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsModel Declaration protected CsModel(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Fields LocalModelErrors Model field that stores the models load exceptions. Declaration protected readonly IReadOnlyList<ModelLoadException> LocalModelErrors Field Value Type Description IReadOnlyList<ModelLoadException> ModelStore Model field used to lookup models that were created during the compile or reference lookup using the C# compiler. Declaration protected readonly ModelStore<ICsModel> ModelStore Field Value Type Description ModelStore<ICsModel> Properties HasErrors Flag that determines if this model or one of the children of this model has an error. Declaration public bool HasErrors { get; } Property Value Type Description bool IsLoaded Flag that determines if this model was able to load. Declaration public bool IsLoaded { get; } Property Value Type Description bool Language The target language this model was loaded from. Declaration public SourceCodeType Language { get; } Property Value Type Description SourceCodeType LoadedFromSource Flag that determines if this model was loaded from source code or was loaded through reflects or symbol libraries. Declaration public bool LoadedFromSource { get; } Property Value Type Description bool ModelType The type of c# model that is implemented. Declaration public CsModelType ModelType { get; } Property Value Type Description CsModelType SourceDocument The fully qualified path to the document that was used to load the model from source. This will be populated if the model was loaded from source. Declaration public string SourceDocument { get; } Property Value Type Description string Methods GetErrors() Gets the ModelLoadException from the current model and all child models of this model. Declaration public abstract IReadOnlyList<ModelLoadException> GetErrors() Returns Type Description IReadOnlyList<ModelLoadException> Returns a IReadOnlyList<T> of the ModelLoadException exceptions or an empty list if no exceptions exist. GetModel(string) Searchs for an existing C# model that has been loaded with the load of the source code. Declaration public CsModel GetModel(string lookupPath) Parameters Type Name Description string lookupPath The lookup path that is assigned to a loaded model. Returns Type Description CsModel Returns the model as the base CsModel type. GetModel<T>(string) Searchs for an existing C# model that has been loaded with the load of the source code. Declaration public T GetModel<T>(string lookupPath) where T : class, ICsModel Parameters Type Name Description string lookupPath The lookup path that is assigned to a loaded model. Returns Type Description T Returns the model as the identified type it will either return the instance or null if it is not found or not the correct type. Type Parameters Name Description T The target CsModel type to cast to before returning. LookupModel(string) Helper method that looks up a code factory model from the model store. Declaration [Obsolete(\"LookupModel is obsolete and will be removed in later versions of the framework. Use GetModel or GetModel<T>\", false)] protected CsModel LookupModel(string path) Parameters Type Name Description string path The fully qualified path of the model to be loaded from the model store. Returns Type Description CsModel The loaded model or null if the model could not be loaded, or found. Implements ICsModel IModelStatus"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsModelStore.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsModelStore.html",
    "title": "Class CsModelStore | CodeFactory for Windows",
    "keywords": "Class CsModelStore Model storage class used to store c# code factory models, to be used to pass data to factories. Inheritance object CsModelStore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public class CsModelStore Constructors CsModelStore() Creates a new instance of the CsModelStore and initializes the store for data to be added. Declaration public CsModelStore() CsModelStore(ICsModel) Creates a new instance of the CsModelStore and sets a single model in the store. Declaration public CsModelStore(ICsModel model) Parameters Type Name Description ICsModel model The model to be added to the store. CsModelStore(Dictionary<string, IEnumerable<ICsModel>>) Creates a new instance of the CsModelStore and loads all the data for all the categories. Declaration public CsModelStore(Dictionary<string, IEnumerable<ICsModel>> allModels) Parameters Type Name Description Dictionary<string, IEnumerable<ICsModel>> allModels All the model data to be added to the store. Properties Model The single ICsModel that is provided for the T4 Template. Declaration public ICsModel Model { get; } Property Value Type Description ICsModel Methods AddModels(string, IEnumerable<ICsModel>) Adds many C# models to the store by category. Declaration public void AddModels(string category, IEnumerable<ICsModel> models) Parameters Type Name Description string category Name used to keep track of the models that are stored together. IEnumerable<ICsModel> models The models stored by the target category. Models(string) Gets the models from a target category. Declaration public IEnumerable<ICsModel> Models(string category) Parameters Type Name Description string category Category to get models for. Returns Type Description IEnumerable<ICsModel> Returns a enumeration of the models. If no models were found then an empty enumeration is returned. SetModel(ICsModel) Sets the single model to be shared with a factory. Declaration public void SetModel(ICsModel model) Parameters Type Name Description ICsModel model Target model to be used in a factory."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsModelType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsModelType.html",
    "title": "Enum CsModelType | CodeFactory for Windows",
    "keywords": "Enum CsModelType The code factory model types that represent the C# source code type. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsModelType Fields Name Description Attribute Model is a attribute implementation. AttributeParameter Model is a attribute parameter implementation. AttributeParameterValue Model stores a parameter value from an attribute. Class Model is a class implementation. Delegate Model is a delegate definition. DelegateParameter Model is a delegate parameter definition. DelegateParameterValue Model is a delegate parameter value. Enum Model stores enumeration definition. EnumValue Model that stores a unique value in an enumeration. Event Model is a event definition. Field Model is a field definition. GenericParameter Model is a generic parameter that belongs to a generic type. Interface Model is a interface implementation. Method Model is a method definition. Namespace Model is a namespace definition. Parameter Model is a parameter definition. ParameterDefaultValue Model that stores default value information for a parameter. Property Model is a property definition. Record Model stores a record implementation. RecordStructure Model stores a record structure implementation. Source Model that hosts all the source models that have been loaded. Structure Model is a structure implementation. TupleTypeParameter Model is a tuple type parameter that belongs to a tuple type. Type Model is a type definition. Unknown The model is currently not know by the C# source type. Using Model is a using statement."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsNamespace.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsNamespace.html",
    "title": "Class CsNamespace | CodeFactory for Windows",
    "keywords": "Class CsNamespace Data model that represents the definition of a namespace. Inheritance object CsModel CsNamespace Implements ICsNamespace ICsModel IModelStatus IParent ILookup ISourceFiles Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsNamespace : CsModel, ICsNamespace, ICsModel, IModelStatus, IParent, ILookup, ISourceFiles Constructors CsNamespace(bool, bool, bool, SourceCodeType, string, string, IReadOnlyList<string>, string, string, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsNamespace Declaration protected CsNamespace(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, string modelSourceFile, IReadOnlyList<string> sourceFiles, string name, string parentPath, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. string lookupPath The fully qualified lookup path for the model to be used in the model store. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles The source files where the namespace is defined in. string name The fully qualified name of the namespace. string parentPath The fully qualified path for the model that is a parent of this model. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name of the namespace. Declaration public string Name { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Implements ICsNamespace ICsModel IModelStatus IParent ILookup ISourceFiles"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsNestedType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsNestedType.html",
    "title": "Enum CsNestedType | CodeFactory for Windows",
    "keywords": "Enum CsNestedType Enumeration that identifies the target model type that is nested. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsNestedType Fields Name Description Class This nested type is a Class implementation Enum This nested type is a Enum implementation Interface This nested type is a Interface implementation NotNested This model is currently not nested in any other type. Structure This nested type is a Struct implementation"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsParameter.html",
    "title": "Class CsParameter | CodeFactory for Windows",
    "keywords": "Class CsParameter Data model that represents a parameter definition. Inheritance object CsModel CsParameter Implements ICsParameter ICsModel IModelStatus ICsAttributes IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsParameter : CsModel, ICsParameter, ICsModel, IModelStatus, ICsAttributes, IParent, ILookup Constructors CsParameter(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, string, bool, bool, bool, bool, bool, bool, string, CsType, CsParameterDefaultValue, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsParameter Declaration protected CsParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string lookupPath, string name, bool isOut, bool isRef, bool isParams, bool isOptional, bool isGenericParameter, bool hasDefaultValue, string parentPath, CsType parameterType, CsParameterDefaultValue defaultValue, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes Attributes assigned to this model. string lookupPath The fully qualified path of the model that is stored in the model store. string name The name of the parameter. bool isOut Parameter is assigned the out keyword. bool isRef Parameter is assigned the ref keyword. bool isParams Parameter supports a parameter array. bool isOptional Parameter is optional. bool isGenericParameter Is a generic parameter. bool hasDefaultValue Parameter has an assigned default value. string parentPath The fully qualified path name for the parent model to this model. CsType parameterType The type that this parameter supports. CsParameterDefaultValue defaultValue The default value assigned to this parameter. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> DefaultValue The default value assigned to the parameter. This will be null if the HasDefaultValue property is set to false. Declaration public CsParameterDefaultValue DefaultValue { get; } Property Value Type Description CsParameterDefaultValue HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDefaultValue Flag that determines if the parameter has a default value. Declaration public bool HasDefaultValue { get; } Property Value Type Description bool IsGenericParameter Flag that determines if the parameter is a generic place holder. Declaration public bool IsGenericParameter { get; } Property Value Type Description bool IsOptional Flag that determines if the parameter is optional. Declaration public bool IsOptional { get; } Property Value Type Description bool IsOut Flag that determines if the parameter is assigned the out keyword. Declaration public bool IsOut { get; } Property Value Type Description bool IsParams Flag that determines if the parameter is an parameter array. Declaration public bool IsParams { get; } Property Value Type Description bool IsRef Flag that determines if the parameter is assigned the ref keyword. Declaration public bool IsRef { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string Name The name of the parameter. Declaration public string Name { get; } Property Value Type Description string ParameterType The data type assigned to the parameter. Declaration public CsType ParameterType { get; } Property Value Type Description CsType Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Implements ICsParameter ICsModel IModelStatus ICsAttributes IParent ILookup"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsParameterDefaultValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsParameterDefaultValue.html",
    "title": "Class CsParameterDefaultValue | CodeFactory for Windows",
    "keywords": "Class CsParameterDefaultValue Data model that represents the default value for a parameter. Inheritance object CsModel CsParameterDefaultValue Implements ICsParameterDefaultValue ICsModel IModelStatus IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsParameterDefaultValue : CsModel, ICsParameterDefaultValue, ICsModel, IModelStatus, IParent, ILookup Constructors CsParameterDefaultValue(bool, bool, bool, SourceCodeType, string, ParameterDefaultValueType, string, string, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsParameterDefaultValue Declaration protected CsParameterDefaultValue(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, ParameterDefaultValueType valueType, string value, string parentPath, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. string lookupPath The fully qualified path for the model in the model store. ParameterDefaultValueType valueType The type of default value assigned to the parameter. string value The value assigned as the default value. string parentPath The fully qualified path name for the parent model to this model. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Value If the default value is a literal value the value will be set, otherwise it will be set to null. Declaration public string Value { get; } Property Value Type Description string ValueType The type of default value assigned to the parameter. Declaration public ParameterDefaultValueType ValueType { get; } Property Value Type Description ParameterDefaultValueType Implements ICsParameterDefaultValue ICsModel IModelStatus IParent ILookup Extension Methods GenerateCSharpParameterExtensions.GenerateCSharpParameterDefaultValue(CsParameterDefaultValue, CsType)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsProperty.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsProperty.html",
    "title": "Class CsProperty | CodeFactory for Windows",
    "keywords": "Class CsProperty Data model that represents the definition of a property. Inheritance object CsModel CsMember CsProperty Implements ICsProperty ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsMember.HasAttributes CsMember.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.AddBeforeDocsAsync(string) CsMember.AddAfterDocsAsync(string) CsMember.ReplaceDocsAsync(string) CsMember.DeleteDocsAsync() CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.ModelSourceFile CsMember.AddBeforeAsync(string, string) CsMember.AddBeforeAsync(string) CsMember.AddBeforeAsync(string, bool) CsMember.AddAfterAsync(string, string) CsMember.AddAfterAsync(string) CsMember.DeleteAsync(string) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(string) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(string, string) CsMember.ReplaceAsync(string) CsMember.CommentOutSyntaxAsync(string) CsMember.GetMemberSyntaxAsync() CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsProperty : CsMember, ICsProperty, ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsProperty(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, IReadOnlyList<string>, bool, string, string, string, string, CsSecurity, bool, CsMethod, bool, CsMethod, bool, CsMethod, bool, bool, bool, bool, bool, CsType, CsSecurity, CsSecurity, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsProperty Declaration protected CsProperty(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool hasGet, CsMethod getMethod, bool hasSet, CsMethod setMethod, bool hasInit, CsMethod initMethod, bool isAbstract, bool isVirtual, bool isSealed, bool isOverride, bool isStatic, CsType propertyType, CsSecurity getSecurity, CsSecurity setSecurity, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. bool hasGet Flag that determines if the property implements a getter. CsMethod getMethod The get accessor method assigned to the property bool hasSet Flag that determines if the property implements a setter. CsMethod setMethod The set accessor method assigned to the property. bool hasInit Flag that determines if the property implements a init accessor. CsMethod initMethod The init accessor method assigned to the property. bool isAbstract Flag that determines if the model is abstract. bool isVirtual Flag that determines if the model is virtual. bool isSealed Flag that determines if the model is sealed. bool isOverride Flag that determines if the model is overridden. bool isStatic Flag that determines if the model is static. CsType propertyType The type the property supports. CsSecurity getSecurity The security access assigned to the getter. CsSecurity setSecurity The security access assigned to the setter. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties GetMethod Provides access to the get method statement in the property. This will be null if the property does not have a get statement. Declaration public CsMethod GetMethod { get; } Property Value Type Description CsMethod GetSecurity The security scope that is assigned to the get accessor. Make sure you check the HasGet to determine if the property supports get operations. Declaration public CsSecurity GetSecurity { get; } Property Value Type Description CsSecurity HasGet Flag that determines if this property supports get access. Declaration public bool HasGet { get; } Property Value Type Description bool HasInit Flag that determines if this property supports init accessor. Declaration public bool HasInit { get; } Property Value Type Description bool HasSet Flag that determines if this property supports set access. Declaration public bool HasSet { get; } Property Value Type Description bool InitMethod Provides access to the init method statement in the property. This will be null the property does not have a init statement. Declaration public CsMethod InitMethod { get; } Property Value Type Description CsMethod IsAbstract Flag that determines if the property is implemented as an abstract property. Declaration public bool IsAbstract { get; } Property Value Type Description bool IsOverride Flag that determines if the property has been overridden. Declaration public bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the property has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if the property has been implemented as static. Declaration public bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the property is implemented as virtual. Declaration public bool IsVirtual { get; } Property Value Type Description bool PropertyType The source data type that is managed by this property. Declaration public CsType PropertyType { get; } Property Value Type Description CsType SetMethod Provides access to the set method statement in the property. This will be null if the property does not have a set statement. Declaration public CsMethod SetMethod { get; } Property Value Type Description CsMethod SetSecurity The security scope that is assigned to the set accessor. Make sure you check the HasSet to determine if the property supports set operations. Declaration public CsSecurity SetSecurity { get; } Property Value Type Description CsSecurity Methods LoadGetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the GetMethod property to access the get method details.\", false)] public abstract Task<string> LoadGetBodySyntaxAsync() Returns Type Description Task<string> LoadSetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the SetMethod property to access the set method details.\", false)] public abstract Task<string> LoadSetBodySyntaxAsync() Returns Type Description Task<string> Implements ICsProperty ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods CsMemberExtensions.GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) CsPropertyExtensions.GetComparisonHashCode(CsProperty, bool, bool, List<MapNamespace>, CsSecurity, CsSecurity, CsSecurity, string, string) GenerateCSharpCsPropertyExtensions.GenerateCSharpDefaultPropertySignature(CsProperty, NamespaceManager, List<MapNamespace>, bool, bool, CsSecurity, CsSecurity, CsSecurity, string, string) GenerateCSharpCsPropertyExtensions.GenerateCSharpDefaultValue(CsProperty) GenerateCSharpCsPropertyExtensions.GenerateCSharpGetStatement(CsProperty, CsSecurity, CsSecurity) GenerateCSharpCsPropertyExtensions.GenerateCSharpPropertyDeclaration(CsProperty, NamespaceManager, List<MapNamespace>, bool, bool, bool, CsSecurity, string, string) GenerateCSharpCsPropertyExtensions.GenerateCSharpSetStatement(CsProperty, CsSecurity, CsSecurity) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsPropertyExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsPropertyExtensions.html",
    "title": "Class CsPropertyExtensions | CodeFactory for Windows",
    "keywords": "Class CsPropertyExtensions Inheritance object CsPropertyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsPropertyExtensions Methods GetComparisonHashCode(CsProperty, bool, bool, List<MapNamespace>, CsSecurity, CsSecurity, CsSecurity, string, string) Creates a comparision hashcode from a CsProperty model. Declaration public static int GetComparisonHashCode(this CsProperty source, bool includeKeywords = true, bool includeAbstractKeyword = false, List<MapNamespace> mappedNamespaces = null, CsSecurity propertySecurity = CsSecurity.Unknown, CsSecurity getSecurity = CsSecurity.Unknown, CsSecurity setSecurity = CsSecurity.Unknown, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsProperty source Source model to use to build the hash. bool includeKeywords Optional parameter that includes keywords in the comparision hash, default value is true. bool includeAbstractKeyword Optional parameter that includes abstract keyword in the comparision hash, default value is false. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. CsSecurity propertySecurity Optional parameter that sets the target security for the property, default is unknown which uses the property current security. CsSecurity getSecurity Optional parameter that sets the target security for the properties getter, default is unknown which uses the property current security. CsSecurity setSecurity Optional parameter that sets the target security for the properties setter, default is unknown which uses the property current security. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description int Computed hash value for the method signature."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsRecord.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsRecord.html",
    "title": "Class CsRecord | CodeFactory for Windows",
    "keywords": "Class CsRecord Data model that represents a record implementation. Inheritance object CsModel CsContainer CsRecord Implements ICsRecord ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.AddBeforeDocsAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.DeleteDocsAsync() CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsRecord : CsContainer, ICsRecord, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsRecord(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, bool, bool, bool, CsRecord, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsRecord Declaration protected CsRecord(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isStatic, bool isAbstract, bool isSealed, CsRecord baseRecord, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. bool isStatic Flag that determines if the model is static. bool isAbstract Flag that determines if the model is abstract. bool isSealed Flag that determines if the model is sealed. CsRecord baseRecord The record model that is base record of this record. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties BaseRecord The base record assigned to this record. This will be null if HasBase is false. Declaration public CsRecord BaseRecord { get; } Property Value Type Description CsRecord Constructors List of the constructors implemented in this record. Declaration public IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Destructor The destructor implemented in this record. Declaration public CsMethod Destructor { get; } Property Value Type Description CsMethod Fields List of the fields implemented in this record. Declaration public IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> IsAbstract Flat that determines if this is an abstract record. Declaration public bool IsAbstract { get; } Property Value Type Description bool IsSealed Flag that determines if this record has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this record is static. Declaration public bool IsStatic { get; } Property Value Type Description bool Implements ICsRecord ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsRecordStructure.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsRecordStructure.html",
    "title": "Class CsRecordStructure | CodeFactory for Windows",
    "keywords": "Class CsRecordStructure Data model that represents the definition of a record structure. Inheritance object CsModel CsContainer CsRecordStructure Implements ICsRecordStructure ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.AddBeforeDocsAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.DeleteDocsAsync() CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsRecordStructure : CsContainer, ICsRecordStructure, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsRecordStructure(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsRecordStructure Declaration protected CsRecordStructure(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Constructors List of the constructors for this record structure. Declaration public IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Fields List of the fields for this record structure. Declaration public IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> Implements ICsRecordStructure ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsSecurity.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsSecurity.html",
    "title": "Enum CsSecurity | CodeFactory for Windows",
    "keywords": "Enum CsSecurity Enumeration that determines the security scope of the C# model being represented. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsSecurity Fields Name Description Internal Security is set to internal access Private Security is set to private access Protected Security is set to protected access ProtectedInternal Security is set to protected internal access ProtectedOrInternal Security is set to projected or internal access Public Security is set to public access Unknown Security scope is unknown Extension Methods GenerateCSharpCsSecurityExtensions.GenerateCSharpKeyword(CsSecurity)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsSource.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsSource.html",
    "title": "Class CsSource | CodeFactory for Windows",
    "keywords": "Class CsSource Data model that represents source code. Inheritance object CsModel CsSource Implements ICsSource ICsModel IModelStatus IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsSource : CsModel, ICsSource, ICsModel, IModelStatus, IParent, ILookup Constructors CsSource(bool, bool, bool, SourceCodeType, string, string, string, IReadOnlyList<CsUsingStatement>, IReadOnlyList<CsInterface>, IReadOnlyList<CsClass>, IReadOnlyList<CsStructure>, IReadOnlyList<CsRecord>, IReadOnlyList<CsRecordStructure>, IReadOnlyList<CsDelegate>, IReadOnlyList<CsEnum>, IReadOnlyList<CsNamespace>, bool, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsSource Declaration protected CsSource(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, string sourceDocument, string parentPath, IReadOnlyList<CsUsingStatement> namespaceReferences, IReadOnlyList<CsInterface> interfaces, IReadOnlyList<CsClass> classes, IReadOnlyList<CsStructure> structures, IReadOnlyList<CsRecord> records, IReadOnlyList<CsRecordStructure> recordStructures, IReadOnlyList<CsDelegate> delegates, IReadOnlyList<CsEnum> enums, IReadOnlyList<CsNamespace> namespaces, bool hostedInProject, string projectName, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. string lookupPath The fully qualified name of the model to be used with the model store. string sourceDocument The fully qualified path to the source document that loaded this model. string parentPath The fully qualified path to the parent model of this model. IReadOnlyList<CsUsingStatement> namespaceReferences The namespace reference in the source. IReadOnlyList<CsInterface> interfaces The interfaces that are define in this source. IReadOnlyList<CsClass> classes The classes that are defined in this source. IReadOnlyList<CsStructure> structures The structures that are defined in this source. IReadOnlyList<CsRecord> records The records that are defined in this source. IReadOnlyList<CsRecordStructure> recordStructures The record structures that are defined in this source. IReadOnlyList<CsDelegate> delegates The delegates that are defined in this source. IReadOnlyList<CsEnum> enums The enumerations defined in this source. IReadOnlyList<CsNamespace> namespaces The namespaces that are defined in this source. bool hostedInProject string projectName ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Classes The classes that were defined in the source. Declaration public IReadOnlyList<CsClass> Classes { get; } Property Value Type Description IReadOnlyList<CsClass> Delegates The delegates that were defined in the source. Declaration public IReadOnlyList<CsDelegate> Delegates { get; } Property Value Type Description IReadOnlyList<CsDelegate> Enums The enumerations that were defined in the source. Declaration public IReadOnlyList<CsEnum> Enums { get; } Property Value Type Description IReadOnlyList<CsEnum> HostedInProject Flag that determines if the source code was hosted in a project. Declaration public bool HostedInProject { get; } Property Value Type Description bool Interfaces The interfaces that were defined in the source. Declaration public IReadOnlyList<CsInterface> Interfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string NamespaceReferences The namespaces that are used as references to access other libraries not hosted in the source document. Declaration public IReadOnlyList<CsUsingStatement> NamespaceReferences { get; } Property Value Type Description IReadOnlyList<CsUsingStatement> Namespaces The namespaces that were defined in the source. Declaration public IReadOnlyList<CsNamespace> Namespaces { get; } Property Value Type Description IReadOnlyList<CsNamespace> Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel ProjectName The name of the project the source is hosted in. This will be null if this source is not hosted in a project. Declaration public string ProjectName { get; } Property Value Type Description string RecordStructures The record structures that were defined in the source. Declaration public IReadOnlyList<CsRecordStructure> RecordStructures { get; } Property Value Type Description IReadOnlyList<CsRecordStructure> Records The records that were defined in the source. Declaration public IReadOnlyList<CsRecord> Records { get; } Property Value Type Description IReadOnlyList<CsRecord> Structures The structures that were defined in the source. Declaration public IReadOnlyList<CsStructure> Structures { get; } Property Value Type Description IReadOnlyList<CsStructure> Methods AddToBeginningAsync(string) Adds the source code to the beginning of the ICsSource model. Declaration public abstract Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToEndAsync(string) Adds the source code the end of the ICsSource model. Declaration public abstract Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the content from the ICsSource model. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string) Replaces the content of the ICsSource model. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsSource ICsModel IModelStatus IParent ILookup Extension Methods CsSourceExtensions.AddMissingNamespaces(CsSource, IEnumerable<CsMember>, string) CsSourceExtensions.AddUsingStatementAsync(CsSource, string, string) CsSourceExtensions.HasUsingStatement(CsSource, string, string)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsSourceExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsSourceExtensions.html",
    "title": "Class CsSourceExtensions | CodeFactory for Windows",
    "keywords": "Class CsSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the CsSource model. Inheritance object CsSourceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsSourceExtensions Methods AddMissingNamespaces(CsSource, IEnumerable<CsMember>, string) Scans members for types that are accessible at the member definition level. If the namespace is missing will add it to the source code file. Declaration public static Task<CsSource> AddMissingNamespaces(this CsSource source, IEnumerable<CsMember> members, string excludeNamespace = null) Parameters Type Name Description CsSource source The source model to be updated. IEnumerable<CsMember> members The members to be checked for type definitions. string excludeNamespace A target namespace that should be excluded from adding to the using statement list. This is generally the target namespace of the code file. This is optional Returns Type Description Task<CsSource> Updated Source Model with all the missing namespaces added as using statements. AddUsingStatementAsync(CsSource, string, string) Extension method that will add a using statement to target source code. If the using statement already exists it will simply return the existing source. Declaration public static Task<CsSource> AddUsingStatementAsync(this CsSource source, string nameSpace, string alias = null) Parameters Type Name Description CsSource source The source code to update. string nameSpace The namespace to be added to the using statement. string alias Optional parameter to set if you want an alias assigned to the namespace. Returns Type Description Task<CsSource> The updated source code or the original source code if no changes were necessary. HasUsingStatement(CsSource, string, string) Extension method that determines if the source code has a target namespace as a using statement. Declaration public static bool HasUsingStatement(this CsSource source, string nameSpace, string alias = null) Parameters Type Name Description CsSource source The source code to search through. string nameSpace The namespace to search for in the using statements. string alias Optional parameter that captures the alias of the namespace used in the using statement. Returns Type Description bool Flag that determines if it has the using statement."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsStructure.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsStructure.html",
    "title": "Class CsStructure | CodeFactory for Windows",
    "keywords": "Class CsStructure Data model that represents the definition of a structure. Inheritance object CsModel CsContainer CsContainerWithNestedContainers CsStructure Implements ICsNestedModel ICsStructure ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsContainerWithNestedContainers.NestedModels CsContainerWithNestedContainers.NestedClasses CsContainerWithNestedContainers.NestedInterfaces CsContainerWithNestedContainers.NestedStructures CsContainerWithNestedContainers.NestedEnums CsContainerWithNestedContainers.NestedType CsContainerWithNestedContainers.IsNested CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.AddBeforeDocsAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.DeleteDocsAsync() CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsStructure : CsContainerWithNestedContainers, ICsNestedModel, ICsStructure, ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsStructure(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, bool, CsNestedType, IReadOnlyList<ICsNestedModel>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsStructure Declaration protected CsStructure(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isNested, CsNestedType nestedType, IReadOnlyList<ICsNestedModel> nestedModels = null, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. bool isNested Flag that determines if the container type is nested in another type definition. CsNestedType nestedType Enumeration of the type of nesting the container is. IReadOnlyList<ICsNestedModel> nestedModels List of nested models assigned to this container. This is an optional parameter and can be null string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Constructors List of the constructors for this structure. Declaration public IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Fields List of the fields for this structure. Declaration public IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> Implements ICsNestedModel ICsStructure ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) CsContainerExtensions.GetMissingInterfaceMembers(CsStructure, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsTupleTypeParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsTupleTypeParameter.html",
    "title": "Class CsTupleTypeParameter | CodeFactory for Windows",
    "keywords": "Class CsTupleTypeParameter Data model that represents a tuple type parameter. Inheritance object CsModel CsTupleTypeParameter Implements ICsTupleTypeParameter ICsModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsTupleTypeParameter : CsModel, ICsTupleTypeParameter, ICsModel, IModelStatus Constructors CsTupleTypeParameter(bool, bool, bool, SourceCodeType, bool, string, CsType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsModel Declaration protected CsTupleTypeParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, bool hasDefaultName, string name, CsType tupleType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. bool hasDefaultName Does the type parameter use a distinct name. string name The distinct name assigned to the type. CsType tupleType The type definition of the tuple type. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties HasDefaultName Flag that determines if the named assigned to the tuple was system generated or defined in source. Declaration public bool HasDefaultName { get; } Property Value Type Description bool Name The name assigned to the tuple parameter. Declaration public string Name { get; } Property Value Type Description string TupleType The model with the type definition assigned to the tuple. Declaration public CsType TupleType { get; } Property Value Type Description CsType Implements ICsTupleTypeParameter ICsModel IModelStatus"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsType.html",
    "title": "Class CsType | CodeFactory for Windows",
    "keywords": "Class CsType Data model that represents the definition of a type. Inheritance object CsModel CsType Implements ICsType ICsModel IModelStatus ICsGeneric Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsType : CsModel, ICsType, ICsModel, IModelStatus, ICsGeneric Constructors CsType(bool, bool, bool, SourceCodeType, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, string, bool, string, bool, bool, bool, bool, bool, bool, IReadOnlyList<int>, bool, bool, bool, bool, IReadOnlyList<CsTupleTypeParameter>, CsKnownLanguageType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsType Declaration protected CsType(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string name, string ns, bool isWellKnownType, string valueTypeDefaultValue, bool isValueType, bool supportsDisposable, bool isInterface, bool isStructure, bool isClass, bool isArray, IReadOnlyList<int> arrayDimensions, bool isGenericPlaceHolder, bool isEnum, bool isDelegate, bool isTuple, IReadOnlyList<CsTupleTypeParameter> tupleTypes, CsKnownLanguageType wellKnownType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. bool isGeneric Flag that determines if the type is generic. bool hasStrongTypesInGenerics Flag that determines if the generics are strong types or placeholders. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the type. IReadOnlyList<CsType> genericTypes The type definitions for the generic implementation. string name The name of the type. string ns The namespace the type belongs to. bool isWellKnownType Is the type one of the well known types for the language. string valueTypeDefaultValue The default value if the type is a value type. bool isValueType Flag that determines if it is a value type. bool supportsDisposable Flag that determines if the type implements IDisposable interface. bool isInterface Flag that determines if the type is an interface definition. bool isStructure Flag that determines if the type is a structure definition. bool isClass Flag that determines if the type is a class definition. bool isArray Flag that determines if the type is also an array. IReadOnlyList<int> arrayDimensions The dimensions assigned to the array. bool isGenericPlaceHolder Flag that determines if the type is a generic place holder definition. bool isEnum Flag that determines if the type is an enumeration. bool isDelegate Flag that determines if the type is a delegate definition. bool isTuple Flag that determines if the type is a tuple. IReadOnlyList<CsTupleTypeParameter> tupleTypes The type information for each part of the tuple. CsKnownLanguageType wellKnownType The well known type from the language if it is well known. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties ArrayDimensions Gets a list of the dimensions that are assigned to the array. This will contain more then one value if the array is a jagged array. This will be empty if the type is not an array. Declaration public IReadOnlyList<int> ArrayDimensions { get; } Property Value Type Description IReadOnlyList<int> GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList<CsGenericParameter> GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description bool IsArray Flag that determines if the type is an array of the target type. Declaration public bool IsArray { get; } Property Value Type Description bool IsClass Flag that determines if the type is a class. Declaration public bool IsClass { get; } Property Value Type Description bool IsDelegate Flag that determines if the type is a delegate. Declaration public bool IsDelegate { get; } Property Value Type Description bool IsEnum Flag that determines if the type is a enumeration. Declaration public bool IsEnum { get; } Property Value Type Description bool IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description bool IsGenericPlaceHolder Flag that determines if the type is a generic place holder definition. Declaration public bool IsGenericPlaceHolder { get; } Property Value Type Description bool IsInterface Flag that determines if the type is an interface. Declaration public bool IsInterface { get; } Property Value Type Description bool IsStructure Flag that determines if the type is a structure. Declaration public bool IsStructure { get; } Property Value Type Description bool IsTuple Flag that determine if the type is a Tuple Declaration public bool IsTuple { get; } Property Value Type Description bool IsValueType Flag that determines if the type is a value type. Declaration public bool IsValueType { get; } Property Value Type Description bool IsWellKnownType Flag that determines if the type is one of the well know data types of the language. Declaration public bool IsWellKnownType { get; } Property Value Type Description bool Name The name of the type. Declaration public string Name { get; } Property Value Type Description string Namespace The namespace the type belongs to. Declaration public string Namespace { get; } Property Value Type Description string SupportsDisposable Flag that determines if the type supports the interface IDisposable. Declaration public bool SupportsDisposable { get; } Property Value Type Description bool TupleTypes List of the types that are implemented in the Tuple. This will an empty list if the type is not a tuple. Declaration public IReadOnlyList<CsTupleTypeParameter> TupleTypes { get; } Property Value Type Description IReadOnlyList<CsTupleTypeParameter> ValueTypeDefaultValue The default value for well known value data types. This will be null if the value is not a well known value type. Declaration public string ValueTypeDefaultValue { get; } Property Value Type Description string WellKnownType Enumeration of the target well known type this type represents. Declaration public CsKnownLanguageType WellKnownType { get; } Property Value Type Description CsKnownLanguageType Methods GetClassModel() Loads the full ICsClass model from the type definition. Declaration public CsClass GetClassModel() Returns Type Description CsClass Return the fully loaded model or an empty model if the type is not a class. GetClassModelData() Loads the full ICsClass model from the type definition. Declaration protected abstract CsClass GetClassModelData() Returns Type Description CsClass Return the fully loaded model or an empty model if the type is not a class. GetDelegateModel() Loads the full ICsDelegate model from the type definition. Declaration public CsDelegate GetDelegateModel() Returns Type Description CsDelegate Return the fully loaded model or an empty model if the type is not a delegate. GetDelegateModelData() Loads the full ICsDelegate model from the type definition. Declaration protected abstract CsDelegate GetDelegateModelData() Returns Type Description CsDelegate Return the fully loaded model or an empty model if the type is not a delegate. GetEnumModel() Loads the full ICsEnum model from the type definition. Declaration public CsEnum GetEnumModel() Returns Type Description CsEnum Return the fully loaded model or an empty model if the type is not an enumeration. GetEnumModelData() Logic to load the full model data for an enumeration. Declaration protected abstract CsEnum GetEnumModelData() Returns Type Description CsEnum Return the fully loaded model or an empty model if the type is not an enumeration. GetInterfaceModel() Loads the full CsInterface model from the type definition. Declaration public CsInterface GetInterfaceModel() Returns Type Description CsInterface Return the fully loaded model or an empty model if the type is not an interface. GetInterfaceModelData() Loads the full ICsInterface model from the type definition. Declaration protected abstract CsInterface GetInterfaceModelData() Returns Type Description CsInterface Return the fully loaded model or an empty model if the type is not an interface. GetStructureModel() Loads the full ICsStructure model from the type definition. Declaration public CsStructure GetStructureModel() Returns Type Description CsStructure Return the fully loaded model or an empty model if the type is not a structure. GetStructureModelData() Loads the full ICsStructure model from the type definition. Declaration protected abstract CsStructure GetStructureModelData() Returns Type Description CsStructure Return the fully loaded model or an empty model if the type is not a structure. Implements ICsType ICsModel IModelStatus ICsGeneric Extension Methods CsTypeExtensions.IsTaskOnlyType(CsType) CsTypeExtensions.IsTaskType(CsType) CsTypeExtensions.TaskReturnType(CsType) CsTypeExtensions.TypeInNamespace(CsType, string) CsTypeExtensions.TypeInTargetNamespace(CsType, string) GenereateCSharpTypeExtensions.GenerateCSharpArraySignature(CsType) GenereateCSharpTypeExtensions.GenerateCSharpDefaultValue(CsType) GenereateCSharpTypeExtensions.GenerateCSharpTupleSignature(CsType, NamespaceManager, List<MapNamespace>) GenereateCSharpTypeExtensions.GenerateCSharpTypeName(CsType, NamespaceManager, List<MapNamespace>) GenereateCSharpTypeExtensions.GenerateCSharpTypeNameRemoveNullableDefinition(CsType, NamespaceManager, List<MapNamespace>) GenereateCSharpTypeExtensions.GenerateCSharpValueSyntax(CsType, string)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsTypeExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsTypeExtensions.html",
    "title": "Class CsTypeExtensions | CodeFactory for Windows",
    "keywords": "Class CsTypeExtensions Extension methods that support the CsType model. Inheritance object CsTypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsTypeExtensions Methods IsTaskOnlyType(CsType) Determines if the type is a task type. Declaration public static bool IsTaskOnlyType(this CsType source) Parameters Type Name Description CsType source the source type to validate. Returns Type Description bool True if the type is a standard task or a generic task implementation. False otherwise. Exceptions Type Condition CodeFactoryException If no type definition is provided. IsTaskType(CsType) Determines if the type is a task type. Declaration public static bool IsTaskType(this CsType source) Parameters Type Name Description CsType source The source type to validate. Returns Type Description bool True if the type is a standard task or a generic task implementation. False otherwise. TaskReturnType(CsType) Returns the type definition for the target type that is supported by a task type. If the type is not a task type it will return the type definition. Declaration public static CsType TaskReturnType(this CsType source) Parameters Type Name Description CsType source source type to check. Returns Type Description CsType The target type or null if the type is void or a non generic task type. Exceptions Type Condition CodeFactoryException If no type definition is provided or the generic task type has no type definition. TypeInNamespace(CsType, string) Checks to see if the type or any generic types in the type implement the target namespace. Declaration public static bool TypeInNamespace(this CsType source, string nameSpace) Parameters Type Name Description CsType source Property to check string nameSpace target namespace to check for. Returns Type Description bool True if found in the type or generic parameters assigned to the type, false if not found. TypeInTargetNamespace(CsType, string) Checks the type is stored in a target namespace. Declaration public static bool TypeInTargetNamespace(this CsType source, string targetNamespace) Parameters Type Name Description CsType source Type to check string targetNamespace Target namespace to check in Returns Type Description bool True the type is in the target namespace, false if not. Exceptions Type Condition CodeFactoryException Could not access the target namespace data."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsUsingStatement.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsUsingStatement.html",
    "title": "Class CsUsingStatement | CodeFactory for Windows",
    "keywords": "Class CsUsingStatement Data model that represents a namespace reference in source code. Inheritance object CsModel CsUsingStatement Implements ICsUsingStatement ICsModel IModelStatus IParent ILookup IUsingStatementNamespace Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsUsingStatement : CsModel, ICsUsingStatement, ICsModel, IModelStatus, IParent, ILookup, IUsingStatementNamespace Constructors CsUsingStatement(bool, bool, bool, SourceCodeType, string, string, bool, string, string, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsUsingStatement Declaration protected CsUsingStatement(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, string referenceNamespace, bool hasAlias, string alias, string parentPath, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. string lookupPath Fully qualified path for the model to be stored in the model store. string referenceNamespace The full namespace being referenced. bool hasAlias Flag that determines if the namespace is referenced by a alias name. string alias The alias name for the referenced namespace. this will be null when HasAlias is false string parentPath Fully qualified lookup path for the parent model to this model. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Alias The alias assigned to the namespace being imported. This will be null if the is false. Declaration public string Alias { get; } Property Value Type Description string HasAlias Flag that determines if the namespace reference has an alias. Declaration public bool HasAlias { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel ReferenceNamespace The target namespace that is being imported into the sources scope. Declaration public string ReferenceNamespace { get; } Property Value Type Description string Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the using statement from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the using statement from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the using statement is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the using statement is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the using statement is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the using statement defined in. Returns Type Description Task<ISourceLocation> The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current using statement with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current using statement with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsUsingStatement ICsModel IModelStatus IParent ILookup IUsingStatementNamespace"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.CommonContextualKeywords.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.CommonContextualKeywords.html",
    "title": "Class CommonContextualKeywords | CodeFactory for Windows",
    "keywords": "Class CommonContextualKeywords Syntax formatting for common keywords that are contextual in nature and not reserved words in the C# language. They will belong to one or more target libraries. Inheritance object CommonContextualKeywords Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.FormattedSyntax Assembly: CodeFactory.WinVs.dll Syntax public static class CommonContextualKeywords Fields Add Keyword to defining a custom event accessor. Declaration public const string Add = \"add\" Field Value Type Description string Alias Keyword to assign an alias name to reference types in a target assembly. Declaration public const string Alias = \"alias\" Field Value Type Description string Ascending Keyword to denote an ascending sort order from smallest to largest in an order by clause in a LINQ expression. Declaration public const string Ascending = \"ascending\" Field Value Type Description string Async Keyword that denotes the method is implemented as an async operation and is always paired with one or more await keywords. Declaration public const string Async = \"async\" Field Value Type Description string Await Keyword that denotes an async operation is executing and waiting for the result of the operation. Always used with one Async keyword decloration. Declaration public const string Await = \"await\" Field Value Type Description string By Keyword that is used in a grouping clause how the returned items should be grouped. This is used in LINQ syntax. Declaration public const string By = \"by\" Field Value Type Description string Descending Keyword to denote an descending sort order from largest to smallest in an order by clause in a LINQ expression. Declaration public const string Descending = \"descending\" Field Value Type Description string Dynamic Keyword that is used by variables that skips compile time checking. Declaration public const string Dynamic = \"dynamic\" Field Value Type Description string From Keyword that denotes the source of a an expression. This is used in LINQ expressions. Declaration public const string From = \"from\" Field Value Type Description string Get Keyword that defines an accessor method for properties or indexers. Declaration public const string Get = \"get\" Field Value Type Description string Global Keyword that denotes a global scope namespace. Declaration public const string Global = \"global\" Field Value Type Description string Group Keyword that defines a grouping operation in a LINQ expression. Declaration public const string Group = \"group\" Field Value Type Description string Into Keyword that creates a temporary named identifier for the results of a group, join or select clause in a LINQ expression. Declaration public const string Into = \"into\" Field Value Type Description string Join Keyword that defines the start of a join operation in a LINQ expression. Declaration public const string Join = \"join\" Field Value Type Description string KeywordEquals Keyword that is used in join clauses to denotes the two target values are equal. This is used in LINQ expressions. Declaration public const string KeywordEquals = \"equals\" Field Value Type Description string Let Keyword that stores the results of a sub expression used in LINQ expressions. Declaration public const string Let = \"let\" Field Value Type Description string NameOf Keyword operation that gets the name of the variable, type, or member. Declaration public const string NameOf = \"nameof\" Field Value Type Description string On Keyword using in join operations used to specify a join condition. This is used in LINQ expressions. Declaration public const string On = \"on\" Field Value Type Description string OrderBy Keyword used to set the return order definition from a LINQ expression. Declaration public const string OrderBy = \"orderby\" Field Value Type Description string Partial Keyword that defines that a class or method definition will be split across at least two code files. Declaration public const string Partial = \"partial\" Field Value Type Description string Remove Keyword that defines an event accessor method that removes a subscription from a target event. Declaration public const string Remove = \"remove\" Field Value Type Description string Select Keyword that defines the collection of data, used in LINQ expressions. Declaration public const string Select = \"select\" Field Value Type Description string Set Keyword that defines an accessor method for properties and indexers. Declaration public const string Set = \"set\" Field Value Type Description string Value Keyword that denotes the value that has been passed to a set accessor. Declaration public const string Value = \"value\" Field Value Type Description string Var Keyword that defines a local variable used within the scope of a method body. Declaration public const string Var = \"var\" Field Value Type Description string When Keyword that is used a validation condition in switch statements. (Note: Available in C# 7.0 and later). Also used as a validation condition with catch statements. (Note: Available in C# 6.0 and later). Declaration public const string When = \"when\" Field Value Type Description string Where Keyword used to start the definition of constraining condition on a generic type. Also used a evaluation to determine what data will be returned from a LINQ expression. Declaration public const string Where = \"where\" Field Value Type Description string Yield Keyword used to denote in an iterator. Used with return and break statements. Declaration public const string Yield = \"yield\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.html",
    "title": "Namespace CodeFactory.WinVs.Models.CSharp.FormattedSyntax | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Models.CSharp.FormattedSyntax Classes CommonContextualKeywords Syntax formatting for common keywords that are contextual in nature and not reserved words in the C# language. They will belong to one or more target libraries. Keywords Data class that contains the C# formatted syntax for keywords. Security Data class that defines the syntax for security scope within the C# language. Symbols Data class that provides the syntax to common symbols used in the definition of C# source code. WellKnownTypes Data class that holds the c# syntax definition for well know data types."
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Keywords.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Keywords.html",
    "title": "Class Keywords | CodeFactory for Windows",
    "keywords": "Class Keywords Data class that contains the C# formatted syntax for keywords. Inheritance object Keywords Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.FormattedSyntax Assembly: CodeFactory.WinVs.dll Syntax public static class Keywords Fields Abstract Keyword for an abstraction Declaration public const string Abstract = \"abstract\" Field Value Type Description string As Keyword for type conversion using an 'as' statement Declaration public const string As = \"as\" Field Value Type Description string Base Keyword for usage of the base keyword used with constructors Declaration public const string Base = \"base\" Field Value Type Description string Break Keyword for exiting a running loop. Declaration public const string Break = \"break\" Field Value Type Description string Case Keyword for a particular item to be evaluated in a switch statement. Declaration public const string Case = \"case\" Field Value Type Description string Catch Keyword that captures an exception used with a try statement. Declaration public const string Catch = \"catch\" Field Value Type Description string Checked Keyword to check math operations are within bounds of the target type. Declaration public const string Checked = \"checked\" Field Value Type Description string Class Keyword that defines a class. Declaration public const string Class = \"class\" Field Value Type Description string Constant Keyword that denotes the field is a constant value. Declaration public const string Constant = \"const\" Field Value Type Description string Continue Keyword that manages control flow in a loop and tell the control to continue operation at the beginning of the loop. Declaration public const string Continue = \"continue\" Field Value Type Description string Default Keyword to denote the default label in a switch statement, also used to return the default value of a type. Declaration public const string Default = \"default\" Field Value Type Description string Delegate Keyword to know the definition of a delegate method. Declaration public const string Delegate = \"delegate\" Field Value Type Description string Do Keyword to define an expression check to be true in order for the loop to continue execution. Declaration public const string Do = \"do\" Field Value Type Description string Else Keyword to cause execution of an alternate set of logic when an if statement is not true. Declaration public const string Else = \"else\" Field Value Type Description string Enum Keyword to begin the definition of an enumeration type. Declaration public const string Enum = \"enum\" Field Value Type Description string Event Keyword to begin the definition of an event. Declaration public const string Event = \"event\" Field Value Type Description string Explicit Keyword that denotes a data conversion that can throw an error or lose information. Declaration public const string Explicit = \"explicit\" Field Value Type Description string Extern Keyword used to declare a method that is implemented in an externally accessed library. (Used with DLL imports) Declaration public const string Extern = \"extern\" Field Value Type Description string False Keyword that notes a false statement for a bool data type. Declaration public const string False = \"false\" Field Value Type Description string Finally Keyword to force the execution of statement after try and catch blocks have executed. Declaration public const string Finally = \"finally\" Field Value Type Description string Fixed Keyword to keep the garbage collector from moving a variable. Generally used with external api and unmanaged calls. Declaration public const string Fixed = \"fixed\" Field Value Type Description string For Keyword to define a for loop. Declaration public const string For = \"for\" Field Value Type Description string ForEach Keyword to define a for each loop. Declaration public const string ForEach = \"foreach\" Field Value Type Description string Goto Keyword that informs where the logic execution will move to. Declaration public const string Goto = \"goto\" Field Value Type Description string If Keyword that starts an evaluation to determine if a statement is true. Declaration public const string If = \"if\" Field Value Type Description string Implicit Keyword used to declare a data conversion that is safe and will not throw an error or lose data. Declaration public const string Implicit = \"implicit\" Field Value Type Description string In Keyword used in 4 cases, generic type parameters , a parameter modifer to pass arguments, define the target value in for each statements, usage in from clauses, and in join clauses. Declaration public const string In = \"in\" Field Value Type Description string Interface Keyword that starts the definition of a interface type. Declaration public const string Interface = \"interface\" Field Value Type Description string Is Keyword that checks if an expression is compatible with a target type. Declaration public const string Is = \"is\" Field Value Type Description string Lock Keyword that starts the execution of code that can be accessed by one thread at a time. Declaration public const string Lock = \"lock\" Field Value Type Description string Namespace Keyword that defines the namespace the following code definitions belong to. Declaration public const string Namespace = \"namespace\" Field Value Type Description string New Keyword that defines the new instance of a data type. Declaration public const string New = \"new\" Field Value Type Description string Null Keyword that defines a reference type does not exist and has no memory reference. Declaration public const string Null = \"null\" Field Value Type Description string Operator Keyword that starts a custom definition of operation for the target type. Declaration public const string Operator = \"operator\" Field Value Type Description string Out Keyword that signals that a passed parameter will receive an output of data. Also used with generic definitions to note the type parameter is covariant. Declaration public const string Out = \"out\" Field Value Type Description string Override Keyword that signals that an extension or modification of methods, properties, indexers, or events. Declaration public const string Override = \"override\" Field Value Type Description string Params Keyword that signals that a method parameter will be taking on a variable number of additional arguments of the target type. Declaration public const string Params = \"params\" Field Value Type Description string Readonly Keyword that notes a field cannot be changed once the constructor has run. Declaration public const string Readonly = \"readonly\" Field Value Type Description string Ref Keyword to note the value was passed by reference. Declaration public const string Ref = \"ref\" Field Value Type Description string Return Keyword to return a target set of data from the executing method body. Declaration public const string Return = \"return\" Field Value Type Description string Sealed Keyword to lock the definition from being inherited by other classes. Declaration public const string Sealed = \"sealed\" Field Value Type Description string SizeOf Keyword operator that returns the number of bytes occupied by the variable. Declaration public const string SizeOf = \"sizeof\" Field Value Type Description string StackAlloc Keyword allocates memory during execution of a method and removes at the end of the execution of the method. Allocated directly from the stack. Declaration public const string StackAlloc = \"stackalloc\" Field Value Type Description string Static Keyword that declares a static member that belongs to the type and not to an instance of the type. Declaration public const string Static = \"static\" Field Value Type Description string Structure Keyword that declares the creation of a structure. Declaration public const string Structure = \"struct\" Field Value Type Description string Switch Keyword that declares a switch statement. Declaration public const string Switch = \"switch\" Field Value Type Description string This Keyword that references the current instance of the hosting class. Declaration public const string This = \"this\" Field Value Type Description string Throw Keyword that raises an instance of a target exception. Declaration public const string Throw = \"throw\" Field Value Type Description string True Keyword that is a true condition in a bool data type. Declaration public const string True = \"true\" Field Value Type Description string Try Keyword that is the start of a try block. Declaration public const string Try = \"try\" Field Value Type Description string TypeOf Keyword that determines gets the type definition of the object. Declaration public const string TypeOf = \"typeof\" Field Value Type Description string UnChecked Keyword to suppress overflow checking in arithmetic operations and conversions. Declaration public const string UnChecked = \"unchecked\" Field Value Type Description string UnSafe Keyword to note this call access pointers and is unsafe for memory collection. Declaration public const string UnSafe = \"unsafe\" Field Value Type Description string Using Keyword directive to note a target namespace that is used in the scope of a code file. Declaration public const string Using = \"using\" Field Value Type Description string UsingStatic Keyword directive to a static type where the static members and nested type can be accessed without specifying the type. Declaration public const string UsingStatic = \"using static\" Field Value Type Description string Virtual Keyword to note that a method, property, indexer, or event can be overridden. Declaration public const string Virtual = \"virtual\" Field Value Type Description string Void Keyword that notes that the method will not return a value. Declaration public const string Void = \"void\" Field Value Type Description string Volatile Keyword that determines a field can be modified by multiple threads during execution at the same time. Declaration public const string Volatile = \"volatile\" Field Value Type Description string While Keyword that continues execution of a code block while the evaluation statement is true. Declaration public const string While = \"while\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Security.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Security.html",
    "title": "Class Security | CodeFactory for Windows",
    "keywords": "Class Security Data class that defines the syntax for security scope within the C# language. Inheritance object Security Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.FormattedSyntax Assembly: CodeFactory.WinVs.dll Syntax public static class Security Fields Internal Security scope that allows access to types and members only within files in the same assembly. Declaration public const string Internal = \"internal\" Field Value Type Description string Private Security scope that allows access only within the scope of the body of a class or structure. Declaration public const string Private = \"private\" Field Value Type Description string PrivateProtected Security scope that allows access only within the containing class or types that derive from the containing class. (Note: Only in version 7.2 or later of the C# language) Declaration public const string PrivateProtected = \"private protected\" Field Value Type Description string Protected Security scope that allows access with the target class and any classes that derived from that class. Declaration public const string Protected = \"protected\" Field Value Type Description string ProtectedInternal Security scope limited access to the current assembly or types derived from the containing class. Declaration public const string ProtectedInternal = \"protected internal\" Field Value Type Description string Public Security scope that allows access to types and members and is the least restrictive security type. Declaration public const string Public = \"public\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Symbols.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Symbols.html",
    "title": "Class Symbols | CodeFactory for Windows",
    "keywords": "Class Symbols Data class that provides the syntax to common symbols used in the definition of C# source code. Inheritance object Symbols Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.FormattedSyntax Assembly: CodeFactory.WinVs.dll Syntax public static class Symbols Fields ArrayDefinitionEnd Symbol that ends the definition of an array. Declaration public const string ArrayDefinitionEnd = \"]\" Field Value Type Description string ArrayDefinitionStart Symbol that starts the definition of an array. Declaration public const string ArrayDefinitionStart = \"[\" Field Value Type Description string EndOfStatement Symbol that denotes the end of a C# code statement. Declaration public const string EndOfStatement = \";\" Field Value Type Description string GenericDefinitionEnd Symbol that ends the definition of a generic. Declaration public const string GenericDefinitionEnd = \">\" Field Value Type Description string GenericDefinitionStart Symbol that starts the definition of a generic. Declaration public const string GenericDefinitionStart = \"<\" Field Value Type Description string MultipleStatementEnd Symbol that ends the definition of multiple C# statements to be executed. Declaration public const string MultipleStatementEnd = \"}\" Field Value Type Description string MultipleStatementStart Symbol that starts the definition for multiple C# statements to be executed. Declaration public const string MultipleStatementStart = \"{\" Field Value Type Description string ParametersDefinitionEnd Symbol that ends the definition of a parameters section. Declaration public const string ParametersDefinitionEnd = \")\" Field Value Type Description string ParametersDefinitionStart Symbol that starts the definition of a parameters section. Declaration public const string ParametersDefinitionStart = \"(\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.WellKnownTypes.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.WellKnownTypes.html",
    "title": "Class WellKnownTypes | CodeFactory for Windows",
    "keywords": "Class WellKnownTypes Data class that holds the c# syntax definition for well know data types. Inheritance object WellKnownTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp.FormattedSyntax Assembly: CodeFactory.WinVs.dll Syntax public static class WellKnownTypes Fields Boolean Syntax for a Boolean data type. Declaration public const string Boolean = \"bool\" Field Value Type Description string Byte Syntax for a byte data type. Declaration public const string Byte = \"byte\" Field Value Type Description string Character Syntax for a char data type. Declaration public const string Character = \"char\" Field Value Type Description string Datetime Syntax for a DateTime data type. Declaration public const string Datetime = \"DateTime\" Field Value Type Description string Decimal Syntax for a decimal data type. Declaration public const string Decimal = \"decimal\" Field Value Type Description string Double Syntax for a double data type. Declaration public const string Double = \"double\" Field Value Type Description string Float Syntax for a float data type. Declaration public const string Float = \"float\" Field Value Type Description string Int Syntax for a int data type. Declaration public const string Int = \"int\" Field Value Type Description string Long Syntax for a long data type. Declaration public const string Long = \"long\" Field Value Type Description string Object Syntax for a object data type. Declaration public const string Object = \"object\" Field Value Type Description string PlatformPointer Syntax for a UIntPtr data type. Declaration public const string PlatformPointer = \"UIntPtr\" Field Value Type Description string Pointer Syntax for a IntPtr data type. Declaration public const string Pointer = \"IntPtr\" Field Value Type Description string SByte Syntax for a sbyte data type. Declaration public const string SByte = \"sbyte\" Field Value Type Description string Short Syntax for a short data type. Declaration public const string Short = \"short\" Field Value Type Description string String Syntax for a string data type. Declaration public const string String = \"string\" Field Value Type Description string Uint Syntax for a uint data type. Declaration public const string Uint = \"uint\" Field Value Type Description string Ulong Syntax for a ulong data type. Declaration public const string Ulong = \"ulong\" Field Value Type Description string Ushort Syntax for a ushort data type. Declaration public const string Ushort = \"ushort\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpAttributeExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpAttributeExtensions.html",
    "title": "Class GenerateCSharpAttributeExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpAttributeExtensions Extension methods that support the generation of source in the C# language from the CsAttribute model. Inheritance object GenerateCSharpAttributeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpAttributeExtensions Methods GenerateCSharpAttributeDeclarationEnumerator(IReadOnlyList<CsAttribute>, NamespaceManager, List<MapNamespace>) An iterator that returns fully formatted declaration syntax for a attribute in the C# language Declaration public static IEnumerable<string> GenerateCSharpAttributeDeclarationEnumerator(this IReadOnlyList<CsAttribute> source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description IReadOnlyList<CsAttribute> source List of attributes to be processed. NamespaceManager manager Namespace manager used to format type names.This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description IEnumerable<string> Fully formatted syntax for the attribute. GenerateCSharpAttributeParameterValueSignature(CsAttributeParameterValue) Creates the implementation of an attribute value formatted for C#. Declaration public static string GenerateCSharpAttributeParameterValueSignature(this CsAttributeParameterValue source) Parameters Type Name Description CsAttributeParameterValue source The source value to format. Returns Type Description string The formatted value, or null if the model does not exist. GenerateCSharpAttributeParametersSignature(IReadOnlyList<CsAttributeParameter>) Extension method that creates the attributes parameters list for a attribute definition in c# syntax format. Declaration public static string GenerateCSharpAttributeParametersSignature(this IReadOnlyList<CsAttributeParameter> source) Parameters Type Name Description IReadOnlyList<CsAttributeParameter> source THe source list of parameters to be created. Returns Type Description string The fully formatted parameters section of a attribute declaration. GenerateCSharpAttributeSignature(CsAttribute, NamespaceManager, List<MapNamespace>) Extension method that returns a full attribute declaration in the C# language format. Declaration public static string GenerateCSharpAttributeSignature(this CsAttribute source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsAttribute source The attribute toe generate the c# signature for. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The formatted attribute signature or null if data was missing to create the attribute."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsEventExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsEventExtensions.html",
    "title": "Class GenerateCSharpCsEventExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpCsEventExtensions Extension methods that support the generation of source in the C# language from the CsEvent model. Inheritance object GenerateCSharpCsEventExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpCsEventExtensions Methods GenerateCSharpEventDeclaration(CsEvent, NamespaceManager, List<MapNamespace>, string, bool, CsSecurity, bool, bool, bool, bool, bool, bool, bool, string, string) Generates the syntax definition of an event in c# syntax. Declaration public static string GenerateCSharpEventDeclaration(this CsEvent source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null, string eventName = null, bool includeSecurity = true, CsSecurity eventSecurity = CsSecurity.Unknown, bool includeKeywords = true, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsEvent source The source CsEvent model to generate. NamespaceManager manager Namespace manager used to format type names.This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. string eventName Optional parameter that will set the event name to the provided name, default is null. bool includeSecurity Includes the security scope which was defined in the model. CsSecurity eventSecurity Optional parameter that sets the target security scope for the event. bool includeKeywords Optional parameter that determines if it will include all keywords assigned to the source model, default is false. bool includeAbstractKeyword Optional parameter that determines if it will include the definition for the abstract keyword in the definition if it is defined. default is false. bool abstractKeyword Optional flag that determines if the abstract keyword is added to the event, default is false. bool sealedKeyword Optional flag that determines if the sealed keyword is added to the event, default is false. bool staticKeyword Optional flag that determines if the static keyword is added to the event, default is false. bool virtualKeyword Optional flag that determines if the virtual keyword is added to the event, default is false. bool overrideKeyword Optional flag that determines if the override keyword is added to the event, default is false. string namePrefix Optional parameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description string Fully formatted event definition or null if the event data could not be generated. Examples With Keywords [security] [keywords] event [event handler type] [name]; Without Keywords [security] [keywords] event [event handler type] [name]; GenerateCSharpInterfaceEventDeclaration(CsEvent, NamespaceManager, List<MapNamespace>, string, string) Defines a standard event declaration for a interface. Declaration public static string GenerateCSharpInterfaceEventDeclaration(this CsEvent source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsEvent source Event model to load. NamespaceManager manager Namespace manager used to format type names.This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description string Fully formatted event definition or null if the event data could not be generated."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsFieldExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsFieldExtensions.html",
    "title": "Class GenerateCSharpCsFieldExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpCsFieldExtensions Extension methods that support the generation of source in the C# language from the CsField model. Inheritance object GenerateCSharpCsFieldExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpCsFieldExtensions Methods GenerateCSharpFieldDeclaration(CsField, NamespaceManager, List<MapNamespace>, bool, CsSecurity, bool, string, string) Generates the syntax definition of field in c# syntax. The default definition with all options turned off will return the filed signature and constants if defined and the default values. Declaration public static string GenerateCSharpFieldDeclaration(this CsField source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null, bool includeKeywords = true, CsSecurity fieldSecurity = CsSecurity.Unknown, bool useCamelCase = false, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsField source The source CsField model to generate. NamespaceManager manager Namespace manager used to format type names.This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool includeKeywords Optional parameter that will include all keywords assigned to the field from the source model. This is true by default. CsSecurity fieldSecurity Optional parameter to set the target security for the field. bool useCamelCase Optional parameter that determines if the field name should set to camel case format, default is false. string namePrefix Optional prameter that determines if the field name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the field name will have a prefix assigned to it, default is null. Returns Type Description string Fully formatted field definition or null if the field data could not be generated. Examples With Keywords [Security] [Keywords] [FieldType] [Name]; With Keywords and a constant [Security] [Keywords] [FieldType] [Name] = [Constant Value]; Without Keywords [Security] [FieldType] [Name]; Without Keywords and a constant [Security] [FieldType] [Name] = [Constant Value];"
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsPropertyExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsPropertyExtensions.html",
    "title": "Class GenerateCSharpCsPropertyExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpCsPropertyExtensions Extension methods that support the generation of source in the C# language from the CsProperty model. Inheritance object GenerateCSharpCsPropertyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpCsPropertyExtensions Methods GenerateCSharpDefaultPropertySignature(CsProperty, NamespaceManager, List<MapNamespace>, bool, bool, CsSecurity, CsSecurity, CsSecurity, string, string) Generates a default property definition with no backing properties. Will determine security modifiers and append to get and set statements when needed. Declaration public static string GenerateCSharpDefaultPropertySignature(this CsProperty source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null, bool includeKeywords = false, bool includeAbstractKeyword = false, CsSecurity propertySecurity = CsSecurity.Unknown, CsSecurity setSecurity = CsSecurity.Unknown, CsSecurity getSecurity = CsSecurity.Unknown, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsProperty source Property model used for generation. NamespaceManager manager Namespace manager used to format type names.This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool includeKeywords Optional parameter that determines if the keywords will be appended. Default is false. bool includeAbstractKeyword Will include the definition for the abstract keyword in the definition if it is defined. default is false. CsSecurity propertySecurity Optional parameter that overrides the models property security and sets a new security access level. CsSecurity setSecurity Optional parameter that overrides the models set security level with a new access level. Will also define a set statement even if it is not defined. CsSecurity getSecurity Optional parameter that overrides the models get security level with a new access level. Will also define a get statement even if it is not defined. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description string Formatted property or null if model data was missing. Examples With Keywords [security] [keywords] [property type] [property name] { [get when used]; [set when used]; } No Keywords [security] [property type] [property name] { [get when used]; [set when used]; } GenerateCSharpDefaultValue(CsProperty) Property extension that returns the formatted C# syntax of either the name of the property or the method to get the default value of the property if it is nullable. Declaration public static string GenerateCSharpDefaultValue(this CsProperty source) Parameters Type Name Description CsProperty source Property to get the formatted C# syntax for. Returns Type Description string Formatted C# syntax to access a properties value. Exceptions Type Condition CodeFactoryException Raised if required information is missing to create the syntax. GenerateCSharpGetStatement(CsProperty, CsSecurity, CsSecurity) Extension method that generates the get statement of a property definition. Declaration public static string GenerateCSharpGetStatement(this CsProperty source, CsSecurity propertySecurity = CsSecurity.Unknown, CsSecurity getSecurity = CsSecurity.Unknown) Parameters Type Name Description CsProperty source the source property definition CsSecurity propertySecurity Optional parameter that defined the security used by the implementing property. CsSecurity getSecurity Optional parameter that allows you to set the get security level. Returns Type Description string Will return the formatted get statement or null if the property model is empty or the property does not support get. Examples With the same security [get] will return example: get With different security [security] [get] will return example: public get GenerateCSharpPropertyDeclaration(CsProperty, NamespaceManager, List<MapNamespace>, bool, bool, bool, CsSecurity, string, string) Generates the initial definition portion of a property. Declaration public static string GenerateCSharpPropertyDeclaration(this CsProperty source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null, bool includeSecurity = true, bool includeKeyWords = false, bool includeAbstractKeyword = false, CsSecurity propertySecurity = CsSecurity.Unknown, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsProperty source The source property to use for formatting. NamespaceManager manager Namespace manager used to format type names. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool includeSecurity Optional flag that determines if the security scope will be applied to the property definition. Default is true. bool includeKeyWords Optional flag that determines if keywords assigned to the property should be included in the signature. Default is false. bool includeAbstractKeyword Will include the definition for the abstract keyword in the definition if it is defined. default is false. CsSecurity propertySecurity Optional parameter to override the models security and set your own security. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description string The formatted signature or null if the model data was not loaded. Examples Format with Keywords [Security] [Keywords*] [ReturnType] [PropertyName] = public static string FirstName Format without Keywords [Security] [ReturnType] [PropertyName] = public string FirstName GenerateCSharpSetStatement(CsProperty, CsSecurity, CsSecurity) Extension method that generates the set statement of a property definition. Declaration public static string GenerateCSharpSetStatement(this CsProperty source, CsSecurity propertySecurity = CsSecurity.Unknown, CsSecurity setSecurity = CsSecurity.Unknown) Parameters Type Name Description CsProperty source the source property definition CsSecurity propertySecurity Optional parameter that defined the security used by the implementing property. CsSecurity setSecurity Optional parameter that allows you to set the set security level. Returns Type Description string Will return the formatted set statement or null if the property model is empty or the property does not support set. Examples With the same security [set] will return example: set With different security [security] [set] will return example: public set"
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsSecurityExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsSecurityExtensions.html",
    "title": "Class GenerateCSharpCsSecurityExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpCsSecurityExtensions Extension methods that support the generation of source in the C# language from the CsSecurity model. Inheritance object GenerateCSharpCsSecurityExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpCsSecurityExtensions Methods GenerateCSharpKeyword(CsSecurity) Gets the security keyword for the C# language. Declaration public static string GenerateCSharpKeyword(this CsSecurity source) Parameters Type Name Description CsSecurity source The source security object to get the keyword from. Returns Type Description string The name of the security keyword or null."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpDocumentationExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpDocumentationExtensions.html",
    "title": "Class GenerateCSharpDocumentationExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpDocumentationExtensions Extension method class that supports c# model generation for IDocumentation hosted models Inheritance object GenerateCSharpDocumentationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpDocumentationExtensions Methods GenerateCSharpDocumentationLine(string) Takes documentation and returns a XML comment based documentation for C# code. Declaration public static string GenerateCSharpDocumentationLine(string source) Parameters Type Name Description string source documentation string to be evaluated. Returns Type Description string The comment formatted c# documentation or null if the string is not for documentation. GenerateCSharpXmlDocumentation(IDocumentation, int) Generates XML documentation that supports C# source code. Declaration public static string GenerateCSharpXmlDocumentation(this IDocumentation source, int indentLevel = 0) Parameters Type Name Description IDocumentation source The C# model that supports the IDocumentation interface. int indentLevel Optional parameter that sets the level of indents to assign before each XML documentation line, default value is 0. Returns Type Description string GenerateCSharpXmlDocumentationEnumerator(IDocumentation) An Iterator that returns fully formatted XML documentation for the C# programming language. Declaration public static IEnumerable<string> GenerateCSharpXmlDocumentationEnumerator(this IDocumentation documentation) Parameters Type Name Description IDocumentation documentation The source code model that has documentation. Returns Type Description IEnumerable<string> The enumerator that loads the formatted XML documentation for the CSharp Language."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpEnumExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpEnumExtensions.html",
    "title": "Class GenerateCSharpEnumExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpEnumExtensions Extension methods that support the generation of source in the C# language from the CsEnum model. Inheritance object GenerateCSharpEnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpEnumExtensions Methods GenerateCSharpEnumValue(CsEnum, string) Extension method that will lookup the value of an enumeration by the enumeration type name. Declaration public static string GenerateCSharpEnumValue(this CsEnum source, string enumName) Parameters Type Name Description CsEnum source The target CsEnum model to get the enumeration value from. string enumName The target numerical named item to use to lookup the enumeration value. Returns Type Description string The target enumeration value or null if it could not be found."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpGenericParameterExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpGenericParameterExtensions.html",
    "title": "Class GenerateCSharpGenericParameterExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpGenericParameterExtensions Extension methods that support the generation of source in the C# language from the CsGenericParameter model. Inheritance object GenerateCSharpGenericParameterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpGenericParameterExtensions Methods GenerateCSharpGenericWhereClauseSignature(CsGenericParameter, NamespaceManager, List<MapNamespace>) Extension method that generates the where clause for a generic parameter if one exists. This will not generate if the generic parameter is not a place holder type, or if no where clause conditions have been provided. Declaration public static string GenerateCSharpGenericWhereClauseSignature(this CsGenericParameter source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsGenericParameter source Generic parameter to generate the where clause from. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string Null if the where clause was not generated, or the C# syntax for the where clause."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpMethodExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpMethodExtensions.html",
    "title": "Class GenerateCSharpMethodExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpMethodExtensions Extension methods that support the generation of source in the C# language from the CsMethod model. Inheritance object GenerateCSharpMethodExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpMethodExtensions Methods GenerateCSharpMethodName(CsMethod, bool, string, string, string, string) Creates a full formatted method name from a source method model Declaration public static string GenerateCSharpMethodName(this CsMethod source, bool forceAsyncMethod = false, string namePrefix = null, string nameSuffix = null, string asyncPrefix = null, string asyncSuffix = null) Parameters Type Name Description CsMethod source Method model to generate the name from. bool forceAsyncMethod Optional, determines if the method name should be forced for async method, default is false. string namePrefix Optional,prefix to be added to the name, default is null. string nameSuffix Optional,suffix to be added to the name, default is null. string asyncPrefix Optional,prefix to be added to the name if it is a async method, default is null. string asyncSuffix Optional,suffix to be added to the name if it is a async method, default is null. Returns Type Description string GenerateCSharpMethodSignature(CsMethod, NamespaceManager, bool, bool, CsSecurity, bool, bool, bool, bool, bool, bool, bool, List<MapNamespace>, bool, string, string, bool, string, string, string) Generates a C# method signature from model data. This provides a fully customizable method for generating the signature. Declaration public static string GenerateCSharpMethodSignature(this CsMethod source, NamespaceManager manager = null, bool includeAsyncKeyword = true, bool includeSecurity = true, CsSecurity methodSecurity = CsSecurity.Unknown, bool includeKeywords = true, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAbstractKeyword = false, List<MapNamespace> mappedNamespaces = null, bool forceAsyncDefinition = false, string asyncPrefix = null, string asyncSuffix = null, bool isInterfaceSignature = false, string methodName = null, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsMethod source The source method data to generate the signature from. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. bool includeAsyncKeyword Include the async keyword if the return type is Task bool includeSecurity Includes the security scope which was defined in the model. CsSecurity methodSecurity Optional parameter that allows you to set the security scope for the method. bool includeKeywords Includes all keywords assigned to the source model. bool abstractKeyword Optional flag that will add the abstract keyword to the method signature,default is false. bool sealedKeyword Optional flag that will add the sealed keyword to the method signature, default is false. bool staticKeyword Optional flag that will add the static keyword to the method signature, default is false. bool virtualKeyword Optional flag that will add the static keyword to the method signature, default is false. bool overrideKeyword Optional flag that will add the override keyword to the method signature, default is false. bool includeAbstractKeyword Will include the definition for the abstract keyword in the definition if it is defined. default is false. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool forceAsyncDefinition Optional parameter that forces the method to confirm to an async signature, default value is false. string asyncPrefix Optional parameter that is used with forceAsyncDefinition that includes an expected prefix on the method name, default value is null. string asyncSuffix Optional parameter that is used with forceAsyncDefinition that includes an expected suffix on the method name, default value is null. bool isInterfaceSignature Optional parameter used to determine if the method is being built for a interface definition, default value is null. string methodName Optional parameter that sets what the methods name will return as with the signature. string namePrefix Optional parameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description string Fully formatted method deceleration or null if the method data was missing."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpParameterExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpParameterExtensions.html",
    "title": "Class GenerateCSharpParameterExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpParameterExtensions Extension methods that support the generation of source in the C# language from the CsParameter model. Inheritance object GenerateCSharpParameterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpParameterExtensions Methods GenerateCSharpParameterDefaultValue(CsParameterDefaultValue, CsType) Extension method that generates the default value syntax for a parameter in the C# language. Declaration public static string GenerateCSharpParameterDefaultValue(this CsParameterDefaultValue source, CsType type) Parameters Type Name Description CsParameterDefaultValue source The target default value to format. CsType type The target type of the value to be formatted. Returns Type Description string The fully formatted syntax for the default value or null if data was missing. GenerateCSharpParametersSignature(IReadOnlyList<CsParameter>, NamespaceManager, List<MapNamespace>) Extension method that create the fully formatted parameters section in c# syntax. Declaration public static string GenerateCSharpParametersSignature(this IReadOnlyList<CsParameter> source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description IReadOnlyList<CsParameter> source The source list of parameters to be turned into a parameters signature. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The fully formatted parameters signature or null if data was missing."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpStringExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpStringExtensions.html",
    "title": "Class GenerateCSharpStringExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpStringExtensions Extension methods that support the generation of source in the C# language from the name of target csharp models. Inheritance object GenerateCSharpStringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpStringExtensions Methods GenerateCSharpCamelCase(string) Formats a string as camel case. Declaration public static string GenerateCSharpCamelCase(this string source) Parameters Type Name Description string source The source string to format as camel case. Returns Type Description string The formatted string. GenerateCSharpFormattedClassName(string, string, string) Formates a C# object name to be a class name with proper case formatting. Declaration public static string GenerateCSharpFormattedClassName(this string source, string prefix = null, string suffix = null) Parameters Type Name Description string source Name to be formatted. string prefix Optional parameter with the prefix to add to the name, default is null. string suffix Optional parameter with the suffix to add to the name, default is null. Returns Type Description string Formatted class name, or null if no name was provided. GenerateCSharpFormattedInterfaceName(string, string, string) Formats a C# object name to be a interface name with proper case formatting. Declaration public static string GenerateCSharpFormattedInterfaceName(this string source, string prefix = null, string suffix = null) Parameters Type Name Description string source Name to be formatted. string prefix Optional parameter with the prefix to add to the name, default is null. string suffix Optional parameter with the suffix to add to the name, default is null. Returns Type Description string Formatted class name, or null if no name was provided. GenerateCSharpFormattedName(string, string, string, bool, bool) Formats a C# object name to the target format provided. Declaration public static string GenerateCSharpFormattedName(this string source, string prefix = null, string suffix = null, bool useCamelCase = false, bool useProperCase = false) Parameters Type Name Description string source Name to be formatted. string prefix Optional parameter with the prefix to add to the name, default is null. string suffix Optional parameter with the suffix to add to the name, default is null. bool useCamelCase Optional parameter that determines if the name should follow the camel case format. Note: applied before the prefix is assigned. bool useProperCase Optional parameter that determines if the name should follow the proper case format. Note: applied before the prefix is assigned. Returns Type Description string GenerateCSharpProperCase(string) Formats a string as proper case. Declaration public static string GenerateCSharpProperCase(this string source) Parameters Type Name Description string source the source string to format as proper case. Returns Type Description string The formatted string."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenereateCSharpTypeExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenereateCSharpTypeExtensions.html",
    "title": "Class GenereateCSharpTypeExtensions | CodeFactory for Windows",
    "keywords": "Class GenereateCSharpTypeExtensions Extension methods that support the generation of source in the C# language from the CsType model. Inheritance object GenereateCSharpTypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenereateCSharpTypeExtensions Methods GenerateCSharpArraySignature(CsType) Extension method that creates the array portion definition of a type definition in C# syntax. Declaration public static string GenerateCSharpArraySignature(this CsType source) Parameters Type Name Description CsType source The source type to get the array information to format. Returns Type Description string The formatted array syntax for the target type, or null if no array data was provided in the type definition. GenerateCSharpDefaultValue(CsType) Gets an initial default value syntax for the target type. This will generally be used on the right side of a = sign. Declaration public static string GenerateCSharpDefaultValue(this CsType source) Parameters Type Name Description CsType source Type to generate syntax for. Returns Type Description string Formatted C# syntax for the default value, or null if the default value syntax cannot be identified. Exceptions Type Condition ArgumentNullException Instance of the type was not provided. GenerateCSharpGenericParametersSignature(IReadOnlyList<CsGenericParameter>, NamespaceManager, List<MapNamespace>) Extension method that generates the generics definition part of a signature in the C# format. Declaration public static string GenerateCSharpGenericParametersSignature(this IReadOnlyList<CsGenericParameter> source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description IReadOnlyList<CsGenericParameter> source The target types that make up the generics signature. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The fully formatted definition of the generics signature, or null if the source is not provided. GenerateCSharpTupleSignature(CsType, NamespaceManager, List<MapNamespace>) Extension method that creates a C# signature for the tuple type. Declaration public static string GenerateCSharpTupleSignature(this CsType source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsType source The target declaration syntax for a tuple. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The formatted tuple or null if data is missing. GenerateCSharpTypeName(CsType, NamespaceManager, List<MapNamespace>) Formats a type name to match the C# syntax for a type deceleration in C#. Declaration public static string GenerateCSharpTypeName(this CsType source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsType source The type model to use to generate the type signature for c# NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The formatted type definition for C# GenerateCSharpTypeNameRemoveNullableDefinition(CsType, NamespaceManager, List<MapNamespace>) Formats a CsType into a C# compliant type name. If the type is nullable it return the non nullable version of the type. Declaration public static string GenerateCSharpTypeNameRemoveNullableDefinition(this CsType source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsType source The type to generate the c# type name from. NamespaceManager manager Namespace manager that will determine what namespaces can be truncated from the name of the type. This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The fully formatted c# type name. Exceptions Type Condition ArgumentNullException If the source type is null will throw an exception. CodeFactoryException If the nullable base type cannot be determined. GenerateCSharpValueSyntax(CsType, string) Extension method that returns a value declaration in the C# language format. Declaration public static string GenerateCSharpValueSyntax(this CsType source, string value) Parameters Type Name Description CsType source The target type to create the value definition for. string value The value to be formatted. Returns Type Description string The definition of the value formatted for C#"
  },
  "api/CodeFactory.WinVs.Models.CSharp.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.html",
    "title": "Namespace CodeFactory.WinVs.Models.CSharp | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Models.CSharp Classes CsAttribute Data model that represents an attribute. CsAttributeParameter Data model that represents a attribute parameter. CsAttributeParameterValue Data class that represents an attributes parameter value. CsClass Data model that represents a class implementation. CsContainer Data model that implements the base implement for all models that support members. CsContainerExtensions Extension management class that manages models that implement CsContainer. CsContainerWithNestedContainers Data model that implements the base implement for all models that support members. CsDelegate Data model that represents the definition of a delegate. CsEnum Data model that represents an enumeration definition. CsEnumValue Data model that represents a defined value for an enumeration. CsEvent Data model that represents the definition of an event. CsEventExtensions Extension methods that support the CsEvent model. CsField Data model that represents a field definition. CsFieldExtensions Extension methods that support the CsField model. CsGenericParameter Data model that represents the a generic parameter definition. CsInterface Data model that represents in definition of an interface. CsMember Data model that builds the base class definition for all member types. CsMemberExtensions Extension methods that support model that implement the CsMember interface. CsMethod Data model that represents a method definition. CsMethodExtentions Extension methods that support the CsMethod model. CsModel Base class that all C# compiler based data models derive from. CsModelStore Model storage class used to store c# code factory models, to be used to pass data to factories. CsNamespace Data model that represents the definition of a namespace. CsParameter Data model that represents a parameter definition. CsParameterDefaultValue Data model that represents the default value for a parameter. CsProperty Data model that represents the definition of a property. CsPropertyExtensions CsRecord Data model that represents a record implementation. CsRecordStructure Data model that represents the definition of a record structure. CsSource Data model that represents source code. CsSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the CsSource model. CsStructure Data model that represents the definition of a structure. CsTupleTypeParameter Data model that represents a tuple type parameter. CsType Data model that represents the definition of a type. CsTypeExtensions Extension methods that support the CsType model. CsUsingStatement Data model that represents a namespace reference in source code. GenerateCSharpAttributeExtensions Extension methods that support the generation of source in the C# language from the CsAttribute model. GenerateCSharpCsEventExtensions Extension methods that support the generation of source in the C# language from the CsEvent model. GenerateCSharpCsFieldExtensions Extension methods that support the generation of source in the C# language from the CsField model. GenerateCSharpCsPropertyExtensions Extension methods that support the generation of source in the C# language from the CsProperty model. GenerateCSharpCsSecurityExtensions Extension methods that support the generation of source in the C# language from the CsSecurity model. GenerateCSharpDocumentationExtensions Extension method class that supports c# model generation for IDocumentation hosted models GenerateCSharpEnumExtensions Extension methods that support the generation of source in the C# language from the CsEnum model. GenerateCSharpGenericParameterExtensions Extension methods that support the generation of source in the C# language from the CsGenericParameter model. GenerateCSharpMethodExtensions Extension methods that support the generation of source in the C# language from the CsMethod model. GenerateCSharpParameterExtensions Extension methods that support the generation of source in the C# language from the CsParameter model. GenerateCSharpStringExtensions Extension methods that support the generation of source in the C# language from the name of target csharp models. GenereateCSharpTypeExtensions Extension methods that support the generation of source in the C# language from the CsType model. ManualUsingStatementNamespace Manual C# data model that supports the IUsingStatementNamespace interface. MapNamespace Utility data class used to map a source namespace to a target namespace. Generally used for migration of source from one namespace to another.. NamespaceManager Utility class that allows you to load in a collection of using statements for target namespaces that will be used for source generation operations for the C# programming language. PathBuilderConstants Data constants that are used when building the unique path for a dot net model. Interfaces ICsAttribute Model definition for an attribute in a c# implementation. ICsAttributeParameter The model information for a attribute used for a c# implementation. ICsAttributeParameterValue The model information for an attributes parameter value for c# implementation. ICsAttributes Interface that determines if a c# model has attributes assigned. ICsClass Model definition for a class in C#. ICsContainer The base implementation all container type models must implement in C#. ICsDelegate Model definition of a delegate in C#. ICsEnum Data model that provides information on an enumeration. ICsEnumValue Data model that provides information to a specific enumeration value implemented in an enumeration. ICsEvent Model definition of a event in c#. ICsField Model definition of a Field in .net. ICsGeneric Definition that determines if the c# model implements generics. ICsGenericParameter Model contract for information about a parameter used in a generic definition. ICsInterface Model implementation of an interface in C#. ICsMember Base definition for all c# member models. ICsMethod Model definition of a method in c#. ICsModel Base implementation all C# models must implement. ICsNamespace Model definition for a namespace definition inside a code file in C#. ICsNestedContainers Definition of the container types that can be nested in other containers. ICsNestedModel Interface that identifies if the implementation of this model is nested within another model. ICsParameter The definition of a parameter used in C#. ICsParameterDefaultValue Model that represents a default value for a ICsParameter model. ICsProperty Model definition of a property in C#. ICsRecord Model definition for a class in C#. ICsRecordStructure Model definition for a record structure in C#. ICsSource Source definition from a source that was written in C#. ICsStructure Model definition for a structure in C#. ICsTupleTypeParameter The C# model definition for the TupleTypeParameter. ICsType Model that defines a type used in a C# model definition. ICsUsingStatement Model that represents a using statement in a C# source model. IDocumentation Interface that determines if a model has code level documentation. ILookup Defines lookup information for a model that supports being searched for. IParent Defines information how to find the parent model for the model that implements this C# model. IUsingStatementNamespace Mapping of the alias and namespace used in C# source files. Enums AttributeParameterKind Enumeration that determines the type of attribute parameter data that is being returned. CsContainerType Definition of the different types of container based members are supported by the C# source code type. CsKnownLanguageType Enumeration that identifies well know types used by the C# language. CsMemberType Enumeration of the types of members that are supported in the c# source code type. CsMethodType Enumeration of the type of methods that are supported in C#. CsModelType The code factory model types that represent the C# source code type. CsNestedType Enumeration that identifies the target model type that is nested. CsSecurity Enumeration that determines the security scope of the C# model being represented. MemberComparisonType Enumeration of the types of member comparison ParameterDefaultValueType Enumeration that determines the type of default value that is assigned to the value type. SyntaxType Determines the type of syntax that is hosted in a Dot Net model."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsAttribute.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsAttribute.html",
    "title": "Interface ICsAttribute | CodeFactory for Windows",
    "keywords": "Interface ICsAttribute Model definition for an attribute in a c# implementation. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsAttribute : ICsModel, IModelStatus, IParent, ISourceFiles Properties HasParameters Flag that determines if the attribute has parameters Declaration bool HasParameters { get; } Property Value Type Description bool Parameters Enumeration of the parameters that are assigned to the attribute. This will be an empty list if HasParameters is false. Declaration IReadOnlyList<CsAttributeParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsAttributeParameter> Type The type information for the attribute itself. Declaration CsType Type { get; } Property Value Type Description CsType Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsAttributein the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsAttributein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsAttributein the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsAttributein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the attribute from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the attribute from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the attribute is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the attribute is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the attribute is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the attribute defined in. Returns Type Description Task<ISourceLocation> The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current attribute with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current attribute with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsAttributeParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsAttributeParameter.html",
    "title": "Interface ICsAttributeParameter | CodeFactory for Windows",
    "keywords": "Interface ICsAttributeParameter The model information for a attribute used for a c# implementation. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsAttributeParameter : ICsModel, IModelStatus Properties HasNamedParameter Flag that determines if the attribute parameter is a named value, or just part of the attributes constructor. Declaration bool HasNamedParameter { get; } Property Value Type Description bool Name The name of the parameter, if this is not a named parameter then it will be set to null Declaration string Name { get; } Property Value Type Description string Value The value that was assigned to the parameter. Declaration CsAttributeParameterValue Value { get; } Property Value Type Description CsAttributeParameterValue"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsAttributeParameterValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsAttributeParameterValue.html",
    "title": "Interface ICsAttributeParameterValue | CodeFactory for Windows",
    "keywords": "Interface ICsAttributeParameterValue The model information for an attributes parameter value for c# implementation. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsAttributeParameterValue : ICsModel, IModelStatus Properties EnumValue The enum value provides the name of the enumeration value that was provided. This will be populated if the property ParameterKind is set to 'Enum' Declaration string EnumValue { get; } Property Value Type Description string ParameterKind Determines the kind of parameter that has been returned. Declaration AttributeParameterKind ParameterKind { get; } Property Value Type Description AttributeParameterKind TypeValue The type definition of the parameter that was passed. This will be populated if the property ParameterKind is set to 'Type' Declaration CsType TypeValue { get; } Property Value Type Description CsType Value Gets the raw value assigned to the parameter. This will be populated if the property ParameterKind is not set to 'Array' Declaration string Value { get; } Property Value Type Description string Values Gets an enumeration of all the parameter values that were assigned to the attribute parameter. This will be populated if the property ParameterKind is set to 'Array' Declaration IReadOnlyList<CsAttributeParameterValue> Values { get; } Property Value Type Description IReadOnlyList<CsAttributeParameterValue>"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsAttributes.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsAttributes.html",
    "title": "Interface ICsAttributes | CodeFactory for Windows",
    "keywords": "Interface ICsAttributes Interface that determines if a c# model has attributes assigned. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsAttributes Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> HasAttributes Flag that determines if attributes are assigned. Declaration bool HasAttributes { get; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsClass.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsClass.html",
    "title": "Interface ICsClass | CodeFactory for Windows",
    "keywords": "Interface ICsClass Model definition for a class in C#. Inherited Members ICsNestedContainers.NestedModels ICsNestedContainers.NestedClasses ICsNestedContainers.NestedInterfaces ICsNestedContainers.NestedStructures ICsNestedContainers.NestedEnums ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsClass : ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties BaseClass The base class assigned to this class. This will be null if HasBase is false. Declaration CsClass BaseClass { get; } Property Value Type Description CsClass Constructors List of the constructors implemented in this class. Declaration IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Destructor The destructor implemented in this class. Declaration CsMethod Destructor { get; } Property Value Type Description CsMethod Fields List of the fields implemented in this class. Declaration IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> IsAbstract Flat that determines if this is an abstract class. Declaration bool IsAbstract { get; } Property Value Type Description bool IsSealed Flag that determines if this class has been sealed. Declaration bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this class is static. Declaration bool IsStatic { get; } Property Value Type Description bool Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsContainer.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsContainer.html",
    "title": "Interface ICsContainer | CodeFactory for Windows",
    "keywords": "Interface ICsContainer The base implementation all container type models must implement in C#. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsContainer : ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties ContainerType The type of container model that has been implemented. Declaration CsContainerType ContainerType { get; } Property Value Type Description CsContainerType Events Enumeration of the events assigned to this container. If HasEvents is false this will be null. Declaration IReadOnlyList<CsEvent> Events { get; } Property Value Type Description IReadOnlyList<CsEvent> InheritedInterfaces List of the interfaces that are inherited by this container. Declaration IReadOnlyList<CsInterface> InheritedInterfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> Members List of the members that are implemented in this container. Declaration IReadOnlyList<CsMember> Members { get; } Property Value Type Description IReadOnlyList<CsMember> Methods List of the methods that are implemented in this container. Declaration IReadOnlyList<CsMethod> Methods { get; } Property Value Type Description IReadOnlyList<CsMethod> Name The name of the container. Declaration string Name { get; } Property Value Type Description string Namespace The namespace the container objects belongs to. Declaration string Namespace { get; } Property Value Type Description string Properties List of the properties that are implemented in this container. Declaration IReadOnlyList<CsProperty> Properties { get; } Property Value Type Description IReadOnlyList<CsProperty> Security The security scope assigned to the container. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsContainerin the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsContainerin the target document. Declaration Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the container definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToBeginningAsync(string) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToBeginningAsync(string, string) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration Task<CsSource> AddToBeginningAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndAsync(string) Adds the source code inside of the container at the end of where members are defined in the container. Declaration Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndAsync(string, string) Adds the source code inside of the container at the end of where members are defined in the container. Declaration Task<CsSource> AddToEndAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. DeleteAsync() Deletes the definition of the container from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the container from the source document. Declaration Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the container is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetBodySourceLocationAsync() Gets the starting and ending locations of the body located in the container. Declaration Task<ISourceLocation> GetBodySourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetBodySourceLocationAsync(string) Gets the starting and ending locations of the body located in the container. Declaration Task<ISourceLocation> GetBodySourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task<ISourceLocation> The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetBodySyntaxAsync() The source code syntax that is stored in the body of the container model. This will be null if the container was not loaded from source code. Declaration Task<string> GetBodySyntaxAsync() Returns Type Description Task<string> GetSourceLocationAsync() Gets the starting and ending locations within the document where the container is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the container is located. Declaration Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task<ISourceLocation> The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current container with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current container with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsDelegate.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsDelegate.html",
    "title": "Interface ICsDelegate | CodeFactory for Windows",
    "keywords": "Interface ICsDelegate Model definition of a delegate in C#. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ICsAttributes.HasAttributes ICsAttributes.Attributes ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IParent.Parent ILookup.LookupPath ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsDelegate : ICsModel, IModelStatus, ICsAttributes, ICsGeneric, IDocumentation, IParent, ILookup, ISourceFiles Properties BeginInvokeMethod The begin invoke method definition for this delegate. Declaration CsMethod BeginInvokeMethod { get; } Property Value Type Description CsMethod EndInvokeMethod The end invoke method definition for this delegate. Declaration CsMethod EndInvokeMethod { get; } Property Value Type Description CsMethod HasParameters Flag that determines if the method has parameters assigned to it. Declaration bool HasParameters { get; } Property Value Type Description bool InvokeMethod The invoke method definition for this delegate. Declaration CsMethod InvokeMethod { get; } Property Value Type Description CsMethod IsVoid Flag that determines if the delegate return is a void. Declaration bool IsVoid { get; } Property Value Type Description bool Name The name assigned to the this item. Declaration string Name { get; } Property Value Type Description string Namespace The namespace the delegate is assigned to. Declaration string Namespace { get; } Property Value Type Description string Parameters List of the parameters that have been assigned to the delegate. If HasParameters property is set to false this will be an empty list. Declaration IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsParameter> ReturnType The type information about the return type assigned to the method. Declaration CsType ReturnType { get; } Property Value Type Description CsType Security The security scope that has been assigned to this item. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsDelegatein the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsDelegatein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the delegate definition not before the documentation or attributes that are assigned. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the delegate from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the delegate from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the delegate is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current delegate with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current delegate with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsEnum.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsEnum.html",
    "title": "Interface ICsEnum | CodeFactory for Windows",
    "keywords": "Interface ICsEnum Data model that provides information on an enumeration. Inherited Members ICsNestedModel.NestedType ICsNestedModel.IsNested ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsEnum : ICsNestedModel, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties Name The name of the enumeration. Declaration string Name { get; } Property Value Type Description string Namespace The namespace the enumeration belongs to. Declaration string Namespace { get; } Property Value Type Description string Security The security scope assigned to the enumeration. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Values List of the enumeration values implemented in this enumeration. Declaration IReadOnlyList<CsEnumValue> Values { get; } Property Value Type Description IReadOnlyList<CsEnumValue> Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsEnumin the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsEnumin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the enum definition not before the documentation or attributes that are assigned. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToBeginningAsync(string) Adds the source code inside of the enumeration at the beginning of where members are defined in the enumeration. Declaration Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndAsync(string) Adds the source code inside of the enumeration at the end of where members are defined in the enumeration. Declaration Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. DeleteAsync() Deletes the definition of the enumeration from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the enumeration has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the enumeration from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the enumeration is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the enumeration has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetBodySourceLocationAsync() Gets the starting and ending locations of the body located in the enum. Declaration Task<ISourceLocation> GetBodySourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location in the enum. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the enumeration is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the enumeration. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the enumeration is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the enumeration defined in. Returns Type Description Task<ISourceLocation> The source location for the enumeration. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current enumeration with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current enumeration with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsEnumValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsEnumValue.html",
    "title": "Interface ICsEnumValue | CodeFactory for Windows",
    "keywords": "Interface ICsEnumValue Data model that provides information to a specific enumeration value implemented in an enumeration. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IParent.Parent ILookup.LookupPath ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsEnumValue : ICsModel, IModelStatus, ICsAttributes, IDocumentation, IParent, ILookup, ISourceFiles Properties Name The name of the enumeration value. Declaration string Name { get; } Property Value Type Description string Security The security scope assigned to the enumeration value. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Value The value that has been assigned to the enumeration value. Declaration string Value { get; } Property Value Type Description string Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsEnumValuein the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsEnumValuein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the member definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the delegate from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the delegate from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the delegate is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current delegate with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current delegate with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsEvent.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsEvent.html",
    "title": "Interface ICsEvent | CodeFactory for Windows",
    "keywords": "Interface ICsEvent Model definition of a event in c#. Inherited Members ICsMember.Name ICsMember.Security ICsMember.MemberType ICsMember.AddBeforeAsync(string, string) ICsMember.AddBeforeAsync(string) ICsMember.AddBeforeAsync(string, bool) ICsMember.AddAfterAsync(string, string) ICsMember.AddAfterAsync(string) ICsMember.DeleteAsync(string) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(string) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(string, string) ICsMember.ReplaceAsync(string) ICsMember.CommentOutSyntaxAsync(string) ICsMember.GetMemberSyntaxAsync() ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsEvent : ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties AddMethod The method that adds a subscription to the event. Declaration CsMethod AddMethod { get; } Property Value Type Description CsMethod EventHandlerDelegate The event handler delegate used by the event. Declaration CsDelegate EventHandlerDelegate { get; } Property Value Type Description CsDelegate EventType The event handler type that is assigned to the event. Declaration CsType EventType { get; } Property Value Type Description CsType IsAbstract Flag that determines if the event has been implemented as an abstract event. Declaration bool IsAbstract { get; } Property Value Type Description bool IsOverride Flag that determines if the event has been overridden. Declaration bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the event has been sealed. Declaration bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if the event is static. Declaration bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the event is implemented as virtual. Declaration bool IsVirtual { get; } Property Value Type Description bool RaiseMethod The method definition to raise the event. Declaration CsMethod RaiseMethod { get; } Property Value Type Description CsMethod RemoveMethod The method that removes a subscription to the event. Declaration CsMethod RemoveMethod { get; } Property Value Type Description CsMethod Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsField.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsField.html",
    "title": "Interface ICsField | CodeFactory for Windows",
    "keywords": "Interface ICsField Model definition of a Field in .net. Inherited Members ICsMember.Name ICsMember.Security ICsMember.MemberType ICsMember.AddBeforeAsync(string, string) ICsMember.AddBeforeAsync(string) ICsMember.AddBeforeAsync(string, bool) ICsMember.AddAfterAsync(string, string) ICsMember.AddAfterAsync(string) ICsMember.DeleteAsync(string) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(string) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(string, string) ICsMember.ReplaceAsync(string) ICsMember.CommentOutSyntaxAsync(string) ICsMember.GetMemberSyntaxAsync() ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsField : ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties ConstantValue The value that was assigned to the constant. Will return as the string representation of the value. Declaration string ConstantValue { get; } Property Value Type Description string DataType The data type assigned to the field. Declaration CsType DataType { get; } Property Value Type Description CsType IsConstant Flag that determines if the field is a constant. Declaration bool IsConstant { get; } Property Value Type Description bool IsReadOnly Flag that determines if this field is set to readonly. Declaration bool IsReadOnly { get; } Property Value Type Description bool IsStatic Flag that determines if the field is set to be static. Declaration bool IsStatic { get; } Property Value Type Description bool Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsGeneric.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsGeneric.html",
    "title": "Interface ICsGeneric | CodeFactory for Windows",
    "keywords": "Interface ICsGeneric Definition that determines if the c# model implements generics. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsGeneric Properties GenericParameters List of the generic parameters assigned. Declaration IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList<CsGenericParameter> GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration bool HasStrongTypesInGenerics { get; } Property Value Type Description bool IsGeneric Flag the determines if this item supports generics Declaration bool IsGeneric { get; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsGenericParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsGenericParameter.html",
    "title": "Interface ICsGenericParameter | CodeFactory for Windows",
    "keywords": "Interface ICsGenericParameter Model contract for information about a parameter used in a generic definition. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsGenericParameter : ICsModel, IModelStatus Properties ConstrainingTypes The constraining types the generic parameter must ad hear to. If there are no constraining types an empty list will be returned. Declaration IReadOnlyList<CsType> ConstrainingTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasClassConstraint Flag that determines if the generic parameter has a constraint that it must implement from a class. Declaration bool HasClassConstraint { get; } Property Value Type Description bool HasConstraintTypes Flag that determines if the generic parameter has constraining types the parameter must ad hear to. Declaration bool HasConstraintTypes { get; } Property Value Type Description bool HasNewConstraint Flag that determines if the generic parameter has a constraint that is must support construction of a new type. Declaration bool HasNewConstraint { get; } Property Value Type Description bool HasOutKeyword Flag that determines if the generic parameter uses the out keyword. Declaration bool HasOutKeyword { get; } Property Value Type Description bool HasStructConstraint Flag that determines if the generic parameter has a constraint that is must implement from a structure. Declaration bool HasStructConstraint { get; } Property Value Type Description bool Type The type definition of the generic parameter. Declaration CsType Type { get; } Property Value Type Description CsType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsInterface.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsInterface.html",
    "title": "Interface ICsInterface | CodeFactory for Windows",
    "keywords": "Interface ICsInterface Model implementation of an interface in C#. Inherited Members ICsNestedContainers.NestedModels ICsNestedContainers.NestedClasses ICsNestedContainers.NestedInterfaces ICsNestedContainers.NestedStructures ICsNestedContainers.NestedEnums ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsInterface : ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsMember.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsMember.html",
    "title": "Interface ICsMember | CodeFactory for Windows",
    "keywords": "Interface ICsMember Base definition for all c# member models. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsMember : ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties MemberType The type of member the model is. Declaration CsMemberType MemberType { get; } Property Value Type Description CsMemberType Name The name assigned to the member. Declaration string Name { get; } Property Value Type Description string Security The security scope that has been assigned to the member. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsMemberin the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsMemberin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the member definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CommentOutSyntaxAsync(string) Comments out the member hosting syntax. Declaration Task<CsSource> CommentOutSyntaxAsync(string commentSyntax = \"//\") Parameters Type Name Description string commentSyntax Optional parameter that sets the syntax used to comment out the member defaults to '//' Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the member has been commented out. This will return the current instance if the model was not loaded from source. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the member from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the member from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the member is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetMemberSyntaxAsync() Gets the syntax that defined the member model. Declaration Task<string> GetMemberSyntaxAsync() Returns Type Description Task<string> The syntax that makes up the member or null if the syntax cannot be loaded. This will be null if the model was not loaded from source code. GetSourceLocationAsync() Gets the starting and ending locations within the document where the member is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the member is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the member defined in. Returns Type Description Task<ISourceLocation> The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current member with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current member with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsMethod.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsMethod.html",
    "title": "Interface ICsMethod | CodeFactory for Windows",
    "keywords": "Interface ICsMethod Model definition of a method in c#. Inherited Members ICsMember.Name ICsMember.Security ICsMember.MemberType ICsMember.AddBeforeAsync(string, string) ICsMember.AddBeforeAsync(string) ICsMember.AddBeforeAsync(string, bool) ICsMember.AddAfterAsync(string, string) ICsMember.AddAfterAsync(string) ICsMember.DeleteAsync(string) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(string) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(string, string) ICsMember.ReplaceAsync(string) ICsMember.CommentOutSyntaxAsync(string) ICsMember.GetMemberSyntaxAsync() ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IParent.Parent ILookup.LookupPath ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsMethod : ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup, ICsGeneric Properties HasParameters Flag that determines if the method has parameters assigned to it. Declaration bool HasParameters { get; } Property Value Type Description bool IsAbstract Flag that determines if the method has been implemented as abstract. Declaration bool IsAbstract { get; } Property Value Type Description bool IsAsync Flag that determines if the method implements the Async keyword. Declaration bool IsAsync { get; } Property Value Type Description bool IsExtension Flag that determines if the method is an extension method. Declaration bool IsExtension { get; } Property Value Type Description bool IsOverride Flag that determines if the method has been overridden. Declaration bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the method has been sealed. Declaration bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this is a static method. Declaration bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the method has been implemented as virtual. Declaration bool IsVirtual { get; } Property Value Type Description bool IsVoid Flag that determines if the methods return type is void. Declaration bool IsVoid { get; } Property Value Type Description bool MethodType Determines the type of method that was loaded into this model. Declaration CsMethodType MethodType { get; } Property Value Type Description CsMethodType Parameters Enumeration of the parameters that have been assigned to the method. If HasParameters property is set to false this will be null. Declaration IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsParameter> ReturnType The type information about the return type assigned to the method. if flag is true then the return type will be set to null. Declaration CsType ReturnType { get; } Property Value Type Description CsType SyntaxContent Determines how the internal syntax for the method is stored. Declaration SyntaxType SyntaxContent { get; } Property Value Type Description SyntaxType Methods AddToBeginningBodySyntaxAsync(string) Adds the source code to the beginning of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration Task<CsSource> AddToBeginningBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToBeginningBodySyntaxAsync(string, string) Adds the source code to the beginning of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddToBeginningBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToEndBodySyntaxAsync(string) Adds the source code to the end of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration Task<CsSource> AddToEndBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToEndBodySyntaxAsync(string, string) Adds the source code to the end of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddToEndBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. DeleteBodySyntaxAsync() Deletes the source syntax from the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration Task<CsSource> DeleteBodySyntaxAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. DeleteBodySyntaxAsync(string) Deletes the source syntax from the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteBodySyntaxAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. GetBodySyntaxAsync() The source code syntax that is stored in the body of the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Body. Declaration Task<string> GetBodySyntaxAsync() Returns Type Description Task<string> GetBodySyntaxListAsync() The source code syntax that is stored in the body of the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Body. This will return each line of code that has a line feed or return as a separate string. Declaration Task<List<string>> GetBodySyntaxListAsync() Returns Type Description Task<List<string>> GetExpressionSyntaxAsync() Gets the expression that has been assigned to the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Expression. Declaration Task<string> GetExpressionSyntaxAsync() Returns Type Description Task<string> ReplaceBodySyntaxAsync(string) Replaces the syntax in the body of the method. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration Task<CsSource> ReplaceBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceBodySyntaxAsync(string, string) Replaces the syntax in the body of the method. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the body of the method. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceExpressionAsync(string) Replaces the expression assigned to the method with the provided source code. The ContentSyntax must be set to Expression or else an exception will be thrown. Declaration Task<CsSource> ReplaceExpressionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that will replace the original expression. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceExpressionAsync(string, string) Replaces the expression assigned to the method with the provided source code. The ContentSyntax must be set to Expression or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceExpressionAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that will replace the original expression. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsModel.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsModel.html",
    "title": "Interface ICsModel | CodeFactory for Windows",
    "keywords": "Interface ICsModel Base implementation all C# models must implement. Inherited Members IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsModel : IModelStatus Properties Language The target language this model was loaded from. Declaration SourceCodeType Language { get; } Property Value Type Description SourceCodeType LoadedFromSource Flag that determines if this model was loaded from source code or was loaded through reflects or symbol libraries. Declaration bool LoadedFromSource { get; } Property Value Type Description bool ModelType The type of c# model that is implemented. Declaration CsModelType ModelType { get; } Property Value Type Description CsModelType SourceDocument The fully qualified path to the document that was used to load the model from source. This will be populated if the model was loaded from source. Declaration string SourceDocument { get; } Property Value Type Description string Methods GetModel(string) Searchs for an existing C# model that has been loaded with the load of the source code. Declaration CsModel GetModel(string lookupPath) Parameters Type Name Description string lookupPath The lookup path that is assigned to a loaded model. Returns Type Description CsModel Returns the model as the base CsModel type. GetModel<T>(string) Searchs for an existing C# model that has been loaded with the load of the source code. Declaration T GetModel<T>(string lookupPath) where T : class, ICsModel Parameters Type Name Description string lookupPath The lookup path that is assigned to a loaded model. Returns Type Description T Returns the model as the identified type it will either return the instance or null if it is not found or not the correct type. Type Parameters Name Description T The target CsModel type to cast to before returning."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsNamespace.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsNamespace.html",
    "title": "Interface ICsNamespace | CodeFactory for Windows",
    "keywords": "Interface ICsNamespace Model definition for a namespace definition inside a code file in C#. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent ILookup.LookupPath ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsNamespace : ICsModel, IModelStatus, IParent, ILookup, ISourceFiles Properties Name The name of the namespace. Declaration string Name { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsNestedContainers.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsNestedContainers.html",
    "title": "Interface ICsNestedContainers | CodeFactory for Windows",
    "keywords": "Interface ICsNestedContainers Definition of the container types that can be nested in other containers. Inherited Members ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsNestedContainers : ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties NestedClasses Classes that are nested in this container. Declaration IReadOnlyList<CsClass> NestedClasses { get; } Property Value Type Description IReadOnlyList<CsClass> NestedEnums Enums that are nested in this container. Declaration IReadOnlyList<CsEnum> NestedEnums { get; } Property Value Type Description IReadOnlyList<CsEnum> NestedInterfaces Interfaces that are nested in this container. Declaration IReadOnlyList<CsInterface> NestedInterfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> NestedModels Models that are nested in the implementation of this container. Declaration IReadOnlyList<ICsNestedModel> NestedModels { get; } Property Value Type Description IReadOnlyList<ICsNestedModel> NestedStructures Structures that are nested in this container. Declaration IReadOnlyList<CsStructure> NestedStructures { get; } Property Value Type Description IReadOnlyList<CsStructure> Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsNestedModel.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsNestedModel.html",
    "title": "Interface ICsNestedModel | CodeFactory for Windows",
    "keywords": "Interface ICsNestedModel Interface that identifies if the implementation of this model is nested within another model. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsNestedModel : ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties IsNested Flag that determines if this model is nested in a parent model. Declaration bool IsNested { get; } Property Value Type Description bool NestedType Identifies the type of model that has been nested. Declaration CsNestedType NestedType { get; } Property Value Type Description CsNestedType Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsParameter.html",
    "title": "Interface ICsParameter | CodeFactory for Windows",
    "keywords": "Interface ICsParameter The definition of a parameter used in C#. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ICsAttributes.HasAttributes ICsAttributes.Attributes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsParameter : ICsModel, IModelStatus, ICsAttributes, IParent, ILookup Properties DefaultValue The default value assigned to the parameter. This will be null if the HasDefaultValue property is set to false. Declaration CsParameterDefaultValue DefaultValue { get; } Property Value Type Description CsParameterDefaultValue HasDefaultValue Flag that determines if the parameter has a default value. Declaration bool HasDefaultValue { get; } Property Value Type Description bool IsGenericParameter Flag that determines if the parameter is a generic place holder. Declaration bool IsGenericParameter { get; } Property Value Type Description bool IsOptional Flag that determines if the parameter is optional. Declaration bool IsOptional { get; } Property Value Type Description bool IsOut Flag that determines if the parameter is assigned the out keyword. Declaration bool IsOut { get; } Property Value Type Description bool IsParams Flag that determines if the parameter is an parameter array. Declaration bool IsParams { get; } Property Value Type Description bool IsRef Flag that determines if the parameter is assigned the ref keyword. Declaration bool IsRef { get; } Property Value Type Description bool Name The name of the parameter. Declaration string Name { get; } Property Value Type Description string ParameterType The data type assigned to the parameter. Declaration CsType ParameterType { get; } Property Value Type Description CsType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsParameterDefaultValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsParameterDefaultValue.html",
    "title": "Interface ICsParameterDefaultValue | CodeFactory for Windows",
    "keywords": "Interface ICsParameterDefaultValue Model that represents a default value for a ICsParameter model. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsParameterDefaultValue : ICsModel, IModelStatus, IParent, ILookup Properties Value If the default value is a literal value the value will be set, otherwise it will be set to null. Declaration string Value { get; } Property Value Type Description string ValueType The type of default value assigned to the parameter. Declaration ParameterDefaultValueType ValueType { get; } Property Value Type Description ParameterDefaultValueType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsProperty.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsProperty.html",
    "title": "Interface ICsProperty | CodeFactory for Windows",
    "keywords": "Interface ICsProperty Model definition of a property in C#. Inherited Members ICsMember.Name ICsMember.Security ICsMember.MemberType ICsMember.AddBeforeAsync(string, string) ICsMember.AddBeforeAsync(string) ICsMember.AddBeforeAsync(string, bool) ICsMember.AddAfterAsync(string, string) ICsMember.AddAfterAsync(string) ICsMember.DeleteAsync(string) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(string) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(string, string) ICsMember.ReplaceAsync(string) ICsMember.CommentOutSyntaxAsync(string) ICsMember.GetMemberSyntaxAsync() ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsProperty : ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties GetMethod Provides access to the get method statement in the property. This will be null the property does not have a get statement. Declaration CsMethod GetMethod { get; } Property Value Type Description CsMethod GetSecurity The security scope that is assigned to the get accessor. Make sure you check the HasGet to determine if the property supports get operations. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the GetMethod property to access the get method details.\", false)] CsSecurity GetSecurity { get; } Property Value Type Description CsSecurity HasGet Flag that determines if this property supports get accessor. Declaration bool HasGet { get; } Property Value Type Description bool HasInit Flag that determines if this property supports init accessor. Declaration bool HasInit { get; } Property Value Type Description bool HasSet Flag that determines if this property supports set accessor. Declaration bool HasSet { get; } Property Value Type Description bool InitMethod Provides access to the init method statement in the property. This will be null the property does not have a init statement. Declaration CsMethod InitMethod { get; } Property Value Type Description CsMethod IsAbstract Flag that determines if the property is implemented as an abstract property. Declaration bool IsAbstract { get; } Property Value Type Description bool IsOverride Flag that determines if the property has been overridden. Declaration bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the property has been sealed. Declaration bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if the property has been implemented as static. Declaration bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the property is implemented as virtual. Declaration bool IsVirtual { get; } Property Value Type Description bool PropertyType The source data type that is managed by this property. Declaration CsType PropertyType { get; } Property Value Type Description CsType SetMethod Provides access to the set method statement in the property. This will be null the property does not have a set statement. Declaration CsMethod SetMethod { get; } Property Value Type Description CsMethod SetSecurity The security scope that is assigned to the set accessor. Make sure you check the HasSet to determine if the property supports set operations. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the SetMethod property to access the set method details.\", false)] CsSecurity SetSecurity { get; } Property Value Type Description CsSecurity Methods LoadGetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the GetMethod property to access the get method details.\", false)] Task<string> LoadGetBodySyntaxAsync() Returns Type Description Task<string> LoadSetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the SetMethod property to access the set method details.\", false)] Task<string> LoadSetBodySyntaxAsync() Returns Type Description Task<string> Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsRecord.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsRecord.html",
    "title": "Interface ICsRecord | CodeFactory for Windows",
    "keywords": "Interface ICsRecord Model definition for a class in C#. Inherited Members ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsRecord : ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties BaseRecord The base record assigned to this record. This will be null if HasBase is false. Declaration CsRecord BaseRecord { get; } Property Value Type Description CsRecord Constructors List of the constructors implemented in this class. Declaration IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Destructor The destructor implemented in this class. Declaration CsMethod Destructor { get; } Property Value Type Description CsMethod Fields List of the fields implemented in this class. Declaration IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> IsAbstract Flat that determines if this is an abstract record. Declaration bool IsAbstract { get; } Property Value Type Description bool IsSealed Flag that determines if this record has been sealed. Declaration bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this record is static. Declaration bool IsStatic { get; } Property Value Type Description bool Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsRecordStructure.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsRecordStructure.html",
    "title": "Interface ICsRecordStructure | CodeFactory for Windows",
    "keywords": "Interface ICsRecordStructure Model definition for a record structure in C#. Inherited Members ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsRecordStructure : ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties Constructors List of the constructors for this record structure. Declaration IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Fields List of the fields for this record structure. Declaration IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsSource.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsSource.html",
    "title": "Interface ICsSource | CodeFactory for Windows",
    "keywords": "Interface ICsSource Source definition from a source that was written in C#. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsSource : ICsModel, IModelStatus, IParent, ILookup Properties Classes The classes that were defined in the source. Declaration IReadOnlyList<CsClass> Classes { get; } Property Value Type Description IReadOnlyList<CsClass> Delegates The delegates that were defined in the source. Declaration IReadOnlyList<CsDelegate> Delegates { get; } Property Value Type Description IReadOnlyList<CsDelegate> Enums The enumerations that were defined in the source. Declaration IReadOnlyList<CsEnum> Enums { get; } Property Value Type Description IReadOnlyList<CsEnum> HostedInProject Flag that determines if the source code was hosted in a project. Declaration bool HostedInProject { get; } Property Value Type Description bool Interfaces The interfaces that were defined in the source. Declaration IReadOnlyList<CsInterface> Interfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> NamespaceReferences The namespaces that are used as references to access other libraries not hosted in the source document. Declaration IReadOnlyList<CsUsingStatement> NamespaceReferences { get; } Property Value Type Description IReadOnlyList<CsUsingStatement> Namespaces The namespaces that were defined in the source. Declaration IReadOnlyList<CsNamespace> Namespaces { get; } Property Value Type Description IReadOnlyList<CsNamespace> ProjectName The name of the project the source is hosted in. This will be null if this source is not hosted in a project. Declaration string ProjectName { get; } Property Value Type Description string RecordStructures The record structures that were defined in the source. Declaration IReadOnlyList<CsRecordStructure> RecordStructures { get; } Property Value Type Description IReadOnlyList<CsRecordStructure> Records The records that were defined in the source. Declaration IReadOnlyList<CsRecord> Records { get; } Property Value Type Description IReadOnlyList<CsRecord> Structures The structures that were defined in the source. Declaration IReadOnlyList<CsStructure> Structures { get; } Property Value Type Description IReadOnlyList<CsStructure> Methods AddToBeginningAsync(string) Adds the source code to the beginning of the ICsSource model. Declaration Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToEndAsync(string) Adds the source code the end of the ICsSource model. Declaration Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the content from the ICsSource model. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string) Replaces the content of the ICsSource model. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsStructure.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsStructure.html",
    "title": "Interface ICsStructure | CodeFactory for Windows",
    "keywords": "Interface ICsStructure Model definition for a structure in C#. Inherited Members ICsNestedContainers.NestedModels ICsNestedContainers.NestedClasses ICsNestedContainers.NestedInterfaces ICsNestedContainers.NestedStructures ICsNestedContainers.NestedEnums ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsStructure : ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties Constructors List of the constructors for this structure. Declaration IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Fields List of the fields for this structure. Declaration IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsTupleTypeParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsTupleTypeParameter.html",
    "title": "Interface ICsTupleTypeParameter | CodeFactory for Windows",
    "keywords": "Interface ICsTupleTypeParameter The C# model definition for the TupleTypeParameter. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsTupleTypeParameter : ICsModel, IModelStatus Properties HasDefaultName Flag that determines if the named assigned to the tuple was system generated or defined in source. Declaration bool HasDefaultName { get; } Property Value Type Description bool Name The name assigned to the tuple parameter. Declaration string Name { get; } Property Value Type Description string TupleType The model with the type definition assigned to the tuple. Declaration CsType TupleType { get; } Property Value Type Description CsType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsType.html",
    "title": "Interface ICsType | CodeFactory for Windows",
    "keywords": "Interface ICsType Model that defines a type used in a C# model definition. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsType : ICsModel, IModelStatus, ICsGeneric Properties ArrayDimensions Gets a list of the dimensions that are assigned to the array. This will contain more then one value if the array is a jagged array. This will be empty if the type is not an array. Declaration IReadOnlyList<int> ArrayDimensions { get; } Property Value Type Description IReadOnlyList<int> IsArray Flag that determines if the type is an array of the target type. Declaration bool IsArray { get; } Property Value Type Description bool IsClass Flag that determines if the type is a class. Declaration bool IsClass { get; } Property Value Type Description bool IsDelegate Flag that determines if the type is a delegate. Declaration bool IsDelegate { get; } Property Value Type Description bool IsEnum Flag that determines if the type is a enumeration. Declaration bool IsEnum { get; } Property Value Type Description bool IsGenericPlaceHolder Flag that determines if the type is a generic place holder definition. Declaration bool IsGenericPlaceHolder { get; } Property Value Type Description bool IsInterface Flag that determines if the type is an interface. Declaration bool IsInterface { get; } Property Value Type Description bool IsStructure Flag that determines if the type is a structure. Declaration bool IsStructure { get; } Property Value Type Description bool IsTuple Flag that determine if the type is a Tuple Declaration bool IsTuple { get; } Property Value Type Description bool IsValueType Flag that determines if the type is a value type. Declaration bool IsValueType { get; } Property Value Type Description bool IsWellKnownType Flag that determines if the type is one of the well know data types of the language. Declaration bool IsWellKnownType { get; } Property Value Type Description bool Name The name of the type. Declaration string Name { get; } Property Value Type Description string Namespace The namespace the type belongs to. Declaration string Namespace { get; } Property Value Type Description string SupportsDisposable Flag that determines if the type supports the interface . Declaration bool SupportsDisposable { get; } Property Value Type Description bool TupleTypes List of the types that are implemented in the Tuple. This will an empty list if the type is not a tuple. Declaration IReadOnlyList<CsTupleTypeParameter> TupleTypes { get; } Property Value Type Description IReadOnlyList<CsTupleTypeParameter> ValueTypeDefaultValue The default value for well known value data types. This will be null if the value is not a well known value type. Declaration string ValueTypeDefaultValue { get; } Property Value Type Description string WellKnownType Enumeration of the target well known type this type represents. Declaration CsKnownLanguageType WellKnownType { get; } Property Value Type Description CsKnownLanguageType Methods GetClassModel() Loads the full ICsClass model from the type definition. Declaration CsClass GetClassModel() Returns Type Description CsClass Return the fully loaded model or an empty model if the type is not a class. GetDelegateModel() Loads the full ICsDelegate model from the type definition. Declaration CsDelegate GetDelegateModel() Returns Type Description CsDelegate Return the fully loaded model or an empty model if the type is not a delegate. GetEnumModel() Loads the full ICsEnum model from the type definition. Declaration CsEnum GetEnumModel() Returns Type Description CsEnum Return the fully loaded model or an empty model if the type is not an enumeration. GetInterfaceModel() Loads the full ICsInterface model from the type definition. Declaration CsInterface GetInterfaceModel() Returns Type Description CsInterface Return the fully loaded model or an empty model if the type is not an interface. GetStructureModel() Loads the full ICsStructure model from the type definition. Declaration CsStructure GetStructureModel() Returns Type Description CsStructure Return the fully loaded model or an empty model if the type is not a structure."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsUsingStatement.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsUsingStatement.html",
    "title": "Interface ICsUsingStatement | CodeFactory for Windows",
    "keywords": "Interface ICsUsingStatement Model that represents a using statement in a C# source model. Inherited Members ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument ICsModel.GetModel<T>(string) ICsModel.GetModel(string) IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent ILookup.LookupPath IUsingStatementNamespace.ReferenceNamespace IUsingStatementNamespace.HasAlias IUsingStatementNamespace.Alias Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsUsingStatement : ICsModel, IModelStatus, IParent, ILookup, IUsingStatementNamespace Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the using statement from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the using statement from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the using statement is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the using statement is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the using statement is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the using statement defined in. Returns Type Description Task<ISourceLocation> The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current using statement with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current using statement with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document."
  },
  "api/CodeFactory.WinVs.Models.CSharp.IDocumentation.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.IDocumentation.html",
    "title": "Interface IDocumentation | CodeFactory for Windows",
    "keywords": "Interface IDocumentation Interface that determines if a model has code level documentation. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface IDocumentation Properties Documentation Documentation that has been assigned to this model. Declaration string Documentation { get; } Property Value Type Description string HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration bool HasDocumentation { get; } Property Value Type Description bool Methods AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ILookup.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ILookup.html",
    "title": "Interface ILookup | CodeFactory for Windows",
    "keywords": "Interface ILookup Defines lookup information for a model that supports being searched for. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ILookup Properties LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration string LookupPath { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.IParent.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.IParent.html",
    "title": "Interface IParent | CodeFactory for Windows",
    "keywords": "Interface IParent Defines information how to find the parent model for the model that implements this C# model. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface IParent Properties Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration CsModel Parent { get; } Property Value Type Description CsModel"
  },
  "api/CodeFactory.WinVs.Models.CSharp.IUsingStatementNamespace.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.IUsingStatementNamespace.html",
    "title": "Interface IUsingStatementNamespace | CodeFactory for Windows",
    "keywords": "Interface IUsingStatementNamespace Mapping of the alias and namespace used in C# source files. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface IUsingStatementNamespace Properties Alias The alias assigned to the namespace being imported. This will be null if the HasAlias is false. Declaration string Alias { get; } Property Value Type Description string HasAlias Flag that determines if the namespace reference has an alias. Declaration bool HasAlias { get; } Property Value Type Description bool ReferenceNamespace The target namespace that is being imported into the sources scope. Declaration string ReferenceNamespace { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ManualUsingStatementNamespace.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ManualUsingStatementNamespace.html",
    "title": "Class ManualUsingStatementNamespace | CodeFactory for Windows",
    "keywords": "Class ManualUsingStatementNamespace Manual C# data model that supports the IUsingStatementNamespace interface. Inheritance object ManualUsingStatementNamespace Implements IUsingStatementNamespace Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public class ManualUsingStatementNamespace : IUsingStatementNamespace Constructors ManualUsingStatementNamespace(string, bool, string) Creates a new instance of the ManualUsingStatementNamespace Declaration public ManualUsingStatementNamespace(string referenceNamespace, bool hasAlias = false, string alias = null) Parameters Type Name Description string referenceNamespace The target C# namespace assoicated with a source code file using statement. bool hasAlias Optional parameter that determines if the namespadce has an alias, default is false. string alias Optional parameter that identifies the alias for the namespace, default is null. Properties Alias The alias assigned to the namespace being imported. This will be null if the HasAlias is false. Declaration public string Alias { get; } Property Value Type Description string HasAlias Flag that determines if the namespace reference has an alias. Declaration public bool HasAlias { get; } Property Value Type Description bool ReferenceNamespace The target namespace that is being imported into the sources scope. Declaration public string ReferenceNamespace { get; } Property Value Type Description string Implements IUsingStatementNamespace"
  },
  "api/CodeFactory.WinVs.Models.CSharp.MapNamespace.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.MapNamespace.html",
    "title": "Class MapNamespace | CodeFactory for Windows",
    "keywords": "Class MapNamespace Utility data class used to map a source namespace to a target namespace. Generally used for migration of source from one namespace to another.. Inheritance object MapNamespace Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public class MapNamespace Properties Destination The target namespace to be mapped to. Declaration public string Destination { get; set; } Property Value Type Description string Source The source namespace that needs to be mapped. Declaration public string Source { get; set; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.MemberComparisonType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.MemberComparisonType.html",
    "title": "Enum MemberComparisonType | CodeFactory for Windows",
    "keywords": "Enum MemberComparisonType Enumeration of the types of member comparison Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum MemberComparisonType Fields Name Description Base Member is compared by the base signature only, no key words, instance scoping , or security added. Full Member is compared by the full signature including scoping and target keywords Security Member is compared by the base signature and the security assigned to the member."
  },
  "api/CodeFactory.WinVs.Models.CSharp.NamespaceManager.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.NamespaceManager.html",
    "title": "Class NamespaceManager | CodeFactory for Windows",
    "keywords": "Class NamespaceManager Utility class that allows you to load in a collection of using statements for target namespaces that will be used for source generation operations for the C# programming language. Inheritance object NamespaceManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public class NamespaceManager Constructors NamespaceManager(IEnumerable<IUsingStatementNamespace>, string) Creates an instance of the NamespaceManager Declaration public NamespaceManager(IEnumerable<IUsingStatementNamespace> usingStatements = null, string targetNamespace = null) Parameters Type Name Description IEnumerable<IUsingStatementNamespace> usingStatements Using statements to be used for formatting in code output. string targetNamespace Additional namespace to check for that will be the target namespace the content will be managed under. Methods AddNamespace(IUsingStatementNamespace) Adds additional namespace to the namespace manager. Declaration public NamespaceManager AddNamespace(IUsingStatementNamespace nameSpace) Parameters Type Name Description IUsingStatementNamespace nameSpace Using statement to add to the namespace manager. Returns Type Description NamespaceManager New instance of the namespace manager with the added using statements. AddNamespace(string, string) Adds an additional namespace to the namespace manager. Declaration public NamespaceManager AddNamespace(string nameSpace, string alias = null) Parameters Type Name Description string nameSpace Target namespace to be added to the manager. string alias Optional, the alias to assign to the target namespace. Returns Type Description NamespaceManager AddNamespaces(IEnumerable<ICsUsingStatement>) Adds additional namespaces to the namespace manager. Declaration public NamespaceManager AddNamespaces(IEnumerable<ICsUsingStatement> nameSpaces) Parameters Type Name Description IEnumerable<ICsUsingStatement> nameSpaces Using statements to add to the namespace manager. Returns Type Description NamespaceManager New instance of the namespace manager with the added using statements. AppendingNamespace(string) Defines the appending namespace that will be appended to types or other declares based on if the namespace is currently supported by using or namespace definitions. Declaration public string AppendingNamespace(string nameSpace) Parameters Type Name Description string nameSpace Namespace to format Returns Type Description string Null if the namespace is not needed or the formatted substring of the namespace used in declarations and other actions. ValidNameSpace(string) Determines if the provides namespace was found. Declaration public (bool namespaceFound, bool hasAlias, string alias) ValidNameSpace(string nameSpace) Parameters Type Name Description string nameSpace The namespace to search for in the namespace manager. Returns Type Description (bool namespaceFound, bool hasAlias, string alias) Returns a tuple that determine the namespace was found and if the found namespace had an alias."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ParameterDefaultValueType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ParameterDefaultValueType.html",
    "title": "Enum ParameterDefaultValueType | CodeFactory for Windows",
    "keywords": "Enum ParameterDefaultValueType Enumeration that determines the type of default value that is assigned to the value type. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum ParameterDefaultValueType Fields Name Description DefaultKeyWord The default keyword for the type should be used. None There is no default value or it is unknown NullKeyword The keyword that represents a null implementation of the type should be used. Value The provided literal value should be used for the default type."
  },
  "api/CodeFactory.WinVs.Models.CSharp.PathBuilderConstants.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.PathBuilderConstants.html",
    "title": "Class PathBuilderConstants | CodeFactory for Windows",
    "keywords": "Class PathBuilderConstants Data constants that are used when building the unique path for a dot net model. Inheritance object PathBuilderConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class PathBuilderConstants Fields Attribute Definition of a attribute model in the path for a dot net model. Declaration public const string Attribute = \"/A:\" Field Value Type Description string Class Definition of a class model in the path for a dot net model. Declaration public const string Class = \"/C:\" Field Value Type Description string Delegate Definition of a delegate model in the path for a dot net model. Declaration public const string Delegate = \"/D:\" Field Value Type Description string Enum Definition of a enumeration model in the path for a dot net model. Declaration public const string Enum = \"/EN:\" Field Value Type Description string EnumValue Definition of a enumeration value model in the path for a dot net model. Declaration public const string EnumValue = \"/ENV:\" Field Value Type Description string Event Definition of a event model in the path for a dot net model. Declaration public const string Event = \"/E:\" Field Value Type Description string Field Definition of a field model in the path for a dot net model. Declaration public const string Field = \"/F:\" Field Value Type Description string Interface Definition of a interface model in the path for a dot net model. Declaration public const string Interface = \"/I:\" Field Value Type Description string Method Definition of a method model in the path for a dot net model. Declaration public const string Method = \"/M:\" Field Value Type Description string Namespace Definition of a namespace path for a dot net model. Declaration public const string Namespace = \"/NS:\" Field Value Type Description string NamespaceReference Reference to a namespace that is used in a dot net model. Declaration public const string NamespaceReference = \"/NSREF:\" Field Value Type Description string Parameter Definition of a parameter model in the path for a dot net model. Declaration public const string Parameter = \"/PARM:\" Field Value Type Description string ParameterDefaultValue Definition of a parameter model default value in the path for a dot net model. Declaration public const string ParameterDefaultValue = \"/PARMDV:\" Field Value Type Description string Property Definition of a property model in the path for a dot net model. Declaration public const string Property = \"/P:\" Field Value Type Description string Record Definition of a record model in the path of a dot net model. Declaration public const string Record = \"/R:\" Field Value Type Description string RecordStructure Definition of a record structure model in the path of a dot net model. Declaration public const string RecordStructure = \"/RS:\" Field Value Type Description string Source Definition of the source entry point that holds all dot net models. Declaration public const string Source = \"//SRC:\" Field Value Type Description string Structure Definition of a structure model in the path for a dot net model. Declaration public const string Structure = \"/S:\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.SyntaxType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.SyntaxType.html",
    "title": "Enum SyntaxType | CodeFactory for Windows",
    "keywords": "Enum SyntaxType Determines the type of syntax that is hosted in a Dot Net model. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum SyntaxType Fields Name Description Body The syntax is hosted in the body of the target model. Expression The syntax is hosted in a single expression using a => directive. Unknown No syntax definition has been identified or an unknown declaration was used."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.html",
    "title": "Namespace CodeFactory.WinVs.Models.ProjectSystem | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Models.ProjectSystem Classes ProjectSystemException Code factory exception that occurs when accessing visual studios project system. SolutionExplorerException Exception that is raised when there are problem accessing needed resources from visual studio's solution explorer. VsCSharpSource Data model that represents C# source code. VsCSharpSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the VsCSharpSource model. VsDocument Data model that represents a document that is hosted in visual studio. VsModel Base class used by all visual studio models. VsModelExtensions Extensions method class to support VsModel VsProject Data model that presents a visual studio project that has been loaded. VsProjectExtensions Extensions methods class that supports the model VsProject. VsProjectFolder Data model that represents a folder in a project hosted in visual studio. VsProjectFolderExtensions Extensions methods class that support the VsProjectFolder model. VsProjectFramework Data class that implements IVsProjectFramework VsReference Data model that presents a visual studio reference that has been loaded. VsSolution Data model that represents the loaded solution in visual studio. VsSolutionFolder Data model that represents a solution folder in a loaded solution. Interfaces IChildren Defining if the visual studio object has child objects. IParent Interface to determine IVsCSharpSource Visual studio model that loads the source from a C# document. IVsDocument Definition of a document associated with a project in visual studio. IVsDocumentActions Visual studio actions that support the IVsDocument model. IVsModel Base contract definition all Visual Studio Models are based on. IVsProject Definition of a visual studio project model information. IVsProjectActions Visual studio actions that support the IVsProject model. IVsProjectFolder Definition of a visual studio project folder model information. IVsProjectFolderActions Visual studio actions that support the IVsProjectFolder model. IVsProjectFramework Target framework in which the project will output to. IVsReference Definition of a visual studio project reference model information. IVsReferenceActions Visual studio actions that support the IVsReference model. IVsSolution Model of the solution that is currently loaded in visual studio. IVsSolutionActions Actions that can be used with the a IVsSolution model. IVsSolutionFolder Model of a solution folder that is currently loaded in visual studio. IVsSolutionFolderActions Visual studio actions that support the IVsSolutionFolder model. IVsSourceActions The visual studio actions that support source models. Enums ProjectLanguage Definition of the a language has compiler support within a target project. ProjectReferenceType Enumeration VisualStudioModelType Enumeration of the different type of code factory models that support visual studio integration. VsDocumentType Enumeration that determines the type of visual studio document that has been loaded."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IChildren.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IChildren.html",
    "title": "Interface IChildren | CodeFactory for Windows",
    "keywords": "Interface IChildren Defining if the visual studio object has child objects. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IChildren Properties HasChildren Flag that determines if this visual studio object has child objects. Declaration bool HasChildren { get; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IParent.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IParent.html",
    "title": "Interface IParent | CodeFactory for Windows",
    "keywords": "Interface IParent Interface to determine Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IParent Properties HasParent Flag that determines if the visual studio object has a parent. Declaration bool HasParent { get; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsCSharpSource.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsCSharpSource.html",
    "title": "Interface IVsCSharpSource | CodeFactory for Windows",
    "keywords": "Interface IVsCSharpSource Visual studio model that loads the source from a C# document. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsCSharpSource : IVsModel, IModel<VisualStudioModelType> Properties SourceCode The C# source in the document. Declaration CsSource SourceCode { get; } Property Value Type Description CsSource"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsDocument.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsDocument.html",
    "title": "Interface IVsDocument | CodeFactory for Windows",
    "keywords": "Interface IVsDocument Definition of a document associated with a project in visual studio. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsDocument : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Properties DocumentType The type of document that is loaded. Declaration VsDocumentType DocumentType { get; } Property Value Type Description VsDocumentType IsSourceCode Flag that determines if the project document contains source code that can be managed by code factory. Declaration bool IsSourceCode { get; } Property Value Type Description bool Path The fully qualified path to the project document. Declaration string Path { get; } Property Value Type Description string SourceType The target type of source code that is implemented in the project document. Declaration SourceCodeType SourceType { get; } Property Value Type Description SourceCodeType"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsDocumentActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsDocumentActions.html",
    "title": "Interface IVsDocumentActions | CodeFactory for Windows",
    "keywords": "Interface IVsDocumentActions Visual studio actions that support the IVsDocument model. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsDocumentActions Methods AddContentAsync(VsDocument, IDocumentLocation, string) Adds content to a target starting at an assigned Declaration Task AddContentAsync(VsDocument source, IDocumentLocation location, string content) Parameters Type Name Description VsDocument source Document to have content added to. IDocumentLocation location Location within the document to add content to. string content The content to be added to the document. Returns Type Description Task AddContentToBeginningAsync(VsDocument, string) Adds content to the beginning of a document. Declaration Task AddContentToBeginningAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source Document to add content to. string content The content to be added. Returns Type Description Task AddContentToEndAsync(VsDocument, string) Adds content to the end of a document. Declaration Task AddContentToEndAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source Document to add content to. string content The content to be added. Returns Type Description Task DeleteAsync(VsDocument) Deletes the document. Declaration Task<bool> DeleteAsync(VsDocument source) Parameters Type Name Description VsDocument source document to be deleted. Returns Type Description Task<bool> Flag that notifies if the delete operation completed successfully. Remarks Currently does not support deleting solution documents. GetCSharpSourceModelAsync(VsDocument) If the document is implemented as a C# code model. Will return the C# source code model from the visual studio document. Declaration Task<CsSource> GetCSharpSourceModelAsync(VsDocument source) Parameters Type Name Description VsDocument source The source document to load the C# code model from. Returns Type Description Task<CsSource> The loaded model or null if the model could not be loaded. GetChildrenAsync(VsDocument, bool) Gets the direct children of the document. Declaration Task<IReadOnlyList<VsDocument>> GetChildrenAsync(VsDocument source, bool allChildren) Parameters Type Name Description VsDocument source The document to get children from. bool allChildren Flag that determines if all children from the document should be returned. Returns Type Description Task<IReadOnlyList<VsDocument>> Readonly list of all the project documents, if no children are found then an empty readonly list will be returned. GetDocumentContentAsContentAsync(VsDocument) Gets the content of the document. Declaration Task<IDocumentContent> GetDocumentContentAsContentAsync(VsDocument source) Parameters Type Name Description VsDocument source The document to get content from. Returns Type Description Task<IDocumentContent> Document content as GetDocumentContentAsStringAsync(VsDocument) Gets the content of the document. Declaration Task<string> GetDocumentContentAsStringAsync(VsDocument source) Parameters Type Name Description VsDocument source The document to get content from. Returns Type Description Task<string> The content of the document or null if there is no content in the document. GetDocumentContentAsStringAsync(VsDocument, IDocumentLocation, IDocumentLocation) Gets the content of the document. Declaration Task<string> GetDocumentContentAsStringAsync(VsDocument source, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description VsDocument source The document to get content from. IDocumentLocation startLocation The starting position within the document to get content from. IDocumentLocation endLocation The ending position within the document to get content form. Returns Type Description Task<string> The content of the document or null if there is no content in the document. GetParentAsync(VsDocument) Get the parent visual studio model of the document. Declaration Task<VsModel> GetParentAsync(VsDocument source) Parameters Type Name Description VsDocument source document to get the parent of. Returns Type Description Task<VsModel> Model of the parent of this document. The model will be returned unless there is no parent, otherwise null will be returned. RemoveAsync(VsDocument) Removes a document from visual studio but does not remove it from the file system. Declaration Task<bool> RemoveAsync(VsDocument source) Parameters Type Name Description VsDocument source document to be removed. Returns Type Description Task<bool> Flag that notifies if the remove operation completed successfully. Remarks Currently does not support removing solution documents. RemoveContentAsync(VsDocument) Removes all the content from a document. Declaration Task RemoveContentAsync(VsDocument source) Parameters Type Name Description VsDocument source Document to remove content from. Returns Type Description Task RemoveContentAsync(VsDocument, IDocumentLocation, IDocumentLocation) Removes a target set of content from the document. Declaration Task RemoveContentAsync(VsDocument source, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description VsDocument source Document to remove content from. IDocumentLocation startLocation The starting position within the document to remove content from. IDocumentLocation endLocation The ending position within the document to remove content form. Returns Type Description Task ReplaceContentAsync(VsDocument, string) Replaces all the content within the document. Declaration Task ReplaceContentAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source The target document to have content replaced. string content Content to replace the existing content in the document. Returns Type Description Task ReplaceContentAsync(VsDocument, string, IDocumentLocation, IDocumentLocation) Replaces all the content within the document. Declaration Task ReplaceContentAsync(VsDocument source, string content, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description VsDocument source The target document to have content replaced. string content Content to replace the existing content in the document. IDocumentLocation startLocation The starting position within the document to replace content. IDocumentLocation endLocation The ending location within the document to replace content. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsModel.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsModel.html",
    "title": "Interface IVsModel | CodeFactory for Windows",
    "keywords": "Interface IVsModel Base contract definition all Visual Studio Models are based on. Inherited Members IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsModel : IModel<VisualStudioModelType> Properties Name The name of the visual studio model. Declaration string Name { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProject.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProject.html",
    "title": "Interface IVsProject | CodeFactory for Windows",
    "keywords": "Interface IVsProject Definition of a visual studio project model information. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsProject : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Properties DefaultNamespace The default namespace for the project if it support .net framework or .net core. Otherwise this will be null. Declaration string DefaultNamespace { get; } Property Value Type Description string LegacyProjectModel Flag that determines if this visual studio project uses the legacy project model. If so then only basic capabilities and references will be available through code factory. Declaration bool LegacyProjectModel { get; } Property Value Type Description bool Path The fully qualified path to the project file name. Declaration string Path { get; } Property Value Type Description string ProjectLanguages The project languages that are supported in this project. Declaration IReadOnlyList<ProjectLanguage> ProjectLanguages { get; } Property Value Type Description IReadOnlyList<ProjectLanguage> TargetFrameworks The target frameworks this project supports as output. Declaration IReadOnlyList<VsProjectFramework> TargetFrameworks { get; } Property Value Type Description IReadOnlyList<VsProjectFramework>"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectActions.html",
    "title": "Interface IVsProjectActions | CodeFactory for Windows",
    "keywords": "Interface IVsProjectActions Visual studio actions that support the IVsProject model. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsProjectActions Methods AddDocumentAsync(VsProject, string, string) Adds a project document to the root of the project. Declaration Task<VsDocument> AddDocumentAsync(VsProject source, string fileName, string content = null) Parameters Type Name Description VsProject source The project to be added to. string fileName The file name of the document. This should be the name only with no file path. string content The content that will be initially added to the document. This is an optional parameter. Returns Type Description Task<VsDocument> The created project document. AddExistingDocumentAsync(VsProject, string) Adds an existing document to the project. Declaration Task<VsDocument> AddExistingDocumentAsync(VsProject source, string fileName) Parameters Type Name Description VsProject source The project to be added to. string fileName The file name for the document. This should be the file name only with extension. The file must already be in the projects folder. Returns Type Description Task<VsDocument> The model of the created project document. AddProjectFolderAsync(VsProject, string) Adds a project folder to the root of the project. Declaration Task<VsProjectFolder> AddProjectFolderAsync(VsProject source, string folderName) Parameters Type Name Description VsProject source The project to be added to. string folderName The name of the project folder. This should be the name only with no path. Returns Type Description Task<VsProjectFolder> The created project folder. GetChildrenAsync(VsProject, bool, bool) Get all the children that are direct children of the project. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsProject source, bool allChildren, bool loadSourceCode = false) Parameters Type Name Description VsProject source the project to get the children from. bool allChildren Flag that determines if it should return all children of the project and not just the top level children. bool loadSourceCode Flag that determines if code factory managed source code models should be loaded instead of the standard VsDocument model. Returns Type Description Task<IReadOnlyList<VsModel>> The children of the project, if no children are found and empty enumeration will be returned. GetParentAsync(VsProject) Gets the parent solution folder that holds the project. Declaration Task<VsSolutionFolder> GetParentAsync(VsProject source) Parameters Type Name Description VsProject source Project to get the parent for. Returns Type Description Task<VsSolutionFolder> Returns a solution folder if the project has a parent or null if the project has no parent. GetReferencedProjects(VsProject) Get the VsProject models for all projects that are referenced by this project. Declaration Task<IReadOnlyList<VsProject>> GetReferencedProjects(VsProject source) Parameters Type Name Description VsProject source Source project to get referenced projects from. Returns Type Description Task<IReadOnlyList<VsProject>> Readonly list of the referenced projects or an empty list if there is no referenced projects. GetReferencesAsync(VsProject) Gets the references assigned to this project. Declaration Task<IReadOnlyList<VsReference>> GetReferencesAsync(VsProject source) Parameters Type Name Description VsProject source The source project to get the references from. Returns Type Description Task<IReadOnlyList<VsReference>> Readonly list of the references."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFolder.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFolder.html",
    "title": "Interface IVsProjectFolder | CodeFactory for Windows",
    "keywords": "Interface IVsProjectFolder Definition of a visual studio project folder model information. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsProjectFolder : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Properties Path the fully qualified path to the project folder. Declaration string Path { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFolderActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFolderActions.html",
    "title": "Interface IVsProjectFolderActions | CodeFactory for Windows",
    "keywords": "Interface IVsProjectFolderActions Visual studio actions that support the IVsProjectFolder model. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsProjectFolderActions Methods AddDocumentAsync(VsProjectFolder, string, string) Adds a document to the project folder. Declaration Task<VsDocument> AddDocumentAsync(VsProjectFolder source, string fileName, string content = null) Parameters Type Name Description VsProjectFolder source The project folder to add the document to. string fileName The file name for the document. This should be the file name only with extension. string content The content to be added to the document once its added. Note, this is an optional parameter. Returns Type Description Task<VsDocument> The model of the created project document. AddExistingDocumentAsync(VsProjectFolder, string) Adds an existing document to the project folder. Declaration Task<VsDocument> AddExistingDocumentAsync(VsProjectFolder source, string fileName) Parameters Type Name Description VsProjectFolder source The project folder to add the document to. string fileName The file name for the document. This should be the file name only with extension. The file must already be in the project folder. Returns Type Description Task<VsDocument> The model of the created project document. AddProjectFolderAsync(VsProjectFolder, string) Adds a new project folder under the current project folder. Declaration Task<VsProjectFolder> AddProjectFolderAsync(VsProjectFolder source, string folderName) Parameters Type Name Description VsProjectFolder source The project folder to add to. string folderName The name of the project folder. The project folder name should be the name only no path. Returns Type Description Task<VsProjectFolder> The model for the created project folder. DeleteAsync(VsProjectFolder) Deletes the project folder. Declaration Task<bool> DeleteAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder to be deleted. Returns Type Description Task<bool> Flag determining if the folder was deleted, True for deleted and false if the folder could not be deleted. GetCSharpNamespaceAsync(VsProjectFolder) Gets the target namespace for a document that support c# language to be placed in this folder. Declaration Task<string> GetCSharpNamespaceAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder model to get the namespace for. Returns Type Description Task<string> The fully qualified namespace if the project is a c# project that supports this project folder. Otherwise null will be returned. GetChildrenAsync(VsProjectFolder, bool, bool) Gets the IVsModel of the items that are direct children of this project folder. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsProjectFolder source, bool allChildren, bool loadSourceCode = false) Parameters Type Name Description VsProjectFolder source The project folder to get children from. bool allChildren Flag that determines if all children not just the first level children of the project folder. bool loadSourceCode Flag that determines if code factory managed source code models should be loaded instead of the standard VsDocument model. Returns Type Description Task<IReadOnlyList<VsModel>> Readonly list of the children that belong to this project folder. If no children are found an empty readonly list will be returned. GetParentAsync(VsProjectFolder) Gets the parent visual studio model that is the parent of this Project folder. Declaration Task<VsModel> GetParentAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder to get the parent. Returns Type Description Task<VsModel> The visual studio model of the parent or null if the project folder does not have a parent. RemoveAsync(VsProjectFolder) Removes the project folder from visual studio, but does not delete it from the file system. Declaration Task<bool> RemoveAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder to be removed. Returns Type Description Task<bool> Flag determining if the folder was removed, True for removed and false if the folder could not be removed."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFramework.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFramework.html",
    "title": "Interface IVsProjectFramework | CodeFactory for Windows",
    "keywords": "Interface IVsProjectFramework Target framework in which the project will output to. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsProjectFramework Properties Framework The framework that the project is targeting. Declaration string Framework { get; } Property Value Type Description string Version The specified version the framework to be released to. Declaration string Version { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsReference.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsReference.html",
    "title": "Interface IVsReference | CodeFactory for Windows",
    "keywords": "Interface IVsReference Definition of a visual studio project reference model information. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsReference : IVsModel, IModel<VisualStudioModelType> Properties Aliases Readonly list of the aliases assigned to this reference. Declaration IReadOnlyList<string> Aliases { get; } Property Value Type Description IReadOnlyList<string> FilePath The fully qualified path to the source reference. Declaration string FilePath { get; } Property Value Type Description string HasAliases Flag that determines if the reference has aliases. Declaration bool HasAliases { get; } Property Value Type Description bool Type The type of the project reference. Declaration ProjectReferenceType Type { get; } Property Value Type Description ProjectReferenceType"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsReferenceActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsReferenceActions.html",
    "title": "Interface IVsReferenceActions | CodeFactory for Windows",
    "keywords": "Interface IVsReferenceActions Visual studio actions that support the IVsReference model. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsReferenceActions Methods GetReferencedProjectAsync(VsReference) Gets the VsProject model for the project that represents this reference. Declaration Task<VsProject> GetReferencedProjectAsync(VsReference source) Parameters Type Name Description VsReference source The project reference to load. Returns Type Description Task<VsProject> The loaded project model or null if the project reference does not support a project based reference."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolution.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolution.html",
    "title": "Interface IVsSolution | CodeFactory for Windows",
    "keywords": "Interface IVsSolution Model of the solution that is currently loaded in visual studio. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IChildren.HasChildren Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsSolution : IVsModel, IModel<VisualStudioModelType>, IChildren Properties Path The fully qualified path to the solution file name. Declaration string Path { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionActions.html",
    "title": "Interface IVsSolutionActions | CodeFactory for Windows",
    "keywords": "Interface IVsSolutionActions Actions that can be used with the a IVsSolution model. Inherited Members IVsActions.GetSolutionAsync() IVsActions.GetProjectFromSourceAsync(CsSource) IVsActions.GetCSharpProjectFileFromSourceAsync(CsSource) IVsActions.GetProjectFileFromSourceAsync(CsSource) IVsActions.GetCSharpSourceAsync(string) IVsActions.EnvironmentActions IVsActions.SolutionActions IVsActions.SolutionFolderActions IVsActions.ProjectActions IVsActions.ProjectReferenceActions IVsActions.ProjectFolderActions IVsActions.DocumentActions IVsActions.UserInterfaceActions IVsActions.SourceActions Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsSolutionActions : IVsActions Methods CreateSolutionFolderAsync(VsSolution, string) Creates a new solution folder for the target solution. Declaration Task<VsSolutionFolder> CreateSolutionFolderAsync(VsSolution source, string name) Parameters Type Name Description VsSolution source The solution to add the solution folder to. string name The name of the solution folder to be added. Returns Type Description Task<VsSolutionFolder> Returns the solution folder. GetChildrenAsync(VsSolution, bool) Gets the solution folders and projects that belong to the solution. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsSolution source, bool allChildren) Parameters Type Name Description VsSolution source The solution model to get the children from. bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsModel>> Returns a readonly list of the children to the solution. If there are no children an empty list will be returned. GetProjectsAsync(VsSolution, bool) Gets the projects for the solution. Declaration Task<IReadOnlyList<VsProject>> GetProjectsAsync(VsSolution source, bool allChildren) Parameters Type Name Description VsSolution source The solution model to get the projects from. bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsProject>> Returns all the projects that are part of the solution. Will return an empty list if no projects are found. GetSolutionFoldersAsync(VsSolution, bool) Gets the solution folders for the solution. Declaration Task<IReadOnlyList<VsSolutionFolder>> GetSolutionFoldersAsync(VsSolution source, bool allChildren) Parameters Type Name Description VsSolution source The solution model to get the solution folders from. bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsSolutionFolder>> Returns a readonly of the solutions folders that are part of the solution. If there are no solution folders an empty list will be returned. Extension Methods VsActionsExtensions.GetCSharpSourceAsync(IVsActions, CsContainer) VsActionsExtensions.GetCSharpSourceAsync(IVsActions, CsMember) VsActionsExtensions.GetProjectFolderFromConfigAsync(IVsActions, ConfigProject, string, bool) VsActionsExtensions.GetProjectFromConfigAsync(IVsActions, ConfigProject) VsActionsExtensions.GetTargetProjectAsync(IVsActions, string)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionFolder.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionFolder.html",
    "title": "Interface IVsSolutionFolder | CodeFactory for Windows",
    "keywords": "Interface IVsSolutionFolder Model of a solution folder that is currently loaded in visual studio. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsSolutionFolder : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionFolderActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionFolderActions.html",
    "title": "Interface IVsSolutionFolderActions | CodeFactory for Windows",
    "keywords": "Interface IVsSolutionFolderActions Visual studio actions that support the IVsSolutionFolder model. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsSolutionFolderActions Methods AddDocumentAsync(VsSolutionFolder, string, string) Creates a document that is hosted in the solution folder. Declaration Task<VsDocument> AddDocumentAsync(VsSolutionFolder source, string fileName, string content = null) Parameters Type Name Description VsSolutionFolder source The solution folder to add the document to. string fileName The name of the document to create. string content The content to add to the document. Returns Type Description Task<VsDocument> Instance of the new document. AddExistingDocumentAsync(VsSolutionFolder, string) Adds an existing document to the solution folder. Declaration Task<VsDocument> AddExistingDocumentAsync(VsSolutionFolder source, string fileName) Parameters Type Name Description VsSolutionFolder source The solution folder to add the document to. string fileName The file name for the document. This should be the file name only with extension. The file must already be in the solution folder. Returns Type Description Task<VsDocument> The model of the created document. AddSolutionFolder(VsSolutionFolder, string) Create a new solution folder under the current solution folder. Declaration Task<VsSolutionFolder> AddSolutionFolder(VsSolutionFolder source, string folderName) Parameters Type Name Description VsSolutionFolder source The solution folder that the new solution folder will be added to. string folderName The name of the solution folder. Returns Type Description Task<VsSolutionFolder> Instance of the new solution folder. GetChildrenAsync(VsSolutionFolder, bool) Gets the children of the solution folder, this will return the files and projects that are part of the solution folder. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsSolutionFolder source, bool allChildren) Parameters Type Name Description VsSolutionFolder source The solution folder to get the children from. bool allChildren Flag that determines if all the direct children of the solution folder should also get there children. Returns Type Description Task<IReadOnlyList<VsModel>> Returns a readonly list of the children within this solution folder. Will return an empty list if there is no children. GetParentAsync(VsSolutionFolder) Gets the parent solution folder. Declaration Task<VsSolutionFolder> GetParentAsync(VsSolutionFolder source) Parameters Type Name Description VsSolutionFolder source The solution folder to find the parent for. Returns Type Description Task<VsSolutionFolder> The parent solution folder model or null if there is no parent for this solution folder. Remove(VsSolutionFolder) Removes the solution folder from the visual studio solution that is hosting the solution folder. Declaration Task<bool> Remove(VsSolutionFolder source) Parameters Type Name Description VsSolutionFolder source The solution folder that is to be removed from visual studio. Returns Type Description Task<bool> Boolean flag true - solution folder was been removed or false the folder is either already removed or could not be removed."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSourceActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSourceActions.html",
    "title": "Interface IVsSourceActions | CodeFactory for Windows",
    "keywords": "Interface IVsSourceActions The visual studio actions that support source models. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsSourceActions Methods LoadDocumentFromSourceAsync(ICsSource) Loads the IVsDocument model from the provided ICsSource model. Declaration Task<VsDocument> LoadDocumentFromSourceAsync(ICsSource source) Parameters Type Name Description ICsSource source Model to load the document from. Returns Type Description Task<VsDocument> Loaded document model. Exceptions Type Condition DocumentException Exception that occurs while loading the document."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectLanguage.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectLanguage.html",
    "title": "Enum ProjectLanguage | CodeFactory for Windows",
    "keywords": "Enum ProjectLanguage Definition of the a language has compiler support within a target project. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public enum ProjectLanguage Fields Name Description CSharp The project supports the compile of the C# programming language. FSharp The project supports the compile of the F# programming language JavaScript The project supports the compile of the java script programming language. TypeScript The project supports the compile of the type script programming language. Unknown Code factory could not determine the programming language. VisualBasic The project supports the compile of the visual basic programming language."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectReferenceType.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectReferenceType.html",
    "title": "Enum ProjectReferenceType | CodeFactory for Windows",
    "keywords": "Enum ProjectReferenceType Enumeration Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public enum ProjectReferenceType Fields Name Description Assembly Reference is a direct assembly file that is referenced by the project. Com Reference is a com library. NuGet Reference comes from a direct external nuget feed. Project Reference is an existing project within the solution. Unknown The reference is of an unknown type."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectSystemException.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectSystemException.html",
    "title": "Class ProjectSystemException | CodeFactory for Windows",
    "keywords": "Class ProjectSystemException Code factory exception that occurs when accessing visual studios project system. Inheritance object Exception CodeFactoryException VisualStudioException ProjectSystemException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public class ProjectSystemException : VisualStudioException, ISerializable Constructors ProjectSystemException() Creates a visual studio project system code factory exception. Declaration public ProjectSystemException() ProjectSystemException(string) Creates a visual studio project system code factory exception. Declaration public ProjectSystemException(string message) Parameters Type Name Description string message The error message to be captured by the exception ProjectSystemException(string, Exception) Creates a visual studio project system code factory exception. Declaration public ProjectSystemException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.SolutionExplorerException.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.SolutionExplorerException.html",
    "title": "Class SolutionExplorerException | CodeFactory for Windows",
    "keywords": "Class SolutionExplorerException Exception that is raised when there are problem accessing needed resources from visual studio's solution explorer. Inheritance object Exception CodeFactoryException VisualStudioException SolutionExplorerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public class SolutionExplorerException : VisualStudioException, ISerializable Constructors SolutionExplorerException() Creates a solution explorer code factory exception. Declaration public SolutionExplorerException() SolutionExplorerException(string) Creates a solution explorer code factory exception. Declaration public SolutionExplorerException(string message) Parameters Type Name Description string message The error message to be captured by the exception SolutionExplorerException(string, Exception) Creates a solution explorer code factory exception. Declaration public SolutionExplorerException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VisualStudioModelType.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VisualStudioModelType.html",
    "title": "Enum VisualStudioModelType | CodeFactory for Windows",
    "keywords": "Enum VisualStudioModelType Enumeration of the different type of code factory models that support visual studio integration. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public enum VisualStudioModelType Fields Name Description CSharpSource Target model represents visual studio source contained in a document. Document Target model represents a visual studio document. Project Target model represents a visual studio project. ProjectFolder Target model represents a visual studio project folder. ProjectFramework The target framework output for a project. Reference Target model for a reference used by a project Solution The target model represents a visual studio solution. SolutionFolder The target model represents a visual studio solution folder. Unknown Target model is unknown"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsCSharpSource.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsCSharpSource.html",
    "title": "Class VsCSharpSource | CodeFactory for Windows",
    "keywords": "Class VsCSharpSource Data model that represents C# source code. Inheritance object VsModel VsCSharpSource Implements IVsCSharpSource IVsModel IModel<VisualStudioModelType> Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsCSharpSource : VsModel, IVsCSharpSource, IVsModel, IModel<VisualStudioModelType> Constructors VsCSharpSource(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, CsSource) Constructor for the base class VsCSharpSource Declaration protected VsCSharpSource(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, CsSource sourceCode) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. CsSource sourceCode The loaded C# model data. Properties SourceCode The C# source in the document. Declaration public CsSource SourceCode { get; } Property Value Type Description CsSource Methods LoadDocumentModelAsync() Loads the visual studio document model from the current loaded source model. Declaration public abstract Task<VsDocument> LoadDocumentModelAsync() Returns Type Description Task<VsDocument> The loaded document model. Implements IVsCSharpSource IVsModel IModel<TModelTypes> Extension Methods VsCSharpSourceExtensions.GetProjectFolderStructureAsync(VsCSharpSource) VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsCSharpSourceExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsCSharpSourceExtensions.html",
    "title": "Class VsCSharpSourceExtensions | CodeFactory for Windows",
    "keywords": "Class VsCSharpSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the VsCSharpSource model. Inheritance object VsCSharpSourceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public static class VsCSharpSourceExtensions Methods GetProjectFolderStructureAsync(VsCSharpSource) Get the full project folder structure that hosts the source code/ Declaration public static Task<IReadOnlyList<string>> GetProjectFolderStructureAsync(this VsCSharpSource source) Parameters Type Name Description VsCSharpSource source The source C# source code to get the directory structure for. Returns Type Description Task<IReadOnlyList<string>> Read only list in folder order hosted under the target project."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsDocument.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsDocument.html",
    "title": "Class VsDocument | CodeFactory for Windows",
    "keywords": "Class VsDocument Data model that represents a document that is hosted in visual studio. Inheritance object VsModel VsDocument Implements IVsDocument IVsModel IModel<VisualStudioModelType> IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsDocument : VsModel, IVsDocument, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors VsDocument(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, bool, bool, string, VsDocumentType, bool, SourceCodeType) Constructor for the base class VsDocument Declaration protected VsDocument(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren, string path, VsDocumentType documentType, bool isSourceCode, SourceCodeType sourceType) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. bool hasParent Flag that determines if this model has a parent model. bool hasChildren Flag that determines if this model has child models. string path The fully qualified path to the document. VsDocumentType documentType The type of visual studio document. bool isSourceCode Is a source code file loadable by code factory. SourceCodeType sourceType The type of source code found in the document. Properties DocumentType The type of document that is loaded. Declaration public VsDocumentType DocumentType { get; } Property Value Type Description VsDocumentType HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description bool HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description bool IsSourceCode Flag that determines if the project document contains source code that can be managed by code factory. Declaration public bool IsSourceCode { get; } Property Value Type Description bool Path The fully qualified path to the project document. Declaration public string Path { get; } Property Value Type Description string SourceType The target type of source code that is implemented in the project document. Declaration public SourceCodeType SourceType { get; } Property Value Type Description SourceCodeType Methods AddContentAsync(IDocumentLocation, string) Adds content to a target starting at an assigned Declaration public abstract Task AddContentAsync(IDocumentLocation location, string content) Parameters Type Name Description IDocumentLocation location Location within the document to add content to. string content The content to be added to the document. Returns Type Description Task AddContentToBeginningAsync(string) Adds content to the beginning of a document. Declaration public abstract Task AddContentToBeginningAsync(string content) Parameters Type Name Description string content The content to be added. Returns Type Description Task AddContentToEndAsync(string) Adds content to the end of a document. Declaration public abstract Task AddContentToEndAsync(string content) Parameters Type Name Description string content The content to be added. Returns Type Description Task DeleteAsync() Deletes the document. Declaration public abstract Task<bool> DeleteAsync() Returns Type Description Task<bool> Flag that notifies if the delete operation completed successfully. Remarks Currently does not support deleting solution documents. GetCSharpSourceModelAsync() If the document is implemented as a C# code model. Will return the C# source code model from the visual studio document. Declaration public abstract Task<CsSource> GetCSharpSourceModelAsync() Returns Type Description Task<CsSource> The loaded model or null if the model could not be loaded. GetChildrenAsync(bool) Gets the direct children of the document. Declaration public abstract Task<IReadOnlyList<VsDocument>> GetChildrenAsync(bool allChildren) Parameters Type Name Description bool allChildren Flag that determines if all children from the document should be returned. Returns Type Description Task<IReadOnlyList<VsDocument>> Readonly list of all the project documents, if no children are found then an empty readonly list will be returned. GetDocumentContentAsContentAsync() Gets the content of the document. Declaration public abstract Task<IDocumentContent> GetDocumentContentAsContentAsync() Returns Type Description Task<IDocumentContent> Document content as GetDocumentContentAsStringAsync() Gets the content of the document. Declaration public abstract Task<string> GetDocumentContentAsStringAsync() Returns Type Description Task<string> The content of the document or null if there is no content in the document. GetDocumentContentAsStringAsync(IDocumentLocation, IDocumentLocation) Gets the content of the document. Declaration public abstract Task<string> GetDocumentContentAsStringAsync(IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description IDocumentLocation startLocation The starting position within the document to get content from. IDocumentLocation endLocation The ending position within the document to get content form. Returns Type Description Task<string> The content of the document or null if there is no content in the document. GetParentAsync() Get the parent visual studio model of the document. Declaration public abstract Task<VsModel> GetParentAsync() Returns Type Description Task<VsModel> Model of the parent of this document. The model will be returned unless there is no parent, otherwise null will be returned. RemoveAsync() Removes a document from visual studio but does not remove it from the file system. Declaration public abstract Task<bool> RemoveAsync() Returns Type Description Task<bool> Flag that notifies if the remove operation completed successfully. Remarks Currently does not support removing solution documents. RemoveContentAsync() Removes all the content from a document. Declaration public abstract Task RemoveContentAsync() Returns Type Description Task RemoveContentAsync(IDocumentLocation, IDocumentLocation) Removes a target set of content from the document. Declaration public abstract Task RemoveContentAsync(IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description IDocumentLocation startLocation The starting position within the document to remove content from. IDocumentLocation endLocation The ending position within the document to remove content form. Returns Type Description Task ReplaceContentAsync(string) Replaces all the content within the document. Declaration public abstract Task ReplaceContentAsync(string content) Parameters Type Name Description string content Content to replace the existing content in the document. Returns Type Description Task ReplaceContentAsync(string, IDocumentLocation, IDocumentLocation) Replaces all the content within the document. Declaration public abstract Task ReplaceContentAsync(string content, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description string content Content to replace the existing content in the document. IDocumentLocation startLocation The starting position within the document to replace content. IDocumentLocation endLocation The ending location within the document to replace content. Returns Type Description Task Implements IVsDocument IVsModel IModel<TModelTypes> IParent IChildren Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsDocumentType.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsDocumentType.html",
    "title": "Enum VsDocumentType | CodeFactory for Windows",
    "keywords": "Enum VsDocumentType Enumeration that determines the type of visual studio document that has been loaded. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public enum VsDocumentType Fields Name Description Project Is a document is a project. Solution Is a document at the solution level. Unknown The document type is unknown."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsModel.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsModel.html",
    "title": "Class VsModel | CodeFactory for Windows",
    "keywords": "Class VsModel Base class used by all visual studio models. Inheritance object VsModel VsCSharpSource VsDocument VsProject VsProjectFolder VsProjectFramework VsReference VsSolution VsSolutionFolder Implements IVsModel IModel<VisualStudioModelType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsModel : IVsModel, IModel<VisualStudioModelType> Constructors VsModel(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, VisualStudioModelType, string) Constructor for the base class VsModel Declaration protected VsModel(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, VisualStudioModelType modelType, string name) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. VisualStudioModelType modelType The type of visual studio model that is loaded. string name The name of the model. Properties HasErrors Flag that determines if this model has errors. Declaration public bool HasErrors { get; } Property Value Type Description bool IsLoaded Flag that determines if this model was able to load. Declaration public bool IsLoaded { get; } Property Value Type Description bool ModelErrors List of all errors that occurred in this model. Declaration public IReadOnlyList<ModelException<VisualStudioModelType>> ModelErrors { get; } Property Value Type Description IReadOnlyList<ModelException<VisualStudioModelType>> ModelType Determines the type of model that has been loaded. Declaration public VisualStudioModelType ModelType { get; } Property Value Type Description VisualStudioModelType Name The name of the visual studio model. Declaration public string Name { get; } Property Value Type Description string Implements IVsModel IModel<TModelTypes> Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsModelExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsModelExtensions.html",
    "title": "Class VsModelExtensions | CodeFactory for Windows",
    "keywords": "Class VsModelExtensions Extensions method class to support VsModel Inheritance object VsModelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public static class VsModelExtensions Methods GetHostingProjectAsync(VsModel) Gets the hosting project from the provided VsModel Declaration public static Task<VsProject> GetHostingProjectAsync(this VsModel source) Parameters Type Name Description VsModel source The visual studio model to search the project. Returns Type Description Task<VsProject> The VsProject model that hosts the current model or null if the project is not found. Exceptions Type Condition ArgumentNullException Raised when the model is null. CodeFactoryException Raised if the source code functionality cannot load the project file. GetParentProjectFolderAsync(VsModel) Gets the hosting project folder. Declaration public static Task<VsProjectFolder> GetParentProjectFolderAsync(this VsModel source) Parameters Type Name Description VsModel source Model to get the parent project folder. Returns Type Description Task<VsProjectFolder> Returns the parent project folder or null if their is no parent project folder."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsProject.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsProject.html",
    "title": "Class VsProject | CodeFactory for Windows",
    "keywords": "Class VsProject Data model that presents a visual studio project that has been loaded. Inheritance object VsModel VsProject Implements IVsProject IVsModel IModel<VisualStudioModelType> IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsProject : VsModel, IVsProject, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors VsProject(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, bool, bool, string, bool, IReadOnlyList<ProjectLanguage>, string, IReadOnlyList<VsProjectFramework>) Constructor for the base class VsProject Declaration protected VsProject(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren, string path, bool legacyProjectModel, IReadOnlyList<ProjectLanguage> projectLanguages, string defaultNamespace, IReadOnlyList<VsProjectFramework> targetFrameworks) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. bool hasParent Flag that determines if there is a parent model for this model. bool hasChildren Flag that determines if this model has child models. string path The fully qualified path of the project. bool legacyProjectModel Flag that determines if this project uses the legacy project system for visual studio. IReadOnlyList<ProjectLanguage> projectLanguages The programming languages this project supports. string defaultNamespace The default namespace for the project if it support .net framework or .net core. Otherwise this will be null. IReadOnlyList<VsProjectFramework> targetFrameworks List of the target frameworks this project sends output to on compile. Properties DefaultNamespace The default namespace for the project if it support .net framework or .net core. Otherwise this will be null. Declaration public string DefaultNamespace { get; } Property Value Type Description string HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description bool HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description bool LegacyProjectModel Flag that determines if this visual studio project uses the legacy project model. If so then only basic capabilities and references will be available through code factory. Declaration public bool LegacyProjectModel { get; } Property Value Type Description bool Path The fully qualified path to the project file name. Declaration public string Path { get; } Property Value Type Description string ProjectLanguages The project languages that are supported in this project. Declaration public IReadOnlyList<ProjectLanguage> ProjectLanguages { get; } Property Value Type Description IReadOnlyList<ProjectLanguage> TargetFrameworks The target frameworks this project supports as output. Declaration public IReadOnlyList<VsProjectFramework> TargetFrameworks { get; } Property Value Type Description IReadOnlyList<VsProjectFramework> Methods AddDocumentAsync(string, string) Adds a project document to the root of the project. Declaration public abstract Task<VsDocument> AddDocumentAsync(string fileName, string content = null) Parameters Type Name Description string fileName The file name of the document. This should be the name only with no file path. string content The content that will be initially added to the document. This is an optional parameter. Returns Type Description Task<VsDocument> The created project document. AddExistingDocumentAsync(string) Adds an existing document to the project. Declaration public abstract Task<VsDocument> AddExistingDocumentAsync(string fileName) Parameters Type Name Description string fileName The file name for the document. This should be the file name only with extension. The file must already be in the projects folder. Returns Type Description Task<VsDocument> The model of the created project document. AddProjectFolderAsync(string) Adds a project folder to the root of the project. Declaration public abstract Task<VsProjectFolder> AddProjectFolderAsync(string folderName) Parameters Type Name Description string folderName The name of the project folder. This should be the name only with no path. Returns Type Description Task<VsProjectFolder> The created project folder. GetChildrenAsync(bool, bool) Get all the children that are direct children of the project. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren, bool loadSourceCode = false) Parameters Type Name Description bool allChildren Flag that determines if it should return all children of the project and not just the top level children. bool loadSourceCode Flag to determine if code files that support code factory source code will be loaded by default. If enabled this could be memory intensive. Returns Type Description Task<IReadOnlyList<VsModel>> The children of the project, if no children are found and empty enumeration will be returned. GetParentAsync() Gets the parent solution folder that holds the project. Declaration public abstract Task<VsSolutionFolder> GetParentAsync() Returns Type Description Task<VsSolutionFolder> Returns a solution folder if the project has a parent or null if the project has no parent. GetProjectReferencesAsync() Gets the references assigned to this project. Declaration public abstract Task<IReadOnlyList<VsReference>> GetProjectReferencesAsync() Returns Type Description Task<IReadOnlyList<VsReference>> Readonly list of the references. GetReferencedProjects() Get the VsProject models for all projects that are referenced by this project. Declaration public Task<IReadOnlyList<VsProject>> GetReferencedProjects() Returns Type Description Task<IReadOnlyList<VsProject>> Readonly list of the referenced projects or an empty list if there is no referenced projects. Implements IVsProject IVsModel IModel<TModelTypes> IParent IChildren Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel) VsProjectExtensions.FindCSharpSourceByClassNameAsync(VsProject, string, bool) VsProjectExtensions.FindCSharpSourceByFileNameAsync(VsProject, string, bool) VsProjectExtensions.FindCSharpSourceByInterfaceNameAsync(VsProject, string, bool) VsProjectExtensions.FindSourceAsync(VsProject, CsClass, bool)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectExtensions.html",
    "title": "Class VsProjectExtensions | CodeFactory for Windows",
    "keywords": "Class VsProjectExtensions Extensions methods class that supports the model VsProject. Inheritance object VsProjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public static class VsProjectExtensions Methods FindCSharpSourceByClassNameAsync(VsProject, string, bool) Locates a target VsCSharpSource model in a project by the name of the class itself. Declaration public static Task<VsCSharpSource> FindCSharpSourceByClassNameAsync(this VsProject source, string className, bool searchAllFolders = true) Parameters Type Name Description VsProject source The project to search in. string className The name of the class that is managed in the source code file. bool searchAllFolders optional flag that determines if all folders under the project should be searched. Returns Type Description Task<VsCSharpSource> The source code model the target class was found in. FindCSharpSourceByFileNameAsync(VsProject, string, bool) Locates a target VsCSharpSource model by the filename of the source code file. Declaration public static Task<VsCSharpSource> FindCSharpSourceByFileNameAsync(this VsProject source, string fileName, bool searchAllFolders = true) Parameters Type Name Description VsProject source The project to search the model for. string fileName The name of the source code file. bool searchAllFolders optional flag that determines if all folders under the project should be searched. Returns Type Description Task<VsCSharpSource> The source code model for the target code file found. FindCSharpSourceByInterfaceNameAsync(VsProject, string, bool) Locates a target VsCSharpSource model in a project by the name of the interface itself. Declaration public static Task<VsCSharpSource> FindCSharpSourceByInterfaceNameAsync(this VsProject source, string name, bool searchAllFolders = true) Parameters Type Name Description VsProject source The project to search. string name The name of the interface that is managed in the source control file. bool searchAllFolders optional flag that determines if all folders under the project should be searched. Returns Type Description Task<VsCSharpSource> The source code model the target interface was found in. FindSourceAsync(VsProject, CsClass, bool) Finds the source code for a target class in a project. This will be based on the source document the class was built from. Declaration public static Task<VsCSharpSource> FindSourceAsync(this VsProject source, CsClass sourceClass, bool searchAllFolders = true) Parameters Type Name Description VsProject source The project to search. CsClass sourceClass The class model to find the source file for. bool searchAllFolders optional flag that determines if all folders under the project should be searched. Returns Type Description Task<VsCSharpSource> The source code file the target model was found in."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFolder.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFolder.html",
    "title": "Class VsProjectFolder | CodeFactory for Windows",
    "keywords": "Class VsProjectFolder Data model that represents a folder in a project hosted in visual studio. Inheritance object VsModel VsProjectFolder Implements IVsProjectFolder IVsModel IModel<VisualStudioModelType> IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsProjectFolder : VsModel, IVsProjectFolder, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors VsProjectFolder(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, bool, bool, string) Constructor for the base class VsProjectFolder Declaration protected VsProjectFolder(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren, string path) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. bool hasParent Flag that determines if the model has a parent model. bool hasChildren Flag that determines if the model has child models. string path The fully qualified path to the project folder. Properties HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description bool HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description bool Path the fully qualified path to the project folder. Declaration public string Path { get; } Property Value Type Description string Methods AddDocumentAsync(string, string) Adds a document to the project folder. Declaration public abstract Task<VsDocument> AddDocumentAsync(string fileName, string content = null) Parameters Type Name Description string fileName The file name for the document. This should be the file name only with extension. string content The content to be added to the document once its added. Note, this is an optional parameter. Returns Type Description Task<VsDocument> The model of the created project document. AddExistingDocumentAsync(string) Adds an existing document to the project folder. Declaration public abstract Task<VsDocument> AddExistingDocumentAsync(string fileName) Parameters Type Name Description string fileName The file name for the document. This should be the file name only with extension. The file must already be in the project folder. Returns Type Description Task<VsDocument> The model of the created project document. AddProjectFolderAsync(string) Adds a new project folder under the current project folder. Declaration public abstract Task<VsProjectFolder> AddProjectFolderAsync(string folderName) Parameters Type Name Description string folderName The name of the project folder. The project folder name should be the name only no path. Returns Type Description Task<VsProjectFolder> The model for the created project folder. DeleteAsync() Deletes the project folder. Declaration public abstract Task<bool> DeleteAsync() Returns Type Description Task<bool> Flag determining if the folder was deleted, True for deleted and false if the folder could not be deleted. GetCSharpNamespaceAsync() Gets the target namespace for a document that support c# language to be placed in this folder. Declaration public abstract Task<string> GetCSharpNamespaceAsync() Returns Type Description Task<string> The fully qualified namespace if the project is a c# project that supports this project folder. Otherwise null will be returned. GetChildrenAsync(bool, bool) Gets the IVsModel of the items that are direct children of this project folder. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren, bool loadSourceCode = false) Parameters Type Name Description bool allChildren Flag that determines if all children not just the first level children of the project folder. bool loadSourceCode Flag to determine if code files that support code factory source code will be loaded by default. If enabled this could be memory intensive. Returns Type Description Task<IReadOnlyList<VsModel>> Readonly list of the children that belong to this project folder. If no children are found an empty readonly list will be returned. GetParentAsync() Gets the parent visual studio model that is the parent of this Project folder. Declaration public abstract Task<VsModel> GetParentAsync() Returns Type Description Task<VsModel> The visual studio model of the parent or null if the project folder does not have a parent. RemoveAsync() Removes the project folder from visual studio, but does not delete it from the file system. Declaration public abstract Task<bool> RemoveAsync() Returns Type Description Task<bool> Flag determining if the folder was removed, True for removed and false if the folder could not be removed. Implements IVsProjectFolder IVsModel IModel<TModelTypes> IParent IChildren Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel) VsProjectFolderExtensions.FindCSharpSourceByClassNameAsync(VsProjectFolder, string, bool) VsProjectFolderExtensions.FindCSharpSourceByInterfaceNameAsync(VsProjectFolder, string, bool)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFolderExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFolderExtensions.html",
    "title": "Class VsProjectFolderExtensions | CodeFactory for Windows",
    "keywords": "Class VsProjectFolderExtensions Extensions methods class that support the VsProjectFolder model. Inheritance object VsProjectFolderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public static class VsProjectFolderExtensions Methods FindCSharpSourceByClassNameAsync(VsProjectFolder, string, bool) Locates a target VsCSharpSource model in a code file hosted in the project folder. Declaration public static Task<VsCSharpSource> FindCSharpSourceByClassNameAsync(this VsProjectFolder source, string className, bool searchSubFolders = true) Parameters Type Name Description VsProjectFolder source The project folder to start to search. string className The name of the class that is managed in the source control file. bool searchSubFolders Optional parameter that determines if sub folders should also be searched. By default this is set to true. Returns Type Description Task<VsCSharpSource> The source code model the target class was found in. FindCSharpSourceByInterfaceNameAsync(VsProjectFolder, string, bool) Locates a target VsCSharpSource model in a code file hosted in the project folder. Declaration public static Task<VsCSharpSource> FindCSharpSourceByInterfaceNameAsync(this VsProjectFolder source, string name, bool searchSubFolders = true) Parameters Type Name Description VsProjectFolder source The project folder to search. string name The name of the interface that is managed in the source control file. bool searchSubFolders Optional parameter that determines if sub folders should also be searched. By default this is set to true. Returns Type Description Task<VsCSharpSource> The source code model the target interface was found in."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFramework.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFramework.html",
    "title": "Class VsProjectFramework | CodeFactory for Windows",
    "keywords": "Class VsProjectFramework Data class that implements IVsProjectFramework Inheritance object VsModel VsProjectFramework Implements IVsModel IModel<VisualStudioModelType> IVsProjectFramework Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsProjectFramework : VsModel, IVsModel, IModel<VisualStudioModelType>, IVsProjectFramework Constructors VsProjectFramework(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, string) Creates a new instances of the VsProjectFramework model. Declaration protected VsProjectFramework(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string framework, string version) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string framework The name of the framework being deployed to. string version The target version of the framework. Properties Framework The framework that the project is targeting. Declaration public string Framework { get; } Property Value Type Description string Version The specified version the framework to be released to. Declaration public string Version { get; } Property Value Type Description string Implements IVsModel IModel<TModelTypes> IVsProjectFramework Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsReference.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsReference.html",
    "title": "Class VsReference | CodeFactory for Windows",
    "keywords": "Class VsReference Data model that presents a visual studio reference that has been loaded. Inheritance object VsModel VsReference Implements IVsReference IVsModel IModel<VisualStudioModelType> Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsReference : VsModel, IVsReference, IVsModel, IModel<VisualStudioModelType> Constructors VsReference(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, string, ProjectReferenceType, IReadOnlyList<string>) Constructor for the base class VsModel Declaration protected VsReference(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, string filePath, ProjectReferenceType type, IReadOnlyList<string> aliases) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. string filePath The fully qualified file path to the reference ProjectReferenceType type The type of reference that is set for the project. IReadOnlyList<string> aliases Readonly list of the aliases assigned to this reference. Properties Aliases Readonly list of the aliases assigned to this reference. Declaration public IReadOnlyList<string> Aliases { get; } Property Value Type Description IReadOnlyList<string> FilePath The fully qualified path to the source reference. Declaration public string FilePath { get; } Property Value Type Description string HasAliases Flag that determines if the reference has aliases. Declaration public bool HasAliases { get; } Property Value Type Description bool Type The type of the project reference. Declaration public ProjectReferenceType Type { get; } Property Value Type Description ProjectReferenceType Methods GetReferencedProjectAsync() Gets the VsProject model for the project that represents this reference. Declaration public abstract Task<VsProject> GetReferencedProjectAsync() Returns Type Description Task<VsProject> The loaded project model or null if the reference does not support a project based reference. Implements IVsReference IVsModel IModel<TModelTypes> Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsSolution.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsSolution.html",
    "title": "Class VsSolution | CodeFactory for Windows",
    "keywords": "Class VsSolution Data model that represents the loaded solution in visual studio. Inheritance object VsModel VsSolution Implements IVsSolution IVsModel IModel<VisualStudioModelType> IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsSolution : VsModel, IVsSolution, IVsModel, IModel<VisualStudioModelType>, IChildren Constructors VsSolution(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, bool, string) Constructor for the base class VsSolution Declaration protected VsSolution(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasChildren, string path) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. bool hasChildren Flag that determines if the solution has any children. string path The fully qualified path of the solution. Properties HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description bool Path The fully qualified path to the solution file name. Declaration public string Path { get; } Property Value Type Description string Methods CreateSolutionFolderAsync(string) Creates a new solution folder for the target solution. Declaration public abstract Task<VsSolutionFolder> CreateSolutionFolderAsync(string name) Parameters Type Name Description string name The name of the solution folder to be added. Returns Type Description Task<VsSolutionFolder> Returns the solution folder. GetChildrenAsync(bool) Gets the solution folders and projects that belong to the solution. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren) Parameters Type Name Description bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsModel>> Returns a readonly list of the children to the solution. If there are no children an empty list will be returned. GetProjectsAsync(bool) Gets the projects for the solution. Declaration public abstract Task<IReadOnlyList<VsProject>> GetProjectsAsync(bool allChildren) Parameters Type Name Description bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsProject>> Returns all the projects that are part of the solution. Will return an empty list if no projects are found. GetSolutionFoldersAsync(bool) Gets the solution folders for the solution. Declaration public abstract Task<IReadOnlyList<VsSolutionFolder>> GetSolutionFoldersAsync(bool allChildren) Parameters Type Name Description bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsSolutionFolder>> Returns a readonly of the solutions folders that are part of the solution. If there are no solution folders an empty list will be returned. Implements IVsSolution IVsModel IModel<TModelTypes> IChildren Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsSolutionFolder.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsSolutionFolder.html",
    "title": "Class VsSolutionFolder | CodeFactory for Windows",
    "keywords": "Class VsSolutionFolder Data model that represents a solution folder in a loaded solution. Inheritance object VsModel VsSolutionFolder Implements IVsSolutionFolder IVsModel IModel<VisualStudioModelType> IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsSolutionFolder : VsModel, IVsSolutionFolder, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors VsSolutionFolder(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, bool, bool) Constructor for the base class VsSolutionFolder Declaration protected VsSolutionFolder(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. bool hasParent Flag that determines if this solution folder has a parent model. bool hasChildren Flag that determines has any child models. Properties HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description bool HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description bool Methods AddDocumentAsync(string, string) Creates a document that is hosted in the solution folder. Declaration public abstract Task<VsDocument> AddDocumentAsync(string fileName, string content = null) Parameters Type Name Description string fileName The name of the document to create. string content The content to add to the document. Returns Type Description Task<VsDocument> Instance of the new document. AddExistingDocumentAsync(string) Adds an existing document to the solution folder. Declaration public abstract Task<VsDocument> AddExistingDocumentAsync(string fileName) Parameters Type Name Description string fileName The file name for the document. This should be the file name only with extension. The file must already be in the solution folder. Returns Type Description Task<VsDocument> The model of the created document. AddSolutionFolder(string) Create a new solution folder under the current solution folder. Declaration public abstract Task<VsSolutionFolder> AddSolutionFolder(string folderName) Parameters Type Name Description string folderName The name of the solution folder. Returns Type Description Task<VsSolutionFolder> Instance of the new solution folder. GetChildrenAsync(bool) Gets the children of the solution folder, this will return the files and projects that are part of the solution folder. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren) Parameters Type Name Description bool allChildren Flag that determines if all the direct children of the solution folder should also get there children. Returns Type Description Task<IReadOnlyList<VsModel>> Returns a readonly list of the children within this solution folder. Will return an empty list if there is no children. GetParentAsync() Gets the parent solution folder. Declaration public abstract Task<VsSolutionFolder> GetParentAsync() Returns Type Description Task<VsSolutionFolder> The parent solution folder model or null if there is no parent for this solution folder. Remove() Removes the solution folder from the visual studio solution that is hosting the solution folder. Declaration public abstract Task<bool> Remove() Returns Type Description Task<bool> Boolean flag true - solution folder was been removed or false the folder is either already removed or could not be removed. Implements IVsSolutionFolder IVsModel IModel<TModelTypes> IParent IChildren Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.PathHelper.html": {
    "href": "api/CodeFactory.WinVs.PathHelper.html",
    "title": "Class PathHelper | CodeFactory for Windows",
    "keywords": "Class PathHelper Static helper class that contains functions to support path management with visual studio. Inheritance object PathHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public static class PathHelper Properties InvalidPathNameCharacters The invalid characters not allowed in a path name. Declaration public static string InvalidPathNameCharacters { get; } Property Value Type Description string Methods ContainsInvalidPathNameCharacter(string) Provided file name is checked to determine if it has Declaration public static bool ContainsInvalidPathNameCharacter(string path) Parameters Type Name Description string path The path to be evaluated. Returns Type Description bool True if invalid characters exists or false if the file does not have invalid characters."
  },
  "api/CodeFactory.WinVs.UI.html": {
    "href": "api/CodeFactory.WinVs.UI.html",
    "title": "Namespace CodeFactory.WinVs.UI | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.UI Interfaces IView Contract to be implemented by all view based user interface controls. IVsUIActions Definition of the user interface actions that are supported in visual studio."
  },
  "api/CodeFactory.WinVs.UI.IView.html": {
    "href": "api/CodeFactory.WinVs.UI.IView.html",
    "title": "Interface IView | CodeFactory for Windows",
    "keywords": "Interface IView Contract to be implemented by all view based user interface controls. Namespace: CodeFactory.WinVs.UI Assembly: CodeFactory.WinVs.dll Syntax public interface IView Properties Title The title to be assigned to the hosting Visual Studio control that hosts the view. Declaration string Title { get; set; } Property Value Type Description string Events CloseHost Event that is raised when the view informs the hosting Visual studio control to close. Declaration event EventHandler CloseHost Event Type Type Description EventHandler"
  },
  "api/CodeFactory.WinVs.UI.IVsUIActions.html": {
    "href": "api/CodeFactory.WinVs.UI.IVsUIActions.html",
    "title": "Interface IVsUIActions | CodeFactory for Windows",
    "keywords": "Interface IVsUIActions Definition of the user interface actions that are supported in visual studio. Namespace: CodeFactory.WinVs.UI Assembly: CodeFactory.WinVs.dll Syntax public interface IVsUIActions Methods CreateViewAsync<T>() Creates a new instance of a view that is supported in visual studio by code factory. This will load the IVsActions into the view as well as the logger that supports the view. Declaration Task<T> CreateViewAsync<T>() where T : class, IView Returns Type Description Task<T> New instance of the target user control. Type Parameters Name Description T The type of visual studio user control to create. Exceptions Type Condition VisualStudioException Raises a visual studio error if there was a problem creating the user control. Review the internal exception for the source of the error. ShowDialogWindowAsync(IView) Displays a dialog window in visual studio that hosts a view. This makes sure the dialog window is thread safe to be used with visual studio. Declaration Task<bool?> ShowDialogWindowAsync(IView view) Parameters Type Name Description IView view The view to be loaded into the dialog window. Returns Type Description Task<bool?> Returns the result for the window which returns a true if a close event occurred, a false when a cancel event occurred, or null if neither were triggered. ShowDocumentPanelAsync(IView) Displays a document panel with the target view imbedded in the document panel. Declaration Task ShowDocumentPanelAsync(IView view) Parameters Type Name Description IView view The view to be loaded into the document panel. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.VisualStudioException.html": {
    "href": "api/CodeFactory.WinVs.VisualStudioException.html",
    "title": "Class VisualStudioException | CodeFactory for Windows",
    "keywords": "Class VisualStudioException Base exception class for all visual studio specific exceptions that occur in code factory. Inheritance object Exception CodeFactoryException VisualStudioException ProjectSystemException SolutionExplorerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public class VisualStudioException : CodeFactoryException, ISerializable Constructors VisualStudioException() Creates a visual studio code factory exception. Declaration public VisualStudioException() VisualStudioException(string) Creates a visual studio code factory exception. Declaration public VisualStudioException(string message) Parameters Type Name Description string message The error message to be captured by the exception VisualStudioException(string, Exception) Creates a visual studio code factory exception. Declaration public VisualStudioException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.WinVs.VisualStudioMessages.html": {
    "href": "api/CodeFactory.WinVs.VisualStudioMessages.html",
    "title": "Class VisualStudioMessages | CodeFactory for Windows",
    "keywords": "Class VisualStudioMessages A strongly-typed resource class, for looking up localized strings, etc. Inheritance object VisualStudioMessages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public class VisualStudioMessages Properties CodeFactoryCouldNotLoad Looks up a localized string similar to Code factory could not complete the load process. Code factory will not be avaliable at this time. . Declaration public static string CodeFactoryCouldNotLoad { get; } Property Value Type Description string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description CultureInfo GetDocumentContentUnhandledError Looks up a localized string similar to An internal visual studio error occurred, cannot load the document content.. Declaration public static string GetDocumentContentUnhandledError { get; } Property Value Type Description string GetParentErrorProjectWithProjectNameReplacement Looks up a localized string similar to An internal error occurred locating the parent for project '{0}'. The parent lookup operating cannot complete.. Declaration public static string GetParentErrorProjectWithProjectNameReplacement { get; } Property Value Type Description string GetParentForSolutionFolderUnhandledErrorWithProjectFolderTitle Looks up a localized string similar to An internal error occurred while loading the parent of the solution folder '{0}', cannot complete the load parent operation.. Declaration public static string GetParentForSolutionFolderUnhandledErrorWithProjectFolderTitle { get; } Property Value Type Description string GetParentUnhandledErrorForProjectDocumentWithName Looks up a localized string similar to An internal error occurred while trying to get the parent for the document '{0}', cannot get the parent model.. Declaration public static string GetParentUnhandledErrorForProjectDocumentWithName { get; } Property Value Type Description string GetParentUnhandledErrorForProjectFolderWithName Looks up a localized string similar to An internal error occurred while loading the parent for the project folder '{0}', the parent model cannot be loaded.. Declaration public static string GetParentUnhandledErrorForProjectFolderWithName { get; } Property Value Type Description string InternalErrorAddDocumentContent Looks up a localized string similar to An internal error occurred while adding content to the document, operation did not complete.. Declaration public static string InternalErrorAddDocumentContent { get; } Property Value Type Description string InternalErrorOccuredCheckLogs Looks up a localized string similar to An internal error occurred the operation could not complete. Review logs for further details.. Declaration public static string InternalErrorOccuredCheckLogs { get; } Property Value Type Description string LoadDocumentFromSourceUnhandledError Looks up a localized string similar to An internal error occurred while loading the visual studio document, the operation could not be completed.. Declaration public static string LoadDocumentFromSourceUnhandledError { get; } Property Value Type Description string ProjectSystemGeneralError Looks up a localized string similar to An error occurred while accessing visual studio's project system, code factory had to cancel the operation. Please try again.. Declaration public static string ProjectSystemGeneralError { get; } Property Value Type Description string RemoveContentUnhandledError Looks up a localized string similar to An internal error occurred will not be able to remove the content from the document.. Declaration public static string RemoveContentUnhandledError { get; } Property Value Type Description string ReplaceContentUnhandledError Looks up a localized string similar to An internal error occurred will not be able to replace the content in the document.. Declaration public static string ReplaceContentUnhandledError { get; } Property Value Type Description string ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager SolutionExplorerGeneralError Looks up a localized string similar to An error occurred while access the selected item in solution explorer, code factory had to cancel the operation. Please try again.. Declaration public static string SolutionExplorerGeneralError { get; } Property Value Type Description string SolutionFolderChildLoadUnhandledExceptionWithFolderName Looks up a localized string similar to An internal error occurred while loading the child models for the solution folder '{0}'. The load action could not be completed.. Declaration public static string SolutionFolderChildLoadUnhandledExceptionWithFolderName { get; } Property Value Type Description string UnhandledErrorReadingContent Looks up a localized string similar to An internal error occurred while loading the IDocumentContent, operation could not complete.. Declaration public static string UnhandledErrorReadingContent { get; } Property Value Type Description string VisualStudioCompilerSystemLoadError Looks up a localized string similar to Code factory has encountered an internal error and cannot load the compiler functionality used by code factory to access .net objects.. Declaration public static string VisualStudioCompilerSystemLoadError { get; } Property Value Type Description string VisualStudioDocumentWriterLoadError Looks up a localized string similar to Code factory has encountered an internal error and cannot load the document writer functionality used by code factory to manage code changes.. Declaration public static string VisualStudioDocumentWriterLoadError { get; } Property Value Type Description string VisualStudioGeneralError Looks up a localized string similar to Code factory has encountered an internal error accessing visual studio. The current operation could not be completed. Please try again.. Declaration public static string VisualStudioGeneralError { get; } Property Value Type Description string VisualStudioModelLoadError Looks up a localized string similar to The visual studio model could not be loaded. The source model data could not be accessed.. Declaration public static string VisualStudioModelLoadError { get; } Property Value Type Description string VisualStudioProjectSystemLoadError Looks up a localized string similar to Code factory has encountered an internal error and cannot load the project system functionality used by code factory to access the project system.. Declaration public static string VisualStudioProjectSystemLoadError { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.VsActionsExtensions.html": {
    "href": "api/CodeFactory.WinVs.VsActionsExtensions.html",
    "title": "Class VsActionsExtensions | CodeFactory for Windows",
    "keywords": "Class VsActionsExtensions Extension methods that support IVSActions Inheritance object VsActionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public static class VsActionsExtensions Methods GetCSharpSourceAsync(IVsActions, CsContainer) Loads the most current instance of the source for the provided container. Declaration public static Task<CsSource> GetCSharpSourceAsync(this IVsActions source, CsContainer container) Parameters Type Name Description IVsActions source CodeFactory automation for Visual Studio Windows CsContainer container Target C# container to get the source for. Returns Type Description Task<CsSource> The target C# source or null if the source could not be found. GetCSharpSourceAsync(IVsActions, CsMember) Loads the most current instance of the source for the provided member. Declaration public static Task<CsSource> GetCSharpSourceAsync(this IVsActions source, CsMember member) Parameters Type Name Description IVsActions source CodeFactory automation for Visual Studio Windows CsMember member The target c# member model to load the source from. Returns Type Description Task<CsSource> The target C# source or null if the source could not be found. GetProjectFolderFromConfigAsync(IVsActions, ConfigProject, string, bool) Gets the project folder based on the source directory name. That is defined in the configuration project. Declaration public static Task<VsProjectFolder> GetProjectFolderFromConfigAsync(this IVsActions source, ConfigProject projectSource, string sourceDirectoryName, bool addMissingFolder = false) Parameters Type Name Description IVsActions source The Visual Studio extensions for CodeFactory. ConfigProject projectSource The configuration data for the project source. string sourceDirectoryName The source directories name to load. bool addMissingFolder Optional flag that determines if the project folder should be created if it does not exist. The default is false. Returns Type Description Task<VsProjectFolder> The CodeFactory project folder model or null if the project folder could not be found. GetProjectFromConfigAsync(IVsActions, ConfigProject) Extension method that gets the CodeFactory project model for this configuration project. Declaration public static Task<VsProject> GetProjectFromConfigAsync(this IVsActions source, ConfigProject projectSource) Parameters Type Name Description IVsActions source The Visual Studio extensions for CodeFactory. ConfigProject projectSource The configuration data for the project source. Returns Type Description Task<VsProject> New instance of the project model or null if it could not be loaded. GetTargetProjectAsync(IVsActions, string) Gets the target project from the solution by name of the project. Declaration public static Task<VsProject> GetTargetProjectAsync(this IVsActions source, string projectName) Parameters Type Name Description IVsActions source Visual studio actions to get the project from. string projectName The name of the project to load from. Returns Type Description Task<VsProject> The target project or null if the project cannot be found."
  },
  "api/CodeFactory.WinVs.Wpf.html": {
    "href": "api/CodeFactory.WinVs.Wpf.html",
    "title": "Namespace CodeFactory.WinVs.Wpf | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Wpf Classes ViewUserControl The base implementation of a WPF ViewUserControl that has been extended to provide direct access to visual studio for code factory integration."
  },
  "api/CodeFactory.WinVs.Wpf.ViewUserControl.html": {
    "href": "api/CodeFactory.WinVs.Wpf.ViewUserControl.html",
    "title": "Class ViewUserControl | CodeFactory for Windows",
    "keywords": "Class ViewUserControl The base implementation of a WPF ViewUserControl that has been extended to provide direct access to visual studio for code factory integration. Inheritance object DispatcherObject DependencyObject Visual UIElement FrameworkElement Control ContentControl UserControl ViewUserControl Implements IAnimatable IFrameworkInputElement IInputElement ISupportInitialize IQueryAmbient IAddChild IView Inherited Members UserControl.OnCreateAutomationPeer() ContentControl.ContentProperty ContentControl.HasContentProperty ContentControl.ContentTemplateProperty ContentControl.ContentTemplateSelectorProperty ContentControl.ContentStringFormatProperty ContentControl.AddChild(object) ContentControl.AddText(string) ContentControl.OnContentChanged(object, object) ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate) ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector) ContentControl.OnContentStringFormatChanged(string, string) ContentControl.LogicalChildren ContentControl.Content ContentControl.HasContent ContentControl.ContentTemplate ContentControl.ContentTemplateSelector ContentControl.ContentStringFormat Control.BorderBrushProperty Control.BorderThicknessProperty Control.BackgroundProperty Control.ForegroundProperty Control.FontFamilyProperty Control.FontSizeProperty Control.FontStretchProperty Control.FontStyleProperty Control.FontWeightProperty Control.HorizontalContentAlignmentProperty Control.VerticalContentAlignmentProperty Control.TabIndexProperty Control.IsTabStopProperty Control.PaddingProperty Control.TemplateProperty Control.PreviewMouseDoubleClickEvent Control.MouseDoubleClickEvent Control.OnTemplateChanged(ControlTemplate, ControlTemplate) Control.ToString() Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs) Control.OnMouseDoubleClick(MouseButtonEventArgs) Control.MeasureOverride(Size) Control.ArrangeOverride(Size) Control.BorderBrush Control.BorderThickness Control.Background Control.Foreground Control.FontFamily Control.FontSize Control.FontStretch Control.FontStyle Control.FontWeight Control.HorizontalContentAlignment Control.VerticalContentAlignment Control.TabIndex Control.IsTabStop Control.Padding Control.Template Control.HandlesScrolling Control.PreviewMouseDoubleClick Control.MouseDoubleClick FrameworkElement.StyleProperty FrameworkElement.OverridesDefaultStyleProperty FrameworkElement.UseLayoutRoundingProperty FrameworkElement.DefaultStyleKeyProperty FrameworkElement.DataContextProperty FrameworkElement.BindingGroupProperty FrameworkElement.LanguageProperty FrameworkElement.NameProperty FrameworkElement.TagProperty FrameworkElement.InputScopeProperty FrameworkElement.RequestBringIntoViewEvent FrameworkElement.SizeChangedEvent FrameworkElement.ActualWidthProperty FrameworkElement.ActualHeightProperty FrameworkElement.LayoutTransformProperty FrameworkElement.WidthProperty FrameworkElement.MinWidthProperty FrameworkElement.MaxWidthProperty FrameworkElement.HeightProperty FrameworkElement.MinHeightProperty FrameworkElement.MaxHeightProperty FrameworkElement.FlowDirectionProperty FrameworkElement.MarginProperty FrameworkElement.HorizontalAlignmentProperty FrameworkElement.VerticalAlignmentProperty FrameworkElement.FocusVisualStyleProperty FrameworkElement.CursorProperty FrameworkElement.ForceCursorProperty FrameworkElement.LoadedEvent FrameworkElement.UnloadedEvent FrameworkElement.ToolTipProperty FrameworkElement.ContextMenuProperty FrameworkElement.ToolTipOpeningEvent FrameworkElement.ToolTipClosingEvent FrameworkElement.ContextMenuOpeningEvent FrameworkElement.ContextMenuClosingEvent FrameworkElement.OnStyleChanged(Style, Style) FrameworkElement.ParentLayoutInvalidated(UIElement) FrameworkElement.ApplyTemplate() FrameworkElement.OnApplyTemplate() FrameworkElement.BeginStoryboard(Storyboard) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, bool) FrameworkElement.GetVisualChild(int) FrameworkElement.GetTemplateChild(string) FrameworkElement.FindResource(object) FrameworkElement.TryFindResource(object) FrameworkElement.SetResourceReference(DependencyProperty, object) FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs) FrameworkElement.OnVisualParentChanged(DependencyObject) FrameworkElement.GetBindingExpression(DependencyProperty) FrameworkElement.SetBinding(DependencyProperty, BindingBase) FrameworkElement.SetBinding(DependencyProperty, string) FrameworkElement.GetUIParentCore() FrameworkElement.BringIntoView() FrameworkElement.BringIntoView(Rect) FrameworkElement.GetFlowDirection(DependencyObject) FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection) FrameworkElement.MeasureCore(Size) FrameworkElement.ArrangeCore(Rect) FrameworkElement.OnRenderSizeChanged(SizeChangedInfo) FrameworkElement.GetLayoutClip(Size) FrameworkElement.MoveFocus(TraversalRequest) FrameworkElement.PredictFocus(FocusNavigationDirection) FrameworkElement.OnGotFocus(RoutedEventArgs) FrameworkElement.BeginInit() FrameworkElement.EndInit() FrameworkElement.OnInitialized(EventArgs) FrameworkElement.OnToolTipOpening(ToolTipEventArgs) FrameworkElement.OnToolTipClosing(ToolTipEventArgs) FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs) FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs) FrameworkElement.RegisterName(string, object) FrameworkElement.UnregisterName(string) FrameworkElement.FindName(string) FrameworkElement.UpdateDefaultStyle() FrameworkElement.AddLogicalChild(object) FrameworkElement.RemoveLogicalChild(object) FrameworkElement.Style FrameworkElement.OverridesDefaultStyle FrameworkElement.UseLayoutRounding FrameworkElement.DefaultStyleKey FrameworkElement.Triggers FrameworkElement.TemplatedParent FrameworkElement.VisualChildrenCount FrameworkElement.Resources FrameworkElement.InheritanceBehavior FrameworkElement.DataContext FrameworkElement.BindingGroup FrameworkElement.Language FrameworkElement.Name FrameworkElement.Tag FrameworkElement.InputScope FrameworkElement.ActualWidth FrameworkElement.ActualHeight FrameworkElement.LayoutTransform FrameworkElement.Width FrameworkElement.MinWidth FrameworkElement.MaxWidth FrameworkElement.Height FrameworkElement.MinHeight FrameworkElement.MaxHeight FrameworkElement.FlowDirection FrameworkElement.Margin FrameworkElement.HorizontalAlignment FrameworkElement.VerticalAlignment FrameworkElement.FocusVisualStyle FrameworkElement.Cursor FrameworkElement.ForceCursor FrameworkElement.IsInitialized FrameworkElement.IsLoaded FrameworkElement.ToolTip FrameworkElement.ContextMenu FrameworkElement.Parent FrameworkElement.TargetUpdated FrameworkElement.SourceUpdated FrameworkElement.DataContextChanged FrameworkElement.RequestBringIntoView FrameworkElement.SizeChanged FrameworkElement.Initialized FrameworkElement.Loaded FrameworkElement.Unloaded FrameworkElement.ToolTipOpening FrameworkElement.ToolTipClosing FrameworkElement.ContextMenuOpening FrameworkElement.ContextMenuClosing UIElement.PreviewMouseDownEvent UIElement.MouseDownEvent UIElement.PreviewMouseUpEvent UIElement.MouseUpEvent UIElement.PreviewMouseLeftButtonDownEvent UIElement.MouseLeftButtonDownEvent UIElement.PreviewMouseLeftButtonUpEvent UIElement.MouseLeftButtonUpEvent UIElement.PreviewMouseRightButtonDownEvent UIElement.MouseRightButtonDownEvent UIElement.PreviewMouseRightButtonUpEvent UIElement.MouseRightButtonUpEvent UIElement.PreviewMouseMoveEvent UIElement.MouseMoveEvent UIElement.PreviewMouseWheelEvent UIElement.MouseWheelEvent UIElement.MouseEnterEvent UIElement.MouseLeaveEvent UIElement.GotMouseCaptureEvent UIElement.LostMouseCaptureEvent UIElement.QueryCursorEvent UIElement.PreviewStylusDownEvent UIElement.StylusDownEvent UIElement.PreviewStylusUpEvent UIElement.StylusUpEvent UIElement.PreviewStylusMoveEvent UIElement.StylusMoveEvent UIElement.PreviewStylusInAirMoveEvent UIElement.StylusInAirMoveEvent UIElement.StylusEnterEvent UIElement.StylusLeaveEvent UIElement.PreviewStylusInRangeEvent UIElement.StylusInRangeEvent UIElement.PreviewStylusOutOfRangeEvent UIElement.StylusOutOfRangeEvent UIElement.PreviewStylusSystemGestureEvent UIElement.StylusSystemGestureEvent UIElement.GotStylusCaptureEvent UIElement.LostStylusCaptureEvent UIElement.StylusButtonDownEvent UIElement.StylusButtonUpEvent UIElement.PreviewStylusButtonDownEvent UIElement.PreviewStylusButtonUpEvent UIElement.PreviewKeyDownEvent UIElement.KeyDownEvent UIElement.PreviewKeyUpEvent UIElement.KeyUpEvent UIElement.PreviewGotKeyboardFocusEvent UIElement.GotKeyboardFocusEvent UIElement.PreviewLostKeyboardFocusEvent UIElement.LostKeyboardFocusEvent UIElement.PreviewTextInputEvent UIElement.TextInputEvent UIElement.PreviewQueryContinueDragEvent UIElement.QueryContinueDragEvent UIElement.PreviewGiveFeedbackEvent UIElement.GiveFeedbackEvent UIElement.PreviewDragEnterEvent UIElement.DragEnterEvent UIElement.PreviewDragOverEvent UIElement.DragOverEvent UIElement.PreviewDragLeaveEvent UIElement.DragLeaveEvent UIElement.PreviewDropEvent UIElement.DropEvent UIElement.PreviewTouchDownEvent UIElement.TouchDownEvent UIElement.PreviewTouchMoveEvent UIElement.TouchMoveEvent UIElement.PreviewTouchUpEvent UIElement.TouchUpEvent UIElement.GotTouchCaptureEvent UIElement.LostTouchCaptureEvent UIElement.TouchEnterEvent UIElement.TouchLeaveEvent UIElement.IsMouseDirectlyOverProperty UIElement.IsMouseOverProperty UIElement.IsStylusOverProperty UIElement.IsKeyboardFocusWithinProperty UIElement.IsMouseCapturedProperty UIElement.IsMouseCaptureWithinProperty UIElement.IsStylusDirectlyOverProperty UIElement.IsStylusCapturedProperty UIElement.IsStylusCaptureWithinProperty UIElement.IsKeyboardFocusedProperty UIElement.AreAnyTouchesDirectlyOverProperty UIElement.AreAnyTouchesOverProperty UIElement.AreAnyTouchesCapturedProperty UIElement.AreAnyTouchesCapturedWithinProperty UIElement.AllowDropProperty UIElement.RenderTransformProperty UIElement.RenderTransformOriginProperty UIElement.OpacityProperty UIElement.OpacityMaskProperty UIElement.BitmapEffectProperty UIElement.EffectProperty UIElement.BitmapEffectInputProperty UIElement.CacheModeProperty UIElement.UidProperty UIElement.VisibilityProperty UIElement.ClipToBoundsProperty UIElement.ClipProperty UIElement.SnapsToDevicePixelsProperty UIElement.GotFocusEvent UIElement.LostFocusEvent UIElement.IsFocusedProperty UIElement.IsEnabledProperty UIElement.IsHitTestVisibleProperty UIElement.IsVisibleProperty UIElement.FocusableProperty UIElement.IsManipulationEnabledProperty UIElement.ManipulationStartingEvent UIElement.ManipulationStartedEvent UIElement.ManipulationDeltaEvent UIElement.ManipulationInertiaStartingEvent UIElement.ManipulationBoundaryFeedbackEvent UIElement.ManipulationCompletedEvent UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior) UIElement.GetAnimationBaseValue(DependencyProperty) UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddHandler(RoutedEvent, Delegate) UIElement.AddHandler(RoutedEvent, Delegate, bool) UIElement.RemoveHandler(RoutedEvent, Delegate) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.OnPreviewMouseDown(MouseButtonEventArgs) UIElement.OnMouseDown(MouseButtonEventArgs) UIElement.OnPreviewMouseUp(MouseButtonEventArgs) UIElement.OnMouseUp(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseMove(MouseEventArgs) UIElement.OnMouseMove(MouseEventArgs) UIElement.OnPreviewMouseWheel(MouseWheelEventArgs) UIElement.OnMouseWheel(MouseWheelEventArgs) UIElement.OnMouseEnter(MouseEventArgs) UIElement.OnMouseLeave(MouseEventArgs) UIElement.OnGotMouseCapture(MouseEventArgs) UIElement.OnLostMouseCapture(MouseEventArgs) UIElement.OnQueryCursor(QueryCursorEventArgs) UIElement.OnPreviewStylusDown(StylusDownEventArgs) UIElement.OnStylusDown(StylusDownEventArgs) UIElement.OnPreviewStylusUp(StylusEventArgs) UIElement.OnStylusUp(StylusEventArgs) UIElement.OnPreviewStylusMove(StylusEventArgs) UIElement.OnStylusMove(StylusEventArgs) UIElement.OnPreviewStylusInAirMove(StylusEventArgs) UIElement.OnStylusInAirMove(StylusEventArgs) UIElement.OnStylusEnter(StylusEventArgs) UIElement.OnStylusLeave(StylusEventArgs) UIElement.OnPreviewStylusInRange(StylusEventArgs) UIElement.OnStylusInRange(StylusEventArgs) UIElement.OnPreviewStylusOutOfRange(StylusEventArgs) UIElement.OnStylusOutOfRange(StylusEventArgs) UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnGotStylusCapture(StylusEventArgs) UIElement.OnLostStylusCapture(StylusEventArgs) UIElement.OnStylusButtonDown(StylusButtonEventArgs) UIElement.OnStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewKeyDown(KeyEventArgs) UIElement.OnKeyDown(KeyEventArgs) UIElement.OnPreviewKeyUp(KeyEventArgs) UIElement.OnKeyUp(KeyEventArgs) UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewTextInput(TextCompositionEventArgs) UIElement.OnTextInput(TextCompositionEventArgs) UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs) UIElement.OnGiveFeedback(GiveFeedbackEventArgs) UIElement.OnPreviewDragEnter(DragEventArgs) UIElement.OnDragEnter(DragEventArgs) UIElement.OnPreviewDragOver(DragEventArgs) UIElement.OnDragOver(DragEventArgs) UIElement.OnPreviewDragLeave(DragEventArgs) UIElement.OnDragLeave(DragEventArgs) UIElement.OnPreviewDrop(DragEventArgs) UIElement.OnDrop(DragEventArgs) UIElement.OnPreviewTouchDown(TouchEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnPreviewTouchMove(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnPreviewTouchUp(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnGotTouchCapture(TouchEventArgs) UIElement.OnLostTouchCapture(TouchEventArgs) UIElement.OnTouchEnter(TouchEventArgs) UIElement.OnTouchLeave(TouchEventArgs) UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.InvalidateVisual() UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Measure(Size) UIElement.Arrange(Rect) UIElement.OnRender(DrawingContext) UIElement.UpdateLayout() UIElement.TranslatePoint(Point, UIElement) UIElement.InputHitTest(Point) UIElement.CaptureMouse() UIElement.ReleaseMouseCapture() UIElement.CaptureStylus() UIElement.ReleaseStylusCapture() UIElement.Focus() UIElement.OnAccessKey(AccessKeyEventArgs) UIElement.HitTestCore(PointHitTestParameters) UIElement.HitTestCore(GeometryHitTestParameters) UIElement.OnLostFocus(RoutedEventArgs) UIElement.OnManipulationStarting(ManipulationStartingEventArgs) UIElement.OnManipulationStarted(ManipulationStartedEventArgs) UIElement.OnManipulationDelta(ManipulationDeltaEventArgs) UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs) UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs) UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs) UIElement.CaptureTouch(TouchDevice) UIElement.ReleaseTouchCapture(TouchDevice) UIElement.ReleaseAllTouchCaptures() UIElement.HasAnimatedProperties UIElement.InputBindings UIElement.CommandBindings UIElement.AllowDrop UIElement.StylusPlugIns UIElement.DesiredSize UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.RenderSize UIElement.RenderTransform UIElement.RenderTransformOrigin UIElement.IsMouseDirectlyOver UIElement.IsMouseOver UIElement.IsStylusOver UIElement.IsKeyboardFocusWithin UIElement.IsMouseCaptured UIElement.IsMouseCaptureWithin UIElement.IsStylusDirectlyOver UIElement.IsStylusCaptured UIElement.IsStylusCaptureWithin UIElement.IsKeyboardFocused UIElement.IsInputMethodEnabled UIElement.Opacity UIElement.OpacityMask UIElement.BitmapEffect UIElement.Effect UIElement.BitmapEffectInput UIElement.CacheMode UIElement.Uid UIElement.Visibility UIElement.ClipToBounds UIElement.Clip UIElement.SnapsToDevicePixels UIElement.HasEffectiveKeyboardFocus UIElement.IsFocused UIElement.IsEnabled UIElement.IsEnabledCore UIElement.IsHitTestVisible UIElement.IsVisible UIElement.Focusable UIElement.PersistId UIElement.IsManipulationEnabled UIElement.AreAnyTouchesOver UIElement.AreAnyTouchesDirectlyOver UIElement.AreAnyTouchesCapturedWithin UIElement.AreAnyTouchesCaptured UIElement.TouchesCaptured UIElement.TouchesCapturedWithin UIElement.TouchesOver UIElement.TouchesDirectlyOver UIElement.PreviewMouseDown UIElement.MouseDown UIElement.PreviewMouseUp UIElement.MouseUp UIElement.PreviewMouseLeftButtonDown UIElement.MouseLeftButtonDown UIElement.PreviewMouseLeftButtonUp UIElement.MouseLeftButtonUp UIElement.PreviewMouseRightButtonDown UIElement.MouseRightButtonDown UIElement.PreviewMouseRightButtonUp UIElement.MouseRightButtonUp UIElement.PreviewMouseMove UIElement.MouseMove UIElement.PreviewMouseWheel UIElement.MouseWheel UIElement.MouseEnter UIElement.MouseLeave UIElement.GotMouseCapture UIElement.LostMouseCapture UIElement.QueryCursor UIElement.PreviewStylusDown UIElement.StylusDown UIElement.PreviewStylusUp UIElement.StylusUp UIElement.PreviewStylusMove UIElement.StylusMove UIElement.PreviewStylusInAirMove UIElement.StylusInAirMove UIElement.StylusEnter UIElement.StylusLeave UIElement.PreviewStylusInRange UIElement.StylusInRange UIElement.PreviewStylusOutOfRange UIElement.StylusOutOfRange UIElement.PreviewStylusSystemGesture UIElement.StylusSystemGesture UIElement.GotStylusCapture UIElement.LostStylusCapture UIElement.StylusButtonDown UIElement.StylusButtonUp UIElement.PreviewStylusButtonDown UIElement.PreviewStylusButtonUp UIElement.PreviewKeyDown UIElement.KeyDown UIElement.PreviewKeyUp UIElement.KeyUp UIElement.PreviewGotKeyboardFocus UIElement.GotKeyboardFocus UIElement.PreviewLostKeyboardFocus UIElement.LostKeyboardFocus UIElement.PreviewTextInput UIElement.TextInput UIElement.PreviewQueryContinueDrag UIElement.QueryContinueDrag UIElement.PreviewGiveFeedback UIElement.GiveFeedback UIElement.PreviewDragEnter UIElement.DragEnter UIElement.PreviewDragOver UIElement.DragOver UIElement.PreviewDragLeave UIElement.DragLeave UIElement.PreviewDrop UIElement.Drop UIElement.PreviewTouchDown UIElement.TouchDown UIElement.PreviewTouchMove UIElement.TouchMove UIElement.PreviewTouchUp UIElement.TouchUp UIElement.GotTouchCapture UIElement.LostTouchCapture UIElement.TouchEnter UIElement.TouchLeave UIElement.IsMouseDirectlyOverChanged UIElement.IsKeyboardFocusWithinChanged UIElement.IsMouseCapturedChanged UIElement.IsMouseCaptureWithinChanged UIElement.IsStylusDirectlyOverChanged UIElement.IsStylusCapturedChanged UIElement.IsStylusCaptureWithinChanged UIElement.IsKeyboardFocusedChanged UIElement.LayoutUpdated UIElement.GotFocus UIElement.LostFocus UIElement.IsEnabledChanged UIElement.IsHitTestVisibleChanged UIElement.IsVisibleChanged UIElement.FocusableChanged UIElement.ManipulationStarting UIElement.ManipulationStarted UIElement.ManipulationDelta UIElement.ManipulationInertiaStarting UIElement.ManipulationBoundaryFeedback UIElement.ManipulationCompleted Visual.AddVisualChild(Visual) Visual.RemoveVisualChild(Visual) Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject) Visual.OnDpiChanged(DpiScale, DpiScale) Visual.IsAncestorOf(DependencyObject) Visual.IsDescendantOf(DependencyObject) Visual.FindCommonVisualAncestor(DependencyObject) Visual.TransformToAncestor(Visual) Visual.TransformToAncestor(Visual3D) Visual.TransformToDescendant(Visual) Visual.TransformToVisual(Visual) Visual.PointToScreen(Point) Visual.PointFromScreen(Point) Visual.VisualParent Visual.VisualTransform Visual.VisualEffect Visual.VisualBitmapEffect Visual.VisualBitmapEffectInput Visual.VisualCacheMode Visual.VisualScrollableAreaClip Visual.VisualClip Visual.VisualOffset Visual.VisualOpacity Visual.VisualEdgeMode Visual.VisualBitmapScalingMode Visual.VisualClearTypeHint Visual.VisualTextRenderingMode Visual.VisualTextHintingMode Visual.VisualOpacityMask Visual.VisualXSnappingGuidelines Visual.VisualYSnappingGuidelines DependencyObject.Equals(object) DependencyObject.GetHashCode() DependencyObject.GetValue(DependencyProperty) DependencyObject.SetValue(DependencyProperty, object) DependencyObject.SetCurrentValue(DependencyProperty, object) DependencyObject.SetValue(DependencyPropertyKey, object) DependencyObject.ClearValue(DependencyProperty) DependencyObject.ClearValue(DependencyPropertyKey) DependencyObject.CoerceValue(DependencyProperty) DependencyObject.InvalidateProperty(DependencyProperty) DependencyObject.ShouldSerializeProperty(DependencyProperty) DependencyObject.ReadLocalValue(DependencyProperty) DependencyObject.GetLocalValueEnumerator() DependencyObject.DependencyObjectType DependencyObject.IsSealed DispatcherObject.Dispatcher object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: CodeFactory.WinVs.Wpf Assembly: CodeFactory.WinVs.Wpf.dll Syntax public class ViewUserControl : UserControl, IAnimatable, IFrameworkInputElement, IInputElement, ISupportInitialize, IQueryAmbient, IAddChild, IView Constructors ViewUserControl() Default constructor only to be used for compatibility with the visual editor. Declaration public ViewUserControl() ViewUserControl(IVsActions, ILogger) Initializes the base implementation of a user control. Declaration public ViewUserControl(IVsActions actions, ILogger logger) Parameters Type Name Description IVsActions actions The visual studio actions accessible in this user control. ILogger logger The logger for interaction inside this user control. Fields TitleProperty Backing store for the dependance property Title Declaration public static readonly DependencyProperty TitleProperty Field Value Type Description DependencyProperty _logger Logger class that is assigned to this user control. Declaration protected readonly ILogger _logger Field Value Type Description ILogger _visualStudioActions The visual studio actions provided by code factory for use with visual studio. Declaration protected readonly IVsActions _visualStudioActions Field Value Type Description IVsActions Properties Title The title that will be assigned to windows that host this user control. Declaration public string Title { get; set; } Property Value Type Description string Methods Close() Triggers the CloseHost event that will inform the host of this user control to close. Declaration protected void Close() ReleaseSubscriptionToHostWindow(Window) Used by the code factory to release subscriptions to the host windows events. This is for internal code factory use only. Declaration public void ReleaseSubscriptionToHostWindow(Window host) Parameters Type Name Description Window host The hosting window to release subscriptions. SubscribeToHostWindow(Window) Used by the code factory to subscribe to the hosts windows events to be made available to this user control. This is for internal code factory use only. Declaration public void SubscribeToHostWindow(Window host) Parameters Type Name Description Window host The hosting window that will display this user control implementation. WindowActivated(object, EventArgs) Event handler when the Activated is raised to this user control. Declaration public virtual void WindowActivated(object sender, EventArgs e) Parameters Type Name Description object sender Source window that has been activated. EventArgs e Args from the window. WindowClosing(object, CancelEventArgs) Event handler when the Closing is raised to this user control. Declaration public virtual void WindowClosing(object sender, CancelEventArgs e) Parameters Type Name Description object sender CancelEventArgs e Events CloseHost Event that is raised when the user control informs the hosting window or control in visual studio to close. Declaration public event EventHandler CloseHost Event Type Type Description EventHandler Implements IAnimatable IFrameworkInputElement IInputElement ISupportInitialize IQueryAmbient IAddChild IView"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| CodeFactory for Windows",
    "keywords": "CodeFactory for Visual Studio Windows SDK In this section you will see the generated API documentation for the libraries that make up the software development kit for CodeFactory."
  },
  "gettingstarted/intro.html": {
    "href": "gettingstarted/intro.html",
    "title": "Creating a Project | CodeFactory for Windows",
    "keywords": "Getting Started with CodeFactory for Visual Studio Windows This documentation is currently in preview and will be updated incrementally closer to final release. Creating a Project The command library is the core library project used for creation of automation. Unlike version 1.0 version there is a single library type now and no default folder structure. When adding a new project you will select the CodeFactory for Windows - CommandLibrary project. Important note its now a requirement to use .Net Framework 4.8 when creating a command library. CodeFactory Command Templates The solution explorer and IDE commands are still still avaliable in CodeFactory for Windows. They are now accessible under the category of CodeFactoryWindows. User Control Change The VsUserControl has been replaces with the ViewUserControl. This includes the following changes. Have changed the title property to just Title Future changes coming soon. Integration of Visual Studio themes. Removal of T4 The T4 functionality has been removed in version 2.0. The SourceFormatter replaces the needs for T4."
  },
  "index.html": {
    "href": "index.html",
    "title": "Overview | CodeFactory for Windows",
    "keywords": "CodeFactory for Windows Overview This is the offical home of version 2.0 of CodeFactory. The reason for the change is future planning for the usage of CodeFactory. In the future CodeFactory will run on multiple IDE environments. Right now we are focusing on VisualStudio for Windows. The following are some future IDE's we are looking in to. Microsoft Visual Studio Code Jet Brains Rider In Preview Mode The 2.0 version of CodeFactory is fully functional and in preview mode since all documentation has not been completed. Additional functionality is being added to the product. Getting Started To jump right in goto our Getting Started section to create new project and continue to use CodeFactory automation. SDK Libraries The following are the new libraries and utilties that are used for building CodeFactory automation. CodeFactory.dll This is the core contracts used by all version's of CodeFactory regardless of IDE. This has been ported to .Net Standard 2.0. CodeFactory.WinVs.dll This is the entire implementation of the SDK related to Visual Studio for Windows. This contains a streamlined SDK over the version 1.0 of CodeFactory. The SDK has been ported to .Net Standard 2.0. CodeFactory.WinVs.Wpf.dll This is the user interface controls library for Visual Studio for Windows this hostes the view control. The SDK has been upgraded to .Net Framework 4.8 requirement of Visual Studio for Windows. CodeFactory.Packager.WinVs.exe The packager is a command line utility that packages up CodeFactory automation. This utility is automatically called after the build of a CodeFactory library. The packager has been upgraded to .Net Framework 4.8."
  },
  "releasenotes/index.html": {
    "href": "releasenotes/index.html",
    "title": "| CodeFactory for Windows",
    "keywords": "CodeFactory for Visual Studio Windows Release Notes This section will provide release notes the for the CodeFactory for Visual Studio Windows - Runtime and SDK."
  },
  "releasenotes/Release2-23157-0-1.html": {
    "href": "releasenotes/Release2-23157-0-1.html",
    "title": "Notes | CodeFactory for Windows",
    "keywords": "Release Notes Version 2.23157.0.1 Notes Initial release of the runtime and SDK for general avalaiblity for customer usage. This is version 2.0 of CodeFactory for Visual Studio Windowss. This release focused on the following. Migration from .Net Framework to .Net Standard were possible. Upgrade to .NetFramework 4.8 for all automation libraries Integration of ADK functionality into the core runtime. Streamline API call names for ease of use. First generation of Code Blocks and Builders incorportated into the SDK and Runtime."
  },
  "releasenotes/Release2-23158-0-1.html": {
    "href": "releasenotes/Release2-23158-0-1.html",
    "title": "Notes | CodeFactory for Windows",
    "keywords": "Release Notes Version 2.23158.0.1 Notes Daily build focused on bug fixes. PropertyBuilderStandard Fixes Extra ; added to the end of property generation removed. MethodBuilderStandard Fixes Fixed generation logic to correctly inject bounds check logic when found. Fixed formatting of try catch finally logic to correctly indent at the right level."
  }
}