### YamlMime:ManagedReference
items:
- uid: System.Collections.Immutable.ImmutableSortedSet
  commentId: T:System.Collections.Immutable.ImmutableSortedSet
  id: ImmutableSortedSet
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1
  - System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableSortedSet.Create``1
  - System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)
  - System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])
  - System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)
  - System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])
  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)
  langs:
  - csharp
  - vb
  name: ImmutableSortedSet
  nameWithType: ImmutableSortedSet
  fullName: System.Collections.Immutable.ImmutableSortedSet
  type: Class
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Provides a set of initialization methods for instances of the <xref href="System.Collections.Immutable.ImmutableSortedSet%601" data-throw-if-not-resolved="false"></xref> class.  

     NuGet package: System.Collections.Immutable (about immutable collections and how to install)
  example: []
  syntax:
    content: public static class ImmutableSortedSet
    content.vb: Public Module ImmutableSortedSet
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1
  id: Create``1
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: Create<T>()
  nameWithType: ImmutableSortedSet.Create<T>()
  fullName: System.Collections.Immutable.ImmutableSortedSet.Create<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an empty immutable sorted set.
  example: []
  syntax:
    content: public static ImmutableSortedSet<T> Create<T>()
    typeParameters:
    - id: T
      description: The type of items to be stored in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}
      description: An empty immutable sorted set.
    content.vb: Public Shared Function Create(Of T)() As ImmutableSortedSet(Of T)
  overload: System.Collections.Immutable.ImmutableSortedSet.Create*
  nameWithType.vb: ImmutableSortedSet.Create(Of T)()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.Create(Of T)()
  name.vb: Create(Of T)()
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})
  id: Create``1(System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: Create<T>(IComparer<T>?)
  nameWithType: ImmutableSortedSet.Create<T>(IComparer<T>?)
  fullName: System.Collections.Immutable.ImmutableSortedSet.Create<T>(System.Collections.Generic.IComparer<T>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an empty immutable sorted set that uses the specified comparer.
  example: []
  syntax:
    content: public static ImmutableSortedSet<T> Create<T>(IComparer<T>? comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The implementation to use when comparing items in the set.
    typeParameters:
    - id: T
      description: The type of items in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}
      description: An empty immutable set.
    content.vb: Public Shared Function Create(Of T)(comparer As IComparer(Of T)) As ImmutableSortedSet(Of T)
  overload: System.Collections.Immutable.ImmutableSortedSet.Create*
  nameWithType.vb: ImmutableSortedSet.Create(Of T)(IComparer(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.Create(Of T)(System.Collections.Generic.IComparer(Of T))
  name.vb: Create(Of T)(IComparer(Of T))
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)
  id: Create``1(``0)
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: Create<T>(T)
  nameWithType: ImmutableSortedSet.Create<T>(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet.Create<T>(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable sorted set that contains the specified item.
  example: []
  syntax:
    content: public static ImmutableSortedSet<T> Create<T>(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to prepopulate the set with.
    typeParameters:
    - id: T
      description: The type of items in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}
      description: A new immutable set that contains the specified item.
    content.vb: Public Shared Function Create(Of T)(item As T) As ImmutableSortedSet(Of T)
  overload: System.Collections.Immutable.ImmutableSortedSet.Create*
  nameWithType.vb: ImmutableSortedSet.Create(Of T)(T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.Create(Of T)(T)
  name.vb: Create(Of T)(T)
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)
  id: Create``1(System.Collections.Generic.IComparer{``0},``0)
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: Create<T>(IComparer<T>?, T)
  nameWithType: ImmutableSortedSet.Create<T>(IComparer<T>?, T)
  fullName: System.Collections.Immutable.ImmutableSortedSet.Create<T>(System.Collections.Generic.IComparer<T>?, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable sorted set that contains the specified item and uses the specified comparer.
  example: []
  syntax:
    content: public static ImmutableSortedSet<T> Create<T>(IComparer<T>? comparer, T item)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The implementation to use when comparing items in the set.
    - id: item
      type: '{T}'
      description: The item to prepopulate the set with.
    typeParameters:
    - id: T
      description: The type of items stored in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}
      description: A new immutable set that contains the specified item.
    content.vb: Public Shared Function Create(Of T)(comparer As IComparer(Of T), item As T) As ImmutableSortedSet(Of T)
  overload: System.Collections.Immutable.ImmutableSortedSet.Create*
  nameWithType.vb: ImmutableSortedSet.Create(Of T)(IComparer(Of T), T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.Create(Of T)(System.Collections.Generic.IComparer(Of T), T)
  name.vb: Create(Of T)(IComparer(Of T), T)
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  id: CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: CreateRange<T>(IEnumerable<T>)
  nameWithType: ImmutableSortedSet.CreateRange<T>(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet.CreateRange<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable collection that contains the specified items.
  example: []
  syntax:
    content: public static ImmutableSortedSet<T> CreateRange<T>(IEnumerable<T> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items to add to the set with before it's immutable.
    typeParameters:
    - id: T
      description: The type of items stored by the collection.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}
      description: The new immutable set that contains the specified items.
    content.vb: Public Shared Function CreateRange(Of T)(items As IEnumerable(Of T)) As ImmutableSortedSet(Of T)
  overload: System.Collections.Immutable.ImmutableSortedSet.CreateRange*
  nameWithType.vb: ImmutableSortedSet.CreateRange(Of T)(IEnumerable(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.CreateRange(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: CreateRange(Of T)(IEnumerable(Of T))
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})
  id: CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: CreateRange<T>(IComparer<T>?, IEnumerable<T>)
  nameWithType: ImmutableSortedSet.CreateRange<T>(IComparer<T>?, IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet.CreateRange<T>(System.Collections.Generic.IComparer<T>?, System.Collections.Generic.IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable collection that contains the specified items.
  example: []
  syntax:
    content: public static ImmutableSortedSet<T> CreateRange<T>(IComparer<T>? comparer, IEnumerable<T> items)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer to use to compare elements in this set.
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items to add to the set before it's immutable.
    typeParameters:
    - id: T
      description: The type of items stored by the collection.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}
      description: The new immutable set that contains the specified items.
    content.vb: Public Shared Function CreateRange(Of T)(comparer As IComparer(Of T), items As IEnumerable(Of T)) As ImmutableSortedSet(Of T)
  overload: System.Collections.Immutable.ImmutableSortedSet.CreateRange*
  nameWithType.vb: ImmutableSortedSet.CreateRange(Of T)(IComparer(Of T), IEnumerable(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.CreateRange(Of T)(System.Collections.Generic.IComparer(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: CreateRange(Of T)(IComparer(Of T), IEnumerable(Of T))
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])
  id: Create``1(``0[])
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: Create<T>(params T[])
  nameWithType: ImmutableSortedSet.Create<T>(params T[])
  fullName: System.Collections.Immutable.ImmutableSortedSet.Create<T>(params T[])
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable sorted set that contains the specified array of items.
  example: []
  syntax:
    content: public static ImmutableSortedSet<T> Create<T>(params T[] items)
    parameters:
    - id: items
      type: '{T}[]'
      description: An array that contains the items to prepopulate the set with.
    typeParameters:
    - id: T
      description: The type of items in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}
      description: A new immutable set that contains the specified items.
    content.vb: Public Shared Function Create(Of T)(ParamArray items As T()) As ImmutableSortedSet(Of T)
  overload: System.Collections.Immutable.ImmutableSortedSet.Create*
  nameWithType.vb: ImmutableSortedSet.Create(Of T)(ParamArray T())
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.Create(Of T)(ParamArray T())
  name.vb: Create(Of T)(ParamArray T())
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])
  id: Create``1(System.Collections.Generic.IComparer{``0},``0[])
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: Create<T>(IComparer<T>?, params T[])
  nameWithType: ImmutableSortedSet.Create<T>(IComparer<T>?, params T[])
  fullName: System.Collections.Immutable.ImmutableSortedSet.Create<T>(System.Collections.Generic.IComparer<T>?, params T[])
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.
  example: []
  syntax:
    content: public static ImmutableSortedSet<T> Create<T>(IComparer<T>? comparer, params T[] items)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The implementation to use when comparing items in the set.
    - id: items
      type: '{T}[]'
      description: An array that contains the items to prepopulate the set with.
    typeParameters:
    - id: T
      description: The type of items in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}
      description: A new immutable set that contains the specified items.
    content.vb: Public Shared Function Create(Of T)(comparer As IComparer(Of T), ParamArray items As T()) As ImmutableSortedSet(Of T)
  overload: System.Collections.Immutable.ImmutableSortedSet.Create*
  nameWithType.vb: ImmutableSortedSet.Create(Of T)(IComparer(Of T), ParamArray T())
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.Create(Of T)(System.Collections.Generic.IComparer(Of T), ParamArray T())
  name.vb: Create(Of T)(IComparer(Of T), ParamArray T())
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1
  id: CreateBuilder``1
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: CreateBuilder<T>()
  nameWithType: ImmutableSortedSet.CreateBuilder<T>()
  fullName: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns a collection that can be used to build an immutable sorted set.
  example: []
  syntax:
    content: public static ImmutableSortedSet<T>.Builder CreateBuilder<T>()
    typeParameters:
    - id: T
      description: The type of items stored by the collection.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}.Builder
      description: The immutable collection builder.
    content.vb: Public Shared Function CreateBuilder(Of T)() As ImmutableSortedSet(Of T).Builder
  overload: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder*
  nameWithType.vb: ImmutableSortedSet.CreateBuilder(Of T)()
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder(Of T)()
  name.vb: CreateBuilder(Of T)()
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})
  id: CreateBuilder``1(System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: CreateBuilder<T>(IComparer<T>?)
  nameWithType: ImmutableSortedSet.CreateBuilder<T>(IComparer<T>?)
  fullName: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder<T>(System.Collections.Generic.IComparer<T>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns a collection that can be used to build an immutable sorted set.
  example: []
  syntax:
    content: public static ImmutableSortedSet<T>.Builder CreateBuilder<T>(IComparer<T>? comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer used to compare items in the set for equality.
    typeParameters:
    - id: T
      description: The type of items stored by the collection.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}.Builder
      description: The immutable collection.
    content.vb: Public Shared Function CreateBuilder(Of T)(comparer As IComparer(Of T)) As ImmutableSortedSet(Of T).Builder
  overload: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder*
  nameWithType.vb: ImmutableSortedSet.CreateBuilder(Of T)(IComparer(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder(Of T)(System.Collections.Generic.IComparer(Of T))
  name.vb: CreateBuilder(Of T)(IComparer(Of T))
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  id: ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?)
  fullName: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.
  example: []
  syntax:
    content: public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this IEnumerable<TSource> source, IComparer<TSource>? comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to enumerate.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: The comparer to use for initializing and adding members to the sorted set.
    typeParameters:
    - id: TSource
      description: The type of the elements in the sequence.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{TSource}}
      description: An immutable sorted set that contains the items in the specified sequence.
    content.vb: Public Shared Function ToImmutableSortedSet(Of TSource)(source As IEnumerable(Of TSource), comparer As IComparer(Of TSource)) As ImmutableSortedSet(Of TSource)
  overload: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet*
  nameWithType.vb: ImmutableSortedSet.ToImmutableSortedSet(Of TSource)(IEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: ToImmutableSortedSet(Of TSource)(IEnumerable(Of TSource), IComparer(Of TSource))
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  id: ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  fullName: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Enumerates a sequence and produces an immutable sorted set of its contents.
  example: []
  syntax:
    content: public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this IEnumerable<TSource> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to enumerate.
    typeParameters:
    - id: TSource
      description: The type of the elements in the sequence.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{TSource}}
      description: An immutable sorted set that contains the items in the specified sequence.
    content.vb: Public Shared Function ToImmutableSortedSet(Of TSource)(source As IEnumerable(Of TSource)) As ImmutableSortedSet(Of TSource)
  overload: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet*
  nameWithType.vb: ImmutableSortedSet.ToImmutableSortedSet(Of TSource)(IEnumerable(Of TSource))
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToImmutableSortedSet(Of TSource)(IEnumerable(Of TSource))
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)
  id: ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  - vb
  name: ToImmutableSortedSet<TSource>(Builder)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(ImmutableSortedSet<TSource>.Builder)
  fullName: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet<TSource>(System.Collections.Immutable.ImmutableSortedSet<TSource>.Builder)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable sorted set from the current contents of the builder's set.
  example: []
  syntax:
    content: public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this ImmutableSortedSet<TSource>.Builder builder)
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableSortedSet{{TSource}}.Builder
      description: The builder to create the immutable sorted set from.
    typeParameters:
    - id: TSource
      description: The type of the elements in the immutable sorted set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{{TSource}}
      description: An immutable sorted set that contains the current contents in the builder's set.
    content.vb: Public Shared Function ToImmutableSortedSet(Of TSource)(builder As ImmutableSortedSet(Of TSource).Builder) As ImmutableSortedSet(Of TSource)
  overload: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet*
  nameWithType.vb: ImmutableSortedSet.ToImmutableSortedSet(Of TSource)(ImmutableSortedSet(Of TSource).Builder)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet(Of TSource)(System.Collections.Immutable.ImmutableSortedSet(Of TSource).Builder)
  name.vb: ToImmutableSortedSet(Of TSource)(Builder)
references:
- uid: System.Collections.Immutable.ImmutableSortedSet`1
  commentId: T:System.Collections.Immutable.ImmutableSortedSet`1
  parent: System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  name: ImmutableSortedSet<T>
  nameWithType: ImmutableSortedSet<T>
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>
  nameWithType.vb: ImmutableSortedSet(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T)
  name.vb: ImmutableSortedSet(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Immutable.ImmutableSortedSet.Create*
  commentId: Overload:System.Collections.Immutable.ImmutableSortedSet.Create
  isExternal: true
  href: System.Collections.Immutable.ImmutableSortedSet.html#System_Collections_Immutable_ImmutableSortedSet_Create__1
  name: Create
  nameWithType: ImmutableSortedSet.Create
  fullName: System.Collections.Immutable.ImmutableSortedSet.Create
- uid: System.Collections.Immutable.ImmutableSortedSet{{T}}
  commentId: T:System.Collections.Immutable.ImmutableSortedSet{`0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableSortedSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  name: ImmutableSortedSet<T>
  nameWithType: ImmutableSortedSet<T>
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>
  nameWithType.vb: ImmutableSortedSet(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T)
  name.vb: ImmutableSortedSet(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateRange*
  commentId: Overload:System.Collections.Immutable.ImmutableSortedSet.CreateRange
  isExternal: true
  href: System.Collections.Immutable.ImmutableSortedSet.html#System_Collections_Immutable_ImmutableSortedSet_CreateRange__1_System_Collections_Generic_IEnumerable___0__
  name: CreateRange
  nameWithType: ImmutableSortedSet.CreateRange
  fullName: System.Collections.Immutable.ImmutableSortedSet.CreateRange
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder*
  commentId: Overload:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder
  isExternal: true
  href: System.Collections.Immutable.ImmutableSortedSet.html#System_Collections_Immutable_ImmutableSortedSet_CreateBuilder__1
  name: CreateBuilder
  nameWithType: ImmutableSortedSet.CreateBuilder
  fullName: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder
- uid: System.Collections.Immutable.ImmutableSortedSet{{T}}.Builder
  commentId: T:System.Collections.Immutable.ImmutableSortedSet{`0}.Builder
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableSortedSet`1.Builder
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  name: ImmutableSortedSet<T>.Builder
  nameWithType: ImmutableSortedSet<T>.Builder
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder
  nameWithType.vb: ImmutableSortedSet(Of T).Builder
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Builder
  name.vb: ImmutableSortedSet(Of T).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableSortedSet{`0}.Builder
    name: Builder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1.builder
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableSortedSet{`0}.Builder
    name: Builder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1.builder
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder
  commentId: T:System.Collections.Immutable.ImmutableSortedSet`1.Builder
  parent: System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  name: ImmutableSortedSet<T>.Builder
  nameWithType: ImmutableSortedSet<T>.Builder
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder
  nameWithType.vb: ImmutableSortedSet(Of T).Builder
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T).Builder
  name.vb: ImmutableSortedSet(Of T).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder
    name: Builder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1.builder
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder
    name: Builder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1.builder
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet*
  commentId: Overload:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet
  isExternal: true
  href: System.Collections.Immutable.ImmutableSortedSet.html#System_Collections_Immutable_ImmutableSortedSet_ToImmutableSortedSet__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IComparer___0__
  name: ToImmutableSortedSet
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet
  fullName: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Collections.Generic.IComparer{{TSource}}
  commentId: T:System.Collections.Generic.IComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  name: IComparer<TSource>
  nameWithType: IComparer<TSource>
  fullName: System.Collections.Generic.IComparer<TSource>
  nameWithType.vb: IComparer(Of TSource)
  fullName.vb: System.Collections.Generic.IComparer(Of TSource)
  name.vb: IComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Collections.Immutable.ImmutableSortedSet{{TSource}}
  commentId: T:System.Collections.Immutable.ImmutableSortedSet{``0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableSortedSet`1
  href: System.Collections.Immutable.ImmutableSortedSet-1.html
  name: ImmutableSortedSet<TSource>
  nameWithType: ImmutableSortedSet<TSource>
  fullName: System.Collections.Immutable.ImmutableSortedSet<TSource>
  nameWithType.vb: ImmutableSortedSet(Of TSource)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of TSource)
  name.vb: ImmutableSortedSet(Of TSource)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: System.Collections.Immutable.ImmutableSortedSet-1.html
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: System.Collections.Immutable.ImmutableSortedSet-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Collections.Immutable.ImmutableSortedSet{{TSource}}.Builder
  commentId: T:System.Collections.Immutable.ImmutableSortedSet{``0}.Builder
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableSortedSet`1.Builder
  href: System.Collections.Immutable.ImmutableSortedSet-1.html
  name: ImmutableSortedSet<TSource>.Builder
  nameWithType: ImmutableSortedSet<TSource>.Builder
  fullName: System.Collections.Immutable.ImmutableSortedSet<TSource>.Builder
  nameWithType.vb: ImmutableSortedSet(Of TSource).Builder
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of TSource).Builder
  name.vb: ImmutableSortedSet(Of TSource).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: System.Collections.Immutable.ImmutableSortedSet-1.html
  - name: <
  - name: TSource
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableSortedSet{``0}.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableSortedSet-1.Builder.html
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: System.Collections.Immutable.ImmutableSortedSet-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableSortedSet{``0}.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableSortedSet-1.Builder.html
