### YamlMime:ManagedReference
items:
- uid: System.Text.Json.Utf8JsonWriter
  commentId: T:System.Text.Json.Utf8JsonWriter
  id: Utf8JsonWriter
  parent: System.Text.Json
  children:
  - System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)
  - System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)
  - System.Text.Json.Utf8JsonWriter.BytesCommitted
  - System.Text.Json.Utf8JsonWriter.BytesPending
  - System.Text.Json.Utf8JsonWriter.CurrentDepth
  - System.Text.Json.Utf8JsonWriter.Dispose
  - System.Text.Json.Utf8JsonWriter.DisposeAsync
  - System.Text.Json.Utf8JsonWriter.Flush
  - System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)
  - System.Text.Json.Utf8JsonWriter.Options
  - System.Text.Json.Utf8JsonWriter.Reset
  - System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})
  - System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)
  - System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)
  - System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)
  - System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)
  - System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)
  - System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)
  - System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})
  - System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)
  - System.Text.Json.Utf8JsonWriter.WriteEndArray
  - System.Text.Json.Utf8JsonWriter.WriteEndObject
  - System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})
  - System.Text.Json.Utf8JsonWriter.WriteNull(System.String)
  - System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)
  - System.Text.Json.Utf8JsonWriter.WriteNullValue
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)
  - System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)
  - System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)
  - System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)
  - System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)
  - System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)
  - System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)
  - System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)
  - System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)
  - System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})
  - System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)
  - System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)
  - System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Byte},System.Boolean)
  - System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Char},System.Boolean)
  - System.Text.Json.Utf8JsonWriter.WriteRawValue(System.String,System.Boolean)
  - System.Text.Json.Utf8JsonWriter.WriteStartArray
  - System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})
  - System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)
  - System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)
  - System.Text.Json.Utf8JsonWriter.WriteStartObject
  - System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})
  - System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)
  - System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})
  - System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})
  - System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)
  - System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)
  - System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)
  - System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)
  - System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)
  - System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})
  - System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})
  - System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)
  - System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)
  langs:
  - csharp
  - vb
  name: Utf8JsonWriter
  nameWithType: Utf8JsonWriter
  fullName: System.Text.Json.Utf8JsonWriter
  type: Class
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.
  example: []
  syntax:
    content: 'public sealed class Utf8JsonWriter : IDisposable, IAsyncDisposable'
    content.vb: Public NotInheritable Class Utf8JsonWriter Implements IDisposable, IAsyncDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.IAsyncDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
- uid: System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)
  commentId: M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)
  id: '#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)'
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: Utf8JsonWriter(IBufferWriter<byte>, JsonWriterOptions)
  nameWithType: Utf8JsonWriter.Utf8JsonWriter(IBufferWriter<byte>, JsonWriterOptions)
  fullName: System.Text.Json.Utf8JsonWriter.Utf8JsonWriter(System.Buffers.IBufferWriter<byte>, System.Text.Json.JsonWriterOptions)
  type: Constructor
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Initializes a new instance of the <xref href="System.Text.Json.Utf8JsonWriter" data-throw-if-not-resolved="false"></xref> class using the specified <xref href="System.Buffers.IBufferWriter%601" data-throw-if-not-resolved="false"></xref> to write the output to and customization options.
  example: []
  syntax:
    content: public Utf8JsonWriter(IBufferWriter<byte> bufferWriter, JsonWriterOptions options = default)
    parameters:
    - id: bufferWriter
      type: System.Buffers.IBufferWriter{System.Byte}
      description: The destination for writing JSON text.
    - id: options
      type: System.Text.Json.JsonWriterOptions
      description: Defines the customized behavior of the <xref href="System.Text.Json.Utf8JsonWriter" data-throw-if-not-resolved="false"></xref>. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.
    content.vb: Public Sub New(bufferWriter As IBufferWriter(Of Byte), options As JsonWriterOptions = Nothing)
  overload: System.Text.Json.Utf8JsonWriter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">bufferWriter</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.New(IBufferWriter(Of Byte), JsonWriterOptions)
  fullName.vb: System.Text.Json.Utf8JsonWriter.New(System.Buffers.IBufferWriter(Of Byte), System.Text.Json.JsonWriterOptions)
  name.vb: New(IBufferWriter(Of Byte), JsonWriterOptions)
- uid: System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)
  commentId: M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)
  id: '#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)'
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: Utf8JsonWriter(Stream, JsonWriterOptions)
  nameWithType: Utf8JsonWriter.Utf8JsonWriter(Stream, JsonWriterOptions)
  fullName: System.Text.Json.Utf8JsonWriter.Utf8JsonWriter(System.IO.Stream, System.Text.Json.JsonWriterOptions)
  type: Constructor
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Initializes a new instance of the <xref href="System.Text.Json.Utf8JsonWriter" data-throw-if-not-resolved="false"></xref> class using the specified stream to write the output to and customization options.
  example: []
  syntax:
    content: public Utf8JsonWriter(Stream utf8Json, JsonWriterOptions options = default)
    parameters:
    - id: utf8Json
      type: System.IO.Stream
      description: The destination for writing JSON text.
    - id: options
      type: System.Text.Json.JsonWriterOptions
      description: Defines the customized behavior of the <xref href="System.Text.Json.Utf8JsonWriter" data-throw-if-not-resolved="false"></xref>. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.
    content.vb: Public Sub New(utf8Json As Stream, options As JsonWriterOptions = Nothing)
  overload: System.Text.Json.Utf8JsonWriter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">utf8Json</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.New(Stream, JsonWriterOptions)
  fullName.vb: System.Text.Json.Utf8JsonWriter.New(System.IO.Stream, System.Text.Json.JsonWriterOptions)
  name.vb: New(Stream, JsonWriterOptions)
- uid: System.Text.Json.Utf8JsonWriter.Reset
  commentId: M:System.Text.Json.Utf8JsonWriter.Reset
  id: Reset
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: Utf8JsonWriter.Reset()
  fullName: System.Text.Json.Utf8JsonWriter.Reset()
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Resets the internal state of this instance so that it can be reused.
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset()
  overload: System.Text.Json.Utf8JsonWriter.Reset*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: This instance has been disposed.
- uid: System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)
  commentId: M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)
  id: Reset(System.IO.Stream)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: Reset(Stream)
  nameWithType: Utf8JsonWriter.Reset(Stream)
  fullName: System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Resets the internal state of this instance so that it can be reused with a new instance of <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Reset(Stream utf8Json)
    parameters:
    - id: utf8Json
      type: System.IO.Stream
      description: The destination for writing JSON text.
    content.vb: Public Sub Reset(utf8Json As Stream)
  overload: System.Text.Json.Utf8JsonWriter.Reset*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">utf8Json</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: This instance has been disposed.
- uid: System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})
  id: Reset(System.Buffers.IBufferWriter{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: Reset(IBufferWriter<byte>)
  nameWithType: Utf8JsonWriter.Reset(IBufferWriter<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Resets the internal state of this instance so that it can be reused with a new instance of <xref href="System.Buffers.IBufferWriter%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Reset(IBufferWriter<byte> bufferWriter)
    parameters:
    - id: bufferWriter
      type: System.Buffers.IBufferWriter{System.Byte}
      description: The destination for writing JSON text.
    content.vb: Public Sub Reset(bufferWriter As IBufferWriter(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.Reset*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">bufferWriter</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: This instance has been disposed.
  nameWithType.vb: Utf8JsonWriter.Reset(IBufferWriter(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter(Of Byte))
  name.vb: Reset(IBufferWriter(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.Flush
  commentId: M:System.Text.Json.Utf8JsonWriter.Flush
  id: Flush
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: Utf8JsonWriter.Flush()
  fullName: System.Text.Json.Utf8JsonWriter.Flush()
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Commits the JSON text written so far, which makes it visible to the output destination.
  example: []
  syntax:
    content: public void Flush()
    content.vb: Public Sub Flush()
  overload: System.Text.Json.Utf8JsonWriter.Flush*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: This instance has been disposed.
- uid: System.Text.Json.Utf8JsonWriter.Dispose
  commentId: M:System.Text.Json.Utf8JsonWriter.Dispose
  id: Dispose
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Utf8JsonWriter.Dispose()
  fullName: System.Text.Json.Utf8JsonWriter.Dispose()
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: System.Text.Json.Utf8JsonWriter.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: System.Text.Json.Utf8JsonWriter.DisposeAsync
  commentId: M:System.Text.Json.Utf8JsonWriter.DisposeAsync
  id: DisposeAsync
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: DisposeAsync()
  nameWithType: Utf8JsonWriter.DisposeAsync()
  fullName: System.Text.Json.Utf8JsonWriter.DisposeAsync()
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.
  example: []
  syntax:
    content: public ValueTask DisposeAsync()
    return:
      type: System.Threading.Tasks.ValueTask
      description: A task representing the asynchronous dispose operation.
    content.vb: Public Function DisposeAsync() As ValueTask
  overload: System.Text.Json.Utf8JsonWriter.DisposeAsync*
  implements:
  - System.IAsyncDisposable.DisposeAsync
- uid: System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: FlushAsync(CancellationToken)
  nameWithType: Utf8JsonWriter.FlushAsync(CancellationToken)
  fullName: System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Asynchronously commits the JSON text written so far, which makes it visible to the output destination.
  example: []
  syntax:
    content: public Task FlushAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref href="System.Threading.CancellationToken.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous flush operation.
    content.vb: Public Function FlushAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: System.Text.Json.Utf8JsonWriter.FlushAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: This instance has been disposed.
- uid: System.Text.Json.Utf8JsonWriter.WriteStartArray
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStartArray
  id: WriteStartArray
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStartArray()
  nameWithType: Utf8JsonWriter.WriteStartArray()
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartArray()
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the beginning of a JSON array.
  example: []
  syntax:
    content: public void WriteStartArray()
    content.vb: Public Sub WriteStartArray()
  overload: System.Text.Json.Utf8JsonWriter.WriteStartArray*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The depth of the JSON exceeds the maximum depth of 1,000.


      -or-


      Validation is enabled, and this write operation would produce invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteStartObject
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStartObject
  id: WriteStartObject
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStartObject()
  nameWithType: Utf8JsonWriter.WriteStartObject()
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartObject()
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the beginning of a JSON object.
  example: []
  syntax:
    content: public void WriteStartObject()
    content.vb: Public Sub WriteStartObject()
  overload: System.Text.Json.Utf8JsonWriter.WriteStartObject*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The depth of the JSON exceeds the maximum depth of 1,000.


      -or-


      Validation is enabled, and the operation would result in writing invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)
  id: WriteStartArray(System.Text.Json.JsonEncodedText)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStartArray(JsonEncodedText)
  nameWithType: Utf8JsonWriter.WriteStartArray(JsonEncodedText)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the beginning of a JSON array with a pre-encoded property name as the key.
  example: []
  syntax:
    content: public void WriteStartArray(JsonEncodedText propertyName)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.
    content.vb: Public Sub WriteStartArray(propertyName As JsonEncodedText)
  overload: System.Text.Json.Utf8JsonWriter.WriteStartArray*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The depth of the JSON has exceeded the maximum depth of 1,000.


      -or-


      Validation is enabled, and this method would result in writing invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)
  id: WriteStartObject(System.Text.Json.JsonEncodedText)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStartObject(JsonEncodedText)
  nameWithType: Utf8JsonWriter.WriteStartObject(JsonEncodedText)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the beginning of a JSON object with a pre-encoded property name as the key.
  example: []
  syntax:
    content: public void WriteStartObject(JsonEncodedText propertyName)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    content.vb: Public Sub WriteStartObject(propertyName As JsonEncodedText)
  overload: System.Text.Json.Utf8JsonWriter.WriteStartObject*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The depth of the JSON has exceeded the maximum depth of 1,000.


      -or-


      Validation is enabled, and this method would result in writing invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})
  id: WriteStartArray(System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStartArray(ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteStartArray(ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.
  example: []
  syntax:
    content: public void WriteStartArray(ReadOnlySpan<byte> utf8PropertyName)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON array to be written.
    content.vb: Public Sub WriteStartArray(utf8PropertyName As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteStartArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The depth of the JSON exceeds the maximum depth of 1,000.


      -or-


      Validation is enabled, and this write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteStartArray(ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan(Of Byte))
  name.vb: WriteStartArray(ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})
  id: WriteStartObject(System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStartObject(ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteStartObject(ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.
  example: []
  syntax:
    content: public void WriteStartObject(ReadOnlySpan<byte> utf8PropertyName)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    content.vb: Public Sub WriteStartObject(utf8PropertyName As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteStartObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The depth of the JSON exceeds the maximum depth of 1,000. 


      -or-


      Validation is enabled, and this write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteStartObject(ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan(Of Byte))
  name.vb: WriteStartObject(ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)
  id: WriteStartArray(System.String)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStartArray(string)
  nameWithType: Utf8JsonWriter.WriteStartArray(string)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartArray(string)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the beginning of a JSON array with a property name specified as a string as the key.
  example: []
  syntax:
    content: public void WriteStartArray(string propertyName)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.
    content.vb: Public Sub WriteStartArray(propertyName As String)
  overload: System.Text.Json.Utf8JsonWriter.WriteStartArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The depth of the JSON exceeds the maximum depth of 1,000.


      -or-


      Validation is enabled, and this write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteStartArray(String)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteStartArray(String)
  name.vb: WriteStartArray(String)
- uid: System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)
  id: WriteStartObject(System.String)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStartObject(string)
  nameWithType: Utf8JsonWriter.WriteStartObject(string)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartObject(string)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the beginning of a JSON object with a property name specified as a string as the key.
  example: []
  syntax:
    content: public void WriteStartObject(string propertyName)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    content.vb: Public Sub WriteStartObject(propertyName As String)
  overload: System.Text.Json.Utf8JsonWriter.WriteStartObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The depth of the JSON exceeds the maximum depth of 1,000. 


      -or-


      Validation is enabled, and this write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteStartObject(String)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteStartObject(String)
  name.vb: WriteStartObject(String)
- uid: System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})
  id: WriteStartArray(System.ReadOnlySpan{System.Char})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStartArray(ReadOnlySpan<char>)
  nameWithType: Utf8JsonWriter.WriteStartArray(ReadOnlySpan<char>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.
  example: []
  syntax:
    content: public void WriteStartArray(ReadOnlySpan<char> propertyName)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.
    content.vb: Public Sub WriteStartArray(propertyName As ReadOnlySpan(Of Char))
  overload: System.Text.Json.Utf8JsonWriter.WriteStartArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The depth of the JSON exceeds the maximum depth of 1,000.


      -or-


      Validation is enabled, and this write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteStartArray(ReadOnlySpan(Of Char))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan(Of Char))
  name.vb: WriteStartArray(ReadOnlySpan(Of Char))
- uid: System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})
  id: WriteStartObject(System.ReadOnlySpan{System.Char})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStartObject(ReadOnlySpan<char>)
  nameWithType: Utf8JsonWriter.WriteStartObject(ReadOnlySpan<char>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.
  example: []
  syntax:
    content: public void WriteStartObject(ReadOnlySpan<char> propertyName)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    content.vb: Public Sub WriteStartObject(propertyName As ReadOnlySpan(Of Char))
  overload: System.Text.Json.Utf8JsonWriter.WriteStartObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      The depth of the JSON exceeds the maximum depth of 1,000. 


      -or-


      Validation is enabled, and this write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteStartObject(ReadOnlySpan(Of Char))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan(Of Char))
  name.vb: WriteStartObject(ReadOnlySpan(Of Char))
- uid: System.Text.Json.Utf8JsonWriter.WriteEndArray
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteEndArray
  id: WriteEndArray
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteEndArray()
  nameWithType: Utf8JsonWriter.WriteEndArray()
  fullName: System.Text.Json.Utf8JsonWriter.WriteEndArray()
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the end of a JSON array.
  example: []
  syntax:
    content: public void WriteEndArray()
    content.vb: Public Sub WriteEndArray()
  overload: System.Text.Json.Utf8JsonWriter.WriteEndArray*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteEndObject
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteEndObject
  id: WriteEndObject
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteEndObject()
  nameWithType: Utf8JsonWriter.WriteEndObject()
  fullName: System.Text.Json.Utf8JsonWriter.WriteEndObject()
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the end of a JSON object.
  example: []
  syntax:
    content: public void WriteEndObject()
    content.vb: Public Sub WriteEndObject()
  overload: System.Text.Json.Utf8JsonWriter.WriteEndObject*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})
  id: WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteBase64String(JsonEncodedText, ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteBase64String(JsonEncodedText, ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText, System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteBase64String(JsonEncodedText propertyName, ReadOnlySpan<byte> bytes)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON-encoded name of the property to write.
    - id: bytes
      type: System.ReadOnlySpan{System.Byte}
      description: The binary data to write as Base64 encoded text.
    content.vb: Public Sub WriteBase64String(propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteBase64String*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteBase64String(JsonEncodedText, ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText, System.ReadOnlySpan(Of Byte))
  name.vb: WriteBase64String(JsonEncodedText, ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})
  id: WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteBase64String(string, ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteBase64String(string, ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteBase64String(string, System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteBase64String(string propertyName, ReadOnlySpan<byte> bytes)
    parameters:
    - id: propertyName
      type: System.String
      description: The property name of the JSON object to be transcoded and written as UTF-8.
    - id: bytes
      type: System.ReadOnlySpan{System.Byte}
      description: The binary data to write as Base64 encoded text.
    content.vb: Public Sub WriteBase64String(propertyName As String, bytes As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteBase64String*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteBase64String(String, ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteBase64String(String, System.ReadOnlySpan(Of Byte))
  name.vb: WriteBase64String(String, ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})
  id: WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteBase64String(ReadOnlySpan<char>, ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteBase64String(ReadOnlySpan<char>, ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan<char>, System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteBase64String(ReadOnlySpan<char> propertyName, ReadOnlySpan<byte> bytes)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The property name of the JSON object to be transcoded and written as UTF-8.
    - id: bytes
      type: System.ReadOnlySpan{System.Byte}
      description: The binary data to write as Base64 encoded text.
    content.vb: Public Sub WriteBase64String(propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteBase64String*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteBase64String(ReadOnlySpan(Of Char), ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Byte))
  name.vb: WriteBase64String(ReadOnlySpan(Of Char), ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteBase64String(ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteBase64String(ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteBase64String(ReadOnlySpan<byte> utf8PropertyName, ReadOnlySpan<byte> bytes)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded name of the property to write.
    - id: bytes
      type: System.ReadOnlySpan{System.Byte}
      description: The binary data to write as Base64 encoded text.
    content.vb: Public Sub WriteBase64String(utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteBase64String*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteBase64String(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte))
  name.vb: WriteBase64String(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)
  id: WriteString(System.Text.Json.JsonEncodedText,System.DateTime)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(JsonEncodedText, DateTime)
  nameWithType: Utf8JsonWriter.WriteString(JsonEncodedText, DateTime)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, System.DateTime)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(JsonEncodedText propertyName, DateTime value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.DateTime
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As JsonEncodedText, value As Date)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(JsonEncodedText, Date)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, Date)
  name.vb: WriteString(JsonEncodedText, Date)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)
  id: WriteString(System.String,System.DateTime)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(string, DateTime)
  nameWithType: Utf8JsonWriter.WriteString(string, DateTime)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(string, System.DateTime)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(string propertyName, DateTime value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.DateTime
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As String, value As Date)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteString(String, Date)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(String, Date)
  name.vb: WriteString(String, Date)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)
  id: WriteString(System.ReadOnlySpan{System.Char},System.DateTime)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<char>, DateTime)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<char>, DateTime)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<char>, System.DateTime)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and a <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<char> propertyName, DateTime value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.DateTime
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As ReadOnlySpan(Of Char), value As Date)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Char), Date)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Char), Date)
  name.vb: WriteString(ReadOnlySpan(Of Char), Date)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)
  id: WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<byte>, DateTime)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<byte>, DateTime)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<byte>, System.DateTime)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-8 property name and a <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<byte> utf8PropertyName, DateTime value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.DateTime
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(utf8PropertyName As ReadOnlySpan(Of Byte), value As Date)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Byte), Date)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Byte), Date)
  name.vb: WriteString(ReadOnlySpan(Of Byte), Date)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)
  id: WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(JsonEncodedText, DateTimeOffset)
  nameWithType: Utf8JsonWriter.WriteString(JsonEncodedText, DateTimeOffset)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, System.DateTimeOffset)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(JsonEncodedText propertyName, DateTimeOffset value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.DateTimeOffset
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As JsonEncodedText, value As DateTimeOffset)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)
  id: WriteString(System.String,System.DateTimeOffset)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(string, DateTimeOffset)
  nameWithType: Utf8JsonWriter.WriteString(string, DateTimeOffset)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(string, System.DateTimeOffset)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(string propertyName, DateTimeOffset value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.DateTimeOffset
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As String, value As DateTimeOffset)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteString(String, DateTimeOffset)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(String, System.DateTimeOffset)
  name.vb: WriteString(String, DateTimeOffset)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)
  id: WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<char>, DateTimeOffset)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<char>, DateTimeOffset)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<char>, System.DateTimeOffset)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and a <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<char> propertyName, DateTimeOffset value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.DateTimeOffset
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Char), DateTimeOffset)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Char), System.DateTimeOffset)
  name.vb: WriteString(ReadOnlySpan(Of Char), DateTimeOffset)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)
  id: WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<byte>, DateTimeOffset)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<byte>, DateTimeOffset)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<byte>, System.DateTimeOffset)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-8 property name and a <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<byte> utf8PropertyName, DateTimeOffset value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.DateTimeOffset
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Byte), DateTimeOffset)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Byte), System.DateTimeOffset)
  name.vb: WriteString(ReadOnlySpan(Of Byte), DateTimeOffset)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)
  id: WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(JsonEncodedText, decimal)
  nameWithType: Utf8JsonWriter.WriteNumber(JsonEncodedText, decimal)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, decimal)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(JsonEncodedText propertyName, decimal value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Decimal
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As JsonEncodedText, value As Decimal)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(JsonEncodedText, Decimal)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, Decimal)
  name.vb: WriteNumber(JsonEncodedText, Decimal)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)
  id: WriteNumber(System.String,System.Decimal)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(string, decimal)
  nameWithType: Utf8JsonWriter.WriteNumber(string, decimal)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(string, decimal)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(string propertyName, decimal value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Decimal
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As String, value As Decimal)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(String, Decimal)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(String, Decimal)
  name.vb: WriteNumber(String, Decimal)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)
  id: WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<char>, decimal)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<char>, decimal)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<char>, decimal)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(ReadOnlySpan<char> propertyName, decimal value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Decimal
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As ReadOnlySpan(Of Char), value As Decimal)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Char), Decimal)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Char), Decimal)
  name.vb: WriteNumber(ReadOnlySpan(Of Char), Decimal)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)
  id: WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<byte>, decimal)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<byte>, decimal)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<byte>, decimal)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only span of bytes and a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, decimal value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.Decimal
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Byte), Decimal)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Byte), Decimal)
  name.vb: WriteNumber(ReadOnlySpan(Of Byte), Decimal)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)
  id: WriteNumber(System.Text.Json.JsonEncodedText,System.Double)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(JsonEncodedText, double)
  nameWithType: Utf8JsonWriter.WriteNumber(JsonEncodedText, double)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, double)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(JsonEncodedText propertyName, double value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Double
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As JsonEncodedText, value As Double)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(JsonEncodedText, Double)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, Double)
  name.vb: WriteNumber(JsonEncodedText, Double)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)
  id: WriteNumber(System.String,System.Double)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(string, double)
  nameWithType: Utf8JsonWriter.WriteNumber(string, double)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(string, double)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(string propertyName, double value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Double
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As String, value As Double)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(String, Double)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(String, Double)
  name.vb: WriteNumber(String, Double)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)
  id: WriteNumber(System.ReadOnlySpan{System.Char},System.Double)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<char>, double)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<char>, double)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<char>, double)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(ReadOnlySpan<char> propertyName, double value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Double
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As ReadOnlySpan(Of Char), value As Double)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Char), Double)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Char), Double)
  name.vb: WriteNumber(ReadOnlySpan(Of Char), Double)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)
  id: WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<byte>, double)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<byte>, double)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<byte>, double)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only span of bytes and a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, double value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.Double
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Byte), Double)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Byte), Double)
  name.vb: WriteNumber(ReadOnlySpan(Of Byte), Double)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)
  id: WriteNumber(System.Text.Json.JsonEncodedText,System.Single)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(JsonEncodedText, float)
  nameWithType: Utf8JsonWriter.WriteNumber(JsonEncodedText, float)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, float)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.Single" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(JsonEncodedText propertyName, float value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Single
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As JsonEncodedText, value As Single)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(JsonEncodedText, Single)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, Single)
  name.vb: WriteNumber(JsonEncodedText, Single)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)
  id: WriteNumber(System.String,System.Single)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(string, float)
  nameWithType: Utf8JsonWriter.WriteNumber(string, float)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(string, float)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a <xref href="System.Single" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(string propertyName, float value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Single
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As String, value As Single)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(String, Single)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(String, Single)
  name.vb: WriteNumber(String, Single)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)
  id: WriteNumber(System.ReadOnlySpan{System.Char},System.Single)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<char>, float)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<char>, float)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<char>, float)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and a <xref href="System.Single" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(ReadOnlySpan<char> propertyName, float value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Single
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As ReadOnlySpan(Of Char), value As Single)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Char), Single)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Char), Single)
  name.vb: WriteNumber(ReadOnlySpan(Of Char), Single)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)
  id: WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<byte>, float)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<byte>, float)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<byte>, float)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only span of bytes and a <xref href="System.Single" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, float value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.Single
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Byte), Single)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Byte), Single)
  name.vb: WriteNumber(ReadOnlySpan(Of Byte), Single)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)
  id: WriteString(System.Text.Json.JsonEncodedText,System.Guid)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(JsonEncodedText, Guid)
  nameWithType: Utf8JsonWriter.WriteString(JsonEncodedText, Guid)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, System.Guid)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.Guid" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(JsonEncodedText propertyName, Guid value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Guid
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As JsonEncodedText, value As Guid)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)
  id: WriteString(System.String,System.Guid)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(string, Guid)
  nameWithType: Utf8JsonWriter.WriteString(string, Guid)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(string, System.Guid)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a <xref href="System.Guid" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(string propertyName, Guid value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Guid
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As String, value As Guid)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteString(String, Guid)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(String, System.Guid)
  name.vb: WriteString(String, Guid)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)
  id: WriteString(System.ReadOnlySpan{System.Char},System.Guid)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<char>, Guid)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<char>, Guid)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<char>, System.Guid)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and a <xref href="System.Guid" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<char> propertyName, Guid value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Guid
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As ReadOnlySpan(Of Char), value As Guid)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Char), Guid)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Char), System.Guid)
  name.vb: WriteString(ReadOnlySpan(Of Char), Guid)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)
  id: WriteString(System.ReadOnlySpan{System.Byte},System.Guid)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<byte>, Guid)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<byte>, Guid)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<byte>, System.Guid)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-8 property name and a <xref href="System.Guid" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<byte> utf8PropertyName, Guid value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.Guid
      description: The value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Byte), Guid)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Byte), System.Guid)
  name.vb: WriteString(ReadOnlySpan(Of Byte), Guid)
- uid: System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)
  id: WriteNull(System.Text.Json.JsonEncodedText)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNull(JsonEncodedText)
  nameWithType: Utf8JsonWriter.WriteNull(JsonEncodedText)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNull(JsonEncodedText propertyName)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    content.vb: Public Sub WriteNull(propertyName As JsonEncodedText)
  overload: System.Text.Json.Utf8JsonWriter.WriteNull*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteNull(System.String)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)
  id: WriteNull(System.String)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNull(string)
  nameWithType: Utf8JsonWriter.WriteNull(string)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNull(string)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNull(string propertyName)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    content.vb: Public Sub WriteNull(propertyName As String)
  overload: System.Text.Json.Utf8JsonWriter.WriteNull*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteNull(String)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNull(String)
  name.vb: WriteNull(String)
- uid: System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})
  id: WriteNull(System.ReadOnlySpan{System.Char})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNull(ReadOnlySpan<char>)
  nameWithType: Utf8JsonWriter.WriteNull(ReadOnlySpan<char>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNull(ReadOnlySpan<char> propertyName)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    content.vb: Public Sub WriteNull(propertyName As ReadOnlySpan(Of Char))
  overload: System.Text.Json.Utf8JsonWriter.WriteNull*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNull(ReadOnlySpan(Of Char))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan(Of Char))
  name.vb: WriteNull(ReadOnlySpan(Of Char))
- uid: System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})
  id: WriteNull(System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNull(ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteNull(ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNull(ReadOnlySpan<byte> utf8PropertyName)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    content.vb: Public Sub WriteNull(utf8PropertyName As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteNull*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNull(ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan(Of Byte))
  name.vb: WriteNull(ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)
  id: WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteBoolean(JsonEncodedText, bool)
  nameWithType: Utf8JsonWriter.WriteBoolean(JsonEncodedText, bool)
  fullName: System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText, bool)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref> value (as a JSON literal true or false) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteBoolean(JsonEncodedText propertyName, bool value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Boolean
      description: The value to be written as a JSON literal true or false as part of the name/value pair.
    content.vb: Public Sub WriteBoolean(propertyName As JsonEncodedText, value As Boolean)
  overload: System.Text.Json.Utf8JsonWriter.WriteBoolean*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteBoolean(JsonEncodedText, Boolean)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText, Boolean)
  name.vb: WriteBoolean(JsonEncodedText, Boolean)
- uid: System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)
  id: WriteBoolean(System.String,System.Boolean)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteBoolean(string, bool)
  nameWithType: Utf8JsonWriter.WriteBoolean(string, bool)
  fullName: System.Text.Json.Utf8JsonWriter.WriteBoolean(string, bool)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref> value (as a JSON literal true or false) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteBoolean(string propertyName, bool value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Boolean
      description: The value to be written as a JSON literal true or false as part of the name/value pair.
    content.vb: Public Sub WriteBoolean(propertyName As String, value As Boolean)
  overload: System.Text.Json.Utf8JsonWriter.WriteBoolean*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteBoolean(String, Boolean)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteBoolean(String, Boolean)
  name.vb: WriteBoolean(String, Boolean)
- uid: System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)
  id: WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteBoolean(ReadOnlySpan<char>, bool)
  nameWithType: Utf8JsonWriter.WriteBoolean(ReadOnlySpan<char>, bool)
  fullName: System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan<char>, bool)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and a <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref> value (as a JSON literal true or false) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteBoolean(ReadOnlySpan<char> propertyName, bool value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Boolean
      description: The value to be written as a JSON literal true or false as part of the name/value pair.
    content.vb: Public Sub WriteBoolean(propertyName As ReadOnlySpan(Of Char), value As Boolean)
  overload: System.Text.Json.Utf8JsonWriter.WriteBoolean*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteBoolean(ReadOnlySpan(Of Char), Boolean)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan(Of Char), Boolean)
  name.vb: WriteBoolean(ReadOnlySpan(Of Char), Boolean)
- uid: System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)
  id: WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteBoolean(ReadOnlySpan<byte>, bool)
  nameWithType: Utf8JsonWriter.WriteBoolean(ReadOnlySpan<byte>, bool)
  fullName: System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan<byte>, bool)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only span of bytes and a <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref> value (as a JSON literal true or false) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteBoolean(ReadOnlySpan<byte> utf8PropertyName, bool value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.Boolean
      description: The value to be written as a JSON literal true or false as part of the name/value pair.
    content.vb: Public Sub WriteBoolean(utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)
  overload: System.Text.Json.Utf8JsonWriter.WriteBoolean*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteBoolean(ReadOnlySpan(Of Byte), Boolean)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan(Of Byte), Boolean)
  name.vb: WriteBoolean(ReadOnlySpan(Of Byte), Boolean)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)
  id: WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(JsonEncodedText, long)
  nameWithType: Utf8JsonWriter.WriteNumber(JsonEncodedText, long)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, long)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(JsonEncodedText propertyName, long value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Int64
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As JsonEncodedText, value As Long)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(JsonEncodedText, Long)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, Long)
  name.vb: WriteNumber(JsonEncodedText, Long)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)
  id: WriteNumber(System.String,System.Int64)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(string, long)
  nameWithType: Utf8JsonWriter.WriteNumber(string, long)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(string, long)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(string propertyName, long value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Int64
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As String, value As Long)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(String, Long)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(String, Long)
  name.vb: WriteNumber(String, Long)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)
  id: WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<char>, long)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<char>, long)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<char>, long)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(ReadOnlySpan<char> propertyName, long value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Int64
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As ReadOnlySpan(Of Char), value As Long)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Char), Long)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Char), Long)
  name.vb: WriteNumber(ReadOnlySpan(Of Char), Long)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)
  id: WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<byte>, long)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<byte>, long)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<byte>, long)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only span of bytes and an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, long value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.Int64
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Byte), Long)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Byte), Long)
  name.vb: WriteNumber(ReadOnlySpan(Of Byte), Long)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)
  id: WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(JsonEncodedText, int)
  nameWithType: Utf8JsonWriter.WriteNumber(JsonEncodedText, int)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, int)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(JsonEncodedText propertyName, int value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Int32
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As JsonEncodedText, value As Integer)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(JsonEncodedText, Integer)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, Integer)
  name.vb: WriteNumber(JsonEncodedText, Integer)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)
  id: WriteNumber(System.String,System.Int32)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(string, int)
  nameWithType: Utf8JsonWriter.WriteNumber(string, int)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(string, int)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and an <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(string propertyName, int value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Int32
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As String, value As Integer)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(String, Integer)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(String, Integer)
  name.vb: WriteNumber(String, Integer)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)
  id: WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<char>, int)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<char>, int)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<char>, int)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and an <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(ReadOnlySpan<char> propertyName, int value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Int32
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(propertyName As ReadOnlySpan(Of Char), value As Integer)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Char), Integer)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Char), Integer)
  name.vb: WriteNumber(ReadOnlySpan(Of Char), Integer)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)
  id: WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<byte>, int)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<byte>, int)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<byte>, int)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only span of bytes and an <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, int value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.Int32
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: Public Sub WriteNumber(utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Byte), Integer)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Byte), Integer)
  name.vb: WriteNumber(ReadOnlySpan(Of Byte), Integer)
- uid: System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)
  commentId: M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)
  id: WritePropertyName(System.Text.Json.JsonEncodedText)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WritePropertyName(JsonEncodedText)
  nameWithType: Utf8JsonWriter.WritePropertyName(JsonEncodedText)
  fullName: System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WritePropertyName(JsonEncodedText propertyName)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    content.vb: Public Sub WritePropertyName(propertyName As JsonEncodedText)
  overload: System.Text.Json.Utf8JsonWriter.WritePropertyName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this write operation would produce invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)
  commentId: M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)
  id: WritePropertyName(System.String)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WritePropertyName(string)
  nameWithType: Utf8JsonWriter.WritePropertyName(string)
  fullName: System.Text.Json.Utf8JsonWriter.WritePropertyName(string)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WritePropertyName(string propertyName)
    parameters:
    - id: propertyName
      type: System.String
      description: The property name of the JSON object to be transcoded and written as UTF-8.
    content.vb: Public Sub WritePropertyName(propertyName As String)
  overload: System.Text.Json.Utf8JsonWriter.WritePropertyName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">propertyName</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WritePropertyName(String)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WritePropertyName(String)
  name.vb: WritePropertyName(String)
- uid: System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})
  commentId: M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})
  id: WritePropertyName(System.ReadOnlySpan{System.Char})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WritePropertyName(ReadOnlySpan<char>)
  nameWithType: Utf8JsonWriter.WritePropertyName(ReadOnlySpan<char>)
  fullName: System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WritePropertyName(ReadOnlySpan<char> propertyName)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The property name of the JSON object to be transcoded and written as UTF-8.
    content.vb: Public Sub WritePropertyName(propertyName As ReadOnlySpan(Of Char))
  overload: System.Text.Json.Utf8JsonWriter.WritePropertyName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WritePropertyName(ReadOnlySpan(Of Char))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan(Of Char))
  name.vb: WritePropertyName(ReadOnlySpan(Of Char))
- uid: System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})
  id: WritePropertyName(System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WritePropertyName(ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WritePropertyName(ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WritePropertyName(ReadOnlySpan<byte> utf8PropertyName)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    content.vb: Public Sub WritePropertyName(utf8PropertyName As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WritePropertyName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WritePropertyName(ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan(Of Byte))
  name.vb: WritePropertyName(ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)
  id: WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(JsonEncodedText, JsonEncodedText)
  nameWithType: Utf8JsonWriter.WriteString(JsonEncodedText, JsonEncodedText)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, System.Text.Json.JsonEncodedText)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(JsonEncodedText propertyName, JsonEncodedText value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As JsonEncodedText, value As JsonEncodedText)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)
  id: WriteString(System.String,System.Text.Json.JsonEncodedText)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(string, JsonEncodedText)
  nameWithType: Utf8JsonWriter.WriteString(string, JsonEncodedText)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(string, System.Text.Json.JsonEncodedText)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(string propertyName, JsonEncodedText value)
    parameters:
    - id: propertyName
      type: System.String
      description: The property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As String, value As JsonEncodedText)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteString(String, JsonEncodedText)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(String, System.Text.Json.JsonEncodedText)
  name.vb: WriteString(String, JsonEncodedText)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)
  id: WriteString(System.String,System.String)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(string, string?)
  nameWithType: Utf8JsonWriter.WriteString(string, string?)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(string, string?)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(string propertyName, string? value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.String
      description: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As String, value As String)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteString(String, String)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(String, String)
  name.vb: WriteString(String, String)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<char> propertyName, ReadOnlySpan<char> value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: WriteString(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<byte> utf8PropertyName, ReadOnlySpan<byte> utf8Value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: utf8Value
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte))
  name.vb: WriteString(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)
  id: WriteString(System.Text.Json.JsonEncodedText,System.String)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(JsonEncodedText, string?)
  nameWithType: Utf8JsonWriter.WriteString(JsonEncodedText, string?)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, string?)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(JsonEncodedText propertyName, string? value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.String
      description: The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As JsonEncodedText, value As String)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(JsonEncodedText, String)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, String)
  name.vb: WriteString(JsonEncodedText, String)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})
  id: WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(JsonEncodedText, ReadOnlySpan<char>)
  nameWithType: Utf8JsonWriter.WriteString(JsonEncodedText, ReadOnlySpan<char>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(JsonEncodedText propertyName, ReadOnlySpan<char> value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.ReadOnlySpan{System.Char}
      description: The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(JsonEncodedText, ReadOnlySpan(Of Char))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, System.ReadOnlySpan(Of Char))
  name.vb: WriteString(JsonEncodedText, ReadOnlySpan(Of Char))
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})
  id: WriteString(System.String,System.ReadOnlySpan{System.Char})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(string, ReadOnlySpan<char>)
  nameWithType: Utf8JsonWriter.WriteString(string, ReadOnlySpan<char>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(string, System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(string propertyName, ReadOnlySpan<char> value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As String, value As ReadOnlySpan(Of Char))
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteString(String, ReadOnlySpan(Of Char))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(String, System.ReadOnlySpan(Of Char))
  name.vb: WriteString(String, ReadOnlySpan(Of Char))
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})
  id: WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<byte>, ReadOnlySpan<char>)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<byte>, ReadOnlySpan<char>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<byte>, System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<byte> utf8PropertyName, ReadOnlySpan<char> value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Char))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Char))
  name.vb: WriteString(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Char))
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})
  id: WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(JsonEncodedText, ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteString(JsonEncodedText, ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(JsonEncodedText propertyName, ReadOnlySpan<byte> utf8Value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: utf8Value
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(JsonEncodedText, ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText, System.ReadOnlySpan(Of Byte))
  name.vb: WriteString(JsonEncodedText, ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})
  id: WriteString(System.String,System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(string, ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteString(string, ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(string, System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(string propertyName, ReadOnlySpan<byte> utf8Value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: utf8Value
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As String, utf8Value As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteString(String, ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(String, System.ReadOnlySpan(Of Byte))
  name.vb: WriteString(String, ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})
  id: WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<char>, ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<char>, ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<char>, System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<char> propertyName, ReadOnlySpan<byte> utf8Value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: utf8Value
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Char), ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Byte))
  name.vb: WriteString(ReadOnlySpan(Of Char), ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)
  id: WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<char>, JsonEncodedText)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<char>, JsonEncodedText)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<char>, System.Text.Json.JsonEncodedText)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<char> propertyName, JsonEncodedText value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Char), JsonEncodedText)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Char), System.Text.Json.JsonEncodedText)
  name.vb: WriteString(ReadOnlySpan(Of Char), JsonEncodedText)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)
  id: WriteString(System.ReadOnlySpan{System.Char},System.String)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<char>, string?)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<char>, string?)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<char>, string?)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<char> propertyName, string? value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.String
      description: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(propertyName As ReadOnlySpan(Of Char), value As String)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Char), String)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Char), String)
  name.vb: WriteString(ReadOnlySpan(Of Char), String)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)
  id: WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<byte>, JsonEncodedText)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<byte>, JsonEncodedText)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<byte>, System.Text.Json.JsonEncodedText)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<byte> utf8PropertyName, JsonEncodedText value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Byte), JsonEncodedText)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Byte), System.Text.Json.JsonEncodedText)
  name.vb: WriteString(ReadOnlySpan(Of Byte), JsonEncodedText)
- uid: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)
  id: WriteString(System.ReadOnlySpan{System.Byte},System.String)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteString(ReadOnlySpan<byte>, string?)
  nameWithType: Utf8JsonWriter.WriteString(ReadOnlySpan<byte>, string?)
  fullName: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan<byte>, string?)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: public void WriteString(ReadOnlySpan<byte> utf8PropertyName, string? value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.String
      description: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    content.vb: Public Sub WriteString(utf8PropertyName As ReadOnlySpan(Of Byte), value As String)
  overload: System.Text.Json.Utf8JsonWriter.WriteString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name or value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteString(ReadOnlySpan(Of Byte), String)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan(Of Byte), String)
  name.vb: WriteString(ReadOnlySpan(Of Byte), String)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)
  id: WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(JsonEncodedText, ulong)
  nameWithType: Utf8JsonWriter.WriteNumber(JsonEncodedText, ulong)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, ulong)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.UInt64" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void WriteNumber(JsonEncodedText propertyName, ulong value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.UInt64
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub WriteNumber(propertyName As JsonEncodedText, value As ULong)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8JsonWriter.WriteNumber(JsonEncodedText, ULong)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, ULong)
  name.vb: WriteNumber(JsonEncodedText, ULong)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)
  id: WriteNumber(System.String,System.UInt64)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(string, ulong)
  nameWithType: Utf8JsonWriter.WriteNumber(string, ulong)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(string, ulong)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a <xref href="System.UInt64" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void WriteNumber(string propertyName, ulong value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.UInt64
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub WriteNumber(propertyName As String, value As ULong)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8JsonWriter.WriteNumber(String, ULong)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(String, ULong)
  name.vb: WriteNumber(String, ULong)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)
  id: WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<char>, ulong)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<char>, ulong)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<char>, ulong)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and a <xref href="System.UInt64" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void WriteNumber(ReadOnlySpan<char> propertyName, ulong value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.UInt64
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub WriteNumber(propertyName As ReadOnlySpan(Of Char), value As ULong)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Char), ULong)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Char), ULong)
  name.vb: WriteNumber(ReadOnlySpan(Of Char), ULong)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)
  id: WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<byte>, ulong)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<byte>, ulong)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<byte>, ulong)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only span of bytes and a <xref href="System.UInt64" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, ulong value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.UInt64
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub WriteNumber(utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Byte), ULong)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Byte), ULong)
  name.vb: WriteNumber(ReadOnlySpan(Of Byte), ULong)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)
  id: WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(JsonEncodedText, uint)
  nameWithType: Utf8JsonWriter.WriteNumber(JsonEncodedText, uint)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, uint)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded property name and <xref href="System.UInt32" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void WriteNumber(JsonEncodedText propertyName, uint value)
    parameters:
    - id: propertyName
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.UInt32
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub WriteNumber(propertyName As JsonEncodedText, value As UInteger)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8JsonWriter.WriteNumber(JsonEncodedText, UInteger)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText, UInteger)
  name.vb: WriteNumber(JsonEncodedText, UInteger)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)
  id: WriteNumber(System.String,System.UInt32)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(string, uint)
  nameWithType: Utf8JsonWriter.WriteNumber(string, uint)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(string, uint)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a string and a <xref href="System.UInt32" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void WriteNumber(string propertyName, uint value)
    parameters:
    - id: propertyName
      type: System.String
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.UInt32
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub WriteNumber(propertyName As String, value As UInteger)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">propertyName</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8JsonWriter.WriteNumber(String, UInteger)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(String, UInteger)
  name.vb: WriteNumber(String, UInteger)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)
  id: WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<char>, uint)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<char>, uint)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<char>, uint)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only character span and a <xref href="System.UInt32" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void WriteNumber(ReadOnlySpan<char> propertyName, uint value)
    parameters:
    - id: propertyName
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - id: value
      type: System.UInt32
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub WriteNumber(propertyName As ReadOnlySpan(Of Char), value As UInteger)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Char), UInteger)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Char), UInteger)
  name.vb: WriteNumber(ReadOnlySpan(Of Char), UInteger)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)
  id: WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumber(ReadOnlySpan<byte>, uint)
  nameWithType: Utf8JsonWriter.WriteNumber(ReadOnlySpan<byte>, uint)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan<byte>, uint)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a property name specified as a read-only span of bytes and a <xref href="System.UInt32" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as part of a name/value pair of a JSON object.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, uint value)
    parameters:
    - id: utf8PropertyName
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded property name of the JSON object to be written.
    - id: value
      type: System.UInt32
      description: The value to be written as a JSON number as part of the name/value pair.
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub WriteNumber(utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified property name is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8JsonWriter.WriteNumber(ReadOnlySpan(Of Byte), UInteger)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan(Of Byte), UInteger)
  name.vb: WriteNumber(ReadOnlySpan(Of Byte), UInteger)
- uid: System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})
  id: WriteBase64StringValue(System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteBase64StringValue(ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteBase64StringValue(ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteBase64StringValue(ReadOnlySpan<byte> bytes)
    parameters:
    - id: bytes
      type: System.ReadOnlySpan{System.Byte}
      description: The binary data to be written as a Base64 encoded JSON string element of a JSON array.
    content.vb: Public Sub WriteBase64StringValue(bytes As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteBase64StringValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and this method would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteBase64StringValue(ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan(Of Byte))
  name.vb: WriteBase64StringValue(ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)
  id: WriteCommentValue(System.String)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteCommentValue(string)
  nameWithType: Utf8JsonWriter.WriteCommentValue(string)
  fullName: System.Text.Json.Utf8JsonWriter.WriteCommentValue(string)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a string text value as a JSON comment.
  example: []
  syntax:
    content: public void WriteCommentValue(string value)
    parameters:
    - id: value
      type: System.String
      description: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within <code>/*..*/</code>.
    content.vb: Public Sub WriteCommentValue(value As String)
  overload: System.Text.Json.Utf8JsonWriter.WriteCommentValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The specified value is too large.


      -or-


      <code class="paramref">value</code> contains a comment delimiter (that is, <code>*/</code>).
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code class="paramref">value</code> parameter is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Utf8JsonWriter.WriteCommentValue(String)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteCommentValue(String)
  name.vb: WriteCommentValue(String)
- uid: System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})
  id: WriteCommentValue(System.ReadOnlySpan{System.Char})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteCommentValue(ReadOnlySpan<char>)
  nameWithType: Utf8JsonWriter.WriteCommentValue(ReadOnlySpan<char>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-16 text value as a JSON comment.
  example: []
  syntax:
    content: public void WriteCommentValue(ReadOnlySpan<char> value)
    parameters:
    - id: value
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within <code>/*..*/</code>.
    content.vb: Public Sub WriteCommentValue(value As ReadOnlySpan(Of Char))
  overload: System.Text.Json.Utf8JsonWriter.WriteCommentValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The specified value is too large.


      -or-


      <code class="paramref">value</code> contains a comment delimiter (that is, <code>*/</code>).
  nameWithType.vb: Utf8JsonWriter.WriteCommentValue(ReadOnlySpan(Of Char))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan(Of Char))
  name.vb: WriteCommentValue(ReadOnlySpan(Of Char))
- uid: System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})
  id: WriteCommentValue(System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteCommentValue(ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteCommentValue(ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-8 text value as a JSON comment.
  example: []
  syntax:
    content: public void WriteCommentValue(ReadOnlySpan<byte> utf8Value)
    parameters:
    - id: utf8Value
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded value to be written as a JSON comment within <code>/*..*/</code>.
    content.vb: Public Sub WriteCommentValue(utf8Value As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteCommentValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The specified value is too large.


      -or-


      <code class="paramref">utf8Value</code> contains a comment delimiter (that is, <code>*/</code>).
  nameWithType.vb: Utf8JsonWriter.WriteCommentValue(ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan(Of Byte))
  name.vb: WriteCommentValue(ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)
  id: WriteStringValue(System.DateTime)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStringValue(DateTime)
  nameWithType: Utf8JsonWriter.WriteStringValue(DateTime)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteStringValue(DateTime value)
    parameters:
    - id: value
      type: System.DateTime
      description: The value to be written as a JSON string as an element of a JSON array.
    content.vb: Public Sub WriteStringValue(value As Date)
  overload: System.Text.Json.Utf8JsonWriter.WriteStringValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteStringValue(Date)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteStringValue(Date)
  name.vb: WriteStringValue(Date)
- uid: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)
  id: WriteStringValue(System.DateTimeOffset)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStringValue(DateTimeOffset)
  nameWithType: Utf8JsonWriter.WriteStringValue(DateTimeOffset)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteStringValue(DateTimeOffset value)
    parameters:
    - id: value
      type: System.DateTimeOffset
      description: The value to be written as a JSON string as an element of a JSON array.
    content.vb: Public Sub WriteStringValue(value As DateTimeOffset)
  overload: System.Text.Json.Utf8JsonWriter.WriteStringValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)
  id: WriteNumberValue(System.Decimal)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumberValue(decimal)
  nameWithType: Utf8JsonWriter.WriteNumberValue(decimal)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumberValue(decimal)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteNumberValue(decimal value)
    parameters:
    - id: value
      type: System.Decimal
      description: The value to be written as a JSON number as an element of a JSON array.
    content.vb: Public Sub WriteNumberValue(value As Decimal)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumberValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumberValue(Decimal)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumberValue(Decimal)
  name.vb: WriteNumberValue(Decimal)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)
  id: WriteNumberValue(System.Double)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumberValue(double)
  nameWithType: Utf8JsonWriter.WriteNumberValue(double)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumberValue(double)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteNumberValue(double value)
    parameters:
    - id: value
      type: System.Double
      description: The value to be written as a JSON number as an element of a JSON array.
    content.vb: Public Sub WriteNumberValue(value As Double)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumberValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumberValue(Double)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumberValue(Double)
  name.vb: WriteNumberValue(Double)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)
  id: WriteNumberValue(System.Single)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumberValue(float)
  nameWithType: Utf8JsonWriter.WriteNumberValue(float)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumberValue(float)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a <xref href="System.Single" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteNumberValue(float value)
    parameters:
    - id: value
      type: System.Single
      description: The value to be written as a JSON number as an element of a JSON array.
    content.vb: Public Sub WriteNumberValue(value As Single)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumberValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumberValue(Single)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumberValue(Single)
  name.vb: WriteNumberValue(Single)
- uid: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)
  id: WriteStringValue(System.Guid)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStringValue(Guid)
  nameWithType: Utf8JsonWriter.WriteStringValue(Guid)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a <xref href="System.Guid" data-throw-if-not-resolved="false"></xref> value (as a JSON string) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteStringValue(Guid value)
    parameters:
    - id: value
      type: System.Guid
      description: The value to be written as a JSON string as an element of a JSON array.
    content.vb: Public Sub WriteStringValue(value As Guid)
  overload: System.Text.Json.Utf8JsonWriter.WriteStringValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteNullValue
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNullValue
  id: WriteNullValue
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNullValue()
  nameWithType: Utf8JsonWriter.WriteNullValue()
  fullName: System.Text.Json.Utf8JsonWriter.WriteNullValue()
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the JSON literal null as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteNullValue()
    content.vb: Public Sub WriteNullValue()
  overload: System.Text.Json.Utf8JsonWriter.WriteNullValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)
  id: WriteBooleanValue(System.Boolean)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteBooleanValue(bool)
  nameWithType: Utf8JsonWriter.WriteBooleanValue(bool)
  fullName: System.Text.Json.Utf8JsonWriter.WriteBooleanValue(bool)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref> value (as a JSON literal true or false) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteBooleanValue(bool value)
    parameters:
    - id: value
      type: System.Boolean
      description: The value to be written as a JSON literal true or false as an element of a JSON array.
    content.vb: Public Sub WriteBooleanValue(value As Boolean)
  overload: System.Text.Json.Utf8JsonWriter.WriteBooleanValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteBooleanValue(Boolean)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteBooleanValue(Boolean)
  name.vb: WriteBooleanValue(Boolean)
- uid: System.Text.Json.Utf8JsonWriter.WriteRawValue(System.String,System.Boolean)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteRawValue(System.String,System.Boolean)
  id: WriteRawValue(System.String,System.Boolean)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteRawValue(string, bool)
  nameWithType: Utf8JsonWriter.WriteRawValue(string, bool)
  fullName: System.Text.Json.Utf8JsonWriter.WriteRawValue(string, bool)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the input as JSON content. It is expected that the input content is a single complete JSON value.
  example: []
  syntax:
    content: public void WriteRawValue(string json, bool skipInputValidation = false)
    parameters:
    - id: json
      type: System.String
      description: The raw JSON content to write.
    - id: skipInputValidation
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> to validate if the input is an RFC 8259-compliant JSON payload; <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> otherwise.
    content.vb: Public Sub WriteRawValue(json As String, skipInputValidation As Boolean = False)
  overload: System.Text.Json.Utf8JsonWriter.WriteRawValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">json</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of the input is zero or greater than 715,827,882 (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref> / 3).
  - type: System.Text.Json.JsonException
    commentId: T:System.Text.Json.JsonException
    description: <code class="paramref">skipInputValidation</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, and the input is not a valid, complete, single JSON value according to the JSON RFC, or the input JSON exceeds a recursive depth of 64.
  nameWithType.vb: Utf8JsonWriter.WriteRawValue(String, Boolean)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteRawValue(String, Boolean)
  name.vb: WriteRawValue(String, Boolean)
- uid: System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Char},System.Boolean)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Char},System.Boolean)
  id: WriteRawValue(System.ReadOnlySpan{System.Char},System.Boolean)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteRawValue(ReadOnlySpan<char>, bool)
  nameWithType: Utf8JsonWriter.WriteRawValue(ReadOnlySpan<char>, bool)
  fullName: System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan<char>, bool)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the input as JSON content. It is expected that the input content is a single complete JSON value.
  example: []
  syntax:
    content: public void WriteRawValue(ReadOnlySpan<char> json, bool skipInputValidation = false)
    parameters:
    - id: json
      type: System.ReadOnlySpan{System.Char}
      description: The raw JSON content to write.
    - id: skipInputValidation
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> to validate if the input is an RFC 8259-compliant JSON payload; <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> otherwise.
    content.vb: Public Sub WriteRawValue(json As ReadOnlySpan(Of Char), skipInputValidation As Boolean = False)
  overload: System.Text.Json.Utf8JsonWriter.WriteRawValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of the input is zero or greater than 715,827,882 (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref> / 3).
  - type: System.Text.Json.JsonException
    commentId: T:System.Text.Json.JsonException
    description: <code class="paramref">skipInputValidation</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, and the input is not a valid, complete, single JSON value according to the JSON RFC, or the input JSON exceeds a recursive depth of 64.
  nameWithType.vb: Utf8JsonWriter.WriteRawValue(ReadOnlySpan(Of Char), Boolean)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan(Of Char), Boolean)
  name.vb: WriteRawValue(ReadOnlySpan(Of Char), Boolean)
- uid: System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Byte},System.Boolean)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Byte},System.Boolean)
  id: WriteRawValue(System.ReadOnlySpan{System.Byte},System.Boolean)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteRawValue(ReadOnlySpan<byte>, bool)
  nameWithType: Utf8JsonWriter.WriteRawValue(ReadOnlySpan<byte>, bool)
  fullName: System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan<byte>, bool)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the input as JSON content. It is expected that the input content is a single complete JSON value.
  example: []
  syntax:
    content: public void WriteRawValue(ReadOnlySpan<byte> utf8Json, bool skipInputValidation = false)
    parameters:
    - id: utf8Json
      type: System.ReadOnlySpan{System.Byte}
      description: The raw JSON content to write.
    - id: skipInputValidation
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> to validate if the input is an RFC 8259-compliant JSON payload; <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> otherwise.
    content.vb: Public Sub WriteRawValue(utf8Json As ReadOnlySpan(Of Byte), skipInputValidation As Boolean = False)
  overload: System.Text.Json.Utf8JsonWriter.WriteRawValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of the input is zero or equal to <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  - type: System.Text.Json.JsonException
    commentId: T:System.Text.Json.JsonException
    description: <code class="paramref">skipInputValidation</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, and the input is not a valid, complete, single JSON value according to the JSON RFC, or the input JSON exceeds a recursive depth of 64.
  nameWithType.vb: Utf8JsonWriter.WriteRawValue(ReadOnlySpan(Of Byte), Boolean)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan(Of Byte), Boolean)
  name.vb: WriteRawValue(ReadOnlySpan(Of Byte), Boolean)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)
  id: WriteNumberValue(System.Int32)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumberValue(int)
  nameWithType: Utf8JsonWriter.WriteNumberValue(int)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumberValue(int)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes an <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteNumberValue(int value)
    parameters:
    - id: value
      type: System.Int32
      description: The value to be written as a JSON number as an element of a JSON array.
    content.vb: Public Sub WriteNumberValue(value As Integer)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumberValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumberValue(Integer)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumberValue(Integer)
  name.vb: WriteNumberValue(Integer)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)
  id: WriteNumberValue(System.Int64)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumberValue(long)
  nameWithType: Utf8JsonWriter.WriteNumberValue(long)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumberValue(long)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteNumberValue(long value)
    parameters:
    - id: value
      type: System.Int64
      description: The value to be written as a JSON number as an element of a JSON array.
    content.vb: Public Sub WriteNumberValue(value As Long)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumberValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteNumberValue(Long)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumberValue(Long)
  name.vb: WriteNumberValue(Long)
- uid: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)
  id: WriteStringValue(System.Text.Json.JsonEncodedText)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStringValue(JsonEncodedText)
  nameWithType: Utf8JsonWriter.WriteStringValue(JsonEncodedText)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteStringValue(JsonEncodedText value)
    parameters:
    - id: value
      type: System.Text.Json.JsonEncodedText
      description: The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.
    content.vb: Public Sub WriteStringValue(value As JsonEncodedText)
  overload: System.Text.Json.Utf8JsonWriter.WriteStringValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
- uid: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)
  id: WriteStringValue(System.String)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStringValue(string?)
  nameWithType: Utf8JsonWriter.WriteStringValue(string?)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStringValue(string?)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a string text value (as a JSON string) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteStringValue(string? value)
    parameters:
    - id: value
      type: System.String
      description: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.
    content.vb: Public Sub WriteStringValue(value As String)
  overload: System.Text.Json.Utf8JsonWriter.WriteStringValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteStringValue(String)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteStringValue(String)
  name.vb: WriteStringValue(String)
- uid: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})
  id: WriteStringValue(System.ReadOnlySpan{System.Char})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStringValue(ReadOnlySpan<char>)
  nameWithType: Utf8JsonWriter.WriteStringValue(ReadOnlySpan<char>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteStringValue(ReadOnlySpan<char> value)
    parameters:
    - id: value
      type: System.ReadOnlySpan{System.Char}
      description: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.
    content.vb: Public Sub WriteStringValue(value As ReadOnlySpan(Of Char))
  overload: System.Text.Json.Utf8JsonWriter.WriteStringValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteStringValue(ReadOnlySpan(Of Char))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan(Of Char))
  name.vb: WriteStringValue(ReadOnlySpan(Of Char))
- uid: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})
  id: WriteStringValue(System.ReadOnlySpan{System.Byte})
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteStringValue(ReadOnlySpan<byte>)
  nameWithType: Utf8JsonWriter.WriteStringValue(ReadOnlySpan<byte>)
  fullName: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.
  example: []
  syntax:
    content: public void WriteStringValue(ReadOnlySpan<byte> utf8Value)
    parameters:
    - id: utf8Value
      type: System.ReadOnlySpan{System.Byte}
      description: The UTF-8 encoded value to be written as a JSON string element of a JSON array.
    content.vb: Public Sub WriteStringValue(utf8Value As ReadOnlySpan(Of Byte))
  overload: System.Text.Json.Utf8JsonWriter.WriteStringValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified value is too large.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the write operation would produce invalid JSON.
  nameWithType.vb: Utf8JsonWriter.WriteStringValue(ReadOnlySpan(Of Byte))
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan(Of Byte))
  name.vb: WriteStringValue(ReadOnlySpan(Of Byte))
- uid: System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)
  id: WriteNumberValue(System.UInt32)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumberValue(uint)
  nameWithType: Utf8JsonWriter.WriteNumberValue(uint)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumberValue(uint)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a <xref href="System.UInt32" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as an element of a JSON array.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void WriteNumberValue(uint value)
    parameters:
    - id: value
      type: System.UInt32
      description: The value to be written as a JSON number as an element of a JSON array.
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub WriteNumberValue(value As UInteger)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumberValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8JsonWriter.WriteNumberValue(UInteger)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumberValue(UInteger)
  name.vb: WriteNumberValue(UInteger)
- uid: System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)
  commentId: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)
  id: WriteNumberValue(System.UInt64)
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: WriteNumberValue(ulong)
  nameWithType: Utf8JsonWriter.WriteNumberValue(ulong)
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumberValue(ulong)
  type: Method
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Writes a <xref href="System.UInt64" data-throw-if-not-resolved="false"></xref> value (as a JSON number) as an element of a JSON array.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void WriteNumberValue(ulong value)
    parameters:
    - id: value
      type: System.UInt64
      description: The value to be written as a JSON number as an element of a JSON array.
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub WriteNumberValue(value As ULong)
  overload: System.Text.Json.Utf8JsonWriter.WriteNumberValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Validation is enabled, and the operation would result in writing invalid JSON.
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8JsonWriter.WriteNumberValue(ULong)
  fullName.vb: System.Text.Json.Utf8JsonWriter.WriteNumberValue(ULong)
  name.vb: WriteNumberValue(ULong)
- uid: System.Text.Json.Utf8JsonWriter.BytesPending
  commentId: P:System.Text.Json.Utf8JsonWriter.BytesPending
  id: BytesPending
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: BytesPending
  nameWithType: Utf8JsonWriter.BytesPending
  fullName: System.Text.Json.Utf8JsonWriter.BytesPending
  type: Property
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Gets the number of bytes written by the <xref href="System.Text.Json.Utf8JsonWriter" data-throw-if-not-resolved="false"></xref> so far that have not yet been flushed to the output and committed.
  example: []
  syntax:
    content: public int BytesPending { get; }
    parameters: []
    return:
      type: System.Int32
      description: The number of bytes written so far by the <xref href="System.Text.Json.Utf8JsonWriter" data-throw-if-not-resolved="false"></xref> that have not yet been flushed to the output and committed.
    content.vb: Public ReadOnly Property BytesPending As Integer
  overload: System.Text.Json.Utf8JsonWriter.BytesPending*
- uid: System.Text.Json.Utf8JsonWriter.BytesCommitted
  commentId: P:System.Text.Json.Utf8JsonWriter.BytesCommitted
  id: BytesCommitted
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: BytesCommitted
  nameWithType: Utf8JsonWriter.BytesCommitted
  fullName: System.Text.Json.Utf8JsonWriter.BytesCommitted
  type: Property
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Gets the total number of bytes committed to the output by the current instance so far.
  example: []
  syntax:
    content: public long BytesCommitted { get; }
    parameters: []
    return:
      type: System.Int64
      description: The total number of bytes committed to the output by the <xref href="System.Text.Json.Utf8JsonWriter" data-throw-if-not-resolved="false"></xref> so far.
    content.vb: Public ReadOnly Property BytesCommitted As Long
  overload: System.Text.Json.Utf8JsonWriter.BytesCommitted*
- uid: System.Text.Json.Utf8JsonWriter.Options
  commentId: P:System.Text.Json.Utf8JsonWriter.Options
  id: Options
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: Utf8JsonWriter.Options
  fullName: System.Text.Json.Utf8JsonWriter.Options
  type: Property
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.
  example: []
  syntax:
    content: public JsonWriterOptions Options { get; }
    parameters: []
    return:
      type: System.Text.Json.JsonWriterOptions
      description: The custom behavior of this instance of the writer for formatting, validating, and escaping.
    content.vb: Public ReadOnly Property Options As JsonWriterOptions
  overload: System.Text.Json.Utf8JsonWriter.Options*
- uid: System.Text.Json.Utf8JsonWriter.CurrentDepth
  commentId: P:System.Text.Json.Utf8JsonWriter.CurrentDepth
  id: CurrentDepth
  parent: System.Text.Json.Utf8JsonWriter
  langs:
  - csharp
  - vb
  name: CurrentDepth
  nameWithType: Utf8JsonWriter.CurrentDepth
  fullName: System.Text.Json.Utf8JsonWriter.CurrentDepth
  type: Property
  assemblies:
  - System.Text.Json
  namespace: System.Text.Json
  summary: Gets the depth of the current token.
  example: []
  syntax:
    content: public int CurrentDepth { get; }
    parameters: []
    return:
      type: System.Int32
      description: The depth of the current token.
    content.vb: Public ReadOnly Property CurrentDepth As Integer
  overload: System.Text.Json.Utf8JsonWriter.CurrentDepth*
references:
- uid: System.Text.Json
  commentId: N:System.Text.Json
  isExternal: true
  href: System.html
  name: System.Text.Json
  nameWithType: System.Text.Json
  fullName: System.Text.Json
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: System.html
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: System.Text.html
  - name: .
  - uid: System.Text.Json
    name: Json
    isExternal: true
    href: System.Text.Json.html
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: System.html
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: System.Text.html
  - name: .
  - uid: System.Text.Json
    name: Json
    isExternal: true
    href: System.Text.Json.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  href: System.IAsyncDisposable.html
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Text.Json.Utf8JsonWriter
  commentId: T:System.Text.Json.Utf8JsonWriter
  parent: System.Text.Json
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html
  name: Utf8JsonWriter
  nameWithType: Utf8JsonWriter
  fullName: System.Text.Json.Utf8JsonWriter
- uid: System.Buffers.IBufferWriter`1
  commentId: T:System.Buffers.IBufferWriter`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.buffers.ibufferwriter-1
  name: IBufferWriter<T>
  nameWithType: IBufferWriter<T>
  fullName: System.Buffers.IBufferWriter<T>
  nameWithType.vb: IBufferWriter(Of T)
  fullName.vb: System.Buffers.IBufferWriter(Of T)
  name.vb: IBufferWriter(Of T)
  spec.csharp:
  - uid: System.Buffers.IBufferWriter`1
    name: IBufferWriter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.buffers.ibufferwriter-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Buffers.IBufferWriter`1
    name: IBufferWriter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.buffers.ibufferwriter-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Text.Json.Utf8JsonWriter.#ctor*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.#ctor
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter__ctor_System_Buffers_IBufferWriter_System_Byte__System_Text_Json_JsonWriterOptions_
  name: Utf8JsonWriter
  nameWithType: Utf8JsonWriter.Utf8JsonWriter
  fullName: System.Text.Json.Utf8JsonWriter.Utf8JsonWriter
  nameWithType.vb: Utf8JsonWriter.New
  fullName.vb: System.Text.Json.Utf8JsonWriter.New
  name.vb: New
- uid: System.Buffers.IBufferWriter{System.Byte}
  commentId: T:System.Buffers.IBufferWriter{System.Byte}
  parent: System.Buffers
  definition: System.Buffers.IBufferWriter`1
  href: https://learn.microsoft.com/dotnet/api/system.buffers.ibufferwriter-1
  name: IBufferWriter<byte>
  nameWithType: IBufferWriter<byte>
  fullName: System.Buffers.IBufferWriter<byte>
  nameWithType.vb: IBufferWriter(Of Byte)
  fullName.vb: System.Buffers.IBufferWriter(Of Byte)
  name.vb: IBufferWriter(Of Byte)
  spec.csharp:
  - uid: System.Buffers.IBufferWriter`1
    name: IBufferWriter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.buffers.ibufferwriter-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Buffers.IBufferWriter`1
    name: IBufferWriter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.buffers.ibufferwriter-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Text.Json.JsonWriterOptions
  commentId: T:System.Text.Json.JsonWriterOptions
  parent: System.Text.Json
  isExternal: true
  href: System.Text.Json.JsonWriterOptions.html
  name: JsonWriterOptions
  nameWithType: JsonWriterOptions
  fullName: System.Text.Json.JsonWriterOptions
- uid: System.Buffers
  commentId: N:System.Buffers
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Buffers
  nameWithType: System.Buffers
  fullName: System.Buffers
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Buffers
    name: Buffers
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.buffers
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Buffers
    name: Buffers
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.buffers
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.objectdisposedexception
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.Text.Json.Utf8JsonWriter.Reset*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.Reset
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_Reset
  name: Reset
  nameWithType: Utf8JsonWriter.Reset
  fullName: System.Text.Json.Utf8JsonWriter.Reset
- uid: System.Text.Json.Utf8JsonWriter.Flush*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.Flush
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_Flush
  name: Flush
  nameWithType: Utf8JsonWriter.Flush
  fullName: System.Text.Json.Utf8JsonWriter.Flush
- uid: System.Text.Json.Utf8JsonWriter.Dispose*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.Dispose
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_Dispose
  name: Dispose
  nameWithType: Utf8JsonWriter.Dispose
  fullName: System.Text.Json.Utf8JsonWriter.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: System.Text.Json.Utf8JsonWriter.DisposeAsync*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.DisposeAsync
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_DisposeAsync
  name: DisposeAsync
  nameWithType: Utf8JsonWriter.DisposeAsync
  fullName: System.Text.Json.Utf8JsonWriter.DisposeAsync
- uid: System.IAsyncDisposable.DisposeAsync
  commentId: M:System.IAsyncDisposable.DisposeAsync
  parent: System.IAsyncDisposable
  isExternal: true
  href: System.IAsyncDisposable.html#System_IAsyncDisposable_DisposeAsync
  name: DisposeAsync()
  nameWithType: IAsyncDisposable.DisposeAsync()
  fullName: System.IAsyncDisposable.DisposeAsync()
  spec.csharp:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: System.IAsyncDisposable.html#System_IAsyncDisposable_DisposeAsync
  - name: (
  - name: )
  spec.vb:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: System.IAsyncDisposable.html#System_IAsyncDisposable_DisposeAsync
  - name: (
  - name: )
- uid: System.Threading.Tasks.ValueTask
  commentId: T:System.Threading.Tasks.ValueTask
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask
  name: ValueTask
  nameWithType: ValueTask
  fullName: System.Threading.Tasks.ValueTask
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Threading.CancellationToken.None
  commentId: P:System.Threading.CancellationToken.None
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken.none
  name: None
  nameWithType: CancellationToken.None
  fullName: System.Threading.CancellationToken.None
- uid: System.Text.Json.Utf8JsonWriter.FlushAsync*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.FlushAsync
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_FlushAsync_System_Threading_CancellationToken_
  name: FlushAsync
  nameWithType: Utf8JsonWriter.FlushAsync
  fullName: System.Text.Json.Utf8JsonWriter.FlushAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Text.Json.Utf8JsonWriter.WriteStartArray*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteStartArray
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteStartArray
  name: WriteStartArray
  nameWithType: Utf8JsonWriter.WriteStartArray
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartArray
- uid: System.Text.Json.Utf8JsonWriter.WriteStartObject*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteStartObject
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteStartObject
  name: WriteStartObject
  nameWithType: Utf8JsonWriter.WriteStartObject
  fullName: System.Text.Json.Utf8JsonWriter.WriteStartObject
- uid: System.Text.Json.JsonEncodedText
  commentId: T:System.Text.Json.JsonEncodedText
  parent: System.Text.Json
  isExternal: true
  href: System.Text.Json.JsonEncodedText.html
  name: JsonEncodedText
  nameWithType: JsonEncodedText
  fullName: System.Text.Json.JsonEncodedText
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ReadOnlySpan{System.Byte}
  commentId: T:System.ReadOnlySpan{System.Byte}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<byte>
  nameWithType: ReadOnlySpan<byte>
  fullName: System.ReadOnlySpan<byte>
  nameWithType.vb: ReadOnlySpan(Of Byte)
  fullName.vb: System.ReadOnlySpan(Of Byte)
  name.vb: ReadOnlySpan(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ReadOnlySpan{System.Char}
  commentId: T:System.ReadOnlySpan{System.Char}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<char>
  nameWithType: ReadOnlySpan<char>
  fullName: System.ReadOnlySpan<char>
  nameWithType.vb: ReadOnlySpan(Of Char)
  fullName.vb: System.ReadOnlySpan(Of Char)
  name.vb: ReadOnlySpan(Of Char)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.Text.Json.Utf8JsonWriter.WriteEndArray*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteEndArray
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteEndArray
  name: WriteEndArray
  nameWithType: Utf8JsonWriter.WriteEndArray
  fullName: System.Text.Json.Utf8JsonWriter.WriteEndArray
- uid: System.Text.Json.Utf8JsonWriter.WriteEndObject*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteEndObject
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteEndObject
  name: WriteEndObject
  nameWithType: Utf8JsonWriter.WriteEndObject
  fullName: System.Text.Json.Utf8JsonWriter.WriteEndObject
- uid: System.Text.Json.Utf8JsonWriter.WriteBase64String*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteBase64String
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteBase64String_System_Text_Json_JsonEncodedText_System_ReadOnlySpan_System_Byte__
  name: WriteBase64String
  nameWithType: Utf8JsonWriter.WriteBase64String
  fullName: System.Text.Json.Utf8JsonWriter.WriteBase64String
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: System.Text.Json.Utf8JsonWriter.WriteString*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteString
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteString_System_Text_Json_JsonEncodedText_System_DateTime_
  name: WriteString
  nameWithType: Utf8JsonWriter.WriteString
  fullName: System.Text.Json.Utf8JsonWriter.WriteString
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetimeoffset
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.decimal
  name: decimal
  nameWithType: decimal
  fullName: decimal
  nameWithType.vb: Decimal
  fullName.vb: Decimal
  name.vb: Decimal
- uid: System.Text.Json.Utf8JsonWriter.WriteNumber*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteNumber
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteNumber_System_Text_Json_JsonEncodedText_System_Decimal_
  name: WriteNumber
  nameWithType: Utf8JsonWriter.WriteNumber
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumber
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Text.Json.Utf8JsonWriter.WriteNull*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteNull
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteNull_System_Text_Json_JsonEncodedText_
  name: WriteNull
  nameWithType: Utf8JsonWriter.WriteNull
  fullName: System.Text.Json.Utf8JsonWriter.WriteNull
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Text.Json.Utf8JsonWriter.WriteBoolean*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteBoolean
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteBoolean_System_Text_Json_JsonEncodedText_System_Boolean_
  name: WriteBoolean
  nameWithType: Utf8JsonWriter.WriteBoolean
  fullName: System.Text.Json.Utf8JsonWriter.WriteBoolean
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Text.Json.Utf8JsonWriter.WritePropertyName*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WritePropertyName
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WritePropertyName_System_Text_Json_JsonEncodedText_
  name: WritePropertyName
  nameWithType: Utf8JsonWriter.WritePropertyName
  fullName: System.Text.Json.Utf8JsonWriter.WritePropertyName
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.Text.Json.Utf8JsonWriter.WriteBase64StringValue*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteBase64StringValue_System_ReadOnlySpan_System_Byte__
  name: WriteBase64StringValue
  nameWithType: Utf8JsonWriter.WriteBase64StringValue
  fullName: System.Text.Json.Utf8JsonWriter.WriteBase64StringValue
- uid: System.Text.Json.Utf8JsonWriter.WriteCommentValue*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteCommentValue
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteCommentValue_System_String_
  name: WriteCommentValue
  nameWithType: Utf8JsonWriter.WriteCommentValue
  fullName: System.Text.Json.Utf8JsonWriter.WriteCommentValue
- uid: System.Text.Json.Utf8JsonWriter.WriteStringValue*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteStringValue
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteStringValue_System_DateTime_
  name: WriteStringValue
  nameWithType: Utf8JsonWriter.WriteStringValue
  fullName: System.Text.Json.Utf8JsonWriter.WriteStringValue
- uid: System.Text.Json.Utf8JsonWriter.WriteNumberValue*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteNumberValue
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteNumberValue_System_Decimal_
  name: WriteNumberValue
  nameWithType: Utf8JsonWriter.WriteNumberValue
  fullName: System.Text.Json.Utf8JsonWriter.WriteNumberValue
- uid: System.Text.Json.Utf8JsonWriter.WriteNullValue*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteNullValue
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteNullValue
  name: WriteNullValue
  nameWithType: Utf8JsonWriter.WriteNullValue
  fullName: System.Text.Json.Utf8JsonWriter.WriteNullValue
- uid: System.Text.Json.Utf8JsonWriter.WriteBooleanValue*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteBooleanValue
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteBooleanValue_System_Boolean_
  name: WriteBooleanValue
  nameWithType: Utf8JsonWriter.WriteBooleanValue
  fullName: System.Text.Json.Utf8JsonWriter.WriteBooleanValue
- uid: System.Int32.MaxValue
  commentId: F:System.Int32.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32.maxvalue
  name: MaxValue
  nameWithType: int.MaxValue
  fullName: int.MaxValue
  nameWithType.vb: Integer.MaxValue
  fullName.vb: Integer.MaxValue
- uid: System.Text.Json.JsonException
  commentId: T:System.Text.Json.JsonException
  isExternal: true
  href: System.Text.Json.JsonException.html
  name: JsonException
  nameWithType: JsonException
  fullName: System.Text.Json.JsonException
- uid: System.Text.Json.Utf8JsonWriter.WriteRawValue*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.WriteRawValue
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_WriteRawValue_System_String_System_Boolean_
  name: WriteRawValue
  nameWithType: Utf8JsonWriter.WriteRawValue
  fullName: System.Text.Json.Utf8JsonWriter.WriteRawValue
- uid: System.Text.Json.Utf8JsonWriter.BytesPending*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.BytesPending
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_BytesPending
  name: BytesPending
  nameWithType: Utf8JsonWriter.BytesPending
  fullName: System.Text.Json.Utf8JsonWriter.BytesPending
- uid: System.Text.Json.Utf8JsonWriter.BytesCommitted*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.BytesCommitted
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_BytesCommitted
  name: BytesCommitted
  nameWithType: Utf8JsonWriter.BytesCommitted
  fullName: System.Text.Json.Utf8JsonWriter.BytesCommitted
- uid: System.Text.Json.Utf8JsonWriter.Options*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.Options
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_Options
  name: Options
  nameWithType: Utf8JsonWriter.Options
  fullName: System.Text.Json.Utf8JsonWriter.Options
- uid: System.Text.Json.Utf8JsonWriter.CurrentDepth*
  commentId: Overload:System.Text.Json.Utf8JsonWriter.CurrentDepth
  isExternal: true
  href: System.Text.Json.Utf8JsonWriter.html#System_Text_Json_Utf8JsonWriter_CurrentDepth
  name: CurrentDepth
  nameWithType: Utf8JsonWriter.CurrentDepth
  fullName: System.Text.Json.Utf8JsonWriter.CurrentDepth
