### YamlMime:ManagedReference
items:
- uid: System.MemoryExtensions
  commentId: T:System.MemoryExtensions
  id: MemoryExtensions
  parent: System
  children:
  - System.MemoryExtensions.AsMemory(System.String)
  - System.MemoryExtensions.AsMemory(System.String,System.Int32)
  - System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)
  - System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})
  - System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)
  - System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)
  - System.MemoryExtensions.AsMemory``1(``0[])
  - System.MemoryExtensions.AsMemory``1(``0[],System.Int32)
  - System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)
  - System.MemoryExtensions.AsSpan(System.String)
  - System.MemoryExtensions.AsSpan(System.String,System.Int32)
  - System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)
  - System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})
  - System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)
  - System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)
  - System.MemoryExtensions.AsSpan``1(``0[])
  - System.MemoryExtensions.AsSpan``1(``0[],System.Int32)
  - System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)
  - System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})
  - System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})
  - System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)
  - System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)
  - System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)
  - System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)
  - System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})
  - System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})
  - System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)
  - System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)
  - System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)
  - System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)
  - System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)
  - System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)
  - System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})
  - System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)
  - System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)
  - System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)
  - System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)
  - System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)
  - System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)
  - System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)
  - System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)
  - System.MemoryExtensions.Reverse``1(System.Span{``0})
  - System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)
  - System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)
  - System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})
  - System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)
  - System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})
  - System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)
  - System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})
  - System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)
  - System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  langs:
  - csharp
  - vb
  name: MemoryExtensions
  nameWithType: MemoryExtensions
  fullName: System.MemoryExtensions
  type: Class
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static class MemoryExtensions
    content.vb: Public Module MemoryExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})
  commentId: M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})
  id: Trim(System.ReadOnlySpan{System.Char})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: Trim(ReadOnlySpan<char>)
  nameWithType: MemoryExtensions.Trim(ReadOnlySpan<char>)
  fullName: System.MemoryExtensions.Trim(System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function Trim(span As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.Trim*
  nameWithType.vb: MemoryExtensions.Trim(ReadOnlySpan(Of Char))
  fullName.vb: System.MemoryExtensions.Trim(System.ReadOnlySpan(Of Char))
  name.vb: Trim(ReadOnlySpan(Of Char))
- uid: System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})
  commentId: M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})
  id: TrimStart(System.ReadOnlySpan{System.Char})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: TrimStart(ReadOnlySpan<char>)
  nameWithType: MemoryExtensions.TrimStart(ReadOnlySpan<char>)
  fullName: System.MemoryExtensions.TrimStart(System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function TrimStart(span As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.TrimStart*
  nameWithType.vb: MemoryExtensions.TrimStart(ReadOnlySpan(Of Char))
  fullName.vb: System.MemoryExtensions.TrimStart(System.ReadOnlySpan(Of Char))
  name.vb: TrimStart(ReadOnlySpan(Of Char))
- uid: System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})
  commentId: M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})
  id: TrimEnd(System.ReadOnlySpan{System.Char})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: TrimEnd(ReadOnlySpan<char>)
  nameWithType: MemoryExtensions.TrimEnd(ReadOnlySpan<char>)
  fullName: System.MemoryExtensions.TrimEnd(System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function TrimEnd(span As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.TrimEnd*
  nameWithType.vb: MemoryExtensions.TrimEnd(ReadOnlySpan(Of Char))
  fullName.vb: System.MemoryExtensions.TrimEnd(System.ReadOnlySpan(Of Char))
  name.vb: TrimEnd(ReadOnlySpan(Of Char))
- uid: System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)
  commentId: M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)
  id: Trim(System.ReadOnlySpan{System.Char},System.Char)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: Trim(ReadOnlySpan<char>, char)
  nameWithType: MemoryExtensions.Trim(ReadOnlySpan<char>, char)
  fullName: System.MemoryExtensions.Trim(System.ReadOnlySpan<char>, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span, char trimChar)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: trimChar
      type: System.Char
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function Trim(span As ReadOnlySpan(Of Char), trimChar As Char) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.Trim*
  nameWithType.vb: MemoryExtensions.Trim(ReadOnlySpan(Of Char), Char)
  fullName.vb: System.MemoryExtensions.Trim(System.ReadOnlySpan(Of Char), Char)
  name.vb: Trim(ReadOnlySpan(Of Char), Char)
- uid: System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)
  commentId: M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)
  id: TrimStart(System.ReadOnlySpan{System.Char},System.Char)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: TrimStart(ReadOnlySpan<char>, char)
  nameWithType: MemoryExtensions.TrimStart(ReadOnlySpan<char>, char)
  fullName: System.MemoryExtensions.TrimStart(System.ReadOnlySpan<char>, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span, char trimChar)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: trimChar
      type: System.Char
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function TrimStart(span As ReadOnlySpan(Of Char), trimChar As Char) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.TrimStart*
  nameWithType.vb: MemoryExtensions.TrimStart(ReadOnlySpan(Of Char), Char)
  fullName.vb: System.MemoryExtensions.TrimStart(System.ReadOnlySpan(Of Char), Char)
  name.vb: TrimStart(ReadOnlySpan(Of Char), Char)
- uid: System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)
  commentId: M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)
  id: TrimEnd(System.ReadOnlySpan{System.Char},System.Char)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: TrimEnd(ReadOnlySpan<char>, char)
  nameWithType: MemoryExtensions.TrimEnd(ReadOnlySpan<char>, char)
  fullName: System.MemoryExtensions.TrimEnd(System.ReadOnlySpan<char>, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span, char trimChar)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: trimChar
      type: System.Char
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function TrimEnd(span As ReadOnlySpan(Of Char), trimChar As Char) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.TrimEnd*
  nameWithType.vb: MemoryExtensions.TrimEnd(ReadOnlySpan(Of Char), Char)
  fullName.vb: System.MemoryExtensions.TrimEnd(System.ReadOnlySpan(Of Char), Char)
  name.vb: TrimEnd(ReadOnlySpan(Of Char), Char)
- uid: System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: Trim(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: MemoryExtensions.Trim(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: System.MemoryExtensions.Trim(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: trimChars
      type: System.ReadOnlySpan{System.Char}
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function Trim(span As ReadOnlySpan(Of Char), trimChars As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.Trim*
  nameWithType.vb: MemoryExtensions.Trim(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: System.MemoryExtensions.Trim(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: Trim(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: TrimStart(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: MemoryExtensions.TrimStart(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: System.MemoryExtensions.TrimStart(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: trimChars
      type: System.ReadOnlySpan{System.Char}
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function TrimStart(span As ReadOnlySpan(Of Char), trimChars As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.TrimStart*
  nameWithType.vb: MemoryExtensions.TrimStart(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: System.MemoryExtensions.TrimStart(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: TrimStart(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: TrimEnd(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: MemoryExtensions.TrimEnd(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: System.MemoryExtensions.TrimEnd(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: trimChars
      type: System.ReadOnlySpan{System.Char}
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function TrimEnd(span As ReadOnlySpan(Of Char), trimChars As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.TrimEnd*
  nameWithType.vb: MemoryExtensions.TrimEnd(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: System.MemoryExtensions.TrimEnd(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: TrimEnd(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})
  commentId: M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})
  id: IsWhiteSpace(System.ReadOnlySpan{System.Char})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IsWhiteSpace(ReadOnlySpan<char>)
  nameWithType: MemoryExtensions.IsWhiteSpace(ReadOnlySpan<char>)
  fullName: System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan<char>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool IsWhiteSpace(this ReadOnlySpan<char> span)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsWhiteSpace(span As ReadOnlySpan(Of Char)) As Boolean
  overload: System.MemoryExtensions.IsWhiteSpace*
  nameWithType.vb: MemoryExtensions.IsWhiteSpace(ReadOnlySpan(Of Char))
  fullName.vb: System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan(Of Char))
  name.vb: IsWhiteSpace(ReadOnlySpan(Of Char))
- uid: System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)
  commentId: M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)
  id: IndexOf``1(System.Span{``0},``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOf<T>(Span<T>, T)
  nameWithType: MemoryExtensions.IndexOf<T>(Span<T>, T)
  fullName: System.MemoryExtensions.IndexOf<T>(System.Span<T>, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOf<T>(this Span<T> span, T value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOf(Of T As IEquatable(Of T))(span As Span(Of T), value As T) As Integer
  overload: System.MemoryExtensions.IndexOf*
  nameWithType.vb: MemoryExtensions.IndexOf(Of T)(Span(Of T), T)
  fullName.vb: System.MemoryExtensions.IndexOf(Of T)(System.Span(Of T), T)
  name.vb: IndexOf(Of T)(Span(Of T), T)
- uid: System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOf<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.IndexOf<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.IndexOf<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOf<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOf(Of T As IEquatable(Of T))(span As Span(Of T), value As ReadOnlySpan(Of T)) As Integer
  overload: System.MemoryExtensions.IndexOf*
  nameWithType.vb: MemoryExtensions.IndexOf(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.IndexOf(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: IndexOf(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)
  commentId: M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)
  id: LastIndexOf``1(System.Span{``0},``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(Span<T>, T)
  nameWithType: MemoryExtensions.LastIndexOf<T>(Span<T>, T)
  fullName: System.MemoryExtensions.LastIndexOf<T>(System.Span<T>, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int LastIndexOf<T>(this Span<T> span, T value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOf(Of T As IEquatable(Of T))(span As Span(Of T), value As T) As Integer
  overload: System.MemoryExtensions.LastIndexOf*
  nameWithType.vb: MemoryExtensions.LastIndexOf(Of T)(Span(Of T), T)
  fullName.vb: System.MemoryExtensions.LastIndexOf(Of T)(System.Span(Of T), T)
  name.vb: LastIndexOf(Of T)(Span(Of T), T)
- uid: System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.LastIndexOf<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.LastIndexOf<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int LastIndexOf<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOf(Of T As IEquatable(Of T))(span As Span(Of T), value As ReadOnlySpan(Of T)) As Integer
  overload: System.MemoryExtensions.LastIndexOf*
  nameWithType.vb: MemoryExtensions.LastIndexOf(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.LastIndexOf(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: LastIndexOf(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.SequenceEqual<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static bool SequenceEqual<T>(this Span<T> span, ReadOnlySpan<T> other) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: other
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function SequenceEqual(Of T As IEquatable(Of T))(span As Span(Of T), other As ReadOnlySpan(Of T)) As Boolean
  overload: System.MemoryExtensions.SequenceEqual*
  nameWithType.vb: MemoryExtensions.SequenceEqual(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.SequenceEqual(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: SequenceEqual(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: SequenceCompareTo<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.SequenceCompareTo<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.SequenceCompareTo<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int SequenceCompareTo<T>(this Span<T> span, ReadOnlySpan<T> other) where T : IComparable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: other
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function SequenceCompareTo(Of T As IComparable(Of T))(span As Span(Of T), other As ReadOnlySpan(Of T)) As Integer
  overload: System.MemoryExtensions.SequenceCompareTo*
  nameWithType.vb: MemoryExtensions.SequenceCompareTo(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.SequenceCompareTo(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: SequenceCompareTo(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)
  commentId: M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)
  id: IndexOf``1(System.ReadOnlySpan{``0},``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOf<T>(ReadOnlySpan<T>, T)
  nameWithType: MemoryExtensions.IndexOf<T>(ReadOnlySpan<T>, T)
  fullName: System.MemoryExtensions.IndexOf<T>(System.ReadOnlySpan<T>, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOf<T>(this ReadOnlySpan<T> span, T value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOf(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), value As T) As Integer
  overload: System.MemoryExtensions.IndexOf*
  nameWithType.vb: MemoryExtensions.IndexOf(Of T)(ReadOnlySpan(Of T), T)
  fullName.vb: System.MemoryExtensions.IndexOf(Of T)(System.ReadOnlySpan(Of T), T)
  name.vb: IndexOf(Of T)(ReadOnlySpan(Of T), T)
- uid: System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.IndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.IndexOf<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOf<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOf(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Integer
  overload: System.MemoryExtensions.IndexOf*
  nameWithType.vb: MemoryExtensions.IndexOf(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.IndexOf(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: IndexOf(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)
  commentId: M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)
  id: LastIndexOf``1(System.ReadOnlySpan{``0},``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(ReadOnlySpan<T>, T)
  nameWithType: MemoryExtensions.LastIndexOf<T>(ReadOnlySpan<T>, T)
  fullName: System.MemoryExtensions.LastIndexOf<T>(System.ReadOnlySpan<T>, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int LastIndexOf<T>(this ReadOnlySpan<T> span, T value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOf(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), value As T) As Integer
  overload: System.MemoryExtensions.LastIndexOf*
  nameWithType.vb: MemoryExtensions.LastIndexOf(Of T)(ReadOnlySpan(Of T), T)
  fullName.vb: System.MemoryExtensions.LastIndexOf(Of T)(System.ReadOnlySpan(Of T), T)
  name.vb: LastIndexOf(Of T)(ReadOnlySpan(Of T), T)
- uid: System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.LastIndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.LastIndexOf<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int LastIndexOf<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOf(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Integer
  overload: System.MemoryExtensions.LastIndexOf*
  nameWithType.vb: MemoryExtensions.LastIndexOf(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.LastIndexOf(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: LastIndexOf(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)
  commentId: M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)
  id: IndexOfAny``1(System.Span{``0},``0,``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOfAny<T>(Span<T>, T, T)
  nameWithType: MemoryExtensions.IndexOfAny<T>(Span<T>, T, T)
  fullName: System.MemoryExtensions.IndexOfAny<T>(System.Span<T>, T, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOfAny<T>(this Span<T> span, T value0, T value1) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value0
      type: '{T}'
    - id: value1
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOfAny(Of T As IEquatable(Of T))(span As Span(Of T), value0 As T, value1 As T) As Integer
  overload: System.MemoryExtensions.IndexOfAny*
  nameWithType.vb: MemoryExtensions.IndexOfAny(Of T)(Span(Of T), T, T)
  fullName.vb: System.MemoryExtensions.IndexOfAny(Of T)(System.Span(Of T), T, T)
  name.vb: IndexOfAny(Of T)(Span(Of T), T, T)
- uid: System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)
  commentId: M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)
  id: IndexOfAny``1(System.Span{``0},``0,``0,``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOfAny<T>(Span<T>, T, T, T)
  nameWithType: MemoryExtensions.IndexOfAny<T>(Span<T>, T, T, T)
  fullName: System.MemoryExtensions.IndexOfAny<T>(System.Span<T>, T, T, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOfAny<T>(this Span<T> span, T value0, T value1, T value2) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value0
      type: '{T}'
    - id: value1
      type: '{T}'
    - id: value2
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOfAny(Of T As IEquatable(Of T))(span As Span(Of T), value0 As T, value1 As T, value2 As T) As Integer
  overload: System.MemoryExtensions.IndexOfAny*
  nameWithType.vb: MemoryExtensions.IndexOfAny(Of T)(Span(Of T), T, T, T)
  fullName.vb: System.MemoryExtensions.IndexOfAny(Of T)(System.Span(Of T), T, T, T)
  name.vb: IndexOfAny(Of T)(Span(Of T), T, T, T)
- uid: System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOfAny<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.IndexOfAny<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.IndexOfAny<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: values
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOfAny(Of T As IEquatable(Of T))(span As Span(Of T), values As ReadOnlySpan(Of T)) As Integer
  overload: System.MemoryExtensions.IndexOfAny*
  nameWithType.vb: MemoryExtensions.IndexOfAny(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.IndexOfAny(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: IndexOfAny(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)
  commentId: M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)
  id: IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOfAny<T>(ReadOnlySpan<T>, T, T)
  nameWithType: MemoryExtensions.IndexOfAny<T>(ReadOnlySpan<T>, T, T)
  fullName: System.MemoryExtensions.IndexOfAny<T>(System.ReadOnlySpan<T>, T, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value0
      type: '{T}'
    - id: value1
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOfAny(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), value0 As T, value1 As T) As Integer
  overload: System.MemoryExtensions.IndexOfAny*
  nameWithType.vb: MemoryExtensions.IndexOfAny(Of T)(ReadOnlySpan(Of T), T, T)
  fullName.vb: System.MemoryExtensions.IndexOfAny(Of T)(System.ReadOnlySpan(Of T), T, T)
  name.vb: IndexOfAny(Of T)(ReadOnlySpan(Of T), T, T)
- uid: System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)
  commentId: M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)
  id: IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOfAny<T>(ReadOnlySpan<T>, T, T, T)
  nameWithType: MemoryExtensions.IndexOfAny<T>(ReadOnlySpan<T>, T, T, T)
  fullName: System.MemoryExtensions.IndexOfAny<T>(System.ReadOnlySpan<T>, T, T, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value0
      type: '{T}'
    - id: value1
      type: '{T}'
    - id: value2
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOfAny(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), value0 As T, value1 As T, value2 As T) As Integer
  overload: System.MemoryExtensions.IndexOfAny*
  nameWithType.vb: MemoryExtensions.IndexOfAny(Of T)(ReadOnlySpan(Of T), T, T, T)
  fullName.vb: System.MemoryExtensions.IndexOfAny(Of T)(System.ReadOnlySpan(Of T), T, T, T)
  name.vb: IndexOfAny(Of T)(ReadOnlySpan(Of T), T, T, T)
- uid: System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOfAny<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.IndexOfAny<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.IndexOfAny<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOfAny<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> values) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: values
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOfAny(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), values As ReadOnlySpan(Of T)) As Integer
  overload: System.MemoryExtensions.IndexOfAny*
  nameWithType.vb: MemoryExtensions.IndexOfAny(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.IndexOfAny(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: IndexOfAny(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)
  commentId: M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)
  id: LastIndexOfAny``1(System.Span{``0},``0,``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOfAny<T>(Span<T>, T, T)
  nameWithType: MemoryExtensions.LastIndexOfAny<T>(Span<T>, T, T)
  fullName: System.MemoryExtensions.LastIndexOfAny<T>(System.Span<T>, T, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value0
      type: '{T}'
    - id: value1
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOfAny(Of T As IEquatable(Of T))(span As Span(Of T), value0 As T, value1 As T) As Integer
  overload: System.MemoryExtensions.LastIndexOfAny*
  nameWithType.vb: MemoryExtensions.LastIndexOfAny(Of T)(Span(Of T), T, T)
  fullName.vb: System.MemoryExtensions.LastIndexOfAny(Of T)(System.Span(Of T), T, T)
  name.vb: LastIndexOfAny(Of T)(Span(Of T), T, T)
- uid: System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)
  commentId: M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)
  id: LastIndexOfAny``1(System.Span{``0},``0,``0,``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOfAny<T>(Span<T>, T, T, T)
  nameWithType: MemoryExtensions.LastIndexOfAny<T>(Span<T>, T, T, T)
  fullName: System.MemoryExtensions.LastIndexOfAny<T>(System.Span<T>, T, T, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1, T value2) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value0
      type: '{T}'
    - id: value1
      type: '{T}'
    - id: value2
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOfAny(Of T As IEquatable(Of T))(span As Span(Of T), value0 As T, value1 As T, value2 As T) As Integer
  overload: System.MemoryExtensions.LastIndexOfAny*
  nameWithType.vb: MemoryExtensions.LastIndexOfAny(Of T)(Span(Of T), T, T, T)
  fullName.vb: System.MemoryExtensions.LastIndexOfAny(Of T)(System.Span(Of T), T, T, T)
  name.vb: LastIndexOfAny(Of T)(Span(Of T), T, T, T)
- uid: System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOfAny<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.LastIndexOfAny<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.LastIndexOfAny<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int LastIndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: values
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOfAny(Of T As IEquatable(Of T))(span As Span(Of T), values As ReadOnlySpan(Of T)) As Integer
  overload: System.MemoryExtensions.LastIndexOfAny*
  nameWithType.vb: MemoryExtensions.LastIndexOfAny(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.LastIndexOfAny(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: LastIndexOfAny(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)
  commentId: M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)
  id: LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOfAny<T>(ReadOnlySpan<T>, T, T)
  nameWithType: MemoryExtensions.LastIndexOfAny<T>(ReadOnlySpan<T>, T, T)
  fullName: System.MemoryExtensions.LastIndexOfAny<T>(System.ReadOnlySpan<T>, T, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value0
      type: '{T}'
    - id: value1
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOfAny(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), value0 As T, value1 As T) As Integer
  overload: System.MemoryExtensions.LastIndexOfAny*
  nameWithType.vb: MemoryExtensions.LastIndexOfAny(Of T)(ReadOnlySpan(Of T), T, T)
  fullName.vb: System.MemoryExtensions.LastIndexOfAny(Of T)(System.ReadOnlySpan(Of T), T, T)
  name.vb: LastIndexOfAny(Of T)(ReadOnlySpan(Of T), T, T)
- uid: System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)
  commentId: M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)
  id: LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOfAny<T>(ReadOnlySpan<T>, T, T, T)
  nameWithType: MemoryExtensions.LastIndexOfAny<T>(ReadOnlySpan<T>, T, T, T)
  fullName: System.MemoryExtensions.LastIndexOfAny<T>(System.ReadOnlySpan<T>, T, T, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value0
      type: '{T}'
    - id: value1
      type: '{T}'
    - id: value2
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOfAny(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), value0 As T, value1 As T, value2 As T) As Integer
  overload: System.MemoryExtensions.LastIndexOfAny*
  nameWithType.vb: MemoryExtensions.LastIndexOfAny(Of T)(ReadOnlySpan(Of T), T, T, T)
  fullName.vb: System.MemoryExtensions.LastIndexOfAny(Of T)(System.ReadOnlySpan(Of T), T, T, T)
  name.vb: LastIndexOfAny(Of T)(ReadOnlySpan(Of T), T, T, T)
- uid: System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOfAny<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.LastIndexOfAny<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.LastIndexOfAny<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> values) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: values
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOfAny(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), values As ReadOnlySpan(Of T)) As Integer
  overload: System.MemoryExtensions.LastIndexOfAny*
  nameWithType.vb: MemoryExtensions.LastIndexOfAny(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.LastIndexOfAny(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: LastIndexOfAny(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: SequenceEqual<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.SequenceEqual<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.SequenceEqual<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static bool SequenceEqual<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: other
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function SequenceEqual(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T)) As Boolean
  overload: System.MemoryExtensions.SequenceEqual*
  nameWithType.vb: MemoryExtensions.SequenceEqual(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.SequenceEqual(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: SequenceEqual(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: SequenceCompareTo<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.SequenceCompareTo<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.SequenceCompareTo<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int SequenceCompareTo<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other) where T : IComparable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: other
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function SequenceCompareTo(Of T As IComparable(Of T))(span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T)) As Integer
  overload: System.MemoryExtensions.SequenceCompareTo*
  nameWithType.vb: MemoryExtensions.SequenceCompareTo(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.SequenceCompareTo(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: SequenceCompareTo(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: StartsWith<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.StartsWith<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.StartsWith<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static bool StartsWith<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function StartsWith(Of T As IEquatable(Of T))(span As Span(Of T), value As ReadOnlySpan(Of T)) As Boolean
  overload: System.MemoryExtensions.StartsWith*
  nameWithType.vb: MemoryExtensions.StartsWith(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.StartsWith(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: StartsWith(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: StartsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.StartsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.StartsWith<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static bool StartsWith<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function StartsWith(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Boolean
  overload: System.MemoryExtensions.StartsWith*
  nameWithType.vb: MemoryExtensions.StartsWith(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.StartsWith(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: StartsWith(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: EndsWith<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.EndsWith<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.EndsWith<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static bool EndsWith<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function EndsWith(Of T As IEquatable(Of T))(span As Span(Of T), value As ReadOnlySpan(Of T)) As Boolean
  overload: System.MemoryExtensions.EndsWith*
  nameWithType.vb: MemoryExtensions.EndsWith(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.EndsWith(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: EndsWith(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: EndsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.EndsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.EndsWith<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static bool EndsWith<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function EndsWith(Of T As IEquatable(Of T))(span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Boolean
  overload: System.MemoryExtensions.EndsWith*
  nameWithType.vb: MemoryExtensions.EndsWith(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.EndsWith(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: EndsWith(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.Reverse``1(System.Span{``0})
  commentId: M:System.MemoryExtensions.Reverse``1(System.Span{``0})
  id: Reverse``1(System.Span{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: Reverse<T>(Span<T>)
  nameWithType: MemoryExtensions.Reverse<T>(Span<T>)
  fullName: System.MemoryExtensions.Reverse<T>(System.Span<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static void Reverse<T>(this Span<T> span)
    parameters:
    - id: span
      type: System.Span{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Reverse(Of T)(span As Span(Of T))
  overload: System.MemoryExtensions.Reverse*
  nameWithType.vb: MemoryExtensions.Reverse(Of T)(Span(Of T))
  fullName.vb: System.MemoryExtensions.Reverse(Of T)(System.Span(Of T))
  name.vb: Reverse(Of T)(Span(Of T))
- uid: System.MemoryExtensions.AsSpan``1(``0[])
  commentId: M:System.MemoryExtensions.AsSpan``1(``0[])
  id: AsSpan``1(``0[])
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsSpan<T>(T[])
  nameWithType: MemoryExtensions.AsSpan<T>(T[])
  fullName: System.MemoryExtensions.AsSpan<T>(T[])
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> AsSpan<T>(this T[] array)
    parameters:
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: System.Span{{T}}
    content.vb: Public Shared Function AsSpan(Of T)(array As T()) As Span(Of T)
  overload: System.MemoryExtensions.AsSpan*
  nameWithType.vb: MemoryExtensions.AsSpan(Of T)(T())
  fullName.vb: System.MemoryExtensions.AsSpan(Of T)(T())
  name.vb: AsSpan(Of T)(T())
- uid: System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)
  commentId: M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)
  id: AsSpan``1(``0[],System.Int32,System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsSpan<T>(T[], int, int)
  nameWithType: MemoryExtensions.AsSpan<T>(T[], int, int)
  fullName: System.MemoryExtensions.AsSpan<T>(T[], int, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> AsSpan<T>(this T[] array, int start, int length)
    parameters:
    - id: array
      type: '{T}[]'
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Span{{T}}
    content.vb: Public Shared Function AsSpan(Of T)(array As T(), start As Integer, length As Integer) As Span(Of T)
  overload: System.MemoryExtensions.AsSpan*
  nameWithType.vb: MemoryExtensions.AsSpan(Of T)(T(), Integer, Integer)
  fullName.vb: System.MemoryExtensions.AsSpan(Of T)(T(), Integer, Integer)
  name.vb: AsSpan(Of T)(T(), Integer, Integer)
- uid: System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})
  commentId: M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})
  id: AsSpan``1(System.ArraySegment{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsSpan<T>(ArraySegment<T>)
  nameWithType: MemoryExtensions.AsSpan<T>(ArraySegment<T>)
  fullName: System.MemoryExtensions.AsSpan<T>(System.ArraySegment<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> AsSpan<T>(this ArraySegment<T> segment)
    parameters:
    - id: segment
      type: System.ArraySegment{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Span{{T}}
    content.vb: Public Shared Function AsSpan(Of T)(segment As ArraySegment(Of T)) As Span(Of T)
  overload: System.MemoryExtensions.AsSpan*
  nameWithType.vb: MemoryExtensions.AsSpan(Of T)(ArraySegment(Of T))
  fullName.vb: System.MemoryExtensions.AsSpan(Of T)(System.ArraySegment(Of T))
  name.vb: AsSpan(Of T)(ArraySegment(Of T))
- uid: System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)
  commentId: M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)
  id: AsSpan``1(System.ArraySegment{``0},System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsSpan<T>(ArraySegment<T>, int)
  nameWithType: MemoryExtensions.AsSpan<T>(ArraySegment<T>, int)
  fullName: System.MemoryExtensions.AsSpan<T>(System.ArraySegment<T>, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> AsSpan<T>(this ArraySegment<T> segment, int start)
    parameters:
    - id: segment
      type: System.ArraySegment{{T}}
    - id: start
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Span{{T}}
    content.vb: Public Shared Function AsSpan(Of T)(segment As ArraySegment(Of T), start As Integer) As Span(Of T)
  overload: System.MemoryExtensions.AsSpan*
  nameWithType.vb: MemoryExtensions.AsSpan(Of T)(ArraySegment(Of T), Integer)
  fullName.vb: System.MemoryExtensions.AsSpan(Of T)(System.ArraySegment(Of T), Integer)
  name.vb: AsSpan(Of T)(ArraySegment(Of T), Integer)
- uid: System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)
  commentId: M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)
  id: AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsSpan<T>(ArraySegment<T>, int, int)
  nameWithType: MemoryExtensions.AsSpan<T>(ArraySegment<T>, int, int)
  fullName: System.MemoryExtensions.AsSpan<T>(System.ArraySegment<T>, int, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> AsSpan<T>(this ArraySegment<T> segment, int start, int length)
    parameters:
    - id: segment
      type: System.ArraySegment{{T}}
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Span{{T}}
    content.vb: Public Shared Function AsSpan(Of T)(segment As ArraySegment(Of T), start As Integer, length As Integer) As Span(Of T)
  overload: System.MemoryExtensions.AsSpan*
  nameWithType.vb: MemoryExtensions.AsSpan(Of T)(ArraySegment(Of T), Integer, Integer)
  fullName.vb: System.MemoryExtensions.AsSpan(Of T)(System.ArraySegment(Of T), Integer, Integer)
  name.vb: AsSpan(Of T)(ArraySegment(Of T), Integer, Integer)
- uid: System.MemoryExtensions.AsMemory``1(``0[])
  commentId: M:System.MemoryExtensions.AsMemory``1(``0[])
  id: AsMemory``1(``0[])
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsMemory<T>(T[])
  nameWithType: MemoryExtensions.AsMemory<T>(T[])
  fullName: System.MemoryExtensions.AsMemory<T>(T[])
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Memory<T> AsMemory<T>(this T[] array)
    parameters:
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: System.Memory{{T}}
    content.vb: Public Shared Function AsMemory(Of T)(array As T()) As Memory(Of T)
  overload: System.MemoryExtensions.AsMemory*
  nameWithType.vb: MemoryExtensions.AsMemory(Of T)(T())
  fullName.vb: System.MemoryExtensions.AsMemory(Of T)(T())
  name.vb: AsMemory(Of T)(T())
- uid: System.MemoryExtensions.AsMemory``1(``0[],System.Int32)
  commentId: M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)
  id: AsMemory``1(``0[],System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsMemory<T>(T[], int)
  nameWithType: MemoryExtensions.AsMemory<T>(T[], int)
  fullName: System.MemoryExtensions.AsMemory<T>(T[], int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Memory<T> AsMemory<T>(this T[] array, int start)
    parameters:
    - id: array
      type: '{T}[]'
    - id: start
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Memory{{T}}
    content.vb: Public Shared Function AsMemory(Of T)(array As T(), start As Integer) As Memory(Of T)
  overload: System.MemoryExtensions.AsMemory*
  nameWithType.vb: MemoryExtensions.AsMemory(Of T)(T(), Integer)
  fullName.vb: System.MemoryExtensions.AsMemory(Of T)(T(), Integer)
  name.vb: AsMemory(Of T)(T(), Integer)
- uid: System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)
  commentId: M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)
  id: AsMemory``1(``0[],System.Int32,System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsMemory<T>(T[], int, int)
  nameWithType: MemoryExtensions.AsMemory<T>(T[], int, int)
  fullName: System.MemoryExtensions.AsMemory<T>(T[], int, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Memory<T> AsMemory<T>(this T[] array, int start, int length)
    parameters:
    - id: array
      type: '{T}[]'
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Memory{{T}}
    content.vb: Public Shared Function AsMemory(Of T)(array As T(), start As Integer, length As Integer) As Memory(Of T)
  overload: System.MemoryExtensions.AsMemory*
  nameWithType.vb: MemoryExtensions.AsMemory(Of T)(T(), Integer, Integer)
  fullName.vb: System.MemoryExtensions.AsMemory(Of T)(T(), Integer, Integer)
  name.vb: AsMemory(Of T)(T(), Integer, Integer)
- uid: System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})
  commentId: M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})
  id: AsMemory``1(System.ArraySegment{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsMemory<T>(ArraySegment<T>)
  nameWithType: MemoryExtensions.AsMemory<T>(ArraySegment<T>)
  fullName: System.MemoryExtensions.AsMemory<T>(System.ArraySegment<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Memory<T> AsMemory<T>(this ArraySegment<T> segment)
    parameters:
    - id: segment
      type: System.ArraySegment{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Memory{{T}}
    content.vb: Public Shared Function AsMemory(Of T)(segment As ArraySegment(Of T)) As Memory(Of T)
  overload: System.MemoryExtensions.AsMemory*
  nameWithType.vb: MemoryExtensions.AsMemory(Of T)(ArraySegment(Of T))
  fullName.vb: System.MemoryExtensions.AsMemory(Of T)(System.ArraySegment(Of T))
  name.vb: AsMemory(Of T)(ArraySegment(Of T))
- uid: System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)
  commentId: M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)
  id: AsMemory``1(System.ArraySegment{``0},System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsMemory<T>(ArraySegment<T>, int)
  nameWithType: MemoryExtensions.AsMemory<T>(ArraySegment<T>, int)
  fullName: System.MemoryExtensions.AsMemory<T>(System.ArraySegment<T>, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Memory<T> AsMemory<T>(this ArraySegment<T> segment, int start)
    parameters:
    - id: segment
      type: System.ArraySegment{{T}}
    - id: start
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Memory{{T}}
    content.vb: Public Shared Function AsMemory(Of T)(segment As ArraySegment(Of T), start As Integer) As Memory(Of T)
  overload: System.MemoryExtensions.AsMemory*
  nameWithType.vb: MemoryExtensions.AsMemory(Of T)(ArraySegment(Of T), Integer)
  fullName.vb: System.MemoryExtensions.AsMemory(Of T)(System.ArraySegment(Of T), Integer)
  name.vb: AsMemory(Of T)(ArraySegment(Of T), Integer)
- uid: System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)
  commentId: M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)
  id: AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsMemory<T>(ArraySegment<T>, int, int)
  nameWithType: MemoryExtensions.AsMemory<T>(ArraySegment<T>, int, int)
  fullName: System.MemoryExtensions.AsMemory<T>(System.ArraySegment<T>, int, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Memory<T> AsMemory<T>(this ArraySegment<T> segment, int start, int length)
    parameters:
    - id: segment
      type: System.ArraySegment{{T}}
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Memory{{T}}
    content.vb: Public Shared Function AsMemory(Of T)(segment As ArraySegment(Of T), start As Integer, length As Integer) As Memory(Of T)
  overload: System.MemoryExtensions.AsMemory*
  nameWithType.vb: MemoryExtensions.AsMemory(Of T)(ArraySegment(Of T), Integer, Integer)
  fullName.vb: System.MemoryExtensions.AsMemory(Of T)(System.ArraySegment(Of T), Integer, Integer)
  name.vb: AsMemory(Of T)(ArraySegment(Of T), Integer, Integer)
- uid: System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})
  commentId: M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})
  id: CopyTo``1(``0[],System.Span{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: CopyTo<T>(T[], Span<T>)
  nameWithType: MemoryExtensions.CopyTo<T>(T[], Span<T>)
  fullName: System.MemoryExtensions.CopyTo<T>(T[], System.Span<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static void CopyTo<T>(this T[] source, Span<T> destination)
    parameters:
    - id: source
      type: '{T}[]'
    - id: destination
      type: System.Span{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub CopyTo(Of T)(source As T(), destination As Span(Of T))
  overload: System.MemoryExtensions.CopyTo*
  nameWithType.vb: MemoryExtensions.CopyTo(Of T)(T(), Span(Of T))
  fullName.vb: System.MemoryExtensions.CopyTo(Of T)(T(), System.Span(Of T))
  name.vb: CopyTo(Of T)(T(), Span(Of T))
- uid: System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})
  commentId: M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})
  id: CopyTo``1(``0[],System.Memory{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: CopyTo<T>(T[], Memory<T>)
  nameWithType: MemoryExtensions.CopyTo<T>(T[], Memory<T>)
  fullName: System.MemoryExtensions.CopyTo<T>(T[], System.Memory<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static void CopyTo<T>(this T[] source, Memory<T> destination)
    parameters:
    - id: source
      type: '{T}[]'
    - id: destination
      type: System.Memory{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub CopyTo(Of T)(source As T(), destination As Memory(Of T))
  overload: System.MemoryExtensions.CopyTo*
  nameWithType.vb: MemoryExtensions.CopyTo(Of T)(T(), Memory(Of T))
  fullName.vb: System.MemoryExtensions.CopyTo(Of T)(T(), System.Memory(Of T))
  name.vb: CopyTo(Of T)(T(), Memory(Of T))
- uid: System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: Overlaps<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.Overlaps<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.Overlaps<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool Overlaps<T>(this Span<T> span, ReadOnlySpan<T> other)
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: other
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function Overlaps(Of T)(span As Span(Of T), other As ReadOnlySpan(Of T)) As Boolean
  overload: System.MemoryExtensions.Overlaps*
  nameWithType.vb: MemoryExtensions.Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.Overlaps(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)
  commentId: M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)
  id: Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: Overlaps<T>(Span<T>, ReadOnlySpan<T>, out int)
  nameWithType: MemoryExtensions.Overlaps<T>(Span<T>, ReadOnlySpan<T>, out int)
  fullName: System.MemoryExtensions.Overlaps<T>(System.Span<T>, System.ReadOnlySpan<T>, out int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool Overlaps<T>(this Span<T> span, ReadOnlySpan<T> other, out int elementOffset)
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: other
      type: System.ReadOnlySpan{{T}}
    - id: elementOffset
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function Overlaps(Of T)(span As Span(Of T), other As ReadOnlySpan(Of T), elementOffset As Integer) As Boolean
  overload: System.MemoryExtensions.Overlaps*
  nameWithType.vb: MemoryExtensions.Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T), Integer)
  fullName.vb: System.MemoryExtensions.Overlaps(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T), Integer)
  name.vb: Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T), Integer)
- uid: System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: Overlaps<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.Overlaps<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.Overlaps<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool Overlaps<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other)
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: other
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function Overlaps(Of T)(span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T)) As Boolean
  overload: System.MemoryExtensions.Overlaps*
  nameWithType.vb: MemoryExtensions.Overlaps(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.Overlaps(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: Overlaps(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)
  commentId: M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)
  id: Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: Overlaps<T>(ReadOnlySpan<T>, ReadOnlySpan<T>, out int)
  nameWithType: MemoryExtensions.Overlaps<T>(ReadOnlySpan<T>, ReadOnlySpan<T>, out int)
  fullName: System.MemoryExtensions.Overlaps<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>, out int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool Overlaps<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other, out int elementOffset)
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: other
      type: System.ReadOnlySpan{{T}}
    - id: elementOffset
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function Overlaps(Of T)(span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T), elementOffset As Integer) As Boolean
  overload: System.MemoryExtensions.Overlaps*
  nameWithType.vb: MemoryExtensions.Overlaps(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T), Integer)
  fullName.vb: System.MemoryExtensions.Overlaps(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T), Integer)
  name.vb: Overlaps(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T), Integer)
- uid: System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})
  commentId: M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})
  id: BinarySearch``1(System.Span{``0},System.IComparable{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(Span<T>, IComparable<T>)
  nameWithType: MemoryExtensions.BinarySearch<T>(Span<T>, IComparable<T>)
  fullName: System.MemoryExtensions.BinarySearch<T>(System.Span<T>, System.IComparable<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int BinarySearch<T>(this Span<T> span, IComparable<T> comparable)
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: comparable
      type: System.IComparable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function BinarySearch(Of T)(span As Span(Of T), comparable As IComparable(Of T)) As Integer
  overload: System.MemoryExtensions.BinarySearch*
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T)(Span(Of T), IComparable(Of T))
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T)(System.Span(Of T), System.IComparable(Of T))
  name.vb: BinarySearch(Of T)(Span(Of T), IComparable(Of T))
- uid: System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)
  commentId: M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)
  id: BinarySearch``2(System.Span{``0},``1)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: BinarySearch<T, TComparable>(Span<T>, TComparable)
  nameWithType: MemoryExtensions.BinarySearch<T, TComparable>(Span<T>, TComparable)
  fullName: System.MemoryExtensions.BinarySearch<T, TComparable>(System.Span<T>, TComparable)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int BinarySearch<T, TComparable>(this Span<T> span, TComparable comparable) where TComparable : IComparable<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: comparable
      type: '{TComparable}'
    typeParameters:
    - id: T
    - id: TComparable
    return:
      type: System.Int32
    content.vb: Public Shared Function BinarySearch(Of T, TComparable As IComparable(Of T))(span As Span(Of T), comparable As TComparable) As Integer
  overload: System.MemoryExtensions.BinarySearch*
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T, TComparable)(Span(Of T), TComparable)
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T, TComparable)(System.Span(Of T), TComparable)
  name.vb: BinarySearch(Of T, TComparable)(Span(Of T), TComparable)
- uid: System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)
  commentId: M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)
  id: BinarySearch``2(System.Span{``0},``0,``1)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: BinarySearch<T, TComparer>(Span<T>, T, TComparer)
  nameWithType: MemoryExtensions.BinarySearch<T, TComparer>(Span<T>, T, TComparer)
  fullName: System.MemoryExtensions.BinarySearch<T, TComparer>(System.Span<T>, T, TComparer)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int BinarySearch<T, TComparer>(this Span<T> span, T value, TComparer comparer) where TComparer : IComparer<T>'
    parameters:
    - id: span
      type: System.Span{{T}}
    - id: value
      type: '{T}'
    - id: comparer
      type: '{TComparer}'
    typeParameters:
    - id: T
    - id: TComparer
    return:
      type: System.Int32
    content.vb: Public Shared Function BinarySearch(Of T, TComparer As IComparer(Of T))(span As Span(Of T), value As T, comparer As TComparer) As Integer
  overload: System.MemoryExtensions.BinarySearch*
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T, TComparer)(Span(Of T), T, TComparer)
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T, TComparer)(System.Span(Of T), T, TComparer)
  name.vb: BinarySearch(Of T, TComparer)(Span(Of T), T, TComparer)
- uid: System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})
  commentId: M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})
  id: BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(ReadOnlySpan<T>, IComparable<T>)
  nameWithType: MemoryExtensions.BinarySearch<T>(ReadOnlySpan<T>, IComparable<T>)
  fullName: System.MemoryExtensions.BinarySearch<T>(System.ReadOnlySpan<T>, System.IComparable<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int BinarySearch<T>(this ReadOnlySpan<T> span, IComparable<T> comparable)
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: comparable
      type: System.IComparable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function BinarySearch(Of T)(span As ReadOnlySpan(Of T), comparable As IComparable(Of T)) As Integer
  overload: System.MemoryExtensions.BinarySearch*
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T)(ReadOnlySpan(Of T), IComparable(Of T))
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T)(System.ReadOnlySpan(Of T), System.IComparable(Of T))
  name.vb: BinarySearch(Of T)(ReadOnlySpan(Of T), IComparable(Of T))
- uid: System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)
  commentId: M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)
  id: BinarySearch``2(System.ReadOnlySpan{``0},``1)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: BinarySearch<T, TComparable>(ReadOnlySpan<T>, TComparable)
  nameWithType: MemoryExtensions.BinarySearch<T, TComparable>(ReadOnlySpan<T>, TComparable)
  fullName: System.MemoryExtensions.BinarySearch<T, TComparable>(System.ReadOnlySpan<T>, TComparable)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int BinarySearch<T, TComparable>(this ReadOnlySpan<T> span, TComparable comparable) where TComparable : IComparable<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: comparable
      type: '{TComparable}'
    typeParameters:
    - id: T
    - id: TComparable
    return:
      type: System.Int32
    content.vb: Public Shared Function BinarySearch(Of T, TComparable As IComparable(Of T))(span As ReadOnlySpan(Of T), comparable As TComparable) As Integer
  overload: System.MemoryExtensions.BinarySearch*
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T, TComparable)(ReadOnlySpan(Of T), TComparable)
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T, TComparable)(System.ReadOnlySpan(Of T), TComparable)
  name.vb: BinarySearch(Of T, TComparable)(ReadOnlySpan(Of T), TComparable)
- uid: System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)
  commentId: M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)
  id: BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: BinarySearch<T, TComparer>(ReadOnlySpan<T>, T, TComparer)
  nameWithType: MemoryExtensions.BinarySearch<T, TComparer>(ReadOnlySpan<T>, T, TComparer)
  fullName: System.MemoryExtensions.BinarySearch<T, TComparer>(System.ReadOnlySpan<T>, T, TComparer)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int BinarySearch<T, TComparer>(this ReadOnlySpan<T> span, T value, TComparer comparer) where TComparer : IComparer<T>'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    - id: value
      type: '{T}'
    - id: comparer
      type: '{TComparer}'
    typeParameters:
    - id: T
    - id: TComparer
    return:
      type: System.Int32
    content.vb: Public Shared Function BinarySearch(Of T, TComparer As IComparer(Of T))(span As ReadOnlySpan(Of T), value As T, comparer As TComparer) As Integer
  overload: System.MemoryExtensions.BinarySearch*
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T, TComparer)(ReadOnlySpan(Of T), T, TComparer)
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T, TComparer)(System.ReadOnlySpan(Of T), T, TComparer)
  name.vb: BinarySearch(Of T, TComparer)(ReadOnlySpan(Of T), T, TComparer)
- uid: System.MemoryExtensions.AsSpan``1(``0[],System.Int32)
  commentId: M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)
  id: AsSpan``1(``0[],System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsSpan<T>(T[], int)
  nameWithType: MemoryExtensions.AsSpan<T>(T[], int)
  fullName: System.MemoryExtensions.AsSpan<T>(T[], int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> AsSpan<T>(this T[] array, int start)
    parameters:
    - id: array
      type: '{T}[]'
    - id: start
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Span{{T}}
    content.vb: Public Shared Function AsSpan(Of T)(array As T(), start As Integer) As Span(Of T)
  overload: System.MemoryExtensions.AsSpan*
  nameWithType.vb: MemoryExtensions.AsSpan(Of T)(T(), Integer)
  fullName.vb: System.MemoryExtensions.AsSpan(Of T)(T(), Integer)
  name.vb: AsSpan(Of T)(T(), Integer)
- uid: System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: MemoryExtensions.Contains(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: System.MemoryExtensions.Contains(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool Contains(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: value
      type: System.ReadOnlySpan{System.Char}
    - id: comparisonType
      type: System.StringComparison
    return:
      type: System.Boolean
    content.vb: Public Shared Function Contains(span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean
  overload: System.MemoryExtensions.Contains*
  nameWithType.vb: MemoryExtensions.Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: System.MemoryExtensions.Contains(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: Equals(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: MemoryExtensions.Equals(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: System.MemoryExtensions.Equals(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool Equals(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: other
      type: System.ReadOnlySpan{System.Char}
    - id: comparisonType
      type: System.StringComparison
    return:
      type: System.Boolean
    content.vb: Public Shared Function Equals(span As ReadOnlySpan(Of Char), other As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean
  overload: System.MemoryExtensions.Equals*
  nameWithType.vb: MemoryExtensions.Equals(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: System.MemoryExtensions.Equals(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: Equals(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: CompareTo(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: MemoryExtensions.CompareTo(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: System.MemoryExtensions.CompareTo(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int CompareTo(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: other
      type: System.ReadOnlySpan{System.Char}
    - id: comparisonType
      type: System.StringComparison
    return:
      type: System.Int32
    content.vb: Public Shared Function CompareTo(span As ReadOnlySpan(Of Char), other As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer
  overload: System.MemoryExtensions.CompareTo*
  nameWithType.vb: MemoryExtensions.CompareTo(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: System.MemoryExtensions.CompareTo(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: CompareTo(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: IndexOf(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: MemoryExtensions.IndexOf(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: System.MemoryExtensions.IndexOf(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOf(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: value
      type: System.ReadOnlySpan{System.Char}
    - id: comparisonType
      type: System.StringComparison
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOf(span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer
  overload: System.MemoryExtensions.IndexOf*
  nameWithType.vb: MemoryExtensions.IndexOf(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: System.MemoryExtensions.IndexOf(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: IndexOf(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)
  commentId: M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)
  id: ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: ToLower(ReadOnlySpan<char>, Span<char>, CultureInfo)
  nameWithType: MemoryExtensions.ToLower(ReadOnlySpan<char>, Span<char>, CultureInfo)
  fullName: System.MemoryExtensions.ToLower(System.ReadOnlySpan<char>, System.Span<char>, System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int ToLower(this ReadOnlySpan<char> source, Span<char> destination, CultureInfo culture)
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Char}
    - id: destination
      type: System.Span{System.Char}
    - id: culture
      type: System.Globalization.CultureInfo
    return:
      type: System.Int32
    content.vb: Public Shared Function ToLower(source As ReadOnlySpan(Of Char), destination As Span(Of Char), culture As CultureInfo) As Integer
  overload: System.MemoryExtensions.ToLower*
  nameWithType.vb: MemoryExtensions.ToLower(ReadOnlySpan(Of Char), Span(Of Char), CultureInfo)
  fullName.vb: System.MemoryExtensions.ToLower(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.Globalization.CultureInfo)
  name.vb: ToLower(ReadOnlySpan(Of Char), Span(Of Char), CultureInfo)
- uid: System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: ToLowerInvariant(ReadOnlySpan<char>, Span<char>)
  nameWithType: MemoryExtensions.ToLowerInvariant(ReadOnlySpan<char>, Span<char>)
  fullName: System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int ToLowerInvariant(this ReadOnlySpan<char> source, Span<char> destination)
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Char}
    - id: destination
      type: System.Span{System.Char}
    return:
      type: System.Int32
    content.vb: Public Shared Function ToLowerInvariant(source As ReadOnlySpan(Of Char), destination As Span(Of Char)) As Integer
  overload: System.MemoryExtensions.ToLowerInvariant*
  nameWithType.vb: MemoryExtensions.ToLowerInvariant(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: ToLowerInvariant(ReadOnlySpan(Of Char), Span(Of Char))
- uid: System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)
  commentId: M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)
  id: ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: ToUpper(ReadOnlySpan<char>, Span<char>, CultureInfo)
  nameWithType: MemoryExtensions.ToUpper(ReadOnlySpan<char>, Span<char>, CultureInfo)
  fullName: System.MemoryExtensions.ToUpper(System.ReadOnlySpan<char>, System.Span<char>, System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int ToUpper(this ReadOnlySpan<char> source, Span<char> destination, CultureInfo culture)
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Char}
    - id: destination
      type: System.Span{System.Char}
    - id: culture
      type: System.Globalization.CultureInfo
    return:
      type: System.Int32
    content.vb: Public Shared Function ToUpper(source As ReadOnlySpan(Of Char), destination As Span(Of Char), culture As CultureInfo) As Integer
  overload: System.MemoryExtensions.ToUpper*
  nameWithType.vb: MemoryExtensions.ToUpper(ReadOnlySpan(Of Char), Span(Of Char), CultureInfo)
  fullName.vb: System.MemoryExtensions.ToUpper(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.Globalization.CultureInfo)
  name.vb: ToUpper(ReadOnlySpan(Of Char), Span(Of Char), CultureInfo)
- uid: System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: ToUpperInvariant(ReadOnlySpan<char>, Span<char>)
  nameWithType: MemoryExtensions.ToUpperInvariant(ReadOnlySpan<char>, Span<char>)
  fullName: System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int ToUpperInvariant(this ReadOnlySpan<char> source, Span<char> destination)
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Char}
    - id: destination
      type: System.Span{System.Char}
    return:
      type: System.Int32
    content.vb: Public Shared Function ToUpperInvariant(source As ReadOnlySpan(Of Char), destination As Span(Of Char)) As Integer
  overload: System.MemoryExtensions.ToUpperInvariant*
  nameWithType.vb: MemoryExtensions.ToUpperInvariant(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: ToUpperInvariant(ReadOnlySpan(Of Char), Span(Of Char))
- uid: System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: MemoryExtensions.EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: System.MemoryExtensions.EndsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool EndsWith(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: value
      type: System.ReadOnlySpan{System.Char}
    - id: comparisonType
      type: System.StringComparison
    return:
      type: System.Boolean
    content.vb: Public Shared Function EndsWith(span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean
  overload: System.MemoryExtensions.EndsWith*
  nameWithType.vb: MemoryExtensions.EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: System.MemoryExtensions.EndsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: MemoryExtensions.StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: System.MemoryExtensions.StartsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool StartsWith(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Char}
    - id: value
      type: System.ReadOnlySpan{System.Char}
    - id: comparisonType
      type: System.StringComparison
    return:
      type: System.Boolean
    content.vb: Public Shared Function StartsWith(span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean
  overload: System.MemoryExtensions.StartsWith*
  nameWithType.vb: MemoryExtensions.StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: System.MemoryExtensions.StartsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: System.MemoryExtensions.AsSpan(System.String)
  commentId: M:System.MemoryExtensions.AsSpan(System.String)
  id: AsSpan(System.String)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsSpan(string)
  nameWithType: MemoryExtensions.AsSpan(string)
  fullName: System.MemoryExtensions.AsSpan(string)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> AsSpan(this string text)
    parameters:
    - id: text
      type: System.String
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function AsSpan(text As String) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.AsSpan*
  nameWithType.vb: MemoryExtensions.AsSpan(String)
  fullName.vb: System.MemoryExtensions.AsSpan(String)
  name.vb: AsSpan(String)
- uid: System.MemoryExtensions.AsSpan(System.String,System.Int32)
  commentId: M:System.MemoryExtensions.AsSpan(System.String,System.Int32)
  id: AsSpan(System.String,System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsSpan(string, int)
  nameWithType: MemoryExtensions.AsSpan(string, int)
  fullName: System.MemoryExtensions.AsSpan(string, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> AsSpan(this string text, int start)
    parameters:
    - id: text
      type: System.String
    - id: start
      type: System.Int32
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function AsSpan(text As String, start As Integer) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.AsSpan*
  nameWithType.vb: MemoryExtensions.AsSpan(String, Integer)
  fullName.vb: System.MemoryExtensions.AsSpan(String, Integer)
  name.vb: AsSpan(String, Integer)
- uid: System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)
  commentId: M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)
  id: AsSpan(System.String,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsSpan(string, int, int)
  nameWithType: MemoryExtensions.AsSpan(string, int, int)
  fullName: System.MemoryExtensions.AsSpan(string, int, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> AsSpan(this string text, int start, int length)
    parameters:
    - id: text
      type: System.String
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.ReadOnlySpan{System.Char}
    content.vb: Public Shared Function AsSpan(text As String, start As Integer, length As Integer) As ReadOnlySpan(Of Char)
  overload: System.MemoryExtensions.AsSpan*
  nameWithType.vb: MemoryExtensions.AsSpan(String, Integer, Integer)
  fullName.vb: System.MemoryExtensions.AsSpan(String, Integer, Integer)
  name.vb: AsSpan(String, Integer, Integer)
- uid: System.MemoryExtensions.AsMemory(System.String)
  commentId: M:System.MemoryExtensions.AsMemory(System.String)
  id: AsMemory(System.String)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsMemory(string)
  nameWithType: MemoryExtensions.AsMemory(string)
  fullName: System.MemoryExtensions.AsMemory(string)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlyMemory<char> AsMemory(this string text)
    parameters:
    - id: text
      type: System.String
    return:
      type: System.ReadOnlyMemory{System.Char}
    content.vb: Public Shared Function AsMemory(text As String) As ReadOnlyMemory(Of Char)
  overload: System.MemoryExtensions.AsMemory*
  nameWithType.vb: MemoryExtensions.AsMemory(String)
  fullName.vb: System.MemoryExtensions.AsMemory(String)
  name.vb: AsMemory(String)
- uid: System.MemoryExtensions.AsMemory(System.String,System.Int32)
  commentId: M:System.MemoryExtensions.AsMemory(System.String,System.Int32)
  id: AsMemory(System.String,System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsMemory(string, int)
  nameWithType: MemoryExtensions.AsMemory(string, int)
  fullName: System.MemoryExtensions.AsMemory(string, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlyMemory<char> AsMemory(this string text, int start)
    parameters:
    - id: text
      type: System.String
    - id: start
      type: System.Int32
    return:
      type: System.ReadOnlyMemory{System.Char}
    content.vb: Public Shared Function AsMemory(text As String, start As Integer) As ReadOnlyMemory(Of Char)
  overload: System.MemoryExtensions.AsMemory*
  nameWithType.vb: MemoryExtensions.AsMemory(String, Integer)
  fullName.vb: System.MemoryExtensions.AsMemory(String, Integer)
  name.vb: AsMemory(String, Integer)
- uid: System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)
  commentId: M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)
  id: AsMemory(System.String,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: System.MemoryExtensions
  langs:
  - csharp
  - vb
  name: AsMemory(string, int, int)
  nameWithType: MemoryExtensions.AsMemory(string, int, int)
  fullName: System.MemoryExtensions.AsMemory(string, int, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlyMemory<char> AsMemory(this string text, int start, int length)
    parameters:
    - id: text
      type: System.String
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.ReadOnlyMemory{System.Char}
    content.vb: Public Shared Function AsMemory(text As String, start As Integer, length As Integer) As ReadOnlyMemory(Of Char)
  overload: System.MemoryExtensions.AsMemory*
  nameWithType.vb: MemoryExtensions.AsMemory(String, Integer, Integer)
  fullName.vb: System.MemoryExtensions.AsMemory(String, Integer, Integer)
  name.vb: AsMemory(String, Integer, Integer)
references:
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.MemoryExtensions.Trim*
  commentId: Overload:System.MemoryExtensions.Trim
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_Trim_System_ReadOnlySpan_System_Char__
  name: Trim
  nameWithType: MemoryExtensions.Trim
  fullName: System.MemoryExtensions.Trim
- uid: System.ReadOnlySpan{System.Char}
  commentId: T:System.ReadOnlySpan{System.Char}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<char>
  nameWithType: ReadOnlySpan<char>
  fullName: System.ReadOnlySpan<char>
  nameWithType.vb: ReadOnlySpan(Of Char)
  fullName.vb: System.ReadOnlySpan(Of Char)
  name.vb: ReadOnlySpan(Of Char)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.MemoryExtensions.TrimStart*
  commentId: Overload:System.MemoryExtensions.TrimStart
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_TrimStart_System_ReadOnlySpan_System_Char__
  name: TrimStart
  nameWithType: MemoryExtensions.TrimStart
  fullName: System.MemoryExtensions.TrimStart
- uid: System.MemoryExtensions.TrimEnd*
  commentId: Overload:System.MemoryExtensions.TrimEnd
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_TrimEnd_System_ReadOnlySpan_System_Char__
  name: TrimEnd
  nameWithType: MemoryExtensions.TrimEnd
  fullName: System.MemoryExtensions.TrimEnd
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
- uid: System.MemoryExtensions.IsWhiteSpace*
  commentId: Overload:System.MemoryExtensions.IsWhiteSpace
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_IsWhiteSpace_System_ReadOnlySpan_System_Char__
  name: IsWhiteSpace
  nameWithType: MemoryExtensions.IsWhiteSpace
  fullName: System.MemoryExtensions.IsWhiteSpace
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.MemoryExtensions.IndexOf*
  commentId: Overload:System.MemoryExtensions.IndexOf
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_IndexOf__1_System_Span___0____0_
  name: IndexOf
  nameWithType: MemoryExtensions.IndexOf
  fullName: System.MemoryExtensions.IndexOf
- uid: System.Span{{T}}
  commentId: T:System.Span{`0}
  parent: System
  definition: System.Span`1
  href: System.Span-1.html
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Span`1
  commentId: T:System.Span`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.ReadOnlySpan{{T}}
  commentId: T:System.ReadOnlySpan{`0}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.MemoryExtensions.LastIndexOf*
  commentId: Overload:System.MemoryExtensions.LastIndexOf
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_LastIndexOf__1_System_Span___0____0_
  name: LastIndexOf
  nameWithType: MemoryExtensions.LastIndexOf
  fullName: System.MemoryExtensions.LastIndexOf
- uid: System.MemoryExtensions.SequenceEqual*
  commentId: Overload:System.MemoryExtensions.SequenceEqual
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_SequenceEqual__1_System_Span___0__System_ReadOnlySpan___0__
  name: SequenceEqual
  nameWithType: MemoryExtensions.SequenceEqual
  fullName: System.MemoryExtensions.SequenceEqual
- uid: System.MemoryExtensions.SequenceCompareTo*
  commentId: Overload:System.MemoryExtensions.SequenceCompareTo
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_SequenceCompareTo__1_System_Span___0__System_ReadOnlySpan___0__
  name: SequenceCompareTo
  nameWithType: MemoryExtensions.SequenceCompareTo
  fullName: System.MemoryExtensions.SequenceCompareTo
- uid: System.MemoryExtensions.IndexOfAny*
  commentId: Overload:System.MemoryExtensions.IndexOfAny
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_IndexOfAny__1_System_Span___0____0___0_
  name: IndexOfAny
  nameWithType: MemoryExtensions.IndexOfAny
  fullName: System.MemoryExtensions.IndexOfAny
- uid: System.MemoryExtensions.LastIndexOfAny*
  commentId: Overload:System.MemoryExtensions.LastIndexOfAny
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_LastIndexOfAny__1_System_Span___0____0___0_
  name: LastIndexOfAny
  nameWithType: MemoryExtensions.LastIndexOfAny
  fullName: System.MemoryExtensions.LastIndexOfAny
- uid: System.MemoryExtensions.StartsWith*
  commentId: Overload:System.MemoryExtensions.StartsWith
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_StartsWith__1_System_Span___0__System_ReadOnlySpan___0__
  name: StartsWith
  nameWithType: MemoryExtensions.StartsWith
  fullName: System.MemoryExtensions.StartsWith
- uid: System.MemoryExtensions.EndsWith*
  commentId: Overload:System.MemoryExtensions.EndsWith
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_EndsWith__1_System_Span___0__System_ReadOnlySpan___0__
  name: EndsWith
  nameWithType: MemoryExtensions.EndsWith
  fullName: System.MemoryExtensions.EndsWith
- uid: System.MemoryExtensions.Reverse*
  commentId: Overload:System.MemoryExtensions.Reverse
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_Reverse__1_System_Span___0__
  name: Reverse
  nameWithType: MemoryExtensions.Reverse
  fullName: System.MemoryExtensions.Reverse
- uid: System.MemoryExtensions.AsSpan*
  commentId: Overload:System.MemoryExtensions.AsSpan
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_AsSpan__1___0___
  name: AsSpan
  nameWithType: MemoryExtensions.AsSpan
  fullName: System.MemoryExtensions.AsSpan
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.ArraySegment{{T}}
  commentId: T:System.ArraySegment{`0}
  parent: System
  definition: System.ArraySegment`1
  href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.MemoryExtensions.AsMemory*
  commentId: Overload:System.MemoryExtensions.AsMemory
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_AsMemory__1___0___
  name: AsMemory
  nameWithType: MemoryExtensions.AsMemory
  fullName: System.MemoryExtensions.AsMemory
- uid: System.Memory{{T}}
  commentId: T:System.Memory{`0}
  parent: System
  definition: System.Memory`1
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Memory`1
  commentId: T:System.Memory`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.MemoryExtensions.CopyTo*
  commentId: Overload:System.MemoryExtensions.CopyTo
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_CopyTo__1___0___System_Span___0__
  name: CopyTo
  nameWithType: MemoryExtensions.CopyTo
  fullName: System.MemoryExtensions.CopyTo
- uid: System.MemoryExtensions.Overlaps*
  commentId: Overload:System.MemoryExtensions.Overlaps
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__
  name: Overlaps
  nameWithType: MemoryExtensions.Overlaps
  fullName: System.MemoryExtensions.Overlaps
- uid: System.MemoryExtensions.BinarySearch*
  commentId: Overload:System.MemoryExtensions.BinarySearch
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__1_System_Span___0__System_IComparable___0__
  name: BinarySearch
  nameWithType: MemoryExtensions.BinarySearch
  fullName: System.MemoryExtensions.BinarySearch
- uid: System.IComparable{{T}}
  commentId: T:System.IComparable{``0}
  parent: System
  definition: System.IComparable`1
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{TComparable}'
  commentId: '!:TComparable'
  definition: TComparable
  name: TComparable
  nameWithType: TComparable
  fullName: TComparable
- uid: TComparable
  name: TComparable
  nameWithType: TComparable
  fullName: TComparable
- uid: '{TComparer}'
  commentId: '!:TComparer'
  definition: TComparer
  name: TComparer
  nameWithType: TComparer
  fullName: TComparer
- uid: TComparer
  name: TComparer
  nameWithType: TComparer
  fullName: TComparer
- uid: System.MemoryExtensions.Contains*
  commentId: Overload:System.MemoryExtensions.Contains
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_Contains_System_ReadOnlySpan_System_Char__System_ReadOnlySpan_System_Char__System_StringComparison_
  name: Contains
  nameWithType: MemoryExtensions.Contains
  fullName: System.MemoryExtensions.Contains
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.stringcomparison
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: System.MemoryExtensions.Equals*
  commentId: Overload:System.MemoryExtensions.Equals
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_Equals_System_ReadOnlySpan_System_Char__System_ReadOnlySpan_System_Char__System_StringComparison_
  name: Equals
  nameWithType: MemoryExtensions.Equals
  fullName: System.MemoryExtensions.Equals
- uid: System.MemoryExtensions.CompareTo*
  commentId: Overload:System.MemoryExtensions.CompareTo
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_CompareTo_System_ReadOnlySpan_System_Char__System_ReadOnlySpan_System_Char__System_StringComparison_
  name: CompareTo
  nameWithType: MemoryExtensions.CompareTo
  fullName: System.MemoryExtensions.CompareTo
- uid: System.MemoryExtensions.ToLower*
  commentId: Overload:System.MemoryExtensions.ToLower
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_ToLower_System_ReadOnlySpan_System_Char__System_Span_System_Char__System_Globalization_CultureInfo_
  name: ToLower
  nameWithType: MemoryExtensions.ToLower
  fullName: System.MemoryExtensions.ToLower
- uid: System.Span{System.Char}
  commentId: T:System.Span{System.Char}
  parent: System
  definition: System.Span`1
  href: System.Span-1.html
  name: Span<char>
  nameWithType: Span<char>
  fullName: System.Span<char>
  nameWithType.vb: Span(Of Char)
  fullName.vb: System.Span(Of Char)
  name.vb: Span(Of Char)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
- uid: System.MemoryExtensions.ToLowerInvariant*
  commentId: Overload:System.MemoryExtensions.ToLowerInvariant
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_ToLowerInvariant_System_ReadOnlySpan_System_Char__System_Span_System_Char__
  name: ToLowerInvariant
  nameWithType: MemoryExtensions.ToLowerInvariant
  fullName: System.MemoryExtensions.ToLowerInvariant
- uid: System.MemoryExtensions.ToUpper*
  commentId: Overload:System.MemoryExtensions.ToUpper
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_ToUpper_System_ReadOnlySpan_System_Char__System_Span_System_Char__System_Globalization_CultureInfo_
  name: ToUpper
  nameWithType: MemoryExtensions.ToUpper
  fullName: System.MemoryExtensions.ToUpper
- uid: System.MemoryExtensions.ToUpperInvariant*
  commentId: Overload:System.MemoryExtensions.ToUpperInvariant
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_ToUpperInvariant_System_ReadOnlySpan_System_Char__System_Span_System_Char__
  name: ToUpperInvariant
  nameWithType: MemoryExtensions.ToUpperInvariant
  fullName: System.MemoryExtensions.ToUpperInvariant
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ReadOnlyMemory{System.Char}
  commentId: T:System.ReadOnlyMemory{System.Char}
  parent: System
  definition: System.ReadOnlyMemory`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<char>
  nameWithType: ReadOnlyMemory<char>
  fullName: System.ReadOnlyMemory<char>
  nameWithType.vb: ReadOnlyMemory(Of Char)
  fullName.vb: System.ReadOnlyMemory(Of Char)
  name.vb: ReadOnlyMemory(Of Char)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.ReadOnlyMemory`1
  commentId: T:System.ReadOnlyMemory`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
