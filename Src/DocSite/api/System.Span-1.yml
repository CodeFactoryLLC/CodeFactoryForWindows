### YamlMime:ManagedReference
items:
- uid: System.Span`1
  commentId: T:System.Span`1
  id: Span`1
  parent: System
  children:
  - System.Span`1.#ctor(System.Void*,System.Int32)
  - System.Span`1.#ctor(`0[])
  - System.Span`1.#ctor(`0[],System.Int32,System.Int32)
  - System.Span`1.Clear
  - System.Span`1.CopyTo(System.Span{`0})
  - System.Span`1.Empty
  - System.Span`1.Fill(`0)
  - System.Span`1.GetEnumerator
  - System.Span`1.IsEmpty
  - System.Span`1.Item(System.Int32)
  - System.Span`1.Length
  - System.Span`1.Slice(System.Int32)
  - System.Span`1.Slice(System.Int32,System.Int32)
  - System.Span`1.ToArray
  - System.Span`1.ToString
  - System.Span`1.TryCopyTo(System.Span{`0})
  - System.Span`1.op_Equality(System.Span{`0},System.Span{`0})
  - System.Span`1.op_Implicit(System.ArraySegment{`0})~System.Span{`0}
  - System.Span`1.op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}
  - System.Span`1.op_Implicit(`0[])~System.Span{`0}
  - System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})
  langs:
  - csharp
  - vb
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  type: Struct
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public readonly ref struct Span<T>
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Structure Span(Of T)
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - System.Span`1.System.MemoryExtensions.BinarySearch``1(System.IComparable{{T}})
  - System.Span`1.System.MemoryExtensions.BinarySearch``2({TComparable})
  - System.Span`1.System.MemoryExtensions.BinarySearch``2({T},{TComparer})
  - System.Span`1.System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{{T}})
  - System.Span`1.System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{{T}},System.Int32@)
  - System.Span`1.System.MemoryExtensions.Reverse``1
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
- uid: System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})
  commentId: M:System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})
  id: op_Inequality(System.Span{`0},System.Span{`0})
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: operator !=(Span<T>, Span<T>)
  nameWithType: Span<T>.operator !=(Span<T>, Span<T>)
  fullName: System.Span<T>.operator !=(System.Span<T>, System.Span<T>)
  type: Operator
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public static bool operator !=(Span<T> left, Span<T> right)
    parameters:
    - id: left
      type: System.Span`1
      description: ''
    - id: right
      type: System.Span`1
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator <>(left As Span(Of T), right As Span(Of T)) As Boolean
  overload: System.Span`1.op_Inequality*
  nameWithType.vb: Span(Of T).<>(Span(Of T), Span(Of T))
  fullName.vb: System.Span(Of T).<>(System.Span(Of T), System.Span(Of T))
  name.vb: <>(Span(Of T), Span(Of T))
- uid: System.Span`1.op_Implicit(`0[])~System.Span{`0}
  commentId: M:System.Span`1.op_Implicit(`0[])~System.Span{`0}
  id: op_Implicit(`0[])~System.Span{`0}
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: implicit operator Span<T>(T[])
  nameWithType: Span<T>.implicit operator Span<T>(T[])
  fullName: System.Span<T>.implicit operator System.Span<T>(T[])
  type: Operator
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static implicit operator Span<T>(T[] array)
    parameters:
    - id: array
      type: '{T}[]'
    return:
      type: System.Span`1
    content.vb: Public Shared Widening Operator CType(array As T()) As Span(Of T)
  overload: System.Span`1.op_Implicit*
  nameWithType.vb: Span(Of T).CType(T())
  fullName.vb: System.Span(Of T).CType(T())
  name.vb: CType(T())
- uid: System.Span`1.op_Implicit(System.ArraySegment{`0})~System.Span{`0}
  commentId: M:System.Span`1.op_Implicit(System.ArraySegment{`0})~System.Span{`0}
  id: op_Implicit(System.ArraySegment{`0})~System.Span{`0}
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: implicit operator Span<T>(ArraySegment<T>)
  nameWithType: Span<T>.implicit operator Span<T>(ArraySegment<T>)
  fullName: System.Span<T>.implicit operator System.Span<T>(System.ArraySegment<T>)
  type: Operator
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static implicit operator Span<T>(ArraySegment<T> segment)
    parameters:
    - id: segment
      type: System.ArraySegment{{T}}
    return:
      type: System.Span`1
    content.vb: Public Shared Widening Operator CType(segment As ArraySegment(Of T)) As Span(Of T)
  overload: System.Span`1.op_Implicit*
  nameWithType.vb: Span(Of T).CType(ArraySegment(Of T))
  fullName.vb: System.Span(Of T).CType(System.ArraySegment(Of T))
  name.vb: CType(ArraySegment(Of T))
- uid: System.Span`1.GetEnumerator
  commentId: M:System.Span`1.GetEnumerator
  id: GetEnumerator
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Span<T>.GetEnumerator()
  fullName: System.Span<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public Span<T>.Enumerator GetEnumerator()
    return:
      type: System.Span`1.Enumerator
    content.vb: Public Function GetEnumerator() As Span(Of T).Enumerator
  overload: System.Span`1.GetEnumerator*
  nameWithType.vb: Span(Of T).GetEnumerator()
  fullName.vb: System.Span(Of T).GetEnumerator()
- uid: System.Span`1.#ctor(`0[])
  commentId: M:System.Span`1.#ctor(`0[])
  id: '#ctor(`0[])'
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: Span(T[])
  nameWithType: Span<T>.Span(T[])
  fullName: System.Span<T>.Span(T[])
  type: Constructor
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public Span(T[] array)
    parameters:
    - id: array
      type: '{T}[]'
      description: ''
    content.vb: Public Sub New(array As T())
  overload: System.Span`1.#ctor*
  nameWithType.vb: Span(Of T).New(T())
  fullName.vb: System.Span(Of T).New(T())
  name.vb: New(T())
- uid: System.Span`1.#ctor(`0[],System.Int32,System.Int32)
  commentId: M:System.Span`1.#ctor(`0[],System.Int32,System.Int32)
  id: '#ctor(`0[],System.Int32,System.Int32)'
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: Span(T[], int, int)
  nameWithType: Span<T>.Span(T[], int, int)
  fullName: System.Span<T>.Span(T[], int, int)
  type: Constructor
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public Span(T[] array, int start, int length)
    parameters:
    - id: array
      type: '{T}[]'
      description: ''
    - id: start
      type: System.Int32
      description: ''
    - id: length
      type: System.Int32
      description: ''
    content.vb: Public Sub New(array As T(), start As Integer, length As Integer)
  overload: System.Span`1.#ctor*
  nameWithType.vb: Span(Of T).New(T(), Integer, Integer)
  fullName.vb: System.Span(Of T).New(T(), Integer, Integer)
  name.vb: New(T(), Integer, Integer)
- uid: System.Span`1.#ctor(System.Void*,System.Int32)
  commentId: M:System.Span`1.#ctor(System.Void*,System.Int32)
  id: '#ctor(System.Void*,System.Int32)'
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: Span(void*, int)
  nameWithType: Span<T>.Span(void*, int)
  fullName: System.Span<T>.Span(void*, int)
  type: Constructor
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public Span(void* pointer, int length)
    parameters:
    - id: pointer
      type: System.Void*
      description: ''
    - id: length
      type: System.Int32
      description: ''
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(pointer As Void*, length As Integer)
  overload: System.Span`1.#ctor*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Span(Of T).New(Void*, Integer)
  fullName.vb: System.Span(Of T).New(Void*, Integer)
  name.vb: New(Void*, Integer)
- uid: System.Span`1.Clear
  commentId: M:System.Span`1.Clear
  id: Clear
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Span<T>.Clear()
  fullName: System.Span<T>.Clear()
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: System.Span`1.Clear*
  nameWithType.vb: Span(Of T).Clear()
  fullName.vb: System.Span(Of T).Clear()
- uid: System.Span`1.Fill(`0)
  commentId: M:System.Span`1.Fill(`0)
  id: Fill(`0)
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: Fill(T)
  nameWithType: Span<T>.Fill(T)
  fullName: System.Span<T>.Fill(T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public void Fill(T value)
    parameters:
    - id: value
      type: '{T}'
      description: ''
    content.vb: Public Sub Fill(value As T)
  overload: System.Span`1.Fill*
  nameWithType.vb: Span(Of T).Fill(T)
  fullName.vb: System.Span(Of T).Fill(T)
- uid: System.Span`1.CopyTo(System.Span{`0})
  commentId: M:System.Span`1.CopyTo(System.Span{`0})
  id: CopyTo(System.Span{`0})
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: CopyTo(Span<T>)
  nameWithType: Span<T>.CopyTo(Span<T>)
  fullName: System.Span<T>.CopyTo(System.Span<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public void CopyTo(Span<T> destination)
    parameters:
    - id: destination
      type: System.Span`1
      description: ''
    content.vb: Public Sub CopyTo(destination As Span(Of T))
  overload: System.Span`1.CopyTo*
  nameWithType.vb: Span(Of T).CopyTo(Span(Of T))
  fullName.vb: System.Span(Of T).CopyTo(System.Span(Of T))
  name.vb: CopyTo(Span(Of T))
- uid: System.Span`1.TryCopyTo(System.Span{`0})
  commentId: M:System.Span`1.TryCopyTo(System.Span{`0})
  id: TryCopyTo(System.Span{`0})
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: TryCopyTo(Span<T>)
  nameWithType: Span<T>.TryCopyTo(Span<T>)
  fullName: System.Span<T>.TryCopyTo(System.Span<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public bool TryCopyTo(Span<T> destination)
    parameters:
    - id: destination
      type: System.Span`1
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TryCopyTo(destination As Span(Of T)) As Boolean
  overload: System.Span`1.TryCopyTo*
  nameWithType.vb: Span(Of T).TryCopyTo(Span(Of T))
  fullName.vb: System.Span(Of T).TryCopyTo(System.Span(Of T))
  name.vb: TryCopyTo(Span(Of T))
- uid: System.Span`1.op_Equality(System.Span{`0},System.Span{`0})
  commentId: M:System.Span`1.op_Equality(System.Span{`0},System.Span{`0})
  id: op_Equality(System.Span{`0},System.Span{`0})
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: operator ==(Span<T>, Span<T>)
  nameWithType: Span<T>.operator ==(Span<T>, Span<T>)
  fullName: System.Span<T>.operator ==(System.Span<T>, System.Span<T>)
  type: Operator
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public static bool operator ==(Span<T> left, Span<T> right)
    parameters:
    - id: left
      type: System.Span`1
      description: ''
    - id: right
      type: System.Span`1
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator =(left As Span(Of T), right As Span(Of T)) As Boolean
  overload: System.Span`1.op_Equality*
  nameWithType.vb: Span(Of T).=(Span(Of T), Span(Of T))
  fullName.vb: System.Span(Of T).=(System.Span(Of T), System.Span(Of T))
  name.vb: =(Span(Of T), Span(Of T))
- uid: System.Span`1.op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}
  commentId: M:System.Span`1.op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}
  id: op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: implicit operator ReadOnlySpan<T>(Span<T>)
  nameWithType: Span<T>.implicit operator ReadOnlySpan<T>(Span<T>)
  fullName: System.Span<T>.implicit operator System.ReadOnlySpan<T>(System.Span<T>)
  type: Operator
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static implicit operator ReadOnlySpan<T>(Span<T> span)
    parameters:
    - id: span
      type: System.Span`1
    return:
      type: System.ReadOnlySpan{{T}}
    content.vb: Public Shared Widening Operator CType(span As Span(Of T)) As ReadOnlySpan(Of T)
  overload: System.Span`1.op_Implicit*
  nameWithType.vb: Span(Of T).CType(Span(Of T))
  fullName.vb: System.Span(Of T).CType(System.Span(Of T))
  name.vb: CType(Span(Of T))
- uid: System.Span`1.ToString
  commentId: M:System.Span`1.ToString
  id: ToString
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Span<T>.ToString()
  fullName: System.Span<T>.ToString()
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: System.Span`1.ToString*
  nameWithType.vb: Span(Of T).ToString()
  fullName.vb: System.Span(Of T).ToString()
- uid: System.Span`1.Slice(System.Int32)
  commentId: M:System.Span`1.Slice(System.Int32)
  id: Slice(System.Int32)
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: Slice(int)
  nameWithType: Span<T>.Slice(int)
  fullName: System.Span<T>.Slice(int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public Span<T> Slice(int start)
    parameters:
    - id: start
      type: System.Int32
      description: ''
    return:
      type: System.Span`1
      description: ''
    content.vb: Public Function Slice(start As Integer) As Span(Of T)
  overload: System.Span`1.Slice*
  nameWithType.vb: Span(Of T).Slice(Integer)
  fullName.vb: System.Span(Of T).Slice(Integer)
  name.vb: Slice(Integer)
- uid: System.Span`1.Slice(System.Int32,System.Int32)
  commentId: M:System.Span`1.Slice(System.Int32,System.Int32)
  id: Slice(System.Int32,System.Int32)
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: Slice(int, int)
  nameWithType: Span<T>.Slice(int, int)
  fullName: System.Span<T>.Slice(int, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public Span<T> Slice(int start, int length)
    parameters:
    - id: start
      type: System.Int32
      description: ''
    - id: length
      type: System.Int32
      description: ''
    return:
      type: System.Span`1
      description: ''
    content.vb: Public Function Slice(start As Integer, length As Integer) As Span(Of T)
  overload: System.Span`1.Slice*
  nameWithType.vb: Span(Of T).Slice(Integer, Integer)
  fullName.vb: System.Span(Of T).Slice(Integer, Integer)
  name.vb: Slice(Integer, Integer)
- uid: System.Span`1.ToArray
  commentId: M:System.Span`1.ToArray
  id: ToArray
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: Span<T>.ToArray()
  fullName: System.Span<T>.ToArray()
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public T[] ToArray()
    return:
      type: '{T}[]'
      description: ''
    content.vb: Public Function ToArray() As T()
  overload: System.Span`1.ToArray*
  nameWithType.vb: Span(Of T).ToArray()
  fullName.vb: System.Span(Of T).ToArray()
- uid: System.Span`1.Length
  commentId: P:System.Span`1.Length
  id: Length
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Span<T>.Length
  fullName: System.Span<T>.Length
  type: Property
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
      description: ''
    content.vb: Public ReadOnly Property Length As Integer
  overload: System.Span`1.Length*
  nameWithType.vb: Span(Of T).Length
  fullName.vb: System.Span(Of T).Length
- uid: System.Span`1.IsEmpty
  commentId: P:System.Span`1.IsEmpty
  id: IsEmpty
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: Span<T>.IsEmpty
  fullName: System.Span<T>.IsEmpty
  type: Property
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: ''
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: System.Span`1.IsEmpty*
  nameWithType.vb: Span(Of T).IsEmpty
  fullName.vb: System.Span(Of T).IsEmpty
- uid: System.Span`1.Empty
  commentId: P:System.Span`1.Empty
  id: Empty
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: Span<T>.Empty
  fullName: System.Span<T>.Empty
  type: Property
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public static Span<T> Empty { get; }
    parameters: []
    return:
      type: System.Span`1
      description: ''
    content.vb: Public Shared ReadOnly Property Empty As Span(Of T)
  overload: System.Span`1.Empty*
  nameWithType.vb: Span(Of T).Empty
  fullName.vb: System.Span(Of T).Empty
- uid: System.Span`1.Item(System.Int32)
  commentId: P:System.Span`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Span`1
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: Span<T>.this[int]
  fullName: System.Span<T>.this[int]
  type: Property
  assemblies:
  - System.Memory
  namespace: System
  example: []
  syntax:
    content: public ref T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public ReadOnly Default ByRef Property this[](index As Integer) As T
  overload: System.Span`1.Item*
  nameWithType.vb: Span(Of T).this[](Integer)
  fullName.vb: System.Span(Of T).this[](Integer)
  name.vb: this[](Integer)
references:
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Span`1.System.MemoryExtensions.BinarySearch``1(System.IComparable{{T}})
  commentId: M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})
  parent: System.MemoryExtensions
  definition: System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})
  href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__1_System_Span___0__System_IComparable___0__
  name: BinarySearch<T>(Span<T>, IComparable<T>)
  nameWithType: MemoryExtensions.BinarySearch<T>(Span<T>, IComparable<T>)
  fullName: System.MemoryExtensions.BinarySearch<T>(System.Span<T>, System.IComparable<T>)
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T)(Span(Of T), IComparable(Of T))
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T)(System.Span(Of T), System.IComparable(Of T))
  name.vb: BinarySearch(Of T)(Span(Of T), IComparable(Of T))
  spec.csharp:
  - uid: System.MemoryExtensions.BinarySearch``1(System.Span{`0},System.IComparable{`0})
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__1_System_Span___0__System_IComparable___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.BinarySearch``1(System.Span{`0},System.IComparable{`0})
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__1_System_Span___0__System_IComparable___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Span`1.System.MemoryExtensions.BinarySearch``2({TComparable})
  commentId: M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)
  parent: System.MemoryExtensions
  definition: System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)
  href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____1_
  name: BinarySearch<T, TComparable>(Span<T>, TComparable)
  nameWithType: MemoryExtensions.BinarySearch<T, TComparable>(Span<T>, TComparable)
  fullName: System.MemoryExtensions.BinarySearch<T, TComparable>(System.Span<T>, TComparable)
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T, TComparable)(Span(Of T), TComparable)
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T, TComparable)(System.Span(Of T), TComparable)
  name.vb: BinarySearch(Of T, TComparable)(Span(Of T), TComparable)
  spec.csharp:
  - uid: System.MemoryExtensions.BinarySearch``2(System.Span{`0},``1)
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____1_
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TComparable
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: TComparable
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.BinarySearch``2(System.Span{`0},``1)
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____1_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TComparable
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: TComparable
  - name: )
- uid: System.Span`1.System.MemoryExtensions.BinarySearch``2({T},{TComparer})
  commentId: M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)
  parent: System.MemoryExtensions
  definition: System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)
  href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____0___1_
  name: BinarySearch<T, TComparer>(Span<T>, T, TComparer)
  nameWithType: MemoryExtensions.BinarySearch<T, TComparer>(Span<T>, T, TComparer)
  fullName: System.MemoryExtensions.BinarySearch<T, TComparer>(System.Span<T>, T, TComparer)
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T, TComparer)(Span(Of T), T, TComparer)
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T, TComparer)(System.Span(Of T), T, TComparer)
  name.vb: BinarySearch(Of T, TComparer)(Span(Of T), T, TComparer)
  spec.csharp:
  - uid: System.MemoryExtensions.BinarySearch``2(System.Span{`0},`0,``1)
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____0___1_
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TComparer
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TComparer
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.BinarySearch``2(System.Span{`0},`0,``1)
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____0___1_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TComparer
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TComparer
  - name: )
- uid: System.Span`1.System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{{T}})
  commentId: M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: System.MemoryExtensions
  definition: System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})
  href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__
  name: Overlaps<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.Overlaps<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.Overlaps<T>(System.Span<T>, System.ReadOnlySpan<T>)
  nameWithType.vb: MemoryExtensions.Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.Overlaps(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T))
  spec.csharp:
  - uid: System.MemoryExtensions.Overlaps``1(System.Span{`0},System.ReadOnlySpan{`0})
    name: Overlaps
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.Overlaps``1(System.Span{`0},System.ReadOnlySpan{`0})
    name: Overlaps
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Span`1.System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{{T}},System.Int32@)
  commentId: M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)
  parent: System.MemoryExtensions
  definition: System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)
  href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__System_Int32__
  name: Overlaps<T>(Span<T>, ReadOnlySpan<T>, out int)
  nameWithType: MemoryExtensions.Overlaps<T>(Span<T>, ReadOnlySpan<T>, out int)
  fullName: System.MemoryExtensions.Overlaps<T>(System.Span<T>, System.ReadOnlySpan<T>, out int)
  nameWithType.vb: MemoryExtensions.Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T), Integer)
  fullName.vb: System.MemoryExtensions.Overlaps(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T), Integer)
  name.vb: Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T), Integer)
  spec.csharp:
  - uid: System.MemoryExtensions.Overlaps``1(System.Span{`0},System.ReadOnlySpan{`0},System.Int32@)
    name: Overlaps
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__System_Int32__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.Overlaps``1(System.Span{`0},System.ReadOnlySpan{`0},System.Int32@)
    name: Overlaps
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__System_Int32__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Span`1.System.MemoryExtensions.Reverse``1
  commentId: M:System.MemoryExtensions.Reverse``1(System.Span{``0})
  parent: System.MemoryExtensions
  definition: System.MemoryExtensions.Reverse``1(System.Span{``0})
  href: System.MemoryExtensions.html#System_MemoryExtensions_Reverse__1_System_Span___0__
  name: Reverse<T>(Span<T>)
  nameWithType: MemoryExtensions.Reverse<T>(Span<T>)
  fullName: System.MemoryExtensions.Reverse<T>(System.Span<T>)
  nameWithType.vb: MemoryExtensions.Reverse(Of T)(Span(Of T))
  fullName.vb: System.MemoryExtensions.Reverse(Of T)(System.Span(Of T))
  name.vb: Reverse(Of T)(Span(Of T))
  spec.csharp:
  - uid: System.MemoryExtensions.Reverse``1(System.Span{`0})
    name: Reverse
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Reverse__1_System_Span___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.Reverse``1(System.Span{`0})
    name: Reverse
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Reverse__1_System_Span___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})
  commentId: M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__1_System_Span___0__System_IComparable___0__
  name: BinarySearch<T>(Span<T>, IComparable<T>)
  nameWithType: MemoryExtensions.BinarySearch<T>(Span<T>, IComparable<T>)
  fullName: System.MemoryExtensions.BinarySearch<T>(System.Span<T>, System.IComparable<T>)
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T)(Span(Of T), IComparable(Of T))
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T)(System.Span(Of T), System.IComparable(Of T))
  name.vb: BinarySearch(Of T)(Span(Of T), IComparable(Of T))
  spec.csharp:
  - uid: System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__1_System_Span___0__System_IComparable___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__1_System_Span___0__System_IComparable___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.MemoryExtensions
  commentId: T:System.MemoryExtensions
  parent: System
  isExternal: true
  href: System.MemoryExtensions.html
  name: MemoryExtensions
  nameWithType: MemoryExtensions
  fullName: System.MemoryExtensions
- uid: System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)
  commentId: M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____1_
  name: BinarySearch<T, TComparable>(Span<T>, TComparable)
  nameWithType: MemoryExtensions.BinarySearch<T, TComparable>(Span<T>, TComparable)
  fullName: System.MemoryExtensions.BinarySearch<T, TComparable>(System.Span<T>, TComparable)
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T, TComparable)(Span(Of T), TComparable)
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T, TComparable)(System.Span(Of T), TComparable)
  name.vb: BinarySearch(Of T, TComparable)(Span(Of T), TComparable)
  spec.csharp:
  - uid: System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____1_
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TComparable
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: TComparable
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____1_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TComparable
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: TComparable
  - name: )
- uid: System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)
  commentId: M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____0___1_
  name: BinarySearch<T, TComparer>(Span<T>, T, TComparer)
  nameWithType: MemoryExtensions.BinarySearch<T, TComparer>(Span<T>, T, TComparer)
  fullName: System.MemoryExtensions.BinarySearch<T, TComparer>(System.Span<T>, T, TComparer)
  nameWithType.vb: MemoryExtensions.BinarySearch(Of T, TComparer)(Span(Of T), T, TComparer)
  fullName.vb: System.MemoryExtensions.BinarySearch(Of T, TComparer)(System.Span(Of T), T, TComparer)
  name.vb: BinarySearch(Of T, TComparer)(Span(Of T), T, TComparer)
  spec.csharp:
  - uid: System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____0___1_
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TComparer
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TComparer
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)
    name: BinarySearch
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_BinarySearch__2_System_Span___0____0___1_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TComparer
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TComparer
  - name: )
- uid: System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__
  name: Overlaps<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.Overlaps<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.Overlaps<T>(System.Span<T>, System.ReadOnlySpan<T>)
  nameWithType.vb: MemoryExtensions.Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.Overlaps(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T))
  spec.csharp:
  - uid: System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})
    name: Overlaps
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})
    name: Overlaps
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)
  commentId: M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__System_Int32__
  name: Overlaps<T>(Span<T>, ReadOnlySpan<T>, out int)
  nameWithType: MemoryExtensions.Overlaps<T>(Span<T>, ReadOnlySpan<T>, out int)
  fullName: System.MemoryExtensions.Overlaps<T>(System.Span<T>, System.ReadOnlySpan<T>, out int)
  nameWithType.vb: MemoryExtensions.Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T), Integer)
  fullName.vb: System.MemoryExtensions.Overlaps(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T), Integer)
  name.vb: Overlaps(Of T)(Span(Of T), ReadOnlySpan(Of T), Integer)
  spec.csharp:
  - uid: System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)
    name: Overlaps
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__System_Int32__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)
    name: Overlaps
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Overlaps__1_System_Span___0__System_ReadOnlySpan___0__System_Int32__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.MemoryExtensions.Reverse``1(System.Span{``0})
  commentId: M:System.MemoryExtensions.Reverse``1(System.Span{``0})
  isExternal: true
  href: System.MemoryExtensions.html#System_MemoryExtensions_Reverse__1_System_Span___0__
  name: Reverse<T>(Span<T>)
  nameWithType: MemoryExtensions.Reverse<T>(Span<T>)
  fullName: System.MemoryExtensions.Reverse<T>(System.Span<T>)
  nameWithType.vb: MemoryExtensions.Reverse(Of T)(Span(Of T))
  fullName.vb: System.MemoryExtensions.Reverse(Of T)(System.Span(Of T))
  name.vb: Reverse(Of T)(Span(Of T))
  spec.csharp:
  - uid: System.MemoryExtensions.Reverse``1(System.Span{``0})
    name: Reverse
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Reverse__1_System_Span___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.Reverse``1(System.Span{``0})
    name: Reverse
    isExternal: true
    href: System.MemoryExtensions.html#System_MemoryExtensions_Reverse__1_System_Span___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Span`1.op_Inequality*
  commentId: Overload:System.Span`1.op_Inequality
  isExternal: true
  href: System.Span-1.html#System_Span_1_op_Inequality_System_Span__0__System_Span__0__
  name: operator !=
  nameWithType: Span<T>.operator !=
  fullName: System.Span<T>.operator !=
  nameWithType.vb: Span(Of T).<>
  fullName.vb: System.Span(Of T).<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Span`1.op_Inequality*
    name: '!='
    isExternal: true
    href: System.Span-1.html#System_Span_1_op_Inequality_System_Span__0__System_Span__0__
- uid: System.Span`1
  commentId: T:System.Span`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Span`1.op_Implicit*
  commentId: Overload:System.Span`1.op_Implicit
  name: implicit operator
  nameWithType: Span<T>.implicit operator
  fullName: System.Span<T>.implicit operator
  nameWithType.vb: Span(Of T).CType
  fullName.vb: System.Span(Of T).CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.ArraySegment{{T}}
  commentId: T:System.ArraySegment{`0}
  parent: System
  definition: System.ArraySegment`1
  href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Span`1.GetEnumerator*
  commentId: Overload:System.Span`1.GetEnumerator
  isExternal: true
  href: System.Span-1.html#System_Span_1_GetEnumerator
  name: GetEnumerator
  nameWithType: Span<T>.GetEnumerator
  fullName: System.Span<T>.GetEnumerator
  nameWithType.vb: Span(Of T).GetEnumerator
  fullName.vb: System.Span(Of T).GetEnumerator
- uid: System.Span`1.Enumerator
  commentId: T:System.Span`1.Enumerator
  parent: System
  isExternal: true
  href: System.Span-1.html
  name: Span<T>.Enumerator
  nameWithType: Span<T>.Enumerator
  fullName: System.Span<T>.Enumerator
  nameWithType.vb: Span(Of T).Enumerator
  fullName.vb: System.Span(Of T).Enumerator
  name.vb: Span(Of T).Enumerator
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: System.Span`1.Enumerator
    name: Enumerator
    isExternal: true
    href: System.Span-1.Enumerator.html
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: System.Span`1.Enumerator
    name: Enumerator
    isExternal: true
    href: System.Span-1.Enumerator.html
- uid: System.Span`1.#ctor*
  commentId: Overload:System.Span`1.#ctor
  isExternal: true
  href: System.Span-1.html#System_Span_1__ctor__0___
  name: Span
  nameWithType: Span<T>.Span
  fullName: System.Span<T>.Span
  nameWithType.vb: Span(Of T).New
  fullName.vb: System.Span(Of T).New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Void*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.void
  name: void*
  nameWithType: void*
  fullName: void*
  nameWithType.vb: Void*
  fullName.vb: Void*
  name.vb: Void*
  spec.csharp:
  - uid: System.Void
    name: void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
- uid: System.Span`1.Clear*
  commentId: Overload:System.Span`1.Clear
  isExternal: true
  href: System.Span-1.html#System_Span_1_Clear
  name: Clear
  nameWithType: Span<T>.Clear
  fullName: System.Span<T>.Clear
  nameWithType.vb: Span(Of T).Clear
  fullName.vb: System.Span(Of T).Clear
- uid: System.Span`1.Fill*
  commentId: Overload:System.Span`1.Fill
  isExternal: true
  href: System.Span-1.html#System_Span_1_Fill__0_
  name: Fill
  nameWithType: Span<T>.Fill
  fullName: System.Span<T>.Fill
  nameWithType.vb: Span(Of T).Fill
  fullName.vb: System.Span(Of T).Fill
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Span`1.CopyTo*
  commentId: Overload:System.Span`1.CopyTo
  isExternal: true
  href: System.Span-1.html#System_Span_1_CopyTo_System_Span__0__
  name: CopyTo
  nameWithType: Span<T>.CopyTo
  fullName: System.Span<T>.CopyTo
  nameWithType.vb: Span(Of T).CopyTo
  fullName.vb: System.Span(Of T).CopyTo
- uid: System.Span`1.TryCopyTo*
  commentId: Overload:System.Span`1.TryCopyTo
  isExternal: true
  href: System.Span-1.html#System_Span_1_TryCopyTo_System_Span__0__
  name: TryCopyTo
  nameWithType: Span<T>.TryCopyTo
  fullName: System.Span<T>.TryCopyTo
  nameWithType.vb: Span(Of T).TryCopyTo
  fullName.vb: System.Span(Of T).TryCopyTo
- uid: System.Span`1.op_Equality*
  commentId: Overload:System.Span`1.op_Equality
  isExternal: true
  href: System.Span-1.html#System_Span_1_op_Equality_System_Span__0__System_Span__0__
  name: operator ==
  nameWithType: Span<T>.operator ==
  fullName: System.Span<T>.operator ==
  nameWithType.vb: Span(Of T).=
  fullName.vb: System.Span(Of T).=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Span`1.op_Equality*
    name: ==
    isExternal: true
    href: System.Span-1.html#System_Span_1_op_Equality_System_Span__0__System_Span__0__
- uid: System.ReadOnlySpan{{T}}
  commentId: T:System.ReadOnlySpan{`0}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Span`1.ToString*
  commentId: Overload:System.Span`1.ToString
  isExternal: true
  href: System.Span-1.html#System_Span_1_ToString
  name: ToString
  nameWithType: Span<T>.ToString
  fullName: System.Span<T>.ToString
  nameWithType.vb: Span(Of T).ToString
  fullName.vb: System.Span(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Span`1.Slice*
  commentId: Overload:System.Span`1.Slice
  isExternal: true
  href: System.Span-1.html#System_Span_1_Slice_System_Int32_
  name: Slice
  nameWithType: Span<T>.Slice
  fullName: System.Span<T>.Slice
  nameWithType.vb: Span(Of T).Slice
  fullName.vb: System.Span(Of T).Slice
- uid: System.Span`1.ToArray*
  commentId: Overload:System.Span`1.ToArray
  isExternal: true
  href: System.Span-1.html#System_Span_1_ToArray
  name: ToArray
  nameWithType: Span<T>.ToArray
  fullName: System.Span<T>.ToArray
  nameWithType.vb: Span(Of T).ToArray
  fullName.vb: System.Span(Of T).ToArray
- uid: System.Span`1.Length*
  commentId: Overload:System.Span`1.Length
  isExternal: true
  href: System.Span-1.html#System_Span_1_Length
  name: Length
  nameWithType: Span<T>.Length
  fullName: System.Span<T>.Length
  nameWithType.vb: Span(Of T).Length
  fullName.vb: System.Span(Of T).Length
- uid: System.Span`1.IsEmpty*
  commentId: Overload:System.Span`1.IsEmpty
  isExternal: true
  href: System.Span-1.html#System_Span_1_IsEmpty
  name: IsEmpty
  nameWithType: Span<T>.IsEmpty
  fullName: System.Span<T>.IsEmpty
  nameWithType.vb: Span(Of T).IsEmpty
  fullName.vb: System.Span(Of T).IsEmpty
- uid: System.Span`1.Empty*
  commentId: Overload:System.Span`1.Empty
  isExternal: true
  href: System.Span-1.html#System_Span_1_Empty
  name: Empty
  nameWithType: Span<T>.Empty
  fullName: System.Span<T>.Empty
  nameWithType.vb: Span(Of T).Empty
  fullName.vb: System.Span(Of T).Empty
- uid: System.Span`1.Item*
  commentId: Overload:System.Span`1.Item
  isExternal: true
  href: System.Span-1.html#System_Span_1_Item_System_Int32_
  name: this
  nameWithType: Span<T>.this
  fullName: System.Span<T>.this
  nameWithType.vb: Span(Of T).this[]
  fullName.vb: System.Span(Of T).this[]
  name.vb: this[]
