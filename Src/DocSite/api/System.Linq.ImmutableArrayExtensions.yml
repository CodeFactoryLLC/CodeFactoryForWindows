### YamlMime:ManagedReference
items:
- uid: System.Linq.ImmutableArrayExtensions
  commentId: T:System.Linq.ImmutableArrayExtensions
  id: ImmutableArrayExtensions
  parent: System.Linq
  children:
  - System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  - System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  - System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  - System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  - System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  langs:
  - csharp
  - vb
  name: ImmutableArrayExtensions
  nameWithType: ImmutableArrayExtensions
  fullName: System.Linq.ImmutableArrayExtensions
  type: Class
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: >-
    LINQ extension method overrides that offer greater efficiency for <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> than the standard LINQ methods  

     NuGet package: System.Collections.Immutable (about immutable collections and how to install)
  example: []
  syntax:
    content: public static class ImmutableArrayExtensions
    content.vb: Public Module ImmutableArrayExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  id: Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Select<T, TResult>(ImmutableArray<T>, Func<T, TResult>)
  nameWithType: ImmutableArrayExtensions.Select<T, TResult>(ImmutableArray<T>, Func<T, TResult>)
  fullName: System.Linq.ImmutableArrayExtensions.Select<T, TResult>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TResult>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Projects each element of a sequence into a new form.
  example: []
  syntax:
    content: public static IEnumerable<TResult> Select<T, TResult>(this ImmutableArray<T> immutableArray, Func<T, TResult> selector)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The immutable array to select items from.
    - id: selector
      type: System.Func{{T},{TResult}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    - id: TResult
      description: The type of the result element.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking the transform function on each element of source.
    content.vb: Public Shared Function [Select](Of T, TResult)(immutableArray As ImmutableArray(Of T), selector As Func(Of T, TResult)) As IEnumerable(Of TResult)
  overload: System.Linq.ImmutableArrayExtensions.Select*
  nameWithType.vb: ImmutableArrayExtensions.Select(Of T, TResult)(ImmutableArray(Of T), Func(Of T, TResult))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Select(Of T, TResult)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, TResult))
  name.vb: Select(Of T, TResult)(ImmutableArray(Of T), Func(Of T, TResult))
- uid: System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(ImmutableArray<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  nameWithType: ImmutableArrayExtensions.SelectMany<TSource, TCollection, TResult>(ImmutableArray<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.ImmutableArrayExtensions.SelectMany<TSource, TCollection, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.
  example: []
  syntax:
    content: public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this ImmutableArray<TSource> immutableArray, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{TSource}}
      description: The immutable array.
    - id: collectionSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
      description: A transform function to apply to each element of the input sequence.
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
      description: A transform function to apply to each element of the intermediate sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of <code class="paramref">immutableArray</code>.
    - id: TCollection
      description: The type of the intermediate elements collected by <code class="paramref">collectionSelector</code>.
    - id: TResult
      description: The type of the elements of the resulting sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose elements are the result             of invoking the one-to-many transform function <code class="paramref">collectionSelector</code> on each             element of <code class="paramref">immutableArray</code> and then mapping each of those sequence elements and their             corresponding source element to a result element.
    content.vb: Public Shared Function SelectMany(Of TSource, TCollection, TResult)(immutableArray As ImmutableArray(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)
  overload: System.Linq.ImmutableArrayExtensions.SelectMany*
  nameWithType.vb: ImmutableArrayExtensions.SelectMany(Of TSource, TCollection, TResult)(ImmutableArray(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  fullName.vb: System.Linq.ImmutableArrayExtensions.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Immutable.ImmutableArray(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(ImmutableArray(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Where<T>(ImmutableArray<T>, Func<T, bool>)
  nameWithType: ImmutableArrayExtensions.Where<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.Where<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Filters a sequence of values based on a predicate.
  example: []
  syntax:
    content: public static IEnumerable<T> Where<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to filter.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The condition to use for filtering the array content.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Returns <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> that contains elements that meet the condition.
    content.vb: Public Shared Function Where(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As IEnumerable(Of T)
  overload: System.Linq.ImmutableArrayExtensions.Where*
  nameWithType.vb: ImmutableArrayExtensions.Where(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Where(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, Boolean))
  name.vb: Where(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
  id: Any``1(System.Collections.Immutable.ImmutableArray{``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Any<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.Any<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.Any<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Gets a value indicating whether the array contains any elements.
  example: []
  syntax:
    content: public static bool Any<T>(this ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to check for elements.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the array contains an elements; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function Any(Of T)(immutableArray As ImmutableArray(Of T)) As Boolean
  overload: System.Linq.ImmutableArrayExtensions.Any*
  nameWithType.vb: ImmutableArrayExtensions.Any(Of T)(ImmutableArray(Of T))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Any(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  name.vb: Any(Of T)(ImmutableArray(Of T))
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Any<T>(ImmutableArray<T>, Func<T, bool>)
  nameWithType: ImmutableArrayExtensions.Any<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.Any<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Gets a value indicating whether the array contains any elements that match a specified condition.
  example: []
  syntax:
    content: public static bool Any<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to check for elements.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The delegate that defines the condition to match to an element.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if an element matches the specified condition; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function Any(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As Boolean
  overload: System.Linq.ImmutableArrayExtensions.Any*
  nameWithType.vb: ImmutableArrayExtensions.Any(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Any(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, Boolean))
  name.vb: Any(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
- uid: System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: All<T>(ImmutableArray<T>, Func<T, bool>)
  nameWithType: ImmutableArrayExtensions.All<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.All<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Gets a value indicating whether all elements in this array match a given condition.
  example: []
  syntax:
    content: public static bool All<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to check for matches.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The predicate.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if every element of the source sequence passes the test in the specified predicate; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function All(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As Boolean
  overload: System.Linq.ImmutableArrayExtensions.All*
  nameWithType.vb: ImmutableArrayExtensions.All(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName.vb: System.Linq.ImmutableArrayExtensions.All(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, Boolean))
  name.vb: All(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  id: SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, IEqualityComparer<TBase>?)
  nameWithType: ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, IEqualityComparer<TBase>?)
  fullName: System.Linq.ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Immutable.ImmutableArray<TDerived>, System.Collections.Generic.IEqualityComparer<TBase>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Determines whether two sequences are equal according to an equality comparer.
  example: []
  syntax:
    content: 'public static bool SequenceEqual<TDerived, TBase>(this ImmutableArray<TBase> immutableArray, ImmutableArray<TDerived> items, IEqualityComparer<TBase>? comparer = null) where TDerived : TBase'
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{TBase}}
      description: The array to use for comparison.
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{TDerived}}
      description: The items to use for comparison.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TBase}}
      description: The comparer to use to check for equality.
    typeParameters:
    - id: TDerived
      description: The type of element in the compared array.
    - id: TBase
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to indicate the sequences are equal; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function SequenceEqual(Of TDerived As TBase, TBase)(immutableArray As ImmutableArray(Of TBase), items As ImmutableArray(Of TDerived), comparer As IEqualityComparer(Of TBase) = Nothing) As Boolean
  overload: System.Linq.ImmutableArrayExtensions.SequenceEqual*
  nameWithType.vb: ImmutableArrayExtensions.SequenceEqual(Of TDerived, TBase)(ImmutableArray(Of TBase), ImmutableArray(Of TDerived), IEqualityComparer(Of TBase))
  fullName.vb: System.Linq.ImmutableArrayExtensions.SequenceEqual(Of TDerived, TBase)(System.Collections.Immutable.ImmutableArray(Of TBase), System.Collections.Immutable.ImmutableArray(Of TDerived), System.Collections.Generic.IEqualityComparer(Of TBase))
  name.vb: SequenceEqual(Of TDerived, TBase)(ImmutableArray(Of TBase), ImmutableArray(Of TDerived), IEqualityComparer(Of TBase))
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  id: SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, IEnumerable<TDerived>, IEqualityComparer<TBase>?)
  nameWithType: ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, IEnumerable<TDerived>, IEqualityComparer<TBase>?)
  fullName: System.Linq.ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Generic.IEnumerable<TDerived>, System.Collections.Generic.IEqualityComparer<TBase>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Determines whether two sequences are equal according to an equality comparer.
  example: []
  syntax:
    content: 'public static bool SequenceEqual<TDerived, TBase>(this ImmutableArray<TBase> immutableArray, IEnumerable<TDerived> items, IEqualityComparer<TBase>? comparer = null) where TDerived : TBase'
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{TBase}}
      description: The array to use for comparison.
    - id: items
      type: System.Collections.Generic.IEnumerable{{TDerived}}
      description: The items to use for comparison.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TBase}}
      description: The comparer to use to check for equality.
    typeParameters:
    - id: TDerived
      description: The type of element in the compared array.
    - id: TBase
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to indicate the sequences are equal; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function SequenceEqual(Of TDerived As TBase, TBase)(immutableArray As ImmutableArray(Of TBase), items As IEnumerable(Of TDerived), comparer As IEqualityComparer(Of TBase) = Nothing) As Boolean
  overload: System.Linq.ImmutableArrayExtensions.SequenceEqual*
  nameWithType.vb: ImmutableArrayExtensions.SequenceEqual(Of TDerived, TBase)(ImmutableArray(Of TBase), IEnumerable(Of TDerived), IEqualityComparer(Of TBase))
  fullName.vb: System.Linq.ImmutableArrayExtensions.SequenceEqual(Of TDerived, TBase)(System.Collections.Immutable.ImmutableArray(Of TBase), System.Collections.Generic.IEnumerable(Of TDerived), System.Collections.Generic.IEqualityComparer(Of TBase))
  name.vb: SequenceEqual(Of TDerived, TBase)(ImmutableArray(Of TBase), IEnumerable(Of TDerived), IEqualityComparer(Of TBase))
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  commentId: M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  id: SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, Func<TBase, TBase, bool>)
  nameWithType: ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, Func<TBase, TBase, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Immutable.ImmutableArray<TDerived>, System.Func<TBase, TBase, bool>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Determines whether two sequences are equal according to an equality comparer.
  example: []
  syntax:
    content: 'public static bool SequenceEqual<TDerived, TBase>(this ImmutableArray<TBase> immutableArray, ImmutableArray<TDerived> items, Func<TBase, TBase, bool> predicate) where TDerived : TBase'
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{TBase}}
      description: The array to use for comparison.
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{TDerived}}
      description: The items to use for comparison.
    - id: predicate
      type: System.Func{{TBase},{TBase},System.Boolean}
      description: The comparer to use to check for equality.
    typeParameters:
    - id: TDerived
      description: The type of element in the compared array.
    - id: TBase
      description: The type of element contained by the collection.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to indicate the sequences are equal; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function SequenceEqual(Of TDerived As TBase, TBase)(immutableArray As ImmutableArray(Of TBase), items As ImmutableArray(Of TDerived), predicate As Func(Of TBase, TBase, Boolean)) As Boolean
  overload: System.Linq.ImmutableArrayExtensions.SequenceEqual*
  nameWithType.vb: ImmutableArrayExtensions.SequenceEqual(Of TDerived, TBase)(ImmutableArray(Of TBase), ImmutableArray(Of TDerived), Func(Of TBase, TBase, Boolean))
  fullName.vb: System.Linq.ImmutableArrayExtensions.SequenceEqual(Of TDerived, TBase)(System.Collections.Immutable.ImmutableArray(Of TBase), System.Collections.Immutable.ImmutableArray(Of TDerived), System.Func(Of TBase, TBase, Boolean))
  name.vb: SequenceEqual(Of TDerived, TBase)(ImmutableArray(Of TBase), ImmutableArray(Of TDerived), Func(Of TBase, TBase, Boolean))
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  id: Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Aggregate<T>(ImmutableArray<T>, Func<T, T, T>)
  nameWithType: ImmutableArrayExtensions.Aggregate<T>(ImmutableArray<T>, Func<T, T, T>)
  fullName: System.Linq.ImmutableArrayExtensions.Aggregate<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, T, T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Applies a function to a sequence of elements in a cumulative way.
  example: []
  syntax:
    content: public static T? Aggregate<T>(this ImmutableArray<T> immutableArray, Func<T, T, T> func)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The collection to apply the function to.
    - id: func
      type: System.Func{{T},{T},{T}}
      description: A function to be invoked on each element, in a cumulative way.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The final value after the cumulative function has been applied to all elements.
    content.vb: Public Shared Function Aggregate(Of T)(immutableArray As ImmutableArray(Of T), func As Func(Of T, T, T)) As T
  overload: System.Linq.ImmutableArrayExtensions.Aggregate*
  nameWithType.vb: ImmutableArrayExtensions.Aggregate(Of T)(ImmutableArray(Of T), Func(Of T, T, T))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Aggregate(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, T, T))
  name.vb: Aggregate(Of T)(ImmutableArray(Of T), Func(Of T, T, T))
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  id: Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Aggregate<TAccumulate, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>)
  nameWithType: ImmutableArrayExtensions.Aggregate<TAccumulate, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>)
  fullName: System.Linq.ImmutableArrayExtensions.Aggregate<TAccumulate, T>(System.Collections.Immutable.ImmutableArray<T>, TAccumulate, System.Func<TAccumulate, T, TAccumulate>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Applies a function to a sequence of elements in a cumulative way.
  example: []
  syntax:
    content: public static TAccumulate Aggregate<TAccumulate, T>(this ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The collection to apply the function to.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Func{{TAccumulate},{T},{TAccumulate}}
      description: A function to be invoked on each element, in a cumulative way.
    typeParameters:
    - id: TAccumulate
      description: The type of the accumulated value.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{TAccumulate}'
      description: The final accumulator value.
    content.vb: Public Shared Function Aggregate(Of TAccumulate, T)(immutableArray As ImmutableArray(Of T), seed As TAccumulate, func As Func(Of TAccumulate, T, TAccumulate)) As TAccumulate
  overload: System.Linq.ImmutableArrayExtensions.Aggregate*
  nameWithType.vb: ImmutableArrayExtensions.Aggregate(Of TAccumulate, T)(ImmutableArray(Of T), TAccumulate, Func(Of TAccumulate, T, TAccumulate))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Aggregate(Of TAccumulate, T)(System.Collections.Immutable.ImmutableArray(Of T), TAccumulate, System.Func(Of TAccumulate, T, TAccumulate))
  name.vb: Aggregate(Of TAccumulate, T)(ImmutableArray(Of T), TAccumulate, Func(Of TAccumulate, T, TAccumulate))
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  commentId: M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  id: Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Aggregate<TAccumulate, TResult, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>, Func<TAccumulate, TResult>)
  nameWithType: ImmutableArrayExtensions.Aggregate<TAccumulate, TResult, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ImmutableArrayExtensions.Aggregate<TAccumulate, TResult, T>(System.Collections.Immutable.ImmutableArray<T>, TAccumulate, System.Func<TAccumulate, T, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Applies a function to a sequence of elements in a cumulative way.
  example: []
  syntax:
    content: public static TResult Aggregate<TAccumulate, TResult, T>(this ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The collection to apply the function to.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Func{{TAccumulate},{T},{TAccumulate}}
      description: A function to be invoked on each element, in a cumulative way.
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: A function to transform the final accumulator value into the result type.
    typeParameters:
    - id: TAccumulate
      description: The type of the accumulated value.
    - id: TResult
      description: The type of result returned by the result selector.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{TResult}'
      description: The final accumulator value.
    content.vb: Public Shared Function Aggregate(Of TAccumulate, TResult, T)(immutableArray As ImmutableArray(Of T), seed As TAccumulate, func As Func(Of TAccumulate, T, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
  overload: System.Linq.ImmutableArrayExtensions.Aggregate*
  nameWithType.vb: ImmutableArrayExtensions.Aggregate(Of TAccumulate, TResult, T)(ImmutableArray(Of T), TAccumulate, Func(Of TAccumulate, T, TAccumulate), Func(Of TAccumulate, TResult))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Aggregate(Of TAccumulate, TResult, T)(System.Collections.Immutable.ImmutableArray(Of T), TAccumulate, System.Func(Of TAccumulate, T, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TAccumulate, TResult, T)(ImmutableArray(Of T), TAccumulate, Func(Of TAccumulate, T, TAccumulate), Func(Of TAccumulate, TResult))
- uid: System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  commentId: M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  id: ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: ElementAt<T>(ImmutableArray<T>, int)
  nameWithType: ImmutableArrayExtensions.ElementAt<T>(ImmutableArray<T>, int)
  fullName: System.Linq.ImmutableArrayExtensions.ElementAt<T>(System.Collections.Immutable.ImmutableArray<T>, int)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the element at a specified index in the array.
  example: []
  syntax:
    content: public static T ElementAt<T>(this ImmutableArray<T> immutableArray, int index)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to find an element in.
    - id: index
      type: System.Int32
      description: The index for the element to retrieve.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The item at the specified index.
    content.vb: Public Shared Function ElementAt(Of T)(immutableArray As ImmutableArray(Of T), index As Integer) As T
  overload: System.Linq.ImmutableArrayExtensions.ElementAt*
  nameWithType.vb: ImmutableArrayExtensions.ElementAt(Of T)(ImmutableArray(Of T), Integer)
  fullName.vb: System.Linq.ImmutableArrayExtensions.ElementAt(Of T)(System.Collections.Immutable.ImmutableArray(Of T), Integer)
  name.vb: ElementAt(Of T)(ImmutableArray(Of T), Integer)
- uid: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  commentId: M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: ElementAtOrDefault<T>(ImmutableArray<T>, int)
  nameWithType: ImmutableArrayExtensions.ElementAtOrDefault<T>(ImmutableArray<T>, int)
  fullName: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, int)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the element at a specified index in a sequence or a default value if the index is out of range.
  example: []
  syntax:
    content: public static T? ElementAtOrDefault<T>(this ImmutableArray<T> immutableArray, int index)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to find an element in.
    - id: index
      type: System.Int32
      description: The index for the element to retrieve.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The item at the specified index, or the default value if the index is not found.
    content.vb: Public Shared Function ElementAtOrDefault(Of T)(immutableArray As ImmutableArray(Of T), index As Integer) As T
  overload: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault*
  nameWithType.vb: ImmutableArrayExtensions.ElementAtOrDefault(Of T)(ImmutableArray(Of T), Integer)
  fullName.vb: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T), Integer)
  name.vb: ElementAtOrDefault(Of T)(ImmutableArray(Of T), Integer)
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: First<T>(ImmutableArray<T>, Func<T, bool>)
  nameWithType: ImmutableArrayExtensions.First<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.First<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element in a sequence that satisfies a specified condition.
  example: []
  syntax:
    content: public static T First<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to get an item from.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The delegate that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The first item in the list if it meets the condition specified by <code class="paramref">predicate</code>.
    content.vb: Public Shared Function First(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
  overload: System.Linq.ImmutableArrayExtensions.First*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the array is empty.
  nameWithType.vb: ImmutableArrayExtensions.First(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName.vb: System.Linq.ImmutableArrayExtensions.First(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, Boolean))
  name.vb: First(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
  id: First``1(System.Collections.Immutable.ImmutableArray{``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: First<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.First<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.First<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element in an array.
  example: []
  syntax:
    content: public static T First<T>(this ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to get an item from.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The first item in the array.
    content.vb: Public Shared Function First(Of T)(immutableArray As ImmutableArray(Of T)) As T
  overload: System.Linq.ImmutableArrayExtensions.First*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the array is empty.
  nameWithType.vb: ImmutableArrayExtensions.First(Of T)(ImmutableArray(Of T))
  fullName.vb: System.Linq.ImmutableArrayExtensions.First(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  name.vb: First(Of T)(ImmutableArray(Of T))
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  id: FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefault<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.FirstOrDefault<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element of a sequence, or a default value if the sequence contains no elements.
  example: []
  syntax:
    content: public static T? FirstOrDefault<T>(this ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to retrieve items from.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The first item in the list, if found; otherwise the default value for the item type.
    content.vb: Public Shared Function FirstOrDefault(Of T)(immutableArray As ImmutableArray(Of T)) As T
  overload: System.Linq.ImmutableArrayExtensions.FirstOrDefault*
  nameWithType.vb: ImmutableArrayExtensions.FirstOrDefault(Of T)(ImmutableArray(Of T))
  fullName.vb: System.Linq.ImmutableArrayExtensions.FirstOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  name.vb: FirstOrDefault(Of T)(ImmutableArray(Of T))
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefault<T>(ImmutableArray<T>, Func<T, bool>)
  nameWithType: ImmutableArrayExtensions.FirstOrDefault<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.
  example: []
  syntax:
    content: public static T? FirstOrDefault<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to retrieve elements from.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The delegate that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The first item in the list, if found; otherwise the default value for the item type.
    content.vb: Public Shared Function FirstOrDefault(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
  overload: System.Linq.ImmutableArrayExtensions.FirstOrDefault*
  nameWithType.vb: ImmutableArrayExtensions.FirstOrDefault(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName.vb: System.Linq.ImmutableArrayExtensions.FirstOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, Boolean))
  name.vb: FirstOrDefault(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
  id: Last``1(System.Collections.Immutable.ImmutableArray{``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Last<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.Last<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.Last<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element of the array.
  example: []
  syntax:
    content: public static T Last<T>(this ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to retrieve items from.
    typeParameters:
    - id: T
      description: The type of element contained by the array.
    return:
      type: '{T}'
      description: The last element in the array.
    content.vb: Public Shared Function Last(Of T)(immutableArray As ImmutableArray(Of T)) As T
  overload: System.Linq.ImmutableArrayExtensions.Last*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the collection is empty.
  nameWithType.vb: ImmutableArrayExtensions.Last(Of T)(ImmutableArray(Of T))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Last(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  name.vb: Last(Of T)(ImmutableArray(Of T))
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Last<T>(ImmutableArray<T>, Func<T, bool>)
  nameWithType: ImmutableArrayExtensions.Last<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.Last<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element of a sequence that satisfies a specified condition.
  example: []
  syntax:
    content: public static T Last<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to retrieve elements from.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The delegate that defines the conditions of the element to retrieve.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The last element of the array that satisfies the <code class="paramref">predicate</code> condition.
    content.vb: Public Shared Function Last(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
  overload: System.Linq.ImmutableArrayExtensions.Last*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the collection is empty.
  nameWithType.vb: ImmutableArrayExtensions.Last(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Last(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, Boolean))
  name.vb: Last(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  id: LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: LastOrDefault<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.LastOrDefault<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element of a sequence, or a default value if the sequence contains no elements.
  example: []
  syntax:
    content: public static T? LastOrDefault<T>(this ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to retrieve items from.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The last element of a sequence, or a default value if the sequence contains no elements.
    content.vb: Public Shared Function LastOrDefault(Of T)(immutableArray As ImmutableArray(Of T)) As T
  overload: System.Linq.ImmutableArrayExtensions.LastOrDefault*
  nameWithType.vb: ImmutableArrayExtensions.LastOrDefault(Of T)(ImmutableArray(Of T))
  fullName.vb: System.Linq.ImmutableArrayExtensions.LastOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  name.vb: LastOrDefault(Of T)(ImmutableArray(Of T))
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: LastOrDefault<T>(ImmutableArray<T>, Func<T, bool>)
  nameWithType: ImmutableArrayExtensions.LastOrDefault<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.
  example: []
  syntax:
    content: public static T? LastOrDefault<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to retrieve an element from.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The delegate that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The last element of a sequence, or a default value if the sequence contains no elements.
    content.vb: Public Shared Function LastOrDefault(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
  overload: System.Linq.ImmutableArrayExtensions.LastOrDefault*
  nameWithType.vb: ImmutableArrayExtensions.LastOrDefault(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName.vb: System.Linq.ImmutableArrayExtensions.LastOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, Boolean))
  name.vb: LastOrDefault(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
- uid: System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
  id: Single``1(System.Collections.Immutable.ImmutableArray{``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Single<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.Single<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.Single<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
  example: []
  syntax:
    content: public static T Single<T>(this ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to retrieve the element from.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The element in the sequence.
    content.vb: Public Shared Function [Single](Of T)(immutableArray As ImmutableArray(Of T)) As T
  overload: System.Linq.ImmutableArrayExtensions.Single*
  nameWithType.vb: ImmutableArrayExtensions.Single(Of T)(ImmutableArray(Of T))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Single(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  name.vb: Single(Of T)(ImmutableArray(Of T))
- uid: System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Single<T>(ImmutableArray<T>, Func<T, bool>)
  nameWithType: ImmutableArrayExtensions.Single<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.Single<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
  example: []
  syntax:
    content: public static T Single<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The immutable array to return a single element from.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The function to test whether an element should be returned.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: Returns <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function [Single](Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
  overload: System.Linq.ImmutableArrayExtensions.Single*
  nameWithType.vb: ImmutableArrayExtensions.Single(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName.vb: System.Linq.ImmutableArrayExtensions.Single(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, Boolean))
  name.vb: Single(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
- uid: System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  id: SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: SingleOrDefault<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.SingleOrDefault<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.SingleOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
  example: []
  syntax:
    content: public static T? SingleOrDefault<T>(this ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The element in the array, or the default value if the array is empty.
    content.vb: Public Shared Function SingleOrDefault(Of T)(immutableArray As ImmutableArray(Of T)) As T
  overload: System.Linq.ImmutableArrayExtensions.SingleOrDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code class="paramref">source</code> contains more than one element.
  nameWithType.vb: ImmutableArrayExtensions.SingleOrDefault(Of T)(ImmutableArray(Of T))
  fullName.vb: System.Linq.ImmutableArrayExtensions.SingleOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  name.vb: SingleOrDefault(Of T)(ImmutableArray(Of T))
- uid: System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  id: SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: SingleOrDefault<T>(ImmutableArray<T>, Func<T, bool>)
  nameWithType: ImmutableArrayExtensions.SingleOrDefault<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.SingleOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
  example: []
  syntax:
    content: public static T? SingleOrDefault<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to get the element from.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The condition the element must satisfy.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}'
      description: The element if it satisfies the specified condition; otherwise the default element.
    content.vb: Public Shared Function SingleOrDefault(Of T)(immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T
  overload: System.Linq.ImmutableArrayExtensions.SingleOrDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: More than one element satisfies the condition in <code class="paramref">predicate</code>.
  nameWithType.vb: ImmutableArrayExtensions.SingleOrDefault(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
  fullName.vb: System.Linq.ImmutableArrayExtensions.SingleOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, Boolean))
  name.vb: SingleOrDefault(Of T)(ImmutableArray(Of T), Func(Of T, Boolean))
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  id: ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>)
  nameWithType: ImmutableArrayExtensions.ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>)
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Creates a dictionary based on the contents of this array.
  example: []
  syntax:
    content: 'public static Dictionary<TKey, T> ToDictionary<TKey, T>(this ImmutableArray<T> immutableArray, Func<T, TKey> keySelector) where TKey : notnull'
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to create a dictionary from.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The key selector.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{T}}
      description: The newly initialized dictionary.
    content.vb: Public Shared Function ToDictionary(Of TKey, T)(immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey)) As Dictionary(Of TKey, T)
  overload: System.Linq.ImmutableArrayExtensions.ToDictionary*
  nameWithType.vb: ImmutableArrayExtensions.ToDictionary(Of TKey, T)(ImmutableArray(Of T), Func(Of T, TKey))
  fullName.vb: System.Linq.ImmutableArrayExtensions.ToDictionary(Of TKey, T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, TKey))
  name.vb: ToDictionary(Of TKey, T)(ImmutableArray(Of T), Func(Of T, TKey))
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  commentId: M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  id: ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>)
  nameWithType: ImmutableArrayExtensions.ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>)
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, TElement, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>, System.Func<T, TElement>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Creates a dictionary based on the contents of this array.
  example: []
  syntax:
    content: 'public static Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(this ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector) where TKey : notnull'
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to create a dictionary from.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The key selector.
    - id: elementSelector
      type: System.Func{{T},{TElement}}
      description: The element selector.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TElement
      description: The type of the element.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: The newly initialized dictionary.
    content.vb: Public Shared Function ToDictionary(Of TKey, TElement, T)(immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey), elementSelector As Func(Of T, TElement)) As Dictionary(Of TKey, TElement)
  overload: System.Linq.ImmutableArrayExtensions.ToDictionary*
  nameWithType.vb: ImmutableArrayExtensions.ToDictionary(Of TKey, TElement, T)(ImmutableArray(Of T), Func(Of T, TKey), Func(Of T, TElement))
  fullName.vb: System.Linq.ImmutableArrayExtensions.ToDictionary(Of TKey, TElement, T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, TKey), System.Func(Of T, TElement))
  name.vb: ToDictionary(Of TKey, TElement, T)(ImmutableArray(Of T), Func(Of T, TKey), Func(Of T, TElement))
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  id: ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>, IEqualityComparer<TKey>?)
  nameWithType: ImmutableArrayExtensions.ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>, IEqualityComparer<TKey>?)
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Creates a dictionary based on the contents of this array.
  example: []
  syntax:
    content: 'public static Dictionary<TKey, T> ToDictionary<TKey, T>(this ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, IEqualityComparer<TKey>? comparer) where TKey : notnull'
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to create a dictionary from.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The key selector.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The comparer to initialize the dictionary with.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{T}}
      description: The newly initialized dictionary.
    content.vb: Public Shared Function ToDictionary(Of TKey, T)(immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, T)
  overload: System.Linq.ImmutableArrayExtensions.ToDictionary*
  nameWithType.vb: ImmutableArrayExtensions.ToDictionary(Of TKey, T)(ImmutableArray(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey))
  fullName.vb: System.Linq.ImmutableArrayExtensions.ToDictionary(Of TKey, T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TKey, T)(ImmutableArray(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey))
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  id: ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>?)
  nameWithType: ImmutableArrayExtensions.ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>?)
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, TElement, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>, System.Func<T, TElement>, System.Collections.Generic.IEqualityComparer<TKey>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Creates a dictionary based on the contents of this array.
  example: []
  syntax:
    content: 'public static Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(this ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector, IEqualityComparer<TKey>? comparer) where TKey : notnull'
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The array to create a dictionary from.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The key selector.
    - id: elementSelector
      type: System.Func{{T},{TElement}}
      description: The element selector.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The comparer to initialize the dictionary with.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TElement
      description: The type of the element.
    - id: T
      description: The type of element contained by the collection.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: The newly initialized dictionary.
    content.vb: Public Shared Function ToDictionary(Of TKey, TElement, T)(immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey), elementSelector As Func(Of T, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)
  overload: System.Linq.ImmutableArrayExtensions.ToDictionary*
  nameWithType.vb: ImmutableArrayExtensions.ToDictionary(Of TKey, TElement, T)(ImmutableArray(Of T), Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey))
  fullName.vb: System.Linq.ImmutableArrayExtensions.ToDictionary(Of TKey, TElement, T)(System.Collections.Immutable.ImmutableArray(Of T), System.Func(Of T, TKey), System.Func(Of T, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TKey, TElement, T)(ImmutableArray(Of T), Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey))
- uid: System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  id: ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: ToArray<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.ToArray<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.ToArray<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Copies the contents of this array to a mutable array.
  example: []
  syntax:
    content: public static T[] ToArray<T>(this ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The immutable array to copy into a mutable one.
    typeParameters:
    - id: T
      description: The type of element contained by the collection.
    return:
      type: '{T}[]'
      description: The newly instantiated array.
    content.vb: Public Shared Function ToArray(Of T)(immutableArray As ImmutableArray(Of T)) As T()
  overload: System.Linq.ImmutableArrayExtensions.ToArray*
  nameWithType.vb: ImmutableArrayExtensions.ToArray(Of T)(ImmutableArray(Of T))
  fullName.vb: System.Linq.ImmutableArrayExtensions.ToArray(Of T)(System.Collections.Immutable.ImmutableArray(Of T))
  name.vb: ToArray(Of T)(ImmutableArray(Of T))
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  commentId: M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: First<T>(Builder)
  nameWithType: ImmutableArrayExtensions.First<T>(ImmutableArray<T>.Builder)
  fullName: System.Linq.ImmutableArrayExtensions.First<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element in the collection.
  example: []
  syntax:
    content: public static T First<T>(this ImmutableArray<T>.Builder builder)
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
      description: The builder to retrieve an item from.
    typeParameters:
    - id: T
      description: The type of items in the array.
    return:
      type: '{T}'
      description: The first item in the list.
    content.vb: Public Shared Function First(Of T)(builder As ImmutableArray(Of T).Builder) As T
  overload: System.Linq.ImmutableArrayExtensions.First*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the array is empty.
  nameWithType.vb: ImmutableArrayExtensions.First(Of T)(ImmutableArray(Of T).Builder)
  fullName.vb: System.Linq.ImmutableArrayExtensions.First(Of T)(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  name.vb: First(Of T)(Builder)
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  commentId: M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefault<T>(Builder)
  nameWithType: ImmutableArrayExtensions.FirstOrDefault<T>(ImmutableArray<T>.Builder)
  fullName: System.Linq.ImmutableArrayExtensions.FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the first element in the collection, or the default value if the collection is empty.
  example: []
  syntax:
    content: public static T? FirstOrDefault<T>(this ImmutableArray<T>.Builder builder)
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
      description: The builder to retrieve an element from.
    typeParameters:
    - id: T
      description: The type of item in the builder.
    return:
      type: '{T}'
      description: The first item in the list, if found; otherwise the default value for the item type.
    content.vb: Public Shared Function FirstOrDefault(Of T)(builder As ImmutableArray(Of T).Builder) As T
  overload: System.Linq.ImmutableArrayExtensions.FirstOrDefault*
  nameWithType.vb: ImmutableArrayExtensions.FirstOrDefault(Of T)(ImmutableArray(Of T).Builder)
  fullName.vb: System.Linq.ImmutableArrayExtensions.FirstOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  name.vb: FirstOrDefault(Of T)(Builder)
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  commentId: M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Last<T>(Builder)
  nameWithType: ImmutableArrayExtensions.Last<T>(ImmutableArray<T>.Builder)
  fullName: System.Linq.ImmutableArrayExtensions.Last<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element in the collection.
  example: []
  syntax:
    content: public static T Last<T>(this ImmutableArray<T>.Builder builder)
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
      description: The builder to retrieve elements from.
    typeParameters:
    - id: T
      description: The type of item in the builder.
    return:
      type: '{T}'
      description: The last element in the builder.
    content.vb: Public Shared Function Last(Of T)(builder As ImmutableArray(Of T).Builder) As T
  overload: System.Linq.ImmutableArrayExtensions.Last*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the collection is empty.
  nameWithType.vb: ImmutableArrayExtensions.Last(Of T)(ImmutableArray(Of T).Builder)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Last(Of T)(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  name.vb: Last(Of T)(Builder)
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  commentId: M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: LastOrDefault<T>(Builder)
  nameWithType: ImmutableArrayExtensions.LastOrDefault<T>(ImmutableArray<T>.Builder)
  fullName: System.Linq.ImmutableArrayExtensions.LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns the last element in the collection, or the default value if the collection is empty.
  example: []
  syntax:
    content: public static T? LastOrDefault<T>(this ImmutableArray<T>.Builder builder)
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
      description: The builder to retrieve an element from.
    typeParameters:
    - id: T
      description: The type of item in the builder.
    return:
      type: '{T}'
      description: The last element of a sequence, or a default value if the sequence contains no elements.
    content.vb: Public Shared Function LastOrDefault(Of T)(builder As ImmutableArray(Of T).Builder) As T
  overload: System.Linq.ImmutableArrayExtensions.LastOrDefault*
  nameWithType.vb: ImmutableArrayExtensions.LastOrDefault(Of T)(ImmutableArray(Of T).Builder)
  fullName.vb: System.Linq.ImmutableArrayExtensions.LastOrDefault(Of T)(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  name.vb: LastOrDefault(Of T)(Builder)
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  commentId: M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  isExtensionMethod: true
  parent: System.Linq.ImmutableArrayExtensions
  langs:
  - csharp
  - vb
  name: Any<T>(Builder)
  nameWithType: ImmutableArrayExtensions.Any<T>(ImmutableArray<T>.Builder)
  fullName: System.Linq.ImmutableArrayExtensions.Any<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Linq
  summary: Returns a value indicating whether this collection contains any elements.
  example: []
  syntax:
    content: public static bool Any<T>(this ImmutableArray<T>.Builder builder)
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
      description: The builder to check for matches.
    typeParameters:
    - id: T
      description: The type of elements in the array.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the array builder contains any elements; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function Any(Of T)(builder As ImmutableArray(Of T).Builder) As Boolean
  overload: System.Linq.ImmutableArrayExtensions.Any*
  nameWithType.vb: ImmutableArrayExtensions.Any(Of T)(ImmutableArray(Of T).Builder)
  fullName.vb: System.Linq.ImmutableArrayExtensions.Any(Of T)(System.Collections.Immutable.ImmutableArray(Of T).Builder)
  name.vb: Any(Of T)(Builder)
references:
- uid: System.Collections.Immutable.ImmutableArray`1
  commentId: T:System.Collections.Immutable.ImmutableArray`1
  parent: System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  nameWithType.vb: ImmutableArray(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  name.vb: ImmutableArray(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq.ImmutableArrayExtensions.Select*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.Select
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_Select__2_System_Collections_Immutable_ImmutableArray___0__System_Func___0___1__
  name: Select
  nameWithType: ImmutableArrayExtensions.Select
  fullName: System.Linq.ImmutableArrayExtensions.Select
- uid: System.Collections.Immutable.ImmutableArray{{T}}
  commentId: T:System.Collections.Immutable.ImmutableArray{`0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  nameWithType.vb: ImmutableArray(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  name.vb: ImmutableArray(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Func{{T},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Linq.ImmutableArrayExtensions.SelectMany*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.SelectMany
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_SelectMany__3_System_Collections_Immutable_ImmutableArray___0__System_Func___0_System_Collections_Generic_IEnumerable___1___System_Func___0___1___2__
  name: SelectMany
  nameWithType: ImmutableArrayExtensions.SelectMany
  fullName: System.Linq.ImmutableArrayExtensions.SelectMany
- uid: System.Collections.Immutable.ImmutableArray{{TSource}}
  commentId: T:System.Collections.Immutable.ImmutableArray{``0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray-1.html
  name: ImmutableArray<TSource>
  nameWithType: ImmutableArray<TSource>
  fullName: System.Collections.Immutable.ImmutableArray<TSource>
  nameWithType.vb: ImmutableArray(Of TSource)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of TSource)
  name.vb: ImmutableArray(Of TSource)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TSource, IEnumerable<TCollection>>
  nameWithType: Func<TSource, IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>
  nameWithType.vb: Func(Of TSource, IEnumerable(Of TCollection))
  fullName.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TCollection
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TCollection
  - name: )
  - name: )
- uid: System.Func{{TSource},{TCollection},{TResult}}
  commentId: T:System.Func{``0,``1,``2}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TSource, TCollection, TResult>
  nameWithType: Func<TSource, TCollection, TResult>
  fullName: System.Func<TSource, TCollection, TResult>
  nameWithType.vb: Func(Of TSource, TCollection, TResult)
  fullName.vb: System.Func(Of TSource, TCollection, TResult)
  name.vb: Func(Of TSource, TCollection, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TCollection
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TCollection
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.ImmutableArrayExtensions.Where*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.Where
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_Where__1_System_Collections_Immutable_ImmutableArray___0__System_Func___0_System_Boolean__
  name: Where
  nameWithType: ImmutableArrayExtensions.Where
  fullName: System.Linq.ImmutableArrayExtensions.Where
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: System.Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq.ImmutableArrayExtensions.Any*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.Any
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_Any__1_System_Collections_Immutable_ImmutableArray___0__
  name: Any
  nameWithType: ImmutableArrayExtensions.Any
  fullName: System.Linq.ImmutableArrayExtensions.Any
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Linq.ImmutableArrayExtensions.All*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.All
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_All__1_System_Collections_Immutable_ImmutableArray___0__System_Func___0_System_Boolean__
  name: All
  nameWithType: ImmutableArrayExtensions.All
  fullName: System.Linq.ImmutableArrayExtensions.All
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.SequenceEqual
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_SequenceEqual__2_System_Collections_Immutable_ImmutableArray___1__System_Collections_Immutable_ImmutableArray___0__System_Collections_Generic_IEqualityComparer___1__
  name: SequenceEqual
  nameWithType: ImmutableArrayExtensions.SequenceEqual
  fullName: System.Linq.ImmutableArrayExtensions.SequenceEqual
- uid: System.Collections.Immutable.ImmutableArray{{TBase}}
  commentId: T:System.Collections.Immutable.ImmutableArray{``1}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray-1.html
  name: ImmutableArray<TBase>
  nameWithType: ImmutableArray<TBase>
  fullName: System.Collections.Immutable.ImmutableArray<TBase>
  nameWithType.vb: ImmutableArray(Of TBase)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of TBase)
  name.vb: ImmutableArray(Of TBase)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: <
  - name: TBase
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TBase
  - name: )
- uid: System.Collections.Immutable.ImmutableArray{{TDerived}}
  commentId: T:System.Collections.Immutable.ImmutableArray{``0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray-1.html
  name: ImmutableArray<TDerived>
  nameWithType: ImmutableArray<TDerived>
  fullName: System.Collections.Immutable.ImmutableArray<TDerived>
  nameWithType.vb: ImmutableArray(Of TDerived)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of TDerived)
  name.vb: ImmutableArray(Of TDerived)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: <
  - name: TDerived
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TDerived
  - name: )
- uid: System.Collections.Generic.IEqualityComparer{{TBase}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<TBase>
  nameWithType: IEqualityComparer<TBase>
  fullName: System.Collections.Generic.IEqualityComparer<TBase>
  nameWithType.vb: IEqualityComparer(Of TBase)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TBase)
  name.vb: IEqualityComparer(Of TBase)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: TBase
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: TBase
  - name: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TDerived}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TDerived>
  nameWithType: IEnumerable<TDerived>
  fullName: System.Collections.Generic.IEnumerable<TDerived>
  nameWithType.vb: IEnumerable(Of TDerived)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TDerived)
  name.vb: IEnumerable(Of TDerived)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TDerived
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TDerived
  - name: )
- uid: System.Func{{TBase},{TBase},System.Boolean}
  commentId: T:System.Func{``1,``1,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TBase, TBase, bool>
  nameWithType: Func<TBase, TBase, bool>
  fullName: System.Func<TBase, TBase, bool>
  nameWithType.vb: Func(Of TBase, TBase, Boolean)
  fullName.vb: System.Func(Of TBase, TBase, Boolean)
  name.vb: Func(Of TBase, TBase, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TBase
  - name: ','
  - name: " "
  - name: TBase
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TBase
  - name: ','
  - name: " "
  - name: TBase
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Linq.ImmutableArrayExtensions.Aggregate*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.Aggregate
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_Aggregate__1_System_Collections_Immutable_ImmutableArray___0__System_Func___0___0___0__
  name: Aggregate
  nameWithType: ImmutableArrayExtensions.Aggregate
  fullName: System.Linq.ImmutableArrayExtensions.Aggregate
- uid: System.Func{{T},{T},{T}}
  commentId: T:System.Func{``0,``0,``0}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T, T, T>
  nameWithType: Func<T, T, T>
  fullName: System.Func<T, T, T>
  nameWithType.vb: Func(Of T, T, T)
  fullName.vb: System.Func(Of T, T, T)
  name.vb: Func(Of T, T, T)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{TAccumulate}'
  commentId: '!:TAccumulate'
  definition: TAccumulate
  name: TAccumulate
  nameWithType: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{T},{TAccumulate}}
  commentId: T:System.Func{``0,``1,``0}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TAccumulate, T, TAccumulate>
  nameWithType: Func<TAccumulate, T, TAccumulate>
  fullName: System.Func<TAccumulate, T, TAccumulate>
  nameWithType.vb: Func(Of TAccumulate, T, TAccumulate)
  fullName.vb: System.Func(Of TAccumulate, T, TAccumulate)
  name.vb: Func(Of TAccumulate, T, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TAccumulate
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TAccumulate
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TAccumulate
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TAccumulate
  - name: )
- uid: TAccumulate
  name: TAccumulate
  nameWithType: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TAccumulate, TResult>
  nameWithType: Func<TAccumulate, TResult>
  fullName: System.Func<TAccumulate, TResult>
  nameWithType.vb: Func(Of TAccumulate, TResult)
  fullName.vb: System.Func(Of TAccumulate, TResult)
  name.vb: Func(Of TAccumulate, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TAccumulate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TAccumulate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Linq.ImmutableArrayExtensions.ElementAt*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.ElementAt
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_ElementAt__1_System_Collections_Immutable_ImmutableArray___0__System_Int32_
  name: ElementAt
  nameWithType: ImmutableArrayExtensions.ElementAt
  fullName: System.Linq.ImmutableArrayExtensions.ElementAt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_ElementAtOrDefault__1_System_Collections_Immutable_ImmutableArray___0__System_Int32_
  name: ElementAtOrDefault
  nameWithType: ImmutableArrayExtensions.ElementAtOrDefault
  fullName: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Linq.ImmutableArrayExtensions.First*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.First
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_First__1_System_Collections_Immutable_ImmutableArray___0__System_Func___0_System_Boolean__
  name: First
  nameWithType: ImmutableArrayExtensions.First
  fullName: System.Linq.ImmutableArrayExtensions.First
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.FirstOrDefault
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_FirstOrDefault__1_System_Collections_Immutable_ImmutableArray___0__
  name: FirstOrDefault
  nameWithType: ImmutableArrayExtensions.FirstOrDefault
  fullName: System.Linq.ImmutableArrayExtensions.FirstOrDefault
- uid: System.Linq.ImmutableArrayExtensions.Last*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.Last
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_Last__1_System_Collections_Immutable_ImmutableArray___0__
  name: Last
  nameWithType: ImmutableArrayExtensions.Last
  fullName: System.Linq.ImmutableArrayExtensions.Last
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.LastOrDefault
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_LastOrDefault__1_System_Collections_Immutable_ImmutableArray___0__
  name: LastOrDefault
  nameWithType: ImmutableArrayExtensions.LastOrDefault
  fullName: System.Linq.ImmutableArrayExtensions.LastOrDefault
- uid: System.Linq.ImmutableArrayExtensions.Single*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.Single
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_Single__1_System_Collections_Immutable_ImmutableArray___0__
  name: Single
  nameWithType: ImmutableArrayExtensions.Single
  fullName: System.Linq.ImmutableArrayExtensions.Single
- uid: System.Linq.ImmutableArrayExtensions.SingleOrDefault*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.SingleOrDefault
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_SingleOrDefault__1_System_Collections_Immutable_ImmutableArray___0__
  name: SingleOrDefault
  nameWithType: ImmutableArrayExtensions.SingleOrDefault
  fullName: System.Linq.ImmutableArrayExtensions.SingleOrDefault
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.ToDictionary
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_ToDictionary__2_System_Collections_Immutable_ImmutableArray___1__System_Func___1___0__
  name: ToDictionary
  nameWithType: ImmutableArrayExtensions.ToDictionary
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary
- uid: System.Func{{T},{TKey}}
  commentId: T:System.Func{``1,``0}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TKey>
  nameWithType: Func<T, TKey>
  fullName: System.Func<T, TKey>
  nameWithType.vb: Func(Of T, TKey)
  fullName.vb: System.Func(Of T, TKey)
  name.vb: Func(Of T, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.Dictionary{{TKey},{T}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, T>
  nameWithType: Dictionary<TKey, T>
  fullName: System.Collections.Generic.Dictionary<TKey, T>
  nameWithType.vb: Dictionary(Of TKey, T)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, T)
  name.vb: Dictionary(Of TKey, T)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Func{{T},{TElement}}
  commentId: T:System.Func{``2,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TElement>
  nameWithType: Func<T, TElement>
  fullName: System.Func<T, TElement>
  nameWithType.vb: Func(Of T, TElement)
  fullName.vb: System.Func(Of T, TElement)
  name.vb: Func(Of T, TElement)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TElement
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TElement
  - name: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TElement>
  nameWithType: Dictionary<TKey, TElement>
  fullName: System.Collections.Generic.Dictionary<TKey, TElement>
  nameWithType.vb: Dictionary(Of TKey, TElement)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)
  name.vb: Dictionary(Of TKey, TElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TElement
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TElement
  - name: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Linq.ImmutableArrayExtensions.ToArray*
  commentId: Overload:System.Linq.ImmutableArrayExtensions.ToArray
  isExternal: true
  href: System.Linq.ImmutableArrayExtensions.html#System_Linq_ImmutableArrayExtensions_ToArray__1_System_Collections_Immutable_ImmutableArray___0__
  name: ToArray
  nameWithType: ImmutableArrayExtensions.ToArray
  fullName: System.Linq.ImmutableArrayExtensions.ToArray
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Collections.Immutable.ImmutableArray{{T}}.Builder
  commentId: T:System.Collections.Immutable.ImmutableArray{``0}.Builder
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray-1.html
  name: ImmutableArray<T>.Builder
  nameWithType: ImmutableArray<T>.Builder
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder
  nameWithType.vb: ImmutableArray(Of T).Builder
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder
  name.vb: ImmutableArray(Of T).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableArray{``0}.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.Builder.html
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableArray{``0}.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.Builder.html
- uid: System.Collections.Immutable.ImmutableArray`1.Builder
  commentId: T:System.Collections.Immutable.ImmutableArray`1.Builder
  parent: System.Collections.Immutable
  isExternal: true
  href: System.Collections.Immutable.ImmutableArray-1.html
  name: ImmutableArray<T>.Builder
  nameWithType: ImmutableArray<T>.Builder
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder
  nameWithType.vb: ImmutableArray(Of T).Builder
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder
  name.vb: ImmutableArray(Of T).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.Builder.html
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.Builder.html
