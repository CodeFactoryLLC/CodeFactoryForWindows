### YamlMime:ManagedReference
items:
- uid: System.Numerics.Vector
  commentId: T:System.Numerics.Vector
  id: Vector
  parent: System.Numerics
  children:
  - System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})
  - System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})
  - System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.IsHardwareAccelerated
  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)
  - System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})
  - System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})
  - System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})
  - System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})
  - System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})
  - System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)
  - System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)
  - System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)
  - System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)
  - System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)
  - System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)
  - System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)
  - System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  langs:
  - csharp
  - vb
  name: Vector
  nameWithType: Vector
  fullName: System.Numerics.Vector
  type: Class
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Provides a collection of static convenience methods for creating, manipulating, combining, and converting generic vectors.
  example: []
  syntax:
    content: public static class Vector
    content.vb: Public Module Vector
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)
  commentId: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)
  id: Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Widen(Vector<byte>, out Vector<ushort>, out Vector<ushort>)
  nameWithType: Vector.Widen(Vector<byte>, out Vector<ushort>, out Vector<ushort>)
  fullName: System.Numerics.Vector.Widen(System.Numerics.Vector<byte>, out System.Numerics.Vector<ushort>, out System.Numerics.Vector<ushort>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static void Widen(Vector<byte> source, out Vector<ushort> low, out Vector<ushort> high)
    parameters:
    - id: source
      type: System.Numerics.Vector{System.Byte}
      description: ''
    - id: low
      type: System.Numerics.Vector{System.UInt16}
    - id: high
      type: System.Numerics.Vector{System.UInt16}
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Sub Widen(source As Vector(Of Byte), low As Vector(Of UShort), high As Vector(Of UShort))
  overload: System.Numerics.Vector.Widen*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.Widen(Vector(Of Byte), Vector(Of UShort), Vector(Of UShort))
  fullName.vb: System.Numerics.Vector.Widen(System.Numerics.Vector(Of Byte), System.Numerics.Vector(Of UShort), System.Numerics.Vector(Of UShort))
  name.vb: Widen(Vector(Of Byte), Vector(Of UShort), Vector(Of UShort))
- uid: System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)
  commentId: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)
  id: Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Widen(Vector<ushort>, out Vector<uint>, out Vector<uint>)
  nameWithType: Vector.Widen(Vector<ushort>, out Vector<uint>, out Vector<uint>)
  fullName: System.Numerics.Vector.Widen(System.Numerics.Vector<ushort>, out System.Numerics.Vector<uint>, out System.Numerics.Vector<uint>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static void Widen(Vector<ushort> source, out Vector<uint> low, out Vector<uint> high)
    parameters:
    - id: source
      type: System.Numerics.Vector{System.UInt16}
      description: ''
    - id: low
      type: System.Numerics.Vector{System.UInt32}
    - id: high
      type: System.Numerics.Vector{System.UInt32}
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Sub Widen(source As Vector(Of UShort), low As Vector(Of UInteger), high As Vector(Of UInteger))
  overload: System.Numerics.Vector.Widen*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.Widen(Vector(Of UShort), Vector(Of UInteger), Vector(Of UInteger))
  fullName.vb: System.Numerics.Vector.Widen(System.Numerics.Vector(Of UShort), System.Numerics.Vector(Of UInteger), System.Numerics.Vector(Of UInteger))
  name.vb: Widen(Vector(Of UShort), Vector(Of UInteger), Vector(Of UInteger))
- uid: System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)
  commentId: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)
  id: Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Widen(Vector<uint>, out Vector<ulong>, out Vector<ulong>)
  nameWithType: Vector.Widen(Vector<uint>, out Vector<ulong>, out Vector<ulong>)
  fullName: System.Numerics.Vector.Widen(System.Numerics.Vector<uint>, out System.Numerics.Vector<ulong>, out System.Numerics.Vector<ulong>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static void Widen(Vector<uint> source, out Vector<ulong> low, out Vector<ulong> high)
    parameters:
    - id: source
      type: System.Numerics.Vector{System.UInt32}
      description: ''
    - id: low
      type: System.Numerics.Vector{System.UInt64}
    - id: high
      type: System.Numerics.Vector{System.UInt64}
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Sub Widen(source As Vector(Of UInteger), low As Vector(Of ULong), high As Vector(Of ULong))
  overload: System.Numerics.Vector.Widen*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.Widen(Vector(Of UInteger), Vector(Of ULong), Vector(Of ULong))
  fullName.vb: System.Numerics.Vector.Widen(System.Numerics.Vector(Of UInteger), System.Numerics.Vector(Of ULong), System.Numerics.Vector(Of ULong))
  name.vb: Widen(Vector(Of UInteger), Vector(Of ULong), Vector(Of ULong))
- uid: System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)
  commentId: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)
  id: Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Widen(Vector<sbyte>, out Vector<short>, out Vector<short>)
  nameWithType: Vector.Widen(Vector<sbyte>, out Vector<short>, out Vector<short>)
  fullName: System.Numerics.Vector.Widen(System.Numerics.Vector<sbyte>, out System.Numerics.Vector<short>, out System.Numerics.Vector<short>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static void Widen(Vector<sbyte> source, out Vector<short> low, out Vector<short> high)
    parameters:
    - id: source
      type: System.Numerics.Vector{System.SByte}
      description: ''
    - id: low
      type: System.Numerics.Vector{System.Int16}
    - id: high
      type: System.Numerics.Vector{System.Int16}
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Sub Widen(source As Vector(Of SByte), low As Vector(Of Short), high As Vector(Of Short))
  overload: System.Numerics.Vector.Widen*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.Widen(Vector(Of SByte), Vector(Of Short), Vector(Of Short))
  fullName.vb: System.Numerics.Vector.Widen(System.Numerics.Vector(Of SByte), System.Numerics.Vector(Of Short), System.Numerics.Vector(Of Short))
  name.vb: Widen(Vector(Of SByte), Vector(Of Short), Vector(Of Short))
- uid: System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)
  commentId: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)
  id: Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Widen(Vector<short>, out Vector<int>, out Vector<int>)
  nameWithType: Vector.Widen(Vector<short>, out Vector<int>, out Vector<int>)
  fullName: System.Numerics.Vector.Widen(System.Numerics.Vector<short>, out System.Numerics.Vector<int>, out System.Numerics.Vector<int>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: public static void Widen(Vector<short> source, out Vector<int> low, out Vector<int> high)
    parameters:
    - id: source
      type: System.Numerics.Vector{System.Int16}
      description: ''
    - id: low
      type: System.Numerics.Vector{System.Int32}
    - id: high
      type: System.Numerics.Vector{System.Int32}
    content.vb: Public Shared Sub Widen(source As Vector(Of Short), low As Vector(Of Integer), high As Vector(Of Integer))
  overload: System.Numerics.Vector.Widen*
  nameWithType.vb: Vector.Widen(Vector(Of Short), Vector(Of Integer), Vector(Of Integer))
  fullName.vb: System.Numerics.Vector.Widen(System.Numerics.Vector(Of Short), System.Numerics.Vector(Of Integer), System.Numerics.Vector(Of Integer))
  name.vb: Widen(Vector(Of Short), Vector(Of Integer), Vector(Of Integer))
- uid: System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)
  commentId: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)
  id: Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Widen(Vector<int>, out Vector<long>, out Vector<long>)
  nameWithType: Vector.Widen(Vector<int>, out Vector<long>, out Vector<long>)
  fullName: System.Numerics.Vector.Widen(System.Numerics.Vector<int>, out System.Numerics.Vector<long>, out System.Numerics.Vector<long>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: public static void Widen(Vector<int> source, out Vector<long> low, out Vector<long> high)
    parameters:
    - id: source
      type: System.Numerics.Vector{System.Int32}
      description: ''
    - id: low
      type: System.Numerics.Vector{System.Int64}
    - id: high
      type: System.Numerics.Vector{System.Int64}
    content.vb: Public Shared Sub Widen(source As Vector(Of Integer), low As Vector(Of Long), high As Vector(Of Long))
  overload: System.Numerics.Vector.Widen*
  nameWithType.vb: Vector.Widen(Vector(Of Integer), Vector(Of Long), Vector(Of Long))
  fullName.vb: System.Numerics.Vector.Widen(System.Numerics.Vector(Of Integer), System.Numerics.Vector(Of Long), System.Numerics.Vector(Of Long))
  name.vb: Widen(Vector(Of Integer), Vector(Of Long), Vector(Of Long))
- uid: System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)
  commentId: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)
  id: Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Widen(Vector<float>, out Vector<double>, out Vector<double>)
  nameWithType: Vector.Widen(Vector<float>, out Vector<double>, out Vector<double>)
  fullName: System.Numerics.Vector.Widen(System.Numerics.Vector<float>, out System.Numerics.Vector<double>, out System.Numerics.Vector<double>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: public static void Widen(Vector<float> source, out Vector<double> low, out Vector<double> high)
    parameters:
    - id: source
      type: System.Numerics.Vector{System.Single}
      description: ''
    - id: low
      type: System.Numerics.Vector{System.Double}
    - id: high
      type: System.Numerics.Vector{System.Double}
    content.vb: Public Shared Sub Widen(source As Vector(Of Single), low As Vector(Of Double), high As Vector(Of Double))
  overload: System.Numerics.Vector.Widen*
  nameWithType.vb: Vector.Widen(Vector(Of Single), Vector(Of Double), Vector(Of Double))
  fullName.vb: System.Numerics.Vector.Widen(System.Numerics.Vector(Of Single), System.Numerics.Vector(Of Double), System.Numerics.Vector(Of Double))
  name.vb: Widen(Vector(Of Single), Vector(Of Double), Vector(Of Double))
- uid: System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})
  commentId: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})
  id: Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Narrow(Vector<ushort>, Vector<ushort>)
  nameWithType: Vector.Narrow(Vector<ushort>, Vector<ushort>)
  fullName: System.Numerics.Vector.Narrow(System.Numerics.Vector<ushort>, System.Numerics.Vector<ushort>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<byte> Narrow(Vector<ushort> low, Vector<ushort> high)
    parameters:
    - id: low
      type: System.Numerics.Vector{System.UInt16}
    - id: high
      type: System.Numerics.Vector{System.UInt16}
    return:
      type: System.Numerics.Vector{System.Byte}
      description: ''
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Narrow(low As Vector(Of UShort), high As Vector(Of UShort)) As Vector(Of Byte)
  overload: System.Numerics.Vector.Narrow*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.Narrow(Vector(Of UShort), Vector(Of UShort))
  fullName.vb: System.Numerics.Vector.Narrow(System.Numerics.Vector(Of UShort), System.Numerics.Vector(Of UShort))
  name.vb: Narrow(Vector(Of UShort), Vector(Of UShort))
- uid: System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})
  commentId: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})
  id: Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Narrow(Vector<uint>, Vector<uint>)
  nameWithType: Vector.Narrow(Vector<uint>, Vector<uint>)
  fullName: System.Numerics.Vector.Narrow(System.Numerics.Vector<uint>, System.Numerics.Vector<uint>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<ushort> Narrow(Vector<uint> low, Vector<uint> high)
    parameters:
    - id: low
      type: System.Numerics.Vector{System.UInt32}
    - id: high
      type: System.Numerics.Vector{System.UInt32}
    return:
      type: System.Numerics.Vector{System.UInt16}
      description: ''
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Narrow(low As Vector(Of UInteger), high As Vector(Of UInteger)) As Vector(Of UShort)
  overload: System.Numerics.Vector.Narrow*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.Narrow(Vector(Of UInteger), Vector(Of UInteger))
  fullName.vb: System.Numerics.Vector.Narrow(System.Numerics.Vector(Of UInteger), System.Numerics.Vector(Of UInteger))
  name.vb: Narrow(Vector(Of UInteger), Vector(Of UInteger))
- uid: System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})
  commentId: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})
  id: Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Narrow(Vector<ulong>, Vector<ulong>)
  nameWithType: Vector.Narrow(Vector<ulong>, Vector<ulong>)
  fullName: System.Numerics.Vector.Narrow(System.Numerics.Vector<ulong>, System.Numerics.Vector<ulong>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<uint> Narrow(Vector<ulong> low, Vector<ulong> high)
    parameters:
    - id: low
      type: System.Numerics.Vector{System.UInt64}
    - id: high
      type: System.Numerics.Vector{System.UInt64}
    return:
      type: System.Numerics.Vector{System.UInt32}
      description: ''
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Narrow(low As Vector(Of ULong), high As Vector(Of ULong)) As Vector(Of UInteger)
  overload: System.Numerics.Vector.Narrow*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.Narrow(Vector(Of ULong), Vector(Of ULong))
  fullName.vb: System.Numerics.Vector.Narrow(System.Numerics.Vector(Of ULong), System.Numerics.Vector(Of ULong))
  name.vb: Narrow(Vector(Of ULong), Vector(Of ULong))
- uid: System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})
  commentId: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})
  id: Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Narrow(Vector<short>, Vector<short>)
  nameWithType: Vector.Narrow(Vector<short>, Vector<short>)
  fullName: System.Numerics.Vector.Narrow(System.Numerics.Vector<short>, System.Numerics.Vector<short>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<sbyte> Narrow(Vector<short> low, Vector<short> high)
    parameters:
    - id: low
      type: System.Numerics.Vector{System.Int16}
    - id: high
      type: System.Numerics.Vector{System.Int16}
    return:
      type: System.Numerics.Vector{System.SByte}
      description: ''
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Narrow(low As Vector(Of Short), high As Vector(Of Short)) As Vector(Of SByte)
  overload: System.Numerics.Vector.Narrow*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.Narrow(Vector(Of Short), Vector(Of Short))
  fullName.vb: System.Numerics.Vector.Narrow(System.Numerics.Vector(Of Short), System.Numerics.Vector(Of Short))
  name.vb: Narrow(Vector(Of Short), Vector(Of Short))
- uid: System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  commentId: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  id: Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Narrow(Vector<int>, Vector<int>)
  nameWithType: Vector.Narrow(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.Narrow(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: public static Vector<short> Narrow(Vector<int> low, Vector<int> high)
    parameters:
    - id: low
      type: System.Numerics.Vector{System.Int32}
    - id: high
      type: System.Numerics.Vector{System.Int32}
    return:
      type: System.Numerics.Vector{System.Int16}
      description: ''
    content.vb: Public Shared Function Narrow(low As Vector(Of Integer), high As Vector(Of Integer)) As Vector(Of Short)
  overload: System.Numerics.Vector.Narrow*
  nameWithType.vb: Vector.Narrow(Vector(Of Integer), Vector(Of Integer))
  fullName.vb: System.Numerics.Vector.Narrow(System.Numerics.Vector(Of Integer), System.Numerics.Vector(Of Integer))
  name.vb: Narrow(Vector(Of Integer), Vector(Of Integer))
- uid: System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  commentId: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  id: Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Narrow(Vector<long>, Vector<long>)
  nameWithType: Vector.Narrow(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.Narrow(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: public static Vector<int> Narrow(Vector<long> low, Vector<long> high)
    parameters:
    - id: low
      type: System.Numerics.Vector{System.Int64}
    - id: high
      type: System.Numerics.Vector{System.Int64}
    return:
      type: System.Numerics.Vector{System.Int32}
      description: ''
    content.vb: Public Shared Function Narrow(low As Vector(Of Long), high As Vector(Of Long)) As Vector(Of Integer)
  overload: System.Numerics.Vector.Narrow*
  nameWithType.vb: Vector.Narrow(Vector(Of Long), Vector(Of Long))
  fullName.vb: System.Numerics.Vector.Narrow(System.Numerics.Vector(Of Long), System.Numerics.Vector(Of Long))
  name.vb: Narrow(Vector(Of Long), Vector(Of Long))
- uid: System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  commentId: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  id: Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Narrow(Vector<double>, Vector<double>)
  nameWithType: Vector.Narrow(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.Narrow(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: public static Vector<float> Narrow(Vector<double> low, Vector<double> high)
    parameters:
    - id: low
      type: System.Numerics.Vector{System.Double}
    - id: high
      type: System.Numerics.Vector{System.Double}
    return:
      type: System.Numerics.Vector{System.Single}
      description: ''
    content.vb: Public Shared Function Narrow(low As Vector(Of Double), high As Vector(Of Double)) As Vector(Of Single)
  overload: System.Numerics.Vector.Narrow*
  nameWithType.vb: Vector.Narrow(Vector(Of Double), Vector(Of Double))
  fullName.vb: System.Numerics.Vector.Narrow(System.Numerics.Vector(Of Double), System.Numerics.Vector(Of Double))
  name.vb: Narrow(Vector(Of Double), Vector(Of Double))
- uid: System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})
  commentId: M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})
  id: ConvertToSingle(System.Numerics.Vector{System.Int32})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConvertToSingle(Vector<int>)
  nameWithType: Vector.ConvertToSingle(Vector<int>)
  fullName: System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector<int>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: public static Vector<float> ConvertToSingle(Vector<int> value)
    parameters:
    - id: value
      type: System.Numerics.Vector{System.Int32}
      description: ''
    return:
      type: System.Numerics.Vector{System.Single}
      description: ''
    content.vb: Public Shared Function ConvertToSingle(value As Vector(Of Integer)) As Vector(Of Single)
  overload: System.Numerics.Vector.ConvertToSingle*
  nameWithType.vb: Vector.ConvertToSingle(Vector(Of Integer))
  fullName.vb: System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector(Of Integer))
  name.vb: ConvertToSingle(Vector(Of Integer))
- uid: System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})
  commentId: M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})
  id: ConvertToSingle(System.Numerics.Vector{System.UInt32})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConvertToSingle(Vector<uint>)
  nameWithType: Vector.ConvertToSingle(Vector<uint>)
  fullName: System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector<uint>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<float> ConvertToSingle(Vector<uint> value)
    parameters:
    - id: value
      type: System.Numerics.Vector{System.UInt32}
      description: ''
    return:
      type: System.Numerics.Vector{System.Single}
      description: ''
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function ConvertToSingle(value As Vector(Of UInteger)) As Vector(Of Single)
  overload: System.Numerics.Vector.ConvertToSingle*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.ConvertToSingle(Vector(Of UInteger))
  fullName.vb: System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector(Of UInteger))
  name.vb: ConvertToSingle(Vector(Of UInteger))
- uid: System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})
  commentId: M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})
  id: ConvertToDouble(System.Numerics.Vector{System.Int64})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConvertToDouble(Vector<long>)
  nameWithType: Vector.ConvertToDouble(Vector<long>)
  fullName: System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector<long>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: public static Vector<double> ConvertToDouble(Vector<long> value)
    parameters:
    - id: value
      type: System.Numerics.Vector{System.Int64}
      description: ''
    return:
      type: System.Numerics.Vector{System.Double}
      description: ''
    content.vb: Public Shared Function ConvertToDouble(value As Vector(Of Long)) As Vector(Of Double)
  overload: System.Numerics.Vector.ConvertToDouble*
  nameWithType.vb: Vector.ConvertToDouble(Vector(Of Long))
  fullName.vb: System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector(Of Long))
  name.vb: ConvertToDouble(Vector(Of Long))
- uid: System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})
  commentId: M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})
  id: ConvertToDouble(System.Numerics.Vector{System.UInt64})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConvertToDouble(Vector<ulong>)
  nameWithType: Vector.ConvertToDouble(Vector<ulong>)
  fullName: System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector<ulong>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<double> ConvertToDouble(Vector<ulong> value)
    parameters:
    - id: value
      type: System.Numerics.Vector{System.UInt64}
      description: ''
    return:
      type: System.Numerics.Vector{System.Double}
      description: ''
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function ConvertToDouble(value As Vector(Of ULong)) As Vector(Of Double)
  overload: System.Numerics.Vector.ConvertToDouble*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.ConvertToDouble(Vector(Of ULong))
  fullName.vb: System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector(Of ULong))
  name.vb: ConvertToDouble(Vector(Of ULong))
- uid: System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})
  commentId: M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})
  id: ConvertToInt32(System.Numerics.Vector{System.Single})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConvertToInt32(Vector<float>)
  nameWithType: Vector.ConvertToInt32(Vector<float>)
  fullName: System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector<float>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: public static Vector<int> ConvertToInt32(Vector<float> value)
    parameters:
    - id: value
      type: System.Numerics.Vector{System.Single}
      description: ''
    return:
      type: System.Numerics.Vector{System.Int32}
      description: ''
    content.vb: Public Shared Function ConvertToInt32(value As Vector(Of Single)) As Vector(Of Integer)
  overload: System.Numerics.Vector.ConvertToInt32*
  nameWithType.vb: Vector.ConvertToInt32(Vector(Of Single))
  fullName.vb: System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector(Of Single))
  name.vb: ConvertToInt32(Vector(Of Single))
- uid: System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})
  commentId: M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})
  id: ConvertToUInt32(System.Numerics.Vector{System.Single})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConvertToUInt32(Vector<float>)
  nameWithType: Vector.ConvertToUInt32(Vector<float>)
  fullName: System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector<float>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<uint> ConvertToUInt32(Vector<float> value)
    parameters:
    - id: value
      type: System.Numerics.Vector{System.Single}
      description: ''
    return:
      type: System.Numerics.Vector{System.UInt32}
      description: ''
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function ConvertToUInt32(value As Vector(Of Single)) As Vector(Of UInteger)
  overload: System.Numerics.Vector.ConvertToUInt32*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.ConvertToUInt32(Vector(Of Single))
  fullName.vb: System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector(Of Single))
  name.vb: ConvertToUInt32(Vector(Of Single))
- uid: System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})
  commentId: M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})
  id: ConvertToInt64(System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConvertToInt64(Vector<double>)
  nameWithType: Vector.ConvertToInt64(Vector<double>)
  fullName: System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector<double>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: public static Vector<long> ConvertToInt64(Vector<double> value)
    parameters:
    - id: value
      type: System.Numerics.Vector{System.Double}
      description: ''
    return:
      type: System.Numerics.Vector{System.Int64}
      description: ''
    content.vb: Public Shared Function ConvertToInt64(value As Vector(Of Double)) As Vector(Of Long)
  overload: System.Numerics.Vector.ConvertToInt64*
  nameWithType.vb: Vector.ConvertToInt64(Vector(Of Double))
  fullName.vb: System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector(Of Double))
  name.vb: ConvertToInt64(Vector(Of Double))
- uid: System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})
  commentId: M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})
  id: ConvertToUInt64(System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConvertToUInt64(Vector<double>)
  nameWithType: Vector.ConvertToUInt64(Vector<double>)
  fullName: System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector<double>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<ulong> ConvertToUInt64(Vector<double> value)
    parameters:
    - id: value
      type: System.Numerics.Vector{System.Double}
      description: ''
    return:
      type: System.Numerics.Vector{System.UInt64}
      description: ''
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function ConvertToUInt64(value As Vector(Of Double)) As Vector(Of ULong)
  overload: System.Numerics.Vector.ConvertToUInt64*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.ConvertToUInt64(Vector(Of Double))
  fullName.vb: System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector(Of Double))
  name.vb: ConvertToUInt64(Vector(Of Double))
- uid: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  commentId: M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  id: ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConditionalSelect(Vector<int>, Vector<float>, Vector<float>)
  nameWithType: Vector.ConditionalSelect(Vector<int>, Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector<int>, System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Creates a new single-precision vector with elements selected between two specified single-precision source vectors based on an integral mask vector.
  example: []
  syntax:
    content: public static Vector<float> ConditionalSelect(Vector<int> condition, Vector<float> left, Vector<float> right)
    parameters:
    - id: condition
      type: System.Numerics.Vector{System.Int32}
      description: The integral mask vector used to drive selection.
    - id: left
      type: System.Numerics.Vector{System.Single}
      description: The first source vector.
    - id: right
      type: System.Numerics.Vector{System.Single}
      description: The second source vector.
    return:
      type: System.Numerics.Vector{System.Single}
      description: The new vector with elements selected based on the mask.
    content.vb: Public Shared Function ConditionalSelect(condition As Vector(Of Integer), left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Single)
  overload: System.Numerics.Vector.ConditionalSelect*
  nameWithType.vb: Vector.ConditionalSelect(Vector(Of Integer), Vector(Of Single), Vector(Of Single))
  fullName.vb: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector(Of Integer), System.Numerics.Vector(Of Single), System.Numerics.Vector(Of Single))
  name.vb: ConditionalSelect(Vector(Of Integer), Vector(Of Single), Vector(Of Single))
- uid: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  commentId: M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  id: ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConditionalSelect(Vector<long>, Vector<double>, Vector<double>)
  nameWithType: Vector.ConditionalSelect(Vector<long>, Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector<long>, System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Creates a new double-precision vector with elements selected between two specified double-precision source vectors based on an integral mask vector.
  example: []
  syntax:
    content: public static Vector<double> ConditionalSelect(Vector<long> condition, Vector<double> left, Vector<double> right)
    parameters:
    - id: condition
      type: System.Numerics.Vector{System.Int64}
      description: The integral mask vector used to drive selection.
    - id: left
      type: System.Numerics.Vector{System.Double}
      description: The first source vector.
    - id: right
      type: System.Numerics.Vector{System.Double}
      description: The second source vector.
    return:
      type: System.Numerics.Vector{System.Double}
      description: The new vector with elements selected based on the mask.
    content.vb: Public Shared Function ConditionalSelect(condition As Vector(Of Long), left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Double)
  overload: System.Numerics.Vector.ConditionalSelect*
  nameWithType.vb: Vector.ConditionalSelect(Vector(Of Long), Vector(Of Double), Vector(Of Double))
  fullName.vb: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector(Of Long), System.Numerics.Vector(Of Double), System.Numerics.Vector(Of Double))
  name.vb: ConditionalSelect(Vector(Of Long), Vector(Of Double), Vector(Of Double))
- uid: System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: ConditionalSelect<T>(Vector<T>, Vector<T>, Vector<T>)
  nameWithType: Vector.ConditionalSelect<T>(Vector<T>, Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.ConditionalSelect<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Creates a new vector of a specified type with elements selected between two specified source vectors of the same type based on an integral mask vector.
  example: []
  syntax:
    content: 'public static Vector<T> ConditionalSelect<T>(Vector<T> condition, Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: condition
      type: System.Numerics.Vector{{T}}
      description: The integral mask vector used to drive selection.
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first source vector.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The new vector with elements selected based on the mask.
    content.vb: Public Shared Function ConditionalSelect(Of T As Structure)(condition As Vector(Of T), left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.ConditionalSelect*
  nameWithType.vb: Vector.ConditionalSelect(Of T)(Vector(Of T), Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.ConditionalSelect(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: ConditionalSelect(Of T)(Vector(Of T), Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Equals<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.Equals<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Equals<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector of a specified type whose elements signal whether the elements in two specified vectors of the same type are equal.
  example: []
  syntax:
    content: 'public static Vector<T> Equals<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The resulting vector.
    content.vb: Public Shared Function Equals(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Equals*
  nameWithType.vb: Vector.Equals(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.Equals(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: Equals(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  commentId: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  id: Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Equals(Vector<float>, Vector<float>)
  nameWithType: Vector.Equals(Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in two specified single-precision vectors are equal.
  example: []
  syntax:
    content: public static Vector<int> Equals(Vector<float> left, Vector<float> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Single}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Single}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The resulting integral vector.
    content.vb: Public Shared Function Equals(left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)
  overload: System.Numerics.Vector.Equals*
  nameWithType.vb: Vector.Equals(Vector(Of Single), Vector(Of Single))
  fullName.vb: System.Numerics.Vector.Equals(System.Numerics.Vector(Of Single), System.Numerics.Vector(Of Single))
  name.vb: Equals(Vector(Of Single), Vector(Of Single))
- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  commentId: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  id: Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Equals(Vector<int>, Vector<int>)
  nameWithType: Vector.Equals(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in two specified integral vectors are equal.
  example: []
  syntax:
    content: public static Vector<int> Equals(Vector<int> left, Vector<int> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Int32}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Int32}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The resulting integral vector.
    content.vb: Public Shared Function Equals(left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)
  overload: System.Numerics.Vector.Equals*
  nameWithType.vb: Vector.Equals(Vector(Of Integer), Vector(Of Integer))
  fullName.vb: System.Numerics.Vector.Equals(System.Numerics.Vector(Of Integer), System.Numerics.Vector(Of Integer))
  name.vb: Equals(Vector(Of Integer), Vector(Of Integer))
- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  commentId: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  id: Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Equals(Vector<double>, Vector<double>)
  nameWithType: Vector.Equals(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in two specified double-precision vectors are equal.
  example: []
  syntax:
    content: public static Vector<long> Equals(Vector<double> left, Vector<double> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Double}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Double}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The resulting integral vector.
    content.vb: Public Shared Function Equals(left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)
  overload: System.Numerics.Vector.Equals*
  nameWithType.vb: Vector.Equals(Vector(Of Double), Vector(Of Double))
  fullName.vb: System.Numerics.Vector.Equals(System.Numerics.Vector(Of Double), System.Numerics.Vector(Of Double))
  name.vb: Equals(Vector(Of Double), Vector(Of Double))
- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  commentId: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  id: Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Equals(Vector<long>, Vector<long>)
  nameWithType: Vector.Equals(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose elements signal whether the elements in two specified long integer vectors are equal.
  example: []
  syntax:
    content: public static Vector<long> Equals(Vector<long> left, Vector<long> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Int64}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Int64}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The resulting long integer vector.
    content.vb: Public Shared Function Equals(left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)
  overload: System.Numerics.Vector.Equals*
  nameWithType.vb: Vector.Equals(Vector(Of Long), Vector(Of Long))
  fullName.vb: System.Numerics.Vector.Equals(System.Numerics.Vector(Of Long), System.Numerics.Vector(Of Long))
  name.vb: Equals(Vector(Of Long), Vector(Of Long))
- uid: System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: EqualsAll<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.EqualsAll<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.EqualsAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a value that indicates whether each pair of elements in the given vectors is equal.
  example: []
  syntax:
    content: 'public static bool EqualsAll<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Boolean
      description: true if all elements in <code class="paramref">left</code> and <code class="paramref">right</code> are equal; otherwise, false.
    content.vb: Public Shared Function EqualsAll(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean
  overload: System.Numerics.Vector.EqualsAll*
  nameWithType.vb: Vector.EqualsAll(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.EqualsAll(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: EqualsAll(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: EqualsAny<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.EqualsAny<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.EqualsAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a value that indicates whether any single pair of elements in the given vectors is equal.
  example: []
  syntax:
    content: 'public static bool EqualsAny<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Boolean
      description: true if any element pair in <code class="paramref">left</code> and <code class="paramref">right</code> is equal; otherwise, false.
    content.vb: Public Shared Function EqualsAny(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean
  overload: System.Numerics.Vector.EqualsAny*
  nameWithType.vb: Vector.EqualsAny(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.EqualsAny(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: EqualsAny(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThan<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.LessThan<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThan<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector of a specified type whose elements signal whether the elements in one vector are less than their corresponding elements in the second vector.
  example: []
  syntax:
    content: 'public static Vector<T> LessThan<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The resulting vector.
    content.vb: Public Shared Function LessThan(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.LessThan*
  nameWithType.vb: Vector.LessThan(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.LessThan(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: LessThan(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  commentId: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  id: LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThan(Vector<float>, Vector<float>)
  nameWithType: Vector.LessThan(Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one single-precision vector are less than their corresponding elements in a second single-precision vector.
  example: []
  syntax:
    content: public static Vector<int> LessThan(Vector<float> left, Vector<float> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Single}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Single}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The resulting integral vector.
    content.vb: Public Shared Function LessThan(left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)
  overload: System.Numerics.Vector.LessThan*
  nameWithType.vb: Vector.LessThan(Vector(Of Single), Vector(Of Single))
  fullName.vb: System.Numerics.Vector.LessThan(System.Numerics.Vector(Of Single), System.Numerics.Vector(Of Single))
  name.vb: LessThan(Vector(Of Single), Vector(Of Single))
- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  commentId: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  id: LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThan(Vector<int>, Vector<int>)
  nameWithType: Vector.LessThan(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one integral vector are less than their corresponding elements in a second integral vector.
  example: []
  syntax:
    content: public static Vector<int> LessThan(Vector<int> left, Vector<int> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Int32}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Int32}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The resulting integral vector
    content.vb: Public Shared Function LessThan(left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)
  overload: System.Numerics.Vector.LessThan*
  nameWithType.vb: Vector.LessThan(Vector(Of Integer), Vector(Of Integer))
  fullName.vb: System.Numerics.Vector.LessThan(System.Numerics.Vector(Of Integer), System.Numerics.Vector(Of Integer))
  name.vb: LessThan(Vector(Of Integer), Vector(Of Integer))
- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  commentId: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  id: LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThan(Vector<double>, Vector<double>)
  nameWithType: Vector.LessThan(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than their corresponding elements in a second double-precision floating-point vector.
  example: []
  syntax:
    content: public static Vector<long> LessThan(Vector<double> left, Vector<double> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Double}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Double}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The resulting integral vector.
    content.vb: Public Shared Function LessThan(left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)
  overload: System.Numerics.Vector.LessThan*
  nameWithType.vb: Vector.LessThan(Vector(Of Double), Vector(Of Double))
  fullName.vb: System.Numerics.Vector.LessThan(System.Numerics.Vector(Of Double), System.Numerics.Vector(Of Double))
  name.vb: LessThan(Vector(Of Double), Vector(Of Double))
- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  commentId: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  id: LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThan(Vector<long>, Vector<long>)
  nameWithType: Vector.LessThan(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less than their corresponding elements in a second long integer vector.
  example: []
  syntax:
    content: public static Vector<long> LessThan(Vector<long> left, Vector<long> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Int64}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Int64}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The resulting long integer vector.
    content.vb: Public Shared Function LessThan(left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)
  overload: System.Numerics.Vector.LessThan*
  nameWithType.vb: Vector.LessThan(Vector(Of Long), Vector(Of Long))
  fullName.vb: System.Numerics.Vector.LessThan(System.Numerics.Vector(Of Long), System.Numerics.Vector(Of Long))
  name.vb: LessThan(Vector(Of Long), Vector(Of Long))
- uid: System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThanAll<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.LessThanAll<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThanAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a value that indicates whether all of the elements in the first vector are less than their corresponding elements in the second vector.
  example: []
  syntax:
    content: 'public static bool LessThanAll<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Boolean
      description: true if all of the elements in <code class="paramref">left</code> are less than the corresponding elements in <code class="paramref">right</code>; otherwise,  false.
    content.vb: Public Shared Function LessThanAll(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean
  overload: System.Numerics.Vector.LessThanAll*
  nameWithType.vb: Vector.LessThanAll(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.LessThanAll(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: LessThanAll(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThanAny<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.LessThanAny<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThanAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a value that indicates whether any element in the first vector is less than the corresponding element in the second vector.
  example: []
  syntax:
    content: 'public static bool LessThanAny<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Boolean
      description: true if any element in <code class="paramref">left</code> is less than the corresponding element in <code class="paramref">right</code>; otherwise,  false.
    content.vb: Public Shared Function LessThanAny(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean
  overload: System.Numerics.Vector.LessThanAny*
  nameWithType.vb: Vector.LessThanAny(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.LessThanAny(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: LessThanAny(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThanOrEqual<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.LessThanOrEqual<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThanOrEqual<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose elements signal whether the elements in one vector are less than or equal to their corresponding elements in the second vector.
  example: []
  syntax:
    content: 'public static Vector<T> LessThanOrEqual<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The resulting vector.
    content.vb: Public Shared Function LessThanOrEqual(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.LessThanOrEqual*
  nameWithType.vb: Vector.LessThanOrEqual(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.LessThanOrEqual(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: LessThanOrEqual(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  commentId: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  id: LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Vector<float>, Vector<float>)
  nameWithType: Vector.LessThanOrEqual(Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are less than or equal to their corresponding elements in a second single-precision floating-point vector.
  example: []
  syntax:
    content: public static Vector<int> LessThanOrEqual(Vector<float> left, Vector<float> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Single}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Single}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The resulting integral vector.
    content.vb: Public Shared Function LessThanOrEqual(left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)
  overload: System.Numerics.Vector.LessThanOrEqual*
  nameWithType.vb: Vector.LessThanOrEqual(Vector(Of Single), Vector(Of Single))
  fullName.vb: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector(Of Single), System.Numerics.Vector(Of Single))
  name.vb: LessThanOrEqual(Vector(Of Single), Vector(Of Single))
- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  commentId: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  id: LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Vector<int>, Vector<int>)
  nameWithType: Vector.LessThanOrEqual(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one integral vector are less than or equal to their corresponding elements in a second integral vector.
  example: []
  syntax:
    content: public static Vector<int> LessThanOrEqual(Vector<int> left, Vector<int> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Int32}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Int32}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The resulting integral vector.
    content.vb: Public Shared Function LessThanOrEqual(left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)
  overload: System.Numerics.Vector.LessThanOrEqual*
  nameWithType.vb: Vector.LessThanOrEqual(Vector(Of Integer), Vector(Of Integer))
  fullName.vb: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector(Of Integer), System.Numerics.Vector(Of Integer))
  name.vb: LessThanOrEqual(Vector(Of Integer), Vector(Of Integer))
- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  commentId: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  id: LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Vector<long>, Vector<long>)
  nameWithType: Vector.LessThanOrEqual(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less or equal to their corresponding elements in a second long integer vector.
  example: []
  syntax:
    content: public static Vector<long> LessThanOrEqual(Vector<long> left, Vector<long> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Int64}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Int64}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The resulting long integer vector.
    content.vb: Public Shared Function LessThanOrEqual(left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)
  overload: System.Numerics.Vector.LessThanOrEqual*
  nameWithType.vb: Vector.LessThanOrEqual(Vector(Of Long), Vector(Of Long))
  fullName.vb: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector(Of Long), System.Numerics.Vector(Of Long))
  name.vb: LessThanOrEqual(Vector(Of Long), Vector(Of Long))
- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  commentId: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  id: LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Vector<double>, Vector<double>)
  nameWithType: Vector.LessThanOrEqual(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than or equal to their corresponding elements in a second double-precision floating-point vector.
  example: []
  syntax:
    content: public static Vector<long> LessThanOrEqual(Vector<double> left, Vector<double> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Double}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Double}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The resulting integral vector.
    content.vb: Public Shared Function LessThanOrEqual(left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)
  overload: System.Numerics.Vector.LessThanOrEqual*
  nameWithType.vb: Vector.LessThanOrEqual(Vector(Of Double), Vector(Of Double))
  fullName.vb: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector(Of Double), System.Numerics.Vector(Of Double))
  name.vb: LessThanOrEqual(Vector(Of Double), Vector(Of Double))
- uid: System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThanOrEqualAll<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.LessThanOrEqualAll<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThanOrEqualAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a value that indicates whether all elements in the first vector are less than or equal to their corresponding elements in the second vector.
  example: []
  syntax:
    content: 'public static bool LessThanOrEqualAll<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Boolean
      description: true if all of the elements in <code class="paramref">left</code> are less than or equal to the corresponding elements in <code class="paramref">right</code>; otherwise,  false.
    content.vb: Public Shared Function LessThanOrEqualAll(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean
  overload: System.Numerics.Vector.LessThanOrEqualAll*
  nameWithType.vb: Vector.LessThanOrEqualAll(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.LessThanOrEqualAll(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: LessThanOrEqualAll(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: LessThanOrEqualAny<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.LessThanOrEqualAny<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThanOrEqualAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a value that indicates whether any element in the first vector is less than or equal to the corresponding element in the second vector.
  example: []
  syntax:
    content: 'public static bool LessThanOrEqualAny<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Boolean
      description: true if any element in <code class="paramref">left</code> is less than or equal to the corresponding element in <code class="paramref">right</code>; otherwise,  false.
    content.vb: Public Shared Function LessThanOrEqualAny(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean
  overload: System.Numerics.Vector.LessThanOrEqualAny*
  nameWithType.vb: Vector.LessThanOrEqualAny(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.LessThanOrEqualAny(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: LessThanOrEqualAny(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThan<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.GreaterThan<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThan<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than their corresponding elements in the second vector of the same time.
  example: []
  syntax:
    content: 'public static Vector<T> GreaterThan<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The resulting vector.
    content.vb: Public Shared Function GreaterThan(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.GreaterThan*
  nameWithType.vb: Vector.GreaterThan(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.GreaterThan(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: GreaterThan(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  commentId: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  id: GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThan(Vector<float>, Vector<float>)
  nameWithType: Vector.GreaterThan(Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are greater than their corresponding elements in a second single-precision floating-point vector.
  example: []
  syntax:
    content: public static Vector<int> GreaterThan(Vector<float> left, Vector<float> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Single}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Single}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The resulting integral vector.
    content.vb: Public Shared Function GreaterThan(left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)
  overload: System.Numerics.Vector.GreaterThan*
  nameWithType.vb: Vector.GreaterThan(Vector(Of Single), Vector(Of Single))
  fullName.vb: System.Numerics.Vector.GreaterThan(System.Numerics.Vector(Of Single), System.Numerics.Vector(Of Single))
  name.vb: GreaterThan(Vector(Of Single), Vector(Of Single))
- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  commentId: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  id: GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThan(Vector<int>, Vector<int>)
  nameWithType: Vector.GreaterThan(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than their corresponding elements in a second integral vector.
  example: []
  syntax:
    content: public static Vector<int> GreaterThan(Vector<int> left, Vector<int> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Int32}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Int32}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The resulting integral vector.
    content.vb: Public Shared Function GreaterThan(left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)
  overload: System.Numerics.Vector.GreaterThan*
  nameWithType.vb: Vector.GreaterThan(Vector(Of Integer), Vector(Of Integer))
  fullName.vb: System.Numerics.Vector.GreaterThan(System.Numerics.Vector(Of Integer), System.Numerics.Vector(Of Integer))
  name.vb: GreaterThan(Vector(Of Integer), Vector(Of Integer))
- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  commentId: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  id: GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThan(Vector<double>, Vector<double>)
  nameWithType: Vector.GreaterThan(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are greater than their corresponding elements in a second double-precision floating-point vector.
  example: []
  syntax:
    content: public static Vector<long> GreaterThan(Vector<double> left, Vector<double> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Double}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Double}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The resulting integral vector.
    content.vb: Public Shared Function GreaterThan(left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)
  overload: System.Numerics.Vector.GreaterThan*
  nameWithType.vb: Vector.GreaterThan(Vector(Of Double), Vector(Of Double))
  fullName.vb: System.Numerics.Vector.GreaterThan(System.Numerics.Vector(Of Double), System.Numerics.Vector(Of Double))
  name.vb: GreaterThan(Vector(Of Double), Vector(Of Double))
- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  commentId: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  id: GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThan(Vector<long>, Vector<long>)
  nameWithType: Vector.GreaterThan(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than their corresponding elements in a second long integer vector.
  example: []
  syntax:
    content: public static Vector<long> GreaterThan(Vector<long> left, Vector<long> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Int64}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Int64}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The resulting long integer vector.
    content.vb: Public Shared Function GreaterThan(left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)
  overload: System.Numerics.Vector.GreaterThan*
  nameWithType.vb: Vector.GreaterThan(Vector(Of Long), Vector(Of Long))
  fullName.vb: System.Numerics.Vector.GreaterThan(System.Numerics.Vector(Of Long), System.Numerics.Vector(Of Long))
  name.vb: GreaterThan(Vector(Of Long), Vector(Of Long))
- uid: System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThanAll<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.GreaterThanAll<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThanAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a value that indicates whether all elements in the first vector are greater than the corresponding elements in the second vector.
  example: []
  syntax:
    content: 'public static bool GreaterThanAll<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Boolean
      description: true if all elements in <code class="paramref">left</code> are greater than the corresponding elements in <code class="paramref">right</code>; otherwise, false.
    content.vb: Public Shared Function GreaterThanAll(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean
  overload: System.Numerics.Vector.GreaterThanAll*
  nameWithType.vb: Vector.GreaterThanAll(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.GreaterThanAll(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: GreaterThanAll(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThanAny<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.GreaterThanAny<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThanAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a value that indicates whether any element in the first vector is greater than the corresponding element in the second vector.
  example: []
  syntax:
    content: 'public static bool GreaterThanAny<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Boolean
      description: true if any element in <code class="paramref">left</code> is greater than the corresponding element in <code class="paramref">right</code>; otherwise,  false.
    content.vb: Public Shared Function GreaterThanAny(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean
  overload: System.Numerics.Vector.GreaterThanAny*
  nameWithType.vb: Vector.GreaterThanAny(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.GreaterThanAny(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: GreaterThanAny(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.GreaterThanOrEqual<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThanOrEqual<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than or equal to their corresponding elements in the second vector of the same type.
  example: []
  syntax:
    content: 'public static Vector<T> GreaterThanOrEqual<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The resulting vector.
    content.vb: Public Shared Function GreaterThanOrEqual(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.GreaterThanOrEqual*
  nameWithType.vb: Vector.GreaterThanOrEqual(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.GreaterThanOrEqual(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: GreaterThanOrEqual(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  commentId: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  id: GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Vector<float>, Vector<float>)
  nameWithType: Vector.GreaterThanOrEqual(Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the single-precision floating-point second vector.
  example: []
  syntax:
    content: public static Vector<int> GreaterThanOrEqual(Vector<float> left, Vector<float> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Single}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Single}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The resulting integral vector.
    content.vb: Public Shared Function GreaterThanOrEqual(left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)
  overload: System.Numerics.Vector.GreaterThanOrEqual*
  nameWithType.vb: Vector.GreaterThanOrEqual(Vector(Of Single), Vector(Of Single))
  fullName.vb: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector(Of Single), System.Numerics.Vector(Of Single))
  name.vb: GreaterThanOrEqual(Vector(Of Single), Vector(Of Single))
- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  commentId: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  id: GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Vector<int>, Vector<int>)
  nameWithType: Vector.GreaterThanOrEqual(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than or equal to their corresponding elements in the second integral vector.
  example: []
  syntax:
    content: public static Vector<int> GreaterThanOrEqual(Vector<int> left, Vector<int> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Int32}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Int32}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The resulting integral vector.
    content.vb: Public Shared Function GreaterThanOrEqual(left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)
  overload: System.Numerics.Vector.GreaterThanOrEqual*
  nameWithType.vb: Vector.GreaterThanOrEqual(Vector(Of Integer), Vector(Of Integer))
  fullName.vb: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector(Of Integer), System.Numerics.Vector(Of Integer))
  name.vb: GreaterThanOrEqual(Vector(Of Integer), Vector(Of Integer))
- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  commentId: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  id: GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Vector<long>, Vector<long>)
  nameWithType: Vector.GreaterThanOrEqual(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than or equal to their corresponding elements in the second long integer vector.
  example: []
  syntax:
    content: public static Vector<long> GreaterThanOrEqual(Vector<long> left, Vector<long> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Int64}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Int64}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The resulting long integer vector.
    content.vb: Public Shared Function GreaterThanOrEqual(left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)
  overload: System.Numerics.Vector.GreaterThanOrEqual*
  nameWithType.vb: Vector.GreaterThanOrEqual(Vector(Of Long), Vector(Of Long))
  fullName.vb: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector(Of Long), System.Numerics.Vector(Of Long))
  name.vb: GreaterThanOrEqual(Vector(Of Long), Vector(Of Long))
- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  commentId: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  id: GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Vector<double>, Vector<double>)
  nameWithType: Vector.GreaterThanOrEqual(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the second double-precision floating-point vector.
  example: []
  syntax:
    content: public static Vector<long> GreaterThanOrEqual(Vector<double> left, Vector<double> right)
    parameters:
    - id: left
      type: System.Numerics.Vector{System.Double}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{System.Double}
      description: The second vector to compare.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The resulting integral vector.
    content.vb: Public Shared Function GreaterThanOrEqual(left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)
  overload: System.Numerics.Vector.GreaterThanOrEqual*
  nameWithType.vb: Vector.GreaterThanOrEqual(Vector(Of Double), Vector(Of Double))
  fullName.vb: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector(Of Double), System.Numerics.Vector(Of Double))
  name.vb: GreaterThanOrEqual(Vector(Of Double), Vector(Of Double))
- uid: System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqualAll<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.GreaterThanOrEqualAll<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThanOrEqualAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a value that indicates whether all elements in the first vector are greater than or equal to all the corresponding elements in the second vector.
  example: []
  syntax:
    content: 'public static bool GreaterThanOrEqualAll<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Boolean
      description: true if all elements in <code class="paramref">left</code> are greater than or equal to the corresponding elements in <code class="paramref">right</code>; otherwise, false.
    content.vb: Public Shared Function GreaterThanOrEqualAll(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean
  overload: System.Numerics.Vector.GreaterThanOrEqualAll*
  nameWithType.vb: Vector.GreaterThanOrEqualAll(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.GreaterThanOrEqualAll(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: GreaterThanOrEqualAll(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqualAny<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.GreaterThanOrEqualAny<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThanOrEqualAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a value that indicates whether any element in the first vector is greater than or equal to the corresponding element in the second vector.
  example: []
  syntax:
    content: 'public static bool GreaterThanOrEqualAny<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Boolean
      description: true if any element in <code class="paramref">left</code> is greater than or equal to the corresponding element in <code class="paramref">right</code>; otherwise,  false.
    content.vb: Public Shared Function GreaterThanOrEqualAny(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean
  overload: System.Numerics.Vector.GreaterThanOrEqualAny*
  nameWithType.vb: Vector.GreaterThanOrEqualAny(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.GreaterThanOrEqualAny(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: GreaterThanOrEqualAny(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})
  id: Abs``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Abs<T>(Vector<T>)
  nameWithType: Vector.Abs<T>(Vector<T>)
  fullName: System.Numerics.Vector.Abs<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose elements are the absolute values of the given vector&amp;#39;s elements.
  example: []
  syntax:
    content: 'public static Vector<T> Abs<T>(Vector<T> value) where T : struct'
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The absolute value vector.
    content.vb: Public Shared Function Abs(Of T As Structure)(value As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Abs*
  nameWithType.vb: Vector.Abs(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.Abs(Of T)(System.Numerics.Vector(Of T))
  name.vb: Abs(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Min<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.Min<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Min<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose elements are the minimum of each pair of elements in the two given vectors.
  example: []
  syntax:
    content: 'public static Vector<T> Min<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The minimum vector.
    content.vb: Public Shared Function Min(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Min*
  nameWithType.vb: Vector.Min(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.Min(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: Min(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Max<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.Max<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Max<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose elements are the maximum of each pair of elements in the two given vectors.
  example: []
  syntax:
    content: 'public static Vector<T> Max<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector to compare.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The maximum vector.
    content.vb: Public Shared Function Max(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Max*
  nameWithType.vb: Vector.Max(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.Max(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: Max(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Dot<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.Dot<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Dot<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns the dot product of two vectors.
  example: []
  syntax:
    content: 'public static T Dot<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: '{T}'
      description: The dot product.
    content.vb: Public Shared Function Dot(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As T
  overload: System.Numerics.Vector.Dot*
  nameWithType.vb: Vector.Dot(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.Dot(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: Dot(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})
  id: SquareRoot``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: SquareRoot<T>(Vector<T>)
  nameWithType: Vector.SquareRoot<T>(Vector<T>)
  fullName: System.Numerics.Vector.SquareRoot<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose elements are the square roots of a specified vector&amp;#39;s elements.
  example: []
  syntax:
    content: 'public static Vector<T> SquareRoot<T>(Vector<T> value) where T : struct'
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The square root vector.
    content.vb: Public Shared Function SquareRoot(Of T As Structure)(value As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.SquareRoot*
  nameWithType.vb: Vector.SquareRoot(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.SquareRoot(Of T)(System.Numerics.Vector(Of T))
  name.vb: SquareRoot(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Add<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.Add<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Add<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose values are the sum of each pair of elements from two given vectors.
  example: []
  syntax:
    content: 'public static Vector<T> Add<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The summed vector.
    content.vb: Public Shared Function Add(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Add*
  nameWithType.vb: Vector.Add(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.Add(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: Add(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Subtract<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.Subtract<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Subtract<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose values are the difference between the elements in the second vector and their corresponding elements in the first vector.
  example: []
  syntax:
    content: 'public static Vector<T> Subtract<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The difference vector.
    content.vb: Public Shared Function Subtract(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Subtract*
  nameWithType.vb: Vector.Subtract(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.Subtract(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: Subtract(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Multiply<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.Multiply<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Multiply<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose values are the product of each pair of elements in two specified vectors.
  example: []
  syntax:
    content: 'public static Vector<T> Multiply<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The product vector.
    content.vb: Public Shared Function Multiply(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.Multiply(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: Multiply(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)
  commentId: M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)
  id: Multiply``1(System.Numerics.Vector{``0},``0)
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Multiply<T>(Vector<T>, T)
  nameWithType: Vector.Multiply<T>(Vector<T>, T)
  fullName: System.Numerics.Vector.Multiply<T>(System.Numerics.Vector<T>, T)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose values are the values of a specified vector each multiplied by a scalar value.
  example: []
  syntax:
    content: 'public static Vector<T> Multiply<T>(Vector<T> left, T right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The vector.
    - id: right
      type: '{T}'
      description: The scalar value.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The scaled vector.
    content.vb: Public Shared Function Multiply(Of T As Structure)(left As Vector(Of T), right As T) As Vector(Of T)
  overload: System.Numerics.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(Of T)(Vector(Of T), T)
  fullName.vb: System.Numerics.Vector.Multiply(Of T)(System.Numerics.Vector(Of T), T)
  name.vb: Multiply(Of T)(Vector(Of T), T)
- uid: System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})
  id: Multiply``1(``0,System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Multiply<T>(T, Vector<T>)
  nameWithType: Vector.Multiply<T>(T, Vector<T>)
  fullName: System.Numerics.Vector.Multiply<T>(T, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose values are a scalar value multiplied by each of the values of a specified vector.
  example: []
  syntax:
    content: 'public static Vector<T> Multiply<T>(T left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: '{T}'
      description: The scalar value.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The scaled vector.
    content.vb: Public Shared Function Multiply(Of T As Structure)(left As T, right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(Of T)(T, Vector(Of T))
  fullName.vb: System.Numerics.Vector.Multiply(Of T)(T, System.Numerics.Vector(Of T))
  name.vb: Multiply(Of T)(T, Vector(Of T))
- uid: System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Divide<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.Divide<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Divide<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose values are the result of dividing the first vector&amp;#39;s elements by the corresponding elements in the second vector.
  example: []
  syntax:
    content: 'public static Vector<T> Divide<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The divided vector.
    content.vb: Public Shared Function Divide(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Divide*
  nameWithType.vb: Vector.Divide(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.Divide(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: Divide(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})
  id: Negate``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Negate<T>(Vector<T>)
  nameWithType: Vector.Negate<T>(Vector<T>)
  fullName: System.Numerics.Vector.Negate<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose elements are the negation of the corresponding element in the specified vector.
  example: []
  syntax:
    content: 'public static Vector<T> Negate<T>(Vector<T> value) where T : struct'
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The negated vector.
    content.vb: Public Shared Function Negate(Of T As Structure)(value As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Negate*
  nameWithType.vb: Vector.Negate(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.Negate(Of T)(System.Numerics.Vector(Of T))
  name.vb: Negate(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: BitwiseAnd<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.BitwiseAnd<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.BitwiseAnd<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector by performing a bitwise And operation on each pair of elements in two vectors.
  example: []
  syntax:
    content: 'public static Vector<T> BitwiseAnd<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The resulting vector.
    content.vb: Public Shared Function BitwiseAnd(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.BitwiseAnd*
  nameWithType.vb: Vector.BitwiseAnd(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.BitwiseAnd(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: BitwiseAnd(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: BitwiseOr<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.BitwiseOr<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.BitwiseOr<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector by performing a bitwise Or operation on each pair of elements in two vectors.
  example: []
  syntax:
    content: 'public static Vector<T> BitwiseOr<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The resulting vector.
    content.vb: Public Shared Function BitwiseOr(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.BitwiseOr*
  nameWithType.vb: Vector.BitwiseOr(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.BitwiseOr(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: BitwiseOr(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})
  id: OnesComplement``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: OnesComplement<T>(Vector<T>)
  nameWithType: Vector.OnesComplement<T>(Vector<T>)
  fullName: System.Numerics.Vector.OnesComplement<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector whose elements are obtained by taking the one&amp;#39;s complement of a specified vector&amp;#39;s elements.
  example: []
  syntax:
    content: 'public static Vector<T> OnesComplement<T>(Vector<T> value) where T : struct'
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The resulting vector.
    content.vb: Public Shared Function OnesComplement(Of T As Structure)(value As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.OnesComplement*
  nameWithType.vb: Vector.OnesComplement(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.OnesComplement(Of T)(System.Numerics.Vector(Of T))
  name.vb: OnesComplement(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: Xor<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.Xor<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Xor<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector by performing a bitwise exclusive Or (XOr) operation on each pair of elements in two vectors.
  example: []
  syntax:
    content: 'public static Vector<T> Xor<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The resulting vector.
    content.vb: Public Shared Function [Xor](Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.Xor*
  nameWithType.vb: Vector.Xor(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.Xor(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: Xor(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  id: AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AndNot<T>(Vector<T>, Vector<T>)
  nameWithType: Vector.AndNot<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.AndNot<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Returns a new vector by performing a bitwise And Not operation on each pair of corresponding elements in two vectors.
  example: []
  syntax:
    content: 'public static Vector<T> AndNot<T>(Vector<T> left, Vector<T> right) where T : struct'
    parameters:
    - id: left
      type: System.Numerics.Vector{{T}}
      description: The first vector.
    - id: right
      type: System.Numerics.Vector{{T}}
      description: The second vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{{T}}
      description: The resulting vector.
    content.vb: Public Shared Function AndNot(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)
  overload: System.Numerics.Vector.AndNot*
  nameWithType.vb: Vector.AndNot(Of T)(Vector(Of T), Vector(Of T))
  fullName.vb: System.Numerics.Vector.AndNot(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))
  name.vb: AndNot(Of T)(Vector(Of T), Vector(Of T))
- uid: System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})
  id: AsVectorByte``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AsVectorByte<T>(Vector<T>)
  nameWithType: Vector.AsVectorByte<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorByte<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Reinterprets the bits of a specified vector into those of a vector of unsigned bytes.
  example: []
  syntax:
    content: 'public static Vector<byte> AsVectorByte<T>(Vector<T> value) where T : struct'
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{System.Byte}
      description: The reinterpreted vector.
    content.vb: Public Shared Function AsVectorByte(Of T As Structure)(value As Vector(Of T)) As Vector(Of Byte)
  overload: System.Numerics.Vector.AsVectorByte*
  nameWithType.vb: Vector.AsVectorByte(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.AsVectorByte(Of T)(System.Numerics.Vector(Of T))
  name.vb: AsVectorByte(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})
  id: AsVectorSByte``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AsVectorSByte<T>(Vector<T>)
  nameWithType: Vector.AsVectorSByte<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorSByte<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Reinterprets the bits of a specified vector into those of a vector of signed bytes.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<sbyte> AsVectorSByte<T>(Vector<T> value) where T : struct
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{System.SByte}
      description: The reinterpreted vector.
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function AsVectorSByte(Of T As Structure)(value As Vector(Of T)) As Vector(Of SByte)
  overload: System.Numerics.Vector.AsVectorSByte*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.AsVectorSByte(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.AsVectorSByte(Of T)(System.Numerics.Vector(Of T))
  name.vb: AsVectorSByte(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})
  id: AsVectorUInt16``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AsVectorUInt16<T>(Vector<T>)
  nameWithType: Vector.AsVectorUInt16<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorUInt16<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Reinterprets the bits of a specified vector into those of a vector of unsigned 16-bit integers.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<ushort> AsVectorUInt16<T>(Vector<T> value) where T : struct
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{System.UInt16}
      description: The reinterpreted vector.
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function AsVectorUInt16(Of T As Structure)(value As Vector(Of T)) As Vector(Of UShort)
  overload: System.Numerics.Vector.AsVectorUInt16*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.AsVectorUInt16(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.AsVectorUInt16(Of T)(System.Numerics.Vector(Of T))
  name.vb: AsVectorUInt16(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})
  id: AsVectorInt16``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AsVectorInt16<T>(Vector<T>)
  nameWithType: Vector.AsVectorInt16<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorInt16<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Reinterprets the bits of a specified vector into those of a vector of 16-bit integers.
  example: []
  syntax:
    content: 'public static Vector<short> AsVectorInt16<T>(Vector<T> value) where T : struct'
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{System.Int16}
      description: The reinterpreted vector.
    content.vb: Public Shared Function AsVectorInt16(Of T As Structure)(value As Vector(Of T)) As Vector(Of Short)
  overload: System.Numerics.Vector.AsVectorInt16*
  nameWithType.vb: Vector.AsVectorInt16(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.AsVectorInt16(Of T)(System.Numerics.Vector(Of T))
  name.vb: AsVectorInt16(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})
  id: AsVectorUInt32``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AsVectorUInt32<T>(Vector<T>)
  nameWithType: Vector.AsVectorUInt32<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorUInt32<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Reinterprets the bits of a specified vector into those of a vector of unsigned integers.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<uint> AsVectorUInt32<T>(Vector<T> value) where T : struct
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{System.UInt32}
      description: The reinterpreted vector.
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function AsVectorUInt32(Of T As Structure)(value As Vector(Of T)) As Vector(Of UInteger)
  overload: System.Numerics.Vector.AsVectorUInt32*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.AsVectorUInt32(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.AsVectorUInt32(Of T)(System.Numerics.Vector(Of T))
  name.vb: AsVectorUInt32(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})
  id: AsVectorInt32``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AsVectorInt32<T>(Vector<T>)
  nameWithType: Vector.AsVectorInt32<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorInt32<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Reinterprets the bits of a specified vector into those of a vector of integers.
  example: []
  syntax:
    content: 'public static Vector<int> AsVectorInt32<T>(Vector<T> value) where T : struct'
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The reinterpreted vector.
    content.vb: Public Shared Function AsVectorInt32(Of T As Structure)(value As Vector(Of T)) As Vector(Of Integer)
  overload: System.Numerics.Vector.AsVectorInt32*
  nameWithType.vb: Vector.AsVectorInt32(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.AsVectorInt32(Of T)(System.Numerics.Vector(Of T))
  name.vb: AsVectorInt32(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})
  id: AsVectorUInt64``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AsVectorUInt64<T>(Vector<T>)
  nameWithType: Vector.AsVectorUInt64<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorUInt64<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Reinterprets the bits of a specified vector into those of a vector of unsigned long integers.
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static Vector<ulong> AsVectorUInt64<T>(Vector<T> value) where T : struct
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{System.UInt64}
      description: The reinterpreted vector.
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function AsVectorUInt64(Of T As Structure)(value As Vector(Of T)) As Vector(Of ULong)
  overload: System.Numerics.Vector.AsVectorUInt64*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Vector.AsVectorUInt64(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.AsVectorUInt64(Of T)(System.Numerics.Vector(Of T))
  name.vb: AsVectorUInt64(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})
  id: AsVectorInt64``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AsVectorInt64<T>(Vector<T>)
  nameWithType: Vector.AsVectorInt64<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorInt64<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Reinterprets the bits of a specified vector into those of a vector of long integers.
  example: []
  syntax:
    content: 'public static Vector<long> AsVectorInt64<T>(Vector<T> value) where T : struct'
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The reinterpreted vector.
    content.vb: Public Shared Function AsVectorInt64(Of T As Structure)(value As Vector(Of T)) As Vector(Of Long)
  overload: System.Numerics.Vector.AsVectorInt64*
  nameWithType.vb: Vector.AsVectorInt64(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.AsVectorInt64(Of T)(System.Numerics.Vector(Of T))
  name.vb: AsVectorInt64(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})
  id: AsVectorSingle``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AsVectorSingle<T>(Vector<T>)
  nameWithType: Vector.AsVectorSingle<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorSingle<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Reinterprets the bits of a specified vector into those of a single-precision floating-point vector.
  example: []
  syntax:
    content: 'public static Vector<float> AsVectorSingle<T>(Vector<T> value) where T : struct'
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{System.Single}
      description: The reinterpreted vector.
    content.vb: Public Shared Function AsVectorSingle(Of T As Structure)(value As Vector(Of T)) As Vector(Of Single)
  overload: System.Numerics.Vector.AsVectorSingle*
  nameWithType.vb: Vector.AsVectorSingle(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.AsVectorSingle(Of T)(System.Numerics.Vector(Of T))
  name.vb: AsVectorSingle(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})
  commentId: M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})
  id: AsVectorDouble``1(System.Numerics.Vector{``0})
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: AsVectorDouble<T>(Vector<T>)
  nameWithType: Vector.AsVectorDouble<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorDouble<T>(System.Numerics.Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Reinterprets the bits of a specified vector into those of a double-precision floating-point vector.
  example: []
  syntax:
    content: 'public static Vector<double> AsVectorDouble<T>(Vector<T> value) where T : struct'
    parameters:
    - id: value
      type: System.Numerics.Vector{{T}}
      description: The source vector.
    typeParameters:
    - id: T
      description: The vector type. T can be any primitive numeric type.
    return:
      type: System.Numerics.Vector{System.Double}
      description: The reinterpreted vector.
    content.vb: Public Shared Function AsVectorDouble(Of T As Structure)(value As Vector(Of T)) As Vector(Of Double)
  overload: System.Numerics.Vector.AsVectorDouble*
  nameWithType.vb: Vector.AsVectorDouble(Of T)(Vector(Of T))
  fullName.vb: System.Numerics.Vector.AsVectorDouble(Of T)(System.Numerics.Vector(Of T))
  name.vb: AsVectorDouble(Of T)(Vector(Of T))
- uid: System.Numerics.Vector.IsHardwareAccelerated
  commentId: P:System.Numerics.Vector.IsHardwareAccelerated
  id: IsHardwareAccelerated
  parent: System.Numerics.Vector
  langs:
  - csharp
  - vb
  name: IsHardwareAccelerated
  nameWithType: Vector.IsHardwareAccelerated
  fullName: System.Numerics.Vector.IsHardwareAccelerated
  type: Property
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: Gets a value that indicates whether vector operations are subject to hardware acceleration through JIT intrinsic support.
  example: []
  syntax:
    content: public static bool IsHardwareAccelerated { get; }
    parameters: []
    return:
      type: System.Boolean
      description: true if vector operations are subject to hardware acceleration; otherwise, false.
    content.vb: Public Shared ReadOnly Property IsHardwareAccelerated As Boolean
  overload: System.Numerics.Vector.IsHardwareAccelerated*
references:
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Numerics.Vector.Widen*
  commentId: Overload:System.Numerics.Vector.Widen
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Widen_System_Numerics_Vector_System_Byte__System_Numerics_Vector_System_UInt16___System_Numerics_Vector_System_UInt16___
  name: Widen
  nameWithType: Vector.Widen
  fullName: System.Numerics.Vector.Widen
- uid: System.Numerics.Vector{System.Byte}
  commentId: T:System.Numerics.Vector{System.Byte}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<byte>
  nameWithType: Vector<byte>
  fullName: System.Numerics.Vector<byte>
  nameWithType.vb: Vector(Of Byte)
  fullName.vb: System.Numerics.Vector(Of Byte)
  name.vb: Vector(Of Byte)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Numerics.Vector{System.UInt16}
  commentId: T:System.Numerics.Vector{System.UInt16}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<ushort>
  nameWithType: Vector<ushort>
  fullName: System.Numerics.Vector<ushort>
  nameWithType.vb: Vector(Of UShort)
  fullName.vb: System.Numerics.Vector(Of UShort)
  name.vb: Vector(Of UShort)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - uid: System.UInt16
    name: ushort
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint16
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt16
    name: UShort
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint16
  - name: )
- uid: System.Numerics.Vector`1
  commentId: T:System.Numerics.Vector`1
  parent: System.Numerics
  isExternal: true
  href: System.Numerics.Vector-1.html
  name: Vector<T>
  nameWithType: Vector<T>
  fullName: System.Numerics.Vector<T>
  nameWithType.vb: Vector(Of T)
  fullName.vb: System.Numerics.Vector(Of T)
  name.vb: Vector(Of T)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Numerics.Vector{System.UInt32}
  commentId: T:System.Numerics.Vector{System.UInt32}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<uint>
  nameWithType: Vector<uint>
  fullName: System.Numerics.Vector<uint>
  nameWithType.vb: Vector(Of UInteger)
  fullName.vb: System.Numerics.Vector(Of UInteger)
  name.vb: Vector(Of UInteger)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
- uid: System.Numerics.Vector{System.UInt64}
  commentId: T:System.Numerics.Vector{System.UInt64}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<ulong>
  nameWithType: Vector<ulong>
  fullName: System.Numerics.Vector<ulong>
  nameWithType.vb: Vector(Of ULong)
  fullName.vb: System.Numerics.Vector(Of ULong)
  name.vb: Vector(Of ULong)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: System.Numerics.Vector{System.SByte}
  commentId: T:System.Numerics.Vector{System.SByte}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<sbyte>
  nameWithType: Vector<sbyte>
  fullName: System.Numerics.Vector<sbyte>
  nameWithType.vb: Vector(Of SByte)
  fullName.vb: System.Numerics.Vector(Of SByte)
  name.vb: Vector(Of SByte)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - uid: System.SByte
    name: sbyte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.sbyte
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.SByte
    name: SByte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.sbyte
  - name: )
- uid: System.Numerics.Vector{System.Int16}
  commentId: T:System.Numerics.Vector{System.Int16}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<short>
  nameWithType: Vector<short>
  fullName: System.Numerics.Vector<short>
  nameWithType.vb: Vector(Of Short)
  fullName.vb: System.Numerics.Vector(Of Short)
  name.vb: Vector(Of Short)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - uid: System.Int16
    name: short
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int16
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int16
    name: Short
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int16
  - name: )
- uid: System.Numerics.Vector{System.Int32}
  commentId: T:System.Numerics.Vector{System.Int32}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<int>
  nameWithType: Vector<int>
  fullName: System.Numerics.Vector<int>
  nameWithType.vb: Vector(Of Integer)
  fullName.vb: System.Numerics.Vector(Of Integer)
  name.vb: Vector(Of Integer)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Numerics.Vector{System.Int64}
  commentId: T:System.Numerics.Vector{System.Int64}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<long>
  nameWithType: Vector<long>
  fullName: System.Numerics.Vector<long>
  nameWithType.vb: Vector(Of Long)
  fullName.vb: System.Numerics.Vector(Of Long)
  name.vb: Vector(Of Long)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: System.Numerics.Vector{System.Single}
  commentId: T:System.Numerics.Vector{System.Single}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<float>
  nameWithType: Vector<float>
  fullName: System.Numerics.Vector<float>
  nameWithType.vb: Vector(Of Single)
  fullName.vb: System.Numerics.Vector(Of Single)
  name.vb: Vector(Of Single)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Numerics.Vector{System.Double}
  commentId: T:System.Numerics.Vector{System.Double}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<double>
  nameWithType: Vector<double>
  fullName: System.Numerics.Vector<double>
  nameWithType.vb: Vector(Of Double)
  fullName.vb: System.Numerics.Vector(Of Double)
  name.vb: Vector(Of Double)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: System.Numerics.Vector.Narrow*
  commentId: Overload:System.Numerics.Vector.Narrow
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Narrow_System_Numerics_Vector_System_UInt16__System_Numerics_Vector_System_UInt16__
  name: Narrow
  nameWithType: Vector.Narrow
  fullName: System.Numerics.Vector.Narrow
- uid: System.Numerics.Vector.ConvertToSingle*
  commentId: Overload:System.Numerics.Vector.ConvertToSingle
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_ConvertToSingle_System_Numerics_Vector_System_Int32__
  name: ConvertToSingle
  nameWithType: Vector.ConvertToSingle
  fullName: System.Numerics.Vector.ConvertToSingle
- uid: System.Numerics.Vector.ConvertToDouble*
  commentId: Overload:System.Numerics.Vector.ConvertToDouble
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_ConvertToDouble_System_Numerics_Vector_System_Int64__
  name: ConvertToDouble
  nameWithType: Vector.ConvertToDouble
  fullName: System.Numerics.Vector.ConvertToDouble
- uid: System.Numerics.Vector.ConvertToInt32*
  commentId: Overload:System.Numerics.Vector.ConvertToInt32
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_ConvertToInt32_System_Numerics_Vector_System_Single__
  name: ConvertToInt32
  nameWithType: Vector.ConvertToInt32
  fullName: System.Numerics.Vector.ConvertToInt32
- uid: System.Numerics.Vector.ConvertToUInt32*
  commentId: Overload:System.Numerics.Vector.ConvertToUInt32
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_ConvertToUInt32_System_Numerics_Vector_System_Single__
  name: ConvertToUInt32
  nameWithType: Vector.ConvertToUInt32
  fullName: System.Numerics.Vector.ConvertToUInt32
- uid: System.Numerics.Vector.ConvertToInt64*
  commentId: Overload:System.Numerics.Vector.ConvertToInt64
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_ConvertToInt64_System_Numerics_Vector_System_Double__
  name: ConvertToInt64
  nameWithType: Vector.ConvertToInt64
  fullName: System.Numerics.Vector.ConvertToInt64
- uid: System.Numerics.Vector.ConvertToUInt64*
  commentId: Overload:System.Numerics.Vector.ConvertToUInt64
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_ConvertToUInt64_System_Numerics_Vector_System_Double__
  name: ConvertToUInt64
  nameWithType: Vector.ConvertToUInt64
  fullName: System.Numerics.Vector.ConvertToUInt64
- uid: System.Numerics.Vector.ConditionalSelect*
  commentId: Overload:System.Numerics.Vector.ConditionalSelect
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_ConditionalSelect_System_Numerics_Vector_System_Int32__System_Numerics_Vector_System_Single__System_Numerics_Vector_System_Single__
  name: ConditionalSelect
  nameWithType: Vector.ConditionalSelect
  fullName: System.Numerics.Vector.ConditionalSelect
- uid: System.Numerics.Vector{{T}}
  commentId: T:System.Numerics.Vector{``0}
  parent: System.Numerics
  definition: System.Numerics.Vector`1
  href: System.Numerics.Vector-1.html
  name: Vector<T>
  nameWithType: Vector<T>
  fullName: System.Numerics.Vector<T>
  nameWithType.vb: Vector(Of T)
  fullName.vb: System.Numerics.Vector(Of T)
  name.vb: Vector(Of T)
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Numerics.Vector`1
    name: Vector
    isExternal: true
    href: System.Numerics.Vector-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Numerics.Vector.Equals*
  commentId: Overload:System.Numerics.Vector.Equals
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Equals__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: Equals
  nameWithType: Vector.Equals
  fullName: System.Numerics.Vector.Equals
- uid: System.Numerics.Vector.EqualsAll*
  commentId: Overload:System.Numerics.Vector.EqualsAll
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_EqualsAll__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: EqualsAll
  nameWithType: Vector.EqualsAll
  fullName: System.Numerics.Vector.EqualsAll
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Numerics.Vector.EqualsAny*
  commentId: Overload:System.Numerics.Vector.EqualsAny
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_EqualsAny__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: EqualsAny
  nameWithType: Vector.EqualsAny
  fullName: System.Numerics.Vector.EqualsAny
- uid: System.Numerics.Vector.LessThan*
  commentId: Overload:System.Numerics.Vector.LessThan
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_LessThan__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: LessThan
  nameWithType: Vector.LessThan
  fullName: System.Numerics.Vector.LessThan
- uid: System.Numerics.Vector.LessThanAll*
  commentId: Overload:System.Numerics.Vector.LessThanAll
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_LessThanAll__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: LessThanAll
  nameWithType: Vector.LessThanAll
  fullName: System.Numerics.Vector.LessThanAll
- uid: System.Numerics.Vector.LessThanAny*
  commentId: Overload:System.Numerics.Vector.LessThanAny
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_LessThanAny__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: LessThanAny
  nameWithType: Vector.LessThanAny
  fullName: System.Numerics.Vector.LessThanAny
- uid: System.Numerics.Vector.LessThanOrEqual*
  commentId: Overload:System.Numerics.Vector.LessThanOrEqual
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_LessThanOrEqual__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: LessThanOrEqual
  nameWithType: Vector.LessThanOrEqual
  fullName: System.Numerics.Vector.LessThanOrEqual
- uid: System.Numerics.Vector.LessThanOrEqualAll*
  commentId: Overload:System.Numerics.Vector.LessThanOrEqualAll
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_LessThanOrEqualAll__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: LessThanOrEqualAll
  nameWithType: Vector.LessThanOrEqualAll
  fullName: System.Numerics.Vector.LessThanOrEqualAll
- uid: System.Numerics.Vector.LessThanOrEqualAny*
  commentId: Overload:System.Numerics.Vector.LessThanOrEqualAny
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_LessThanOrEqualAny__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: LessThanOrEqualAny
  nameWithType: Vector.LessThanOrEqualAny
  fullName: System.Numerics.Vector.LessThanOrEqualAny
- uid: System.Numerics.Vector.GreaterThan*
  commentId: Overload:System.Numerics.Vector.GreaterThan
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_GreaterThan__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: GreaterThan
  nameWithType: Vector.GreaterThan
  fullName: System.Numerics.Vector.GreaterThan
- uid: System.Numerics.Vector.GreaterThanAll*
  commentId: Overload:System.Numerics.Vector.GreaterThanAll
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_GreaterThanAll__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: GreaterThanAll
  nameWithType: Vector.GreaterThanAll
  fullName: System.Numerics.Vector.GreaterThanAll
- uid: System.Numerics.Vector.GreaterThanAny*
  commentId: Overload:System.Numerics.Vector.GreaterThanAny
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_GreaterThanAny__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: GreaterThanAny
  nameWithType: Vector.GreaterThanAny
  fullName: System.Numerics.Vector.GreaterThanAny
- uid: System.Numerics.Vector.GreaterThanOrEqual*
  commentId: Overload:System.Numerics.Vector.GreaterThanOrEqual
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_GreaterThanOrEqual__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: GreaterThanOrEqual
  nameWithType: Vector.GreaterThanOrEqual
  fullName: System.Numerics.Vector.GreaterThanOrEqual
- uid: System.Numerics.Vector.GreaterThanOrEqualAll*
  commentId: Overload:System.Numerics.Vector.GreaterThanOrEqualAll
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_GreaterThanOrEqualAll__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: GreaterThanOrEqualAll
  nameWithType: Vector.GreaterThanOrEqualAll
  fullName: System.Numerics.Vector.GreaterThanOrEqualAll
- uid: System.Numerics.Vector.GreaterThanOrEqualAny*
  commentId: Overload:System.Numerics.Vector.GreaterThanOrEqualAny
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_GreaterThanOrEqualAny__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: GreaterThanOrEqualAny
  nameWithType: Vector.GreaterThanOrEqualAny
  fullName: System.Numerics.Vector.GreaterThanOrEqualAny
- uid: System.Numerics.Vector.Abs*
  commentId: Overload:System.Numerics.Vector.Abs
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Abs__1_System_Numerics_Vector___0__
  name: Abs
  nameWithType: Vector.Abs
  fullName: System.Numerics.Vector.Abs
- uid: System.Numerics.Vector.Min*
  commentId: Overload:System.Numerics.Vector.Min
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Min__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: Min
  nameWithType: Vector.Min
  fullName: System.Numerics.Vector.Min
- uid: System.Numerics.Vector.Max*
  commentId: Overload:System.Numerics.Vector.Max
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Max__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: Max
  nameWithType: Vector.Max
  fullName: System.Numerics.Vector.Max
- uid: System.Numerics.Vector.Dot*
  commentId: Overload:System.Numerics.Vector.Dot
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Dot__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: Dot
  nameWithType: Vector.Dot
  fullName: System.Numerics.Vector.Dot
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Numerics.Vector.SquareRoot*
  commentId: Overload:System.Numerics.Vector.SquareRoot
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_SquareRoot__1_System_Numerics_Vector___0__
  name: SquareRoot
  nameWithType: Vector.SquareRoot
  fullName: System.Numerics.Vector.SquareRoot
- uid: System.Numerics.Vector.Add*
  commentId: Overload:System.Numerics.Vector.Add
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Add__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: Add
  nameWithType: Vector.Add
  fullName: System.Numerics.Vector.Add
- uid: System.Numerics.Vector.Subtract*
  commentId: Overload:System.Numerics.Vector.Subtract
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Subtract__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: Subtract
  nameWithType: Vector.Subtract
  fullName: System.Numerics.Vector.Subtract
- uid: System.Numerics.Vector.Multiply*
  commentId: Overload:System.Numerics.Vector.Multiply
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Multiply__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: Multiply
  nameWithType: Vector.Multiply
  fullName: System.Numerics.Vector.Multiply
- uid: System.Numerics.Vector.Divide*
  commentId: Overload:System.Numerics.Vector.Divide
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Divide__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: Divide
  nameWithType: Vector.Divide
  fullName: System.Numerics.Vector.Divide
- uid: System.Numerics.Vector.Negate*
  commentId: Overload:System.Numerics.Vector.Negate
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Negate__1_System_Numerics_Vector___0__
  name: Negate
  nameWithType: Vector.Negate
  fullName: System.Numerics.Vector.Negate
- uid: System.Numerics.Vector.BitwiseAnd*
  commentId: Overload:System.Numerics.Vector.BitwiseAnd
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_BitwiseAnd__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: BitwiseAnd
  nameWithType: Vector.BitwiseAnd
  fullName: System.Numerics.Vector.BitwiseAnd
- uid: System.Numerics.Vector.BitwiseOr*
  commentId: Overload:System.Numerics.Vector.BitwiseOr
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_BitwiseOr__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: BitwiseOr
  nameWithType: Vector.BitwiseOr
  fullName: System.Numerics.Vector.BitwiseOr
- uid: System.Numerics.Vector.OnesComplement*
  commentId: Overload:System.Numerics.Vector.OnesComplement
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_OnesComplement__1_System_Numerics_Vector___0__
  name: OnesComplement
  nameWithType: Vector.OnesComplement
  fullName: System.Numerics.Vector.OnesComplement
- uid: System.Numerics.Vector.Xor*
  commentId: Overload:System.Numerics.Vector.Xor
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_Xor__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: Xor
  nameWithType: Vector.Xor
  fullName: System.Numerics.Vector.Xor
- uid: System.Numerics.Vector.AndNot*
  commentId: Overload:System.Numerics.Vector.AndNot
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AndNot__1_System_Numerics_Vector___0__System_Numerics_Vector___0__
  name: AndNot
  nameWithType: Vector.AndNot
  fullName: System.Numerics.Vector.AndNot
- uid: System.Numerics.Vector.AsVectorByte*
  commentId: Overload:System.Numerics.Vector.AsVectorByte
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AsVectorByte__1_System_Numerics_Vector___0__
  name: AsVectorByte
  nameWithType: Vector.AsVectorByte
  fullName: System.Numerics.Vector.AsVectorByte
- uid: System.Numerics.Vector.AsVectorSByte*
  commentId: Overload:System.Numerics.Vector.AsVectorSByte
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AsVectorSByte__1_System_Numerics_Vector___0__
  name: AsVectorSByte
  nameWithType: Vector.AsVectorSByte
  fullName: System.Numerics.Vector.AsVectorSByte
- uid: System.Numerics.Vector.AsVectorUInt16*
  commentId: Overload:System.Numerics.Vector.AsVectorUInt16
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AsVectorUInt16__1_System_Numerics_Vector___0__
  name: AsVectorUInt16
  nameWithType: Vector.AsVectorUInt16
  fullName: System.Numerics.Vector.AsVectorUInt16
- uid: System.Numerics.Vector.AsVectorInt16*
  commentId: Overload:System.Numerics.Vector.AsVectorInt16
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AsVectorInt16__1_System_Numerics_Vector___0__
  name: AsVectorInt16
  nameWithType: Vector.AsVectorInt16
  fullName: System.Numerics.Vector.AsVectorInt16
- uid: System.Numerics.Vector.AsVectorUInt32*
  commentId: Overload:System.Numerics.Vector.AsVectorUInt32
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AsVectorUInt32__1_System_Numerics_Vector___0__
  name: AsVectorUInt32
  nameWithType: Vector.AsVectorUInt32
  fullName: System.Numerics.Vector.AsVectorUInt32
- uid: System.Numerics.Vector.AsVectorInt32*
  commentId: Overload:System.Numerics.Vector.AsVectorInt32
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AsVectorInt32__1_System_Numerics_Vector___0__
  name: AsVectorInt32
  nameWithType: Vector.AsVectorInt32
  fullName: System.Numerics.Vector.AsVectorInt32
- uid: System.Numerics.Vector.AsVectorUInt64*
  commentId: Overload:System.Numerics.Vector.AsVectorUInt64
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AsVectorUInt64__1_System_Numerics_Vector___0__
  name: AsVectorUInt64
  nameWithType: Vector.AsVectorUInt64
  fullName: System.Numerics.Vector.AsVectorUInt64
- uid: System.Numerics.Vector.AsVectorInt64*
  commentId: Overload:System.Numerics.Vector.AsVectorInt64
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AsVectorInt64__1_System_Numerics_Vector___0__
  name: AsVectorInt64
  nameWithType: Vector.AsVectorInt64
  fullName: System.Numerics.Vector.AsVectorInt64
- uid: System.Numerics.Vector.AsVectorSingle*
  commentId: Overload:System.Numerics.Vector.AsVectorSingle
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AsVectorSingle__1_System_Numerics_Vector___0__
  name: AsVectorSingle
  nameWithType: Vector.AsVectorSingle
  fullName: System.Numerics.Vector.AsVectorSingle
- uid: System.Numerics.Vector.AsVectorDouble*
  commentId: Overload:System.Numerics.Vector.AsVectorDouble
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_AsVectorDouble__1_System_Numerics_Vector___0__
  name: AsVectorDouble
  nameWithType: Vector.AsVectorDouble
  fullName: System.Numerics.Vector.AsVectorDouble
- uid: System.Numerics.Vector.IsHardwareAccelerated*
  commentId: Overload:System.Numerics.Vector.IsHardwareAccelerated
  isExternal: true
  href: System.Numerics.Vector.html#System_Numerics_Vector_IsHardwareAccelerated
  name: IsHardwareAccelerated
  nameWithType: Vector.IsHardwareAccelerated
  fullName: System.Numerics.Vector.IsHardwareAccelerated
