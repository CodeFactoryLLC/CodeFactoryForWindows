### YamlMime:ManagedReference
items:
- uid: System.Collections.Immutable.ImmutableList
  commentId: T:System.Collections.Immutable.ImmutableList
  id: ImmutableList
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.ImmutableList.CreateBuilder``1
  - System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableList.Create``1
  - System.Collections.Immutable.ImmutableList.Create``1(``0)
  - System.Collections.Immutable.ImmutableList.Create``1(``0[])
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  - System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)
  langs:
  - csharp
  - vb
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: System.Collections.Immutable.ImmutableList
  type: Class
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Provides a set of initialization methods for instances of the <xref href="System.Collections.Immutable.ImmutableList%601" data-throw-if-not-resolved="false"></xref> class.  

     NuGet package: System.Collections.Immutable (about immutable collections and how to install)
  example: []
  syntax:
    content: public static class ImmutableList
    content.vb: Public Module ImmutableList
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Immutable.ImmutableList.Create``1
  commentId: M:System.Collections.Immutable.ImmutableList.Create``1
  id: Create``1
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: Create<T>()
  nameWithType: ImmutableList.Create<T>()
  fullName: System.Collections.Immutable.ImmutableList.Create<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an empty immutable list.
  example: []
  syntax:
    content: public static ImmutableList<T> Create<T>()
    typeParameters:
    - id: T
      description: The type of items to be stored in the .
    return:
      type: System.Collections.Immutable.ImmutableList{{T}}
      description: An empty immutable list.
    content.vb: Public Shared Function Create(Of T)() As ImmutableList(Of T)
  overload: System.Collections.Immutable.ImmutableList.Create*
  nameWithType.vb: ImmutableList.Create(Of T)()
  fullName.vb: System.Collections.Immutable.ImmutableList.Create(Of T)()
  name.vb: Create(Of T)()
- uid: System.Collections.Immutable.ImmutableList.Create``1(``0)
  commentId: M:System.Collections.Immutable.ImmutableList.Create``1(``0)
  id: Create``1(``0)
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: Create<T>(T)
  nameWithType: ImmutableList.Create<T>(T)
  fullName: System.Collections.Immutable.ImmutableList.Create<T>(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable list that contains the specified item.
  example: []
  syntax:
    content: public static ImmutableList<T> Create<T>(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to prepopulate the list with.
    typeParameters:
    - id: T
      description: The type of items in the .
    return:
      type: System.Collections.Immutable.ImmutableList{{T}}
      description: A new  that contains the specified item.
    content.vb: Public Shared Function Create(Of T)(item As T) As ImmutableList(Of T)
  overload: System.Collections.Immutable.ImmutableList.Create*
  nameWithType.vb: ImmutableList.Create(Of T)(T)
  fullName.vb: System.Collections.Immutable.ImmutableList.Create(Of T)(T)
  name.vb: Create(Of T)(T)
- uid: System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  id: CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: CreateRange<T>(IEnumerable<T>)
  nameWithType: ImmutableList.CreateRange<T>(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableList.CreateRange<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable list that contains the specified items.
  example: []
  syntax:
    content: public static ImmutableList<T> CreateRange<T>(IEnumerable<T> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items to add to the list.
    typeParameters:
    - id: T
      description: The type of items in the .
    return:
      type: System.Collections.Immutable.ImmutableList{{T}}
      description: An immutable list that contains the specified items.
    content.vb: Public Shared Function CreateRange(Of T)(items As IEnumerable(Of T)) As ImmutableList(Of T)
  overload: System.Collections.Immutable.ImmutableList.CreateRange*
  nameWithType.vb: ImmutableList.CreateRange(Of T)(IEnumerable(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableList.CreateRange(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: CreateRange(Of T)(IEnumerable(Of T))
- uid: System.Collections.Immutable.ImmutableList.Create``1(``0[])
  commentId: M:System.Collections.Immutable.ImmutableList.Create``1(``0[])
  id: Create``1(``0[])
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: Create<T>(params T[])
  nameWithType: ImmutableList.Create<T>(params T[])
  fullName: System.Collections.Immutable.ImmutableList.Create<T>(params T[])
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable list that contains the specified array of items.
  example: []
  syntax:
    content: public static ImmutableList<T> Create<T>(params T[] items)
    parameters:
    - id: items
      type: '{T}[]'
      description: An array that contains the items to prepopulate the list with.
    typeParameters:
    - id: T
      description: The type of items in the .
    return:
      type: System.Collections.Immutable.ImmutableList{{T}}
      description: A new immutable list that contains the specified items.
    content.vb: Public Shared Function Create(Of T)(ParamArray items As T()) As ImmutableList(Of T)
  overload: System.Collections.Immutable.ImmutableList.Create*
  nameWithType.vb: ImmutableList.Create(Of T)(ParamArray T())
  fullName.vb: System.Collections.Immutable.ImmutableList.Create(Of T)(ParamArray T())
  name.vb: Create(Of T)(ParamArray T())
- uid: System.Collections.Immutable.ImmutableList.CreateBuilder``1
  commentId: M:System.Collections.Immutable.ImmutableList.CreateBuilder``1
  id: CreateBuilder``1
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: CreateBuilder<T>()
  nameWithType: ImmutableList.CreateBuilder<T>()
  fullName: System.Collections.Immutable.ImmutableList.CreateBuilder<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable list builder.
  example: []
  syntax:
    content: public static ImmutableList<T>.Builder CreateBuilder<T>()
    typeParameters:
    - id: T
      description: The type of items stored by the collection.
    return:
      type: System.Collections.Immutable.ImmutableList{{T}}.Builder
      description: The immutable collection builder.
    content.vb: Public Shared Function CreateBuilder(Of T)() As ImmutableList(Of T).Builder
  overload: System.Collections.Immutable.ImmutableList.CreateBuilder*
  nameWithType.vb: ImmutableList.CreateBuilder(Of T)()
  fullName.vb: System.Collections.Immutable.ImmutableList.CreateBuilder(Of T)()
  name.vb: CreateBuilder(Of T)()
- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  id: ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: ToImmutableList<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)
  fullName: System.Collections.Immutable.ImmutableList.ToImmutableList<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Enumerates a sequence and produces an immutable list of its contents.
  example: []
  syntax:
    content: public static ImmutableList<TSource> ToImmutableList<TSource>(this IEnumerable<TSource> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to enumerate.
    typeParameters:
    - id: TSource
      description: The type of the elements in the sequence.
    return:
      type: System.Collections.Immutable.ImmutableList{{TSource}}
      description: An immutable list that contains the items in the specified sequence.
    content.vb: Public Shared Function ToImmutableList(Of TSource)(source As IEnumerable(Of TSource)) As ImmutableList(Of TSource)
  overload: System.Collections.Immutable.ImmutableList.ToImmutableList*
  nameWithType.vb: ImmutableList.ToImmutableList(Of TSource)(IEnumerable(Of TSource))
  fullName.vb: System.Collections.Immutable.ImmutableList.ToImmutableList(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToImmutableList(Of TSource)(IEnumerable(Of TSource))
- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)
  commentId: M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)
  id: ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: ToImmutableList<TSource>(Builder)
  nameWithType: ImmutableList.ToImmutableList<TSource>(ImmutableList<TSource>.Builder)
  fullName: System.Collections.Immutable.ImmutableList.ToImmutableList<TSource>(System.Collections.Immutable.ImmutableList<TSource>.Builder)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable list from the current contents of the builder's collection.
  example: []
  syntax:
    content: public static ImmutableList<TSource> ToImmutableList<TSource>(this ImmutableList<TSource>.Builder builder)
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableList{{TSource}}.Builder
      description: The builder to create the immutable list from.
    typeParameters:
    - id: TSource
      description: The type of the elements in the list.
    return:
      type: System.Collections.Immutable.ImmutableList{{TSource}}
      description: An immutable list that contains the current contents in the builder's collection.
    content.vb: Public Shared Function ToImmutableList(Of TSource)(builder As ImmutableList(Of TSource).Builder) As ImmutableList(Of TSource)
  overload: System.Collections.Immutable.ImmutableList.ToImmutableList*
  nameWithType.vb: ImmutableList.ToImmutableList(Of TSource)(ImmutableList(Of TSource).Builder)
  fullName.vb: System.Collections.Immutable.ImmutableList.ToImmutableList(Of TSource)(System.Collections.Immutable.ImmutableList(Of TSource).Builder)
  name.vb: ToImmutableList(Of TSource)(Builder)
- uid: System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  commentId: M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  id: Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: Replace<T>(IImmutableList<T>, T, T)
  nameWithType: ImmutableList.Replace<T>(IImmutableList<T>, T, T)
  fullName: System.Collections.Immutable.ImmutableList.Replace<T>(System.Collections.Immutable.IImmutableList<T>, T, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Replaces the first equal element in the list with the specified element.
  example: []
  syntax:
    content: public static IImmutableList<T> Replace<T>(this IImmutableList<T> list, T oldValue, T newValue)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: oldValue
      type: '{T}'
      description: The element to replace.
    - id: newValue
      type: '{T}'
      description: The element to replace the old element with.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The new list -- even if the value being replaced is equal to the new value for that position.
    content.vb: Public Shared Function Replace(Of T)(list As IImmutableList(Of T), oldValue As T, newValue As T) As IImmutableList(Of T)
  overload: System.Collections.Immutable.ImmutableList.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the old value does not exist in the list.
  nameWithType.vb: ImmutableList.Replace(Of T)(IImmutableList(Of T), T, T)
  fullName.vb: System.Collections.Immutable.ImmutableList.Replace(Of T)(System.Collections.Immutable.IImmutableList(Of T), T, T)
  name.vb: Replace(Of T)(IImmutableList(Of T), T, T)
- uid: System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  commentId: M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  id: Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: Remove<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.Remove<T>(IImmutableList<T>, T)
  fullName: System.Collections.Immutable.ImmutableList.Remove<T>(System.Collections.Immutable.IImmutableList<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the specified value from this list.
  example: []
  syntax:
    content: public static IImmutableList<T> Remove<T>(this IImmutableList<T> list, T value)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: value
      type: '{T}'
      description: The value to remove.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: A new immutable list with the element removed, or this list if the element is not in this list.
    content.vb: Public Shared Function Remove(Of T)(list As IImmutableList(Of T), value As T) As IImmutableList(Of T)
  overload: System.Collections.Immutable.ImmutableList.Remove*
  nameWithType.vb: ImmutableList.Remove(Of T)(IImmutableList(Of T), T)
  fullName.vb: System.Collections.Immutable.ImmutableList.Remove(Of T)(System.Collections.Immutable.IImmutableList(Of T), T)
  name.vb: Remove(Of T)(IImmutableList(Of T), T)
- uid: System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  id: RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
  nameWithType: ImmutableList.RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableList.RemoveRange<T>(System.Collections.Immutable.IImmutableList<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the specified values from this list.
  example: []
  syntax:
    content: public static IImmutableList<T> RemoveRange<T>(this IImmutableList<T> list, IEnumerable<T> items)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items to remove if matches are found in this list.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: A new immutable list with the elements removed.
    content.vb: Public Shared Function RemoveRange(Of T)(list As IImmutableList(Of T), items As IEnumerable(Of T)) As IImmutableList(Of T)
  overload: System.Collections.Immutable.ImmutableList.RemoveRange*
  nameWithType.vb: ImmutableList.RemoveRange(Of T)(IImmutableList(Of T), IEnumerable(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableList.RemoveRange(Of T)(System.Collections.Immutable.IImmutableList(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: RemoveRange(Of T)(IImmutableList(Of T), IEnumerable(Of T))
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  commentId: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  id: IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: IndexOf<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T)
  fullName: System.Collections.Immutable.ImmutableList.IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the list.
  example: []
  syntax:
    content: public static int IndexOf<T>(this IImmutableList<T> list, T item)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: item
      type: '{T}'
      description: The object to locate in the list. The value can be null for reference types.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.
    content.vb: Public Shared Function IndexOf(Of T)(list As IImmutableList(Of T), item As T) As Integer
  overload: System.Collections.Immutable.ImmutableList.IndexOf*
  nameWithType.vb: ImmutableList.IndexOf(Of T)(IImmutableList(Of T), T)
  fullName.vb: System.Collections.Immutable.ImmutableList.IndexOf(Of T)(System.Collections.Immutable.IImmutableList(Of T), T)
  name.vb: IndexOf(Of T)(IImmutableList(Of T), T)
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?)
  fullName: System.Collections.Immutable.ImmutableList.IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Collections.Generic.IEqualityComparer<T>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the list.
  example: []
  syntax:
    content: public static int IndexOf<T>(this IImmutableList<T> list, T item, IEqualityComparer<T>? equalityComparer)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: item
      type: '{T}'
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.
    content.vb: Public Shared Function IndexOf(Of T)(list As IImmutableList(Of T), item As T, equalityComparer As IEqualityComparer(Of T)) As Integer
  overload: System.Collections.Immutable.ImmutableList.IndexOf*
  nameWithType.vb: ImmutableList.IndexOf(Of T)(IImmutableList(Of T), T, IEqualityComparer(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableList.IndexOf(Of T)(System.Collections.Immutable.IImmutableList(Of T), T, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IndexOf(Of T)(IImmutableList(Of T), T, IEqualityComparer(Of T))
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  id: IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: IndexOf<T>(IImmutableList<T>, T, int)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, int)
  fullName: System.Collections.Immutable.ImmutableList.IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, int)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.
  example: []
  syntax:
    content: public static int IndexOf<T>(this IImmutableList<T> list, T item, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: item
      type: '{T}'
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.
    content.vb: Public Shared Function IndexOf(Of T)(list As IImmutableList(Of T), item As T, startIndex As Integer) As Integer
  overload: System.Collections.Immutable.ImmutableList.IndexOf*
  nameWithType.vb: ImmutableList.IndexOf(Of T)(IImmutableList(Of T), T, Integer)
  fullName.vb: System.Collections.Immutable.ImmutableList.IndexOf(Of T)(System.Collections.Immutable.IImmutableList(Of T), T, Integer)
  name.vb: IndexOf(Of T)(IImmutableList(Of T), T, Integer)
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  id: IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: IndexOf<T>(IImmutableList<T>, T, int, int)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, int, int)
  fullName: System.Collections.Immutable.ImmutableList.IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, int, int)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.
  example: []
  syntax:
    content: public static int IndexOf<T>(this IImmutableList<T> list, T item, int startIndex, int count)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: item
      type: '{T}'
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.
    content.vb: Public Shared Function IndexOf(Of T)(list As IImmutableList(Of T), item As T, startIndex As Integer, count As Integer) As Integer
  overload: System.Collections.Immutable.ImmutableList.IndexOf*
  nameWithType.vb: ImmutableList.IndexOf(Of T)(IImmutableList(Of T), T, Integer, Integer)
  fullName.vb: System.Collections.Immutable.ImmutableList.IndexOf(Of T)(System.Collections.Immutable.IImmutableList(Of T), T, Integer, Integer)
  name.vb: IndexOf(Of T)(IImmutableList(Of T), T, Integer, Integer)
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  commentId: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  id: LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T)
  fullName: System.Collections.Immutable.ImmutableList.LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.
  example: []
  syntax:
    content: public static int LastIndexOf<T>(this IImmutableList<T> list, T item)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: item
      type: '{T}'
      description: The object to locate in the Immutable list. The value can be null for reference types.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.
    content.vb: Public Shared Function LastIndexOf(Of T)(list As IImmutableList(Of T), item As T) As Integer
  overload: System.Collections.Immutable.ImmutableList.LastIndexOf*
  nameWithType.vb: ImmutableList.LastIndexOf(Of T)(IImmutableList(Of T), T)
  fullName.vb: System.Collections.Immutable.ImmutableList.LastIndexOf(Of T)(System.Collections.Immutable.IImmutableList(Of T), T)
  name.vb: LastIndexOf(Of T)(IImmutableList(Of T), T)
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?)
  fullName: System.Collections.Immutable.ImmutableList.LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Collections.Generic.IEqualityComparer<T>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.
  example: []
  syntax:
    content: public static int LastIndexOf<T>(this IImmutableList<T> list, T item, IEqualityComparer<T>? equalityComparer)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: item
      type: '{T}'
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The equality comparer to use in the search.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.
    content.vb: Public Shared Function LastIndexOf(Of T)(list As IImmutableList(Of T), item As T, equalityComparer As IEqualityComparer(Of T)) As Integer
  overload: System.Collections.Immutable.ImmutableList.LastIndexOf*
  nameWithType.vb: ImmutableList.LastIndexOf(Of T)(IImmutableList(Of T), T, IEqualityComparer(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableList.LastIndexOf(Of T)(System.Collections.Immutable.IImmutableList(Of T), T, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: LastIndexOf(Of T)(IImmutableList(Of T), T, IEqualityComparer(Of T))
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  id: LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(IImmutableList<T>, T, int)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, int)
  fullName: System.Collections.Immutable.ImmutableList.LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, int)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.
  example: []
  syntax:
    content: public static int LastIndexOf<T>(this IImmutableList<T> list, T item, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: item
      type: '{T}'
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.
    content.vb: Public Shared Function LastIndexOf(Of T)(list As IImmutableList(Of T), item As T, startIndex As Integer) As Integer
  overload: System.Collections.Immutable.ImmutableList.LastIndexOf*
  nameWithType.vb: ImmutableList.LastIndexOf(Of T)(IImmutableList(Of T), T, Integer)
  fullName.vb: System.Collections.Immutable.ImmutableList.LastIndexOf(Of T)(System.Collections.Immutable.IImmutableList(Of T), T, Integer)
  name.vb: LastIndexOf(Of T)(IImmutableList(Of T), T, Integer)
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  id: LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(IImmutableList<T>, T, int, int)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, int, int)
  fullName: System.Collections.Immutable.ImmutableList.LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, int, int)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.
  example: []
  syntax:
    content: public static int LastIndexOf<T>(this IImmutableList<T> list, T item, int startIndex, int count)
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList{{T}}
      description: The list to search.
    - id: item
      type: '{T}'
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.
    content.vb: Public Shared Function LastIndexOf(Of T)(list As IImmutableList(Of T), item As T, startIndex As Integer, count As Integer) As Integer
  overload: System.Collections.Immutable.ImmutableList.LastIndexOf*
  nameWithType.vb: ImmutableList.LastIndexOf(Of T)(IImmutableList(Of T), T, Integer, Integer)
  fullName.vb: System.Collections.Immutable.ImmutableList.LastIndexOf(Of T)(System.Collections.Immutable.IImmutableList(Of T), T, Integer, Integer)
  name.vb: LastIndexOf(Of T)(IImmutableList(Of T), T, Integer, Integer)
references:
- uid: System.Collections.Immutable.ImmutableList`1
  commentId: T:System.Collections.Immutable.ImmutableList`1
  parent: System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  name: ImmutableList<T>
  nameWithType: ImmutableList<T>
  fullName: System.Collections.Immutable.ImmutableList<T>
  nameWithType.vb: ImmutableList(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T)
  name.vb: ImmutableList(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Immutable.ImmutableList.Create*
  commentId: Overload:System.Collections.Immutable.ImmutableList.Create
  isExternal: true
  href: System.Collections.Immutable.ImmutableList.html#System_Collections_Immutable_ImmutableList_Create__1
  name: Create
  nameWithType: ImmutableList.Create
  fullName: System.Collections.Immutable.ImmutableList.Create
- uid: System.Collections.Immutable.ImmutableList{{T}}
  commentId: T:System.Collections.Immutable.ImmutableList{`0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  name: ImmutableList<T>
  nameWithType: ImmutableList<T>
  fullName: System.Collections.Immutable.ImmutableList<T>
  nameWithType.vb: ImmutableList(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T)
  name.vb: ImmutableList(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Immutable.ImmutableList.CreateRange*
  commentId: Overload:System.Collections.Immutable.ImmutableList.CreateRange
  isExternal: true
  href: System.Collections.Immutable.ImmutableList.html#System_Collections_Immutable_ImmutableList_CreateRange__1_System_Collections_Generic_IEnumerable___0__
  name: CreateRange
  nameWithType: ImmutableList.CreateRange
  fullName: System.Collections.Immutable.ImmutableList.CreateRange
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Collections.Immutable.ImmutableList.CreateBuilder*
  commentId: Overload:System.Collections.Immutable.ImmutableList.CreateBuilder
  isExternal: true
  href: System.Collections.Immutable.ImmutableList.html#System_Collections_Immutable_ImmutableList_CreateBuilder__1
  name: CreateBuilder
  nameWithType: ImmutableList.CreateBuilder
  fullName: System.Collections.Immutable.ImmutableList.CreateBuilder
- uid: System.Collections.Immutable.ImmutableList{{T}}.Builder
  commentId: T:System.Collections.Immutable.ImmutableList{`0}.Builder
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableList`1.Builder
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  name: ImmutableList<T>.Builder
  nameWithType: ImmutableList<T>.Builder
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder
  nameWithType.vb: ImmutableList(Of T).Builder
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder
  name.vb: ImmutableList(Of T).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableList{`0}.Builder
    name: Builder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1.builder
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableList{`0}.Builder
    name: Builder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1.builder
- uid: System.Collections.Immutable.ImmutableList`1.Builder
  commentId: T:System.Collections.Immutable.ImmutableList`1.Builder
  parent: System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  name: ImmutableList<T>.Builder
  nameWithType: ImmutableList<T>.Builder
  fullName: System.Collections.Immutable.ImmutableList<T>.Builder
  nameWithType.vb: ImmutableList(Of T).Builder
  fullName.vb: System.Collections.Immutable.ImmutableList(Of T).Builder
  name.vb: ImmutableList(Of T).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableList`1.Builder
    name: Builder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1.builder
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableList`1.Builder
    name: Builder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablelist-1.builder
- uid: System.Collections.Immutable.ImmutableList.ToImmutableList*
  commentId: Overload:System.Collections.Immutable.ImmutableList.ToImmutableList
  isExternal: true
  href: System.Collections.Immutable.ImmutableList.html#System_Collections_Immutable_ImmutableList_ToImmutableList__1_System_Collections_Generic_IEnumerable___0__
  name: ToImmutableList
  nameWithType: ImmutableList.ToImmutableList
  fullName: System.Collections.Immutable.ImmutableList.ToImmutableList
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Collections.Immutable.ImmutableList{{TSource}}
  commentId: T:System.Collections.Immutable.ImmutableList{``0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableList`1
  href: System.Collections.Immutable.ImmutableList-1.html
  name: ImmutableList<TSource>
  nameWithType: ImmutableList<TSource>
  fullName: System.Collections.Immutable.ImmutableList<TSource>
  nameWithType.vb: ImmutableList(Of TSource)
  fullName.vb: System.Collections.Immutable.ImmutableList(Of TSource)
  name.vb: ImmutableList(Of TSource)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: System.Collections.Immutable.ImmutableList-1.html
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: System.Collections.Immutable.ImmutableList-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Collections.Immutable.ImmutableList{{TSource}}.Builder
  commentId: T:System.Collections.Immutable.ImmutableList{``0}.Builder
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableList`1.Builder
  href: System.Collections.Immutable.ImmutableList-1.html
  name: ImmutableList<TSource>.Builder
  nameWithType: ImmutableList<TSource>.Builder
  fullName: System.Collections.Immutable.ImmutableList<TSource>.Builder
  nameWithType.vb: ImmutableList(Of TSource).Builder
  fullName.vb: System.Collections.Immutable.ImmutableList(Of TSource).Builder
  name.vb: ImmutableList(Of TSource).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: System.Collections.Immutable.ImmutableList-1.html
  - name: <
  - name: TSource
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableList{``0}.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableList-1.Builder.html
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    isExternal: true
    href: System.Collections.Immutable.ImmutableList-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableList{``0}.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableList-1.Builder.html
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Collections.Immutable.ImmutableList.Replace*
  commentId: Overload:System.Collections.Immutable.ImmutableList.Replace
  isExternal: true
  href: System.Collections.Immutable.ImmutableList.html#System_Collections_Immutable_ImmutableList_Replace__1_System_Collections_Immutable_IImmutableList___0____0___0_
  name: Replace
  nameWithType: ImmutableList.Replace
  fullName: System.Collections.Immutable.ImmutableList.Replace
- uid: System.Collections.Immutable.IImmutableList{{T}}
  commentId: T:System.Collections.Immutable.IImmutableList{`0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.IImmutableList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.iimmutablelist-1
  name: IImmutableList<T>
  nameWithType: IImmutableList<T>
  fullName: System.Collections.Immutable.IImmutableList<T>
  nameWithType.vb: IImmutableList(Of T)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T)
  name.vb: IImmutableList(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.iimmutablelist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.iimmutablelist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable.IImmutableList`1
  commentId: T:System.Collections.Immutable.IImmutableList`1
  parent: System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.iimmutablelist-1
  name: IImmutableList<T>
  nameWithType: IImmutableList<T>
  fullName: System.Collections.Immutable.IImmutableList<T>
  nameWithType.vb: IImmutableList(Of T)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T)
  name.vb: IImmutableList(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.iimmutablelist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.iimmutablelist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable.ImmutableList.Remove*
  commentId: Overload:System.Collections.Immutable.ImmutableList.Remove
  isExternal: true
  href: System.Collections.Immutable.ImmutableList.html#System_Collections_Immutable_ImmutableList_Remove__1_System_Collections_Immutable_IImmutableList___0____0_
  name: Remove
  nameWithType: ImmutableList.Remove
  fullName: System.Collections.Immutable.ImmutableList.Remove
- uid: System.Collections.Immutable.ImmutableList.RemoveRange*
  commentId: Overload:System.Collections.Immutable.ImmutableList.RemoveRange
  isExternal: true
  href: System.Collections.Immutable.ImmutableList.html#System_Collections_Immutable_ImmutableList_RemoveRange__1_System_Collections_Immutable_IImmutableList___0__System_Collections_Generic_IEnumerable___0__
  name: RemoveRange
  nameWithType: ImmutableList.RemoveRange
  fullName: System.Collections.Immutable.ImmutableList.RemoveRange
- uid: System.Collections.Immutable.ImmutableList.IndexOf*
  commentId: Overload:System.Collections.Immutable.ImmutableList.IndexOf
  isExternal: true
  href: System.Collections.Immutable.ImmutableList.html#System_Collections_Immutable_ImmutableList_IndexOf__1_System_Collections_Immutable_IImmutableList___0____0_
  name: IndexOf
  nameWithType: ImmutableList.IndexOf
  fullName: System.Collections.Immutable.ImmutableList.IndexOf
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf*
  commentId: Overload:System.Collections.Immutable.ImmutableList.LastIndexOf
  isExternal: true
  href: System.Collections.Immutable.ImmutableList.html#System_Collections_Immutable_ImmutableList_LastIndexOf__1_System_Collections_Immutable_IImmutableList___0____0_
  name: LastIndexOf
  nameWithType: ImmutableList.LastIndexOf
  fullName: System.Collections.Immutable.ImmutableList.LastIndexOf
