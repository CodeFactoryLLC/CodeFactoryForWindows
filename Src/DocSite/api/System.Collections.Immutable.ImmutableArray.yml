### YamlMime:ManagedReference
items:
- uid: System.Collections.Immutable.ImmutableArray
  commentId: T:System.Collections.Immutable.ImmutableArray
  id: ImmutableArray
  parent: System.Collections.Immutable
  children:
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableArray.CreateBuilder``1
  - System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)
  - System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  - System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})
  - System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)
  - System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)
  - System.Collections.Immutable.ImmutableArray.Create``1
  - System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray.Create``1(``0)
  - System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)
  - System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)
  - System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)
  - System.Collections.Immutable.ImmutableArray.Create``1(``0[])
  - System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  langs:
  - csharp
  - vb
  name: ImmutableArray
  nameWithType: ImmutableArray
  fullName: System.Collections.Immutable.ImmutableArray
  type: Class
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: >-
    Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  

     NuGet package: System.Collections.Immutable (about immutable collections and how to install)
  example: []
  syntax:
    content: public static class ImmutableArray
    content.vb: Public Module ImmutableArray
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Immutable.ImmutableArray.Create``1
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1
  id: Create``1
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: Create<T>()
  nameWithType: ImmutableArray.Create<T>()
  fullName: System.Collections.Immutable.ImmutableArray.Create<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an empty immutable array.
  example: []
  syntax:
    content: public static ImmutableArray<T> Create<T>()
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: An empty immutable array.
    content.vb: Public Shared Function Create(Of T)() As ImmutableArray(Of T)
  overload: System.Collections.Immutable.ImmutableArray.Create*
  nameWithType.vb: ImmutableArray.Create(Of T)()
  fullName.vb: System.Collections.Immutable.ImmutableArray.Create(Of T)()
  name.vb: Create(Of T)()
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0)
  id: Create``1(``0)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: Create<T>(T)
  nameWithType: ImmutableArray.Create<T>(T)
  fullName: System.Collections.Immutable.ImmutableArray.Create<T>(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array that contains the specified object.
  example: []
  syntax:
    content: public static ImmutableArray<T> Create<T>(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The object to store in the array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: An immutable array that contains the specified object.
    content.vb: Public Shared Function Create(Of T)(item As T) As ImmutableArray(Of T)
  overload: System.Collections.Immutable.ImmutableArray.Create*
  nameWithType.vb: ImmutableArray.Create(Of T)(T)
  fullName.vb: System.Collections.Immutable.ImmutableArray.Create(Of T)(T)
  name.vb: Create(Of T)(T)
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)
  id: Create``1(``0,``0)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: Create<T>(T, T)
  nameWithType: ImmutableArray.Create<T>(T, T)
  fullName: System.Collections.Immutable.ImmutableArray.Create<T>(T, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array that contains the specified objects.
  example: []
  syntax:
    content: public static ImmutableArray<T> Create<T>(T item1, T item2)
    parameters:
    - id: item1
      type: '{T}'
      description: The first object to store in the array.
    - id: item2
      type: '{T}'
      description: The second object to store in the array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: An immutable array that contains the specified objects.
    content.vb: Public Shared Function Create(Of T)(item1 As T, item2 As T) As ImmutableArray(Of T)
  overload: System.Collections.Immutable.ImmutableArray.Create*
  nameWithType.vb: ImmutableArray.Create(Of T)(T, T)
  fullName.vb: System.Collections.Immutable.ImmutableArray.Create(Of T)(T, T)
  name.vb: Create(Of T)(T, T)
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)
  id: Create``1(``0,``0,``0)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: Create<T>(T, T, T)
  nameWithType: ImmutableArray.Create<T>(T, T, T)
  fullName: System.Collections.Immutable.ImmutableArray.Create<T>(T, T, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array that contains the specified objects.
  example: []
  syntax:
    content: public static ImmutableArray<T> Create<T>(T item1, T item2, T item3)
    parameters:
    - id: item1
      type: '{T}'
      description: The first object to store in the array.
    - id: item2
      type: '{T}'
      description: The second object to store in the array.
    - id: item3
      type: '{T}'
      description: The third object to store in the array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: An immutable array that contains the specified objects.
    content.vb: Public Shared Function Create(Of T)(item1 As T, item2 As T, item3 As T) As ImmutableArray(Of T)
  overload: System.Collections.Immutable.ImmutableArray.Create*
  nameWithType.vb: ImmutableArray.Create(Of T)(T, T, T)
  fullName.vb: System.Collections.Immutable.ImmutableArray.Create(Of T)(T, T, T)
  name.vb: Create(Of T)(T, T, T)
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)
  id: Create``1(``0,``0,``0,``0)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: Create<T>(T, T, T, T)
  nameWithType: ImmutableArray.Create<T>(T, T, T, T)
  fullName: System.Collections.Immutable.ImmutableArray.Create<T>(T, T, T, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array that contains the specified objects.
  example: []
  syntax:
    content: public static ImmutableArray<T> Create<T>(T item1, T item2, T item3, T item4)
    parameters:
    - id: item1
      type: '{T}'
      description: The first object to store in the array.
    - id: item2
      type: '{T}'
      description: The second object to store in the array.
    - id: item3
      type: '{T}'
      description: The third object to store in the array.
    - id: item4
      type: '{T}'
      description: The fourth object to store in the array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: An immutable array that contains the specified objects.
    content.vb: Public Shared Function Create(Of T)(item1 As T, item2 As T, item3 As T, item4 As T) As ImmutableArray(Of T)
  overload: System.Collections.Immutable.ImmutableArray.Create*
  nameWithType.vb: ImmutableArray.Create(Of T)(T, T, T, T)
  fullName.vb: System.Collections.Immutable.ImmutableArray.Create(Of T)(T, T, T, T)
  name.vb: Create(Of T)(T, T, T, T)
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  id: CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: CreateRange<T>(IEnumerable<T>)
  nameWithType: ImmutableArray.CreateRange<T>(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableArray.CreateRange<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> populated with the specified items.
  example: []
  syntax:
    content: public static ImmutableArray<T> CreateRange<T>(IEnumerable<T> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The elements to add to the array.
    typeParameters:
    - id: T
      description: The type of element stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: An immutable array that contains the specified items.
    content.vb: Public Shared Function CreateRange(Of T)(items As IEnumerable(Of T)) As ImmutableArray(Of T)
  overload: System.Collections.Immutable.ImmutableArray.CreateRange*
  nameWithType.vb: ImmutableArray.CreateRange(Of T)(IEnumerable(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableArray.CreateRange(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: CreateRange(Of T)(IEnumerable(Of T))
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0[])
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])
  id: Create``1(``0[])
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: Create<T>(params T[]?)
  nameWithType: ImmutableArray.Create<T>(params T[]?)
  fullName: System.Collections.Immutable.ImmutableArray.Create<T>(params T[]?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array from the specified array of objects.
  example: []
  syntax:
    content: public static ImmutableArray<T> Create<T>(params T[]? items)
    parameters:
    - id: items
      type: '{T}[]'
      description: The array of objects to populate the array with.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: An immutable array that contains the array of items.
    content.vb: Public Shared Function Create(Of T)(ParamArray items As T()) As ImmutableArray(Of T)
  overload: System.Collections.Immutable.ImmutableArray.Create*
  nameWithType.vb: ImmutableArray.Create(Of T)(ParamArray T())
  fullName.vb: System.Collections.Immutable.ImmutableArray.Create(Of T)(ParamArray T())
  name.vb: Create(Of T)(ParamArray T())
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)
  id: Create``1(``0[],System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: Create<T>(T[], int, int)
  nameWithType: ImmutableArray.Create<T>(T[], int, int)
  fullName: System.Collections.Immutable.ImmutableArray.Create<T>(T[], int, int)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array with specified objects from another array.
  example: []
  syntax:
    content: public static ImmutableArray<T> Create<T>(T[] items, int start, int length)
    parameters:
    - id: items
      type: '{T}[]'
      description: The source array of objects.
    - id: start
      type: System.Int32
      description: The index of the first element to copy from <code class="paramref">items</code>.
    - id: length
      type: System.Int32
      description: The number of elements from <code class="paramref">items</code> to include in this immutable array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: An immutable array that contains the specified objects from the source array.
    content.vb: Public Shared Function Create(Of T)(items As T(), start As Integer, length As Integer) As ImmutableArray(Of T)
  overload: System.Collections.Immutable.ImmutableArray.Create*
  nameWithType.vb: ImmutableArray.Create(Of T)(T(), Integer, Integer)
  fullName.vb: System.Collections.Immutable.ImmutableArray.Create(Of T)(T(), Integer, Integer)
  name.vb: Create(Of T)(T(), Integer, Integer)
- uid: System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)
  id: Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: Create<T>(ImmutableArray<T>, int, int)
  nameWithType: ImmutableArray.Create<T>(ImmutableArray<T>, int, int)
  fullName: System.Collections.Immutable.ImmutableArray.Create<T>(System.Collections.Immutable.ImmutableArray<T>, int, int)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array with the specified objects from another immutable array.
  example: []
  syntax:
    content: public static ImmutableArray<T> Create<T>(ImmutableArray<T> items, int start, int length)
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The source array of objects.
    - id: start
      type: System.Int32
      description: The index of the first element to copy from <code class="paramref">items</code>.
    - id: length
      type: System.Int32
      description: The number of elements from <code class="paramref">items</code> to include in this immutable array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: An immutable array that contains the specified objects from the source array.
    content.vb: Public Shared Function Create(Of T)(items As ImmutableArray(Of T), start As Integer, length As Integer) As ImmutableArray(Of T)
  overload: System.Collections.Immutable.ImmutableArray.Create*
  nameWithType.vb: ImmutableArray.Create(Of T)(ImmutableArray(Of T), Integer, Integer)
  fullName.vb: System.Collections.Immutable.ImmutableArray.Create(Of T)(System.Collections.Immutable.ImmutableArray(Of T), Integer, Integer)
  name.vb: Create(Of T)(ImmutableArray(Of T), Integer, Integer)
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  id: CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: CreateRange<TSource, TResult>(ImmutableArray<TSource>, Func<TSource, TResult>)
  nameWithType: ImmutableArray.CreateRange<TSource, TResult>(ImmutableArray<TSource>, Func<TSource, TResult>)
  fullName: System.Collections.Immutable.ImmutableArray.CreateRange<TSource, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Func<TSource, TResult>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Initializes a new instance of the <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> struct.
  example: []
  syntax:
    content: public static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, Func<TSource, TResult> selector)
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{TSource}}
      description: The source array to initialize the resulting array with.
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: The function to apply to each element from the source array.
    typeParameters:
    - id: TSource
      description: The type of element stored in the source array.
    - id: TResult
      description: The type of element to store in the target array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{TResult}}
      description: An immutable array that contains the specified items.
    content.vb: Public Shared Function CreateRange(Of TSource, TResult)(items As ImmutableArray(Of TSource), selector As Func(Of TSource, TResult)) As ImmutableArray(Of TResult)
  overload: System.Collections.Immutable.ImmutableArray.CreateRange*
  nameWithType.vb: ImmutableArray.CreateRange(Of TSource, TResult)(ImmutableArray(Of TSource), Func(Of TSource, TResult))
  fullName.vb: System.Collections.Immutable.ImmutableArray.CreateRange(Of TSource, TResult)(System.Collections.Immutable.ImmutableArray(Of TSource), System.Func(Of TSource, TResult))
  name.vb: CreateRange(Of TSource, TResult)(ImmutableArray(Of TSource), Func(Of TSource, TResult))
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})
  id: CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: CreateRange<TSource, TResult>(ImmutableArray<TSource>, int, int, Func<TSource, TResult>)
  nameWithType: ImmutableArray.CreateRange<TSource, TResult>(ImmutableArray<TSource>, int, int, Func<TSource, TResult>)
  fullName: System.Collections.Immutable.ImmutableArray.CreateRange<TSource, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, int, int, System.Func<TSource, TResult>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Initializes a new instance of the <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> struct.
  example: []
  syntax:
    content: public static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, int start, int length, Func<TSource, TResult> selector)
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{TSource}}
      description: The source array to initialize the resulting array with.
    - id: start
      type: System.Int32
      description: The index of the first element in the source array to include in the resulting array.
    - id: length
      type: System.Int32
      description: The number of elements from the source array to include in the resulting array.
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: The function to apply to each element from the source array included in the resulting array.
    typeParameters:
    - id: TSource
      description: The type of element stored in the source array.
    - id: TResult
      description: The type of element to store in the target array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{TResult}}
      description: An immutable array that contains the specified items.
    content.vb: Public Shared Function CreateRange(Of TSource, TResult)(items As ImmutableArray(Of TSource), start As Integer, length As Integer, selector As Func(Of TSource, TResult)) As ImmutableArray(Of TResult)
  overload: System.Collections.Immutable.ImmutableArray.CreateRange*
  nameWithType.vb: ImmutableArray.CreateRange(Of TSource, TResult)(ImmutableArray(Of TSource), Integer, Integer, Func(Of TSource, TResult))
  fullName.vb: System.Collections.Immutable.ImmutableArray.CreateRange(Of TSource, TResult)(System.Collections.Immutable.ImmutableArray(Of TSource), Integer, Integer, System.Func(Of TSource, TResult))
  name.vb: CreateRange(Of TSource, TResult)(ImmutableArray(Of TSource), Integer, Integer, Func(Of TSource, TResult))
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)
  id: CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource>, Func<TSource, TArg, TResult>, TArg)
  nameWithType: ImmutableArray.CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource>, Func<TSource, TArg, TResult>, TArg)
  fullName: System.Collections.Immutable.ImmutableArray.CreateRange<TSource, TArg, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Func<TSource, TArg, TResult>, TArg)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Initializes a new instance of the <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> struct.
  example: []
  syntax:
    content: public static ImmutableArray<TResult> CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource> items, Func<TSource, TArg, TResult> selector, TArg arg)
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{TSource}}
      description: The source array to initialize the resulting array with.
    - id: selector
      type: System.Func{{TSource},{TArg},{TResult}}
      description: The function to apply to each element from the source array.
    - id: arg
      type: '{TArg}'
      description: An argument to be passed to the selector mapping function.
    typeParameters:
    - id: TSource
      description: The type of element stored in the source array.
    - id: TArg
      description: The type of argument to pass to the selector mapping function.
    - id: TResult
      description: The type of element to store in the target array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{TResult}}
      description: An immutable array that contains the specified items.
    content.vb: Public Shared Function CreateRange(Of TSource, TArg, TResult)(items As ImmutableArray(Of TSource), selector As Func(Of TSource, TArg, TResult), arg As TArg) As ImmutableArray(Of TResult)
  overload: System.Collections.Immutable.ImmutableArray.CreateRange*
  nameWithType.vb: ImmutableArray.CreateRange(Of TSource, TArg, TResult)(ImmutableArray(Of TSource), Func(Of TSource, TArg, TResult), TArg)
  fullName.vb: System.Collections.Immutable.ImmutableArray.CreateRange(Of TSource, TArg, TResult)(System.Collections.Immutable.ImmutableArray(Of TSource), System.Func(Of TSource, TArg, TResult), TArg)
  name.vb: CreateRange(Of TSource, TArg, TResult)(ImmutableArray(Of TSource), Func(Of TSource, TArg, TResult), TArg)
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)
  id: CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource>, int, int, Func<TSource, TArg, TResult>, TArg)
  nameWithType: ImmutableArray.CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource>, int, int, Func<TSource, TArg, TResult>, TArg)
  fullName: System.Collections.Immutable.ImmutableArray.CreateRange<TSource, TArg, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, int, int, System.Func<TSource, TArg, TResult>, TArg)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Initializes a new instance of the <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> struct.
  example: []
  syntax:
    content: public static ImmutableArray<TResult> CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource> items, int start, int length, Func<TSource, TArg, TResult> selector, TArg arg)
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{{TSource}}
      description: The source array to initialize the resulting array with.
    - id: start
      type: System.Int32
      description: The index of the first element in the source array to include in the resulting array.
    - id: length
      type: System.Int32
      description: The number of elements from the source array to include in the resulting array.
    - id: selector
      type: System.Func{{TSource},{TArg},{TResult}}
      description: The function to apply to each element from the source array included in the resulting array.
    - id: arg
      type: '{TArg}'
      description: An argument to be passed to the selector mapping function.
    typeParameters:
    - id: TSource
      description: The type of element stored in the source array.
    - id: TArg
      description: The type of argument to be passed to the selector mapping function.
    - id: TResult
      description: The type of element to be stored in the target array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{TResult}}
      description: An immutable array that contains the specified items.
    content.vb: Public Shared Function CreateRange(Of TSource, TArg, TResult)(items As ImmutableArray(Of TSource), start As Integer, length As Integer, selector As Func(Of TSource, TArg, TResult), arg As TArg) As ImmutableArray(Of TResult)
  overload: System.Collections.Immutable.ImmutableArray.CreateRange*
  nameWithType.vb: ImmutableArray.CreateRange(Of TSource, TArg, TResult)(ImmutableArray(Of TSource), Integer, Integer, Func(Of TSource, TArg, TResult), TArg)
  fullName.vb: System.Collections.Immutable.ImmutableArray.CreateRange(Of TSource, TArg, TResult)(System.Collections.Immutable.ImmutableArray(Of TSource), Integer, Integer, System.Func(Of TSource, TArg, TResult), TArg)
  name.vb: CreateRange(Of TSource, TArg, TResult)(ImmutableArray(Of TSource), Integer, Integer, Func(Of TSource, TArg, TResult), TArg)
- uid: System.Collections.Immutable.ImmutableArray.CreateBuilder``1
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1
  id: CreateBuilder``1
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: CreateBuilder<T>()
  nameWithType: ImmutableArray.CreateBuilder<T>()
  fullName: System.Collections.Immutable.ImmutableArray.CreateBuilder<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a mutable array that can be converted to an <xref href="System.Collections.Immutable.ImmutableArray" data-throw-if-not-resolved="false"></xref> without allocating new memory.
  example: []
  syntax:
    content: public static ImmutableArray<T>.Builder CreateBuilder<T>()
    typeParameters:
    - id: T
      description: The type of elements stored in the builder.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
      description: A mutable array of the specified type that can be efficiently converted to an immutable array.
    content.vb: Public Shared Function CreateBuilder(Of T)() As ImmutableArray(Of T).Builder
  overload: System.Collections.Immutable.ImmutableArray.CreateBuilder*
  nameWithType.vb: ImmutableArray.CreateBuilder(Of T)()
  fullName.vb: System.Collections.Immutable.ImmutableArray.CreateBuilder(Of T)()
  name.vb: CreateBuilder(Of T)()
- uid: System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)
  id: CreateBuilder``1(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: CreateBuilder<T>(int)
  nameWithType: ImmutableArray.CreateBuilder<T>(int)
  fullName: System.Collections.Immutable.ImmutableArray.CreateBuilder<T>(int)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a mutable array that can be converted to an <xref href="System.Collections.Immutable.ImmutableArray" data-throw-if-not-resolved="false"></xref> without allocating new memory.
  example: []
  syntax:
    content: public static ImmutableArray<T>.Builder CreateBuilder<T>(int initialCapacity)
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: The initial capacity of the builder.
    typeParameters:
    - id: T
      description: The type of elements stored in the builder.
    return:
      type: System.Collections.Immutable.ImmutableArray{{T}}.Builder
      description: A mutable array of the specified type that can be efficiently converted to an immutable array.
    content.vb: Public Shared Function CreateBuilder(Of T)(initialCapacity As Integer) As ImmutableArray(Of T).Builder
  overload: System.Collections.Immutable.ImmutableArray.CreateBuilder*
  nameWithType.vb: ImmutableArray.CreateBuilder(Of T)(Integer)
  fullName.vb: System.Collections.Immutable.ImmutableArray.CreateBuilder(Of T)(Integer)
  name.vb: CreateBuilder(Of T)(Integer)
- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  id: ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: ToImmutableArray<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)
  fullName: System.Collections.Immutable.ImmutableArray.ToImmutableArray<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array from the specified collection.
  example: []
  syntax:
    content: public static ImmutableArray<TSource> ToImmutableArray<TSource>(this IEnumerable<TSource> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The collection of objects to copy to the immutable array.
    typeParameters:
    - id: TSource
      description: The type of elements contained in <code class="paramref">items</code>.
    return:
      type: System.Collections.Immutable.ImmutableArray{{TSource}}
      description: An immutable array that contains the specified collection of objects.
    content.vb: Public Shared Function ToImmutableArray(Of TSource)(items As IEnumerable(Of TSource)) As ImmutableArray(Of TSource)
  overload: System.Collections.Immutable.ImmutableArray.ToImmutableArray*
  nameWithType.vb: ImmutableArray.ToImmutableArray(Of TSource)(IEnumerable(Of TSource))
  fullName.vb: System.Collections.Immutable.ImmutableArray.ToImmutableArray(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToImmutableArray(Of TSource)(IEnumerable(Of TSource))
- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  commentId: M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  id: ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: ToImmutableArray<TSource>(Builder)
  nameWithType: ImmutableArray.ToImmutableArray<TSource>(ImmutableArray<TSource>.Builder)
  fullName: System.Collections.Immutable.ImmutableArray.ToImmutableArray<TSource>(System.Collections.Immutable.ImmutableArray<TSource>.Builder)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array from the current contents of the builder's array.
  example: []
  syntax:
    content: public static ImmutableArray<TSource> ToImmutableArray<TSource>(this ImmutableArray<TSource>.Builder builder)
    parameters:
    - id: builder
      type: System.Collections.Immutable.ImmutableArray{{TSource}}.Builder
      description: The builder to create the immutable array from.
    typeParameters:
    - id: TSource
      description: The type of elements contained in the immutable array.
    return:
      type: System.Collections.Immutable.ImmutableArray{{TSource}}
      description: An immutable array that contains the current contents of the builder's array.
    content.vb: Public Shared Function ToImmutableArray(Of TSource)(builder As ImmutableArray(Of TSource).Builder) As ImmutableArray(Of TSource)
  overload: System.Collections.Immutable.ImmutableArray.ToImmutableArray*
  nameWithType.vb: ImmutableArray.ToImmutableArray(Of TSource)(ImmutableArray(Of TSource).Builder)
  fullName.vb: System.Collections.Immutable.ImmutableArray.ToImmutableArray(Of TSource)(System.Collections.Immutable.ImmutableArray(Of TSource).Builder)
  name.vb: ToImmutableArray(Of TSource)(Builder)
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  id: BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(ImmutableArray<T>, T)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T)
  fullName: System.Collections.Immutable.ImmutableArray.BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.
  example: []
  syntax:
    content: public static int BinarySearch<T>(this ImmutableArray<T> array, T value)
    parameters:
    - id: array
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The sorted array to search.
    - id: value
      type: '{T}'
      description: The object to search for.
    typeParameters:
    - id: T
      description: The type of element stored in the array.
    return:
      type: System.Int32
      description: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code class="paramref">value</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.ICollection%601.Count" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function BinarySearch(Of T)(array As ImmutableArray(Of T), value As T) As Integer
  overload: System.Collections.Immutable.ImmutableArray.BinarySearch*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code class="paramref">value</code> does not implement <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> or the search encounters an element that does not implement <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImmutableArray.BinarySearch(Of T)(ImmutableArray(Of T), T)
  fullName.vb: System.Collections.Immutable.ImmutableArray.BinarySearch(Of T)(System.Collections.Immutable.ImmutableArray(Of T), T)
  name.vb: BinarySearch(Of T)(ImmutableArray(Of T), T)
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>?)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>?)
  fullName: System.Collections.Immutable.ImmutableArray.BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, T, System.Collections.Generic.IComparer<T>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.
  example: []
  syntax:
    content: public static int BinarySearch<T>(this ImmutableArray<T> array, T value, IComparer<T>? comparer)
    parameters:
    - id: array
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The sorted array to search.
    - id: value
      type: '{T}'
      description: The object to search for.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer implementation to use when comparing elements, or null to use the default comparer.
    typeParameters:
    - id: T
      description: The type of element stored in the array.
    return:
      type: System.Int32
      description: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code class="paramref">value</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.ICollection%601.Count" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function BinarySearch(Of T)(array As ImmutableArray(Of T), value As T, comparer As IComparer(Of T)) As Integer
  overload: System.Collections.Immutable.ImmutableArray.BinarySearch*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code class="paramref">comparer</code> is null and <code class="paramref">value</code> does not implement <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> or the search encounters an element that does not implement <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImmutableArray.BinarySearch(Of T)(ImmutableArray(Of T), T, IComparer(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableArray.BinarySearch(Of T)(System.Collections.Immutable.ImmutableArray(Of T), T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Of T)(ImmutableArray(Of T), T, IComparer(Of T))
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  id: BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(ImmutableArray<T>, int, int, T)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, int, int, T)
  fullName: System.Collections.Immutable.ImmutableArray.BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, int, int, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.
  example: []
  syntax:
    content: public static int BinarySearch<T>(this ImmutableArray<T> array, int index, int length, T value)
    parameters:
    - id: array
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The sorted array to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: '{T}'
      description: The object to search for.
    typeParameters:
    - id: T
      description: The type of element stored in the array.
    return:
      type: System.Int32
      description: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code class="paramref">value</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.ICollection%601.Count" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function BinarySearch(Of T)(array As ImmutableArray(Of T), index As Integer, length As Integer, value As T) As Integer
  overload: System.Collections.Immutable.ImmutableArray.BinarySearch*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code class="paramref">value</code> does not implement <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> or the search encounters an element that does not implement <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code class="paramref">index</code> and <code class="paramref">length</code> do not specify a valid range in <code class="paramref">array</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "    <code class=\"paramref\">index</code> is less than the lower bound of <code class=\"paramref\">array</code>.\r\n\r\n-or-\r\n\r\n<code class=\"paramref\">length</code> is less than zero."
  nameWithType.vb: ImmutableArray.BinarySearch(Of T)(ImmutableArray(Of T), Integer, Integer, T)
  fullName.vb: System.Collections.Immutable.ImmutableArray.BinarySearch(Of T)(System.Collections.Immutable.ImmutableArray(Of T), Integer, Integer, T)
  name.vb: BinarySearch(Of T)(ImmutableArray(Of T), Integer, Integer, T)
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(ImmutableArray<T>, int, int, T, IComparer<T>?)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, int, int, T, IComparer<T>?)
  fullName: System.Collections.Immutable.ImmutableArray.BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, int, int, T, System.Collections.Generic.IComparer<T>?)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches a sorted immutable array for a specified element and returns the zero-based index of the element.
  example: []
  syntax:
    content: public static int BinarySearch<T>(this ImmutableArray<T> array, int index, int length, T value, IComparer<T>? comparer)
    parameters:
    - id: array
      type: System.Collections.Immutable.ImmutableArray{{T}}
      description: The sorted array to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: '{T}'
      description: The object to search for.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer to use when comparing elements for equality or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to use the default comparer.
    typeParameters:
    - id: T
      description: The type of element stored in the array.
    return:
      type: System.Int32
      description: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code class="paramref">value</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.ICollection%601.Count" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function BinarySearch(Of T)(array As ImmutableArray(Of T), index As Integer, length As Integer, value As T, comparer As IComparer(Of T)) As Integer
  overload: System.Collections.Immutable.ImmutableArray.BinarySearch*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code class="paramref">comparer</code> is null and <code class="paramref">value</code> does not implement <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> or the search encounters an element that does not implement <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "    <code class=\"paramref\">index</code> and <code class=\"paramref\">length</code> do not specify a valid range in <code class=\"paramref\">array</code>.\r\n\r\n-or-\r\n\r\n<code class=\"paramref\">comparer</code> is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>, and <code class=\"paramref\">value</code> is of a type that is not compatible with the elements of <code class=\"paramref\">array</code>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "    <code class=\"paramref\">index</code> is less than the lower bound of <code class=\"paramref\">array</code>.\r\n\r\n-or-\r\n\r\n<code class=\"paramref\">length</code> is less than zero."
  nameWithType.vb: ImmutableArray.BinarySearch(Of T)(ImmutableArray(Of T), Integer, Integer, T, IComparer(Of T))
  fullName.vb: System.Collections.Immutable.ImmutableArray.BinarySearch(Of T)(System.Collections.Immutable.ImmutableArray(Of T), Integer, Integer, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Of T)(ImmutableArray(Of T), Integer, Integer, T, IComparer(Of T))
references:
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Immutable.ImmutableArray.Create*
  commentId: Overload:System.Collections.Immutable.ImmutableArray.Create
  isExternal: true
  href: System.Collections.Immutable.ImmutableArray.html#System_Collections_Immutable_ImmutableArray_Create__1
  name: Create
  nameWithType: ImmutableArray.Create
  fullName: System.Collections.Immutable.ImmutableArray.Create
- uid: System.Collections.Immutable.ImmutableArray{{T}}
  commentId: T:System.Collections.Immutable.ImmutableArray{`0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  nameWithType.vb: ImmutableArray(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  name.vb: ImmutableArray(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable.ImmutableArray`1
  commentId: T:System.Collections.Immutable.ImmutableArray`1
  parent: System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  nameWithType.vb: ImmutableArray(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  name.vb: ImmutableArray(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Immutable.ImmutableArray.CreateRange*
  commentId: Overload:System.Collections.Immutable.ImmutableArray.CreateRange
  isExternal: true
  href: System.Collections.Immutable.ImmutableArray.html#System_Collections_Immutable_ImmutableArray_CreateRange__1_System_Collections_Generic_IEnumerable___0__
  name: CreateRange
  nameWithType: ImmutableArray.CreateRange
  fullName: System.Collections.Immutable.ImmutableArray.CreateRange
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Immutable.ImmutableArray{{TSource}}
  commentId: T:System.Collections.Immutable.ImmutableArray{``0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray-1.html
  name: ImmutableArray<TSource>
  nameWithType: ImmutableArray<TSource>
  fullName: System.Collections.Immutable.ImmutableArray<TSource>
  nameWithType.vb: ImmutableArray(Of TSource)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of TSource)
  name.vb: ImmutableArray(Of TSource)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Func{{TSource},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TSource, TResult>
  nameWithType: Func<TSource, TResult>
  fullName: System.Func<TSource, TResult>
  nameWithType.vb: Func(Of TSource, TResult)
  fullName.vb: System.Func(Of TSource, TResult)
  name.vb: Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Collections.Immutable.ImmutableArray{{TResult}}
  commentId: T:System.Collections.Immutable.ImmutableArray{``1}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray-1.html
  name: ImmutableArray<TResult>
  nameWithType: ImmutableArray<TResult>
  fullName: System.Collections.Immutable.ImmutableArray<TResult>
  nameWithType.vb: ImmutableArray(Of TResult)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of TResult)
  name.vb: ImmutableArray(Of TResult)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{TSource},{TArg},{TResult}}
  commentId: T:System.Func{``0,``1,``2}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TSource, TArg, TResult>
  nameWithType: Func<TSource, TArg, TResult>
  fullName: System.Func<TSource, TArg, TResult>
  nameWithType.vb: Func(Of TSource, TArg, TResult)
  fullName.vb: System.Func(Of TSource, TArg, TResult)
  name.vb: Func(Of TSource, TArg, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TArg
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TArg
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: '{TArg}'
  commentId: '!:TArg'
  definition: TArg
  name: TArg
  nameWithType: TArg
  fullName: TArg
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TArg
  name: TArg
  nameWithType: TArg
  fullName: TArg
- uid: System.Collections.Immutable.ImmutableArray
  commentId: T:System.Collections.Immutable.ImmutableArray
  parent: System.Collections.Immutable
  isExternal: true
  href: System.Collections.Immutable.ImmutableArray.html
  name: ImmutableArray
  nameWithType: ImmutableArray
  fullName: System.Collections.Immutable.ImmutableArray
- uid: System.Collections.Immutable.ImmutableArray.CreateBuilder*
  commentId: Overload:System.Collections.Immutable.ImmutableArray.CreateBuilder
  isExternal: true
  href: System.Collections.Immutable.ImmutableArray.html#System_Collections_Immutable_ImmutableArray_CreateBuilder__1
  name: CreateBuilder
  nameWithType: ImmutableArray.CreateBuilder
  fullName: System.Collections.Immutable.ImmutableArray.CreateBuilder
- uid: System.Collections.Immutable.ImmutableArray{{T}}.Builder
  commentId: T:System.Collections.Immutable.ImmutableArray{``0}.Builder
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray-1.html
  name: ImmutableArray<T>.Builder
  nameWithType: ImmutableArray<T>.Builder
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder
  nameWithType.vb: ImmutableArray(Of T).Builder
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder
  name.vb: ImmutableArray(Of T).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableArray{``0}.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.Builder.html
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableArray{``0}.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.Builder.html
- uid: System.Collections.Immutable.ImmutableArray`1.Builder
  commentId: T:System.Collections.Immutable.ImmutableArray`1.Builder
  parent: System.Collections.Immutable
  isExternal: true
  href: System.Collections.Immutable.ImmutableArray-1.html
  name: ImmutableArray<T>.Builder
  nameWithType: ImmutableArray<T>.Builder
  fullName: System.Collections.Immutable.ImmutableArray<T>.Builder
  nameWithType.vb: ImmutableArray(Of T).Builder
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T).Builder
  name.vb: ImmutableArray(Of T).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.Builder.html
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableArray`1.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.Builder.html
- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray*
  commentId: Overload:System.Collections.Immutable.ImmutableArray.ToImmutableArray
  isExternal: true
  href: System.Collections.Immutable.ImmutableArray.html#System_Collections_Immutable_ImmutableArray_ToImmutableArray__1_System_Collections_Generic_IEnumerable___0__
  name: ToImmutableArray
  nameWithType: ImmutableArray.ToImmutableArray
  fullName: System.Collections.Immutable.ImmutableArray.ToImmutableArray
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Collections.Immutable.ImmutableArray{{TSource}}.Builder
  commentId: T:System.Collections.Immutable.ImmutableArray{``0}.Builder
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1.Builder
  href: System.Collections.Immutable.ImmutableArray-1.html
  name: ImmutableArray<TSource>.Builder
  nameWithType: ImmutableArray<TSource>.Builder
  fullName: System.Collections.Immutable.ImmutableArray<TSource>.Builder
  nameWithType.vb: ImmutableArray(Of TSource).Builder
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of TSource).Builder
  name.vb: ImmutableArray(Of TSource).Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: <
  - name: TSource
  - name: '>'
  - name: .
  - uid: System.Collections.Immutable.ImmutableArray{``0}.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.Builder.html
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: .
  - uid: System.Collections.Immutable.ImmutableArray{``0}.Builder
    name: Builder
    isExternal: true
    href: System.Collections.Immutable.ImmutableArray-1.Builder.html
- uid: System.IComparable
  commentId: T:System.IComparable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch*
  commentId: Overload:System.Collections.Immutable.ImmutableArray.BinarySearch
  isExternal: true
  href: System.Collections.Immutable.ImmutableArray.html#System_Collections_Immutable_ImmutableArray_BinarySearch__1_System_Collections_Immutable_ImmutableArray___0____0_
  name: BinarySearch
  nameWithType: ImmutableArray.BinarySearch
  fullName: System.Collections.Immutable.ImmutableArray.BinarySearch
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
