### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.MemoryMarshal
  commentId: T:System.Runtime.InteropServices.MemoryMarshal
  id: MemoryMarshal
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})
  - System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})
  - System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})
  - System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})
  - System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})
  - System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})
  - System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})
  - System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})
  - System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})
  - System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)
  - System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)
  - System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)
  - System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)
  - System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)
  - System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)
  - System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)
  langs:
  - csharp
  - vb
  name: MemoryMarshal
  nameWithType: MemoryMarshal
  fullName: System.Runtime.InteropServices.MemoryMarshal
  type: Class
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static class MemoryMarshal
    content.vb: Public Module MemoryMarshal
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)
  id: TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: TryGetArray<T>(ReadOnlyMemory<T>, out ArraySegment<T>)
  nameWithType: MemoryMarshal.TryGetArray<T>(ReadOnlyMemory<T>, out ArraySegment<T>)
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryGetArray<T>(System.ReadOnlyMemory<T>, out System.ArraySegment<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static bool TryGetArray<T>(ReadOnlyMemory<T> memory, out ArraySegment<T> segment)
    parameters:
    - id: memory
      type: System.ReadOnlyMemory{{T}}
    - id: segment
      type: System.ArraySegment{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryGetArray(Of T)(memory As ReadOnlyMemory(Of T), segment As ArraySegment(Of T)) As Boolean
  overload: System.Runtime.InteropServices.MemoryMarshal.TryGetArray*
  nameWithType.vb: MemoryMarshal.TryGetArray(Of T)(ReadOnlyMemory(Of T), ArraySegment(Of T))
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.TryGetArray(Of T)(System.ReadOnlyMemory(Of T), System.ArraySegment(Of T))
  name.vb: TryGetArray(Of T)(ReadOnlyMemory(Of T), ArraySegment(Of T))
- uid: System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)
  id: TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T>, out TManager)
  nameWithType: MemoryMarshal.TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T>, out TManager)
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager<T, TManager>(System.ReadOnlyMemory<T>, out TManager)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: 'public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager) where TManager : MemoryManager<T>'
    parameters:
    - id: memory
      type: System.ReadOnlyMemory{{T}}
    - id: manager
      type: '{TManager}'
    typeParameters:
    - id: T
    - id: TManager
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryGetMemoryManager(Of T, TManager As MemoryManager(Of T))(memory As ReadOnlyMemory(Of T), manager As TManager) As Boolean
  overload: System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager*
  nameWithType.vb: MemoryMarshal.TryGetMemoryManager(Of T, TManager)(ReadOnlyMemory(Of T), TManager)
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager(Of T, TManager)(System.ReadOnlyMemory(Of T), TManager)
  name.vb: TryGetMemoryManager(Of T, TManager)(ReadOnlyMemory(Of T), TManager)
- uid: System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)
  id: TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T>, out TManager, out int, out int)
  nameWithType: MemoryMarshal.TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T>, out TManager, out int, out int)
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager<T, TManager>(System.ReadOnlyMemory<T>, out TManager, out int, out int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: 'public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager, out int start, out int length) where TManager : MemoryManager<T>'
    parameters:
    - id: memory
      type: System.ReadOnlyMemory{{T}}
    - id: manager
      type: '{TManager}'
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    - id: TManager
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryGetMemoryManager(Of T, TManager As MemoryManager(Of T))(memory As ReadOnlyMemory(Of T), manager As TManager, start As Integer, length As Integer) As Boolean
  overload: System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager*
  nameWithType.vb: MemoryMarshal.TryGetMemoryManager(Of T, TManager)(ReadOnlyMemory(Of T), TManager, Integer, Integer)
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager(Of T, TManager)(System.ReadOnlyMemory(Of T), TManager, Integer, Integer)
  name.vb: TryGetMemoryManager(Of T, TManager)(ReadOnlyMemory(Of T), TManager, Integer, Integer)
- uid: System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})
  id: ToEnumerable``1(System.ReadOnlyMemory{``0})
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: ToEnumerable<T>(ReadOnlyMemory<T>)
  nameWithType: MemoryMarshal.ToEnumerable<T>(ReadOnlyMemory<T>)
  fullName: System.Runtime.InteropServices.MemoryMarshal.ToEnumerable<T>(System.ReadOnlyMemory<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static IEnumerable<T> ToEnumerable<T>(ReadOnlyMemory<T> memory)
    parameters:
    - id: memory
      type: System.ReadOnlyMemory{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function ToEnumerable(Of T)(memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)
  overload: System.Runtime.InteropServices.MemoryMarshal.ToEnumerable*
  nameWithType.vb: MemoryMarshal.ToEnumerable(Of T)(ReadOnlyMemory(Of T))
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.ToEnumerable(Of T)(System.ReadOnlyMemory(Of T))
  name.vb: ToEnumerable(Of T)(ReadOnlyMemory(Of T))
- uid: System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)
  id: TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: TryGetString(ReadOnlyMemory<char>, out string, out int, out int)
  nameWithType: MemoryMarshal.TryGetString(ReadOnlyMemory<char>, out string, out int, out int)
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory<char>, out string, out int, out int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static bool TryGetString(ReadOnlyMemory<char> memory, out string text, out int start, out int length)
    parameters:
    - id: memory
      type: System.ReadOnlyMemory{System.Char}
    - id: text
      type: System.String
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryGetString(memory As ReadOnlyMemory(Of Char), text As String, start As Integer, length As Integer) As Boolean
  overload: System.Runtime.InteropServices.MemoryMarshal.TryGetString*
  nameWithType.vb: MemoryMarshal.TryGetString(ReadOnlyMemory(Of Char), String, Integer, Integer)
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory(Of Char), String, Integer, Integer)
  name.vb: TryGetString(ReadOnlyMemory(Of Char), String, Integer, Integer)
- uid: System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})
  id: Read``1(System.ReadOnlySpan{System.Byte})
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: Read<T>(ReadOnlySpan<byte>)
  nameWithType: MemoryMarshal.Read<T>(ReadOnlySpan<byte>)
  fullName: System.Runtime.InteropServices.MemoryMarshal.Read<T>(System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: 'public static T Read<T>(ReadOnlySpan<byte> source) where T : struct'
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function Read(Of T As Structure)(source As ReadOnlySpan(Of Byte)) As T
  overload: System.Runtime.InteropServices.MemoryMarshal.Read*
  nameWithType.vb: MemoryMarshal.Read(Of T)(ReadOnlySpan(Of Byte))
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.Read(Of T)(System.ReadOnlySpan(Of Byte))
  name.vb: Read(Of T)(ReadOnlySpan(Of Byte))
- uid: System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)
  id: TryRead``1(System.ReadOnlySpan{System.Byte},``0@)
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: TryRead<T>(ReadOnlySpan<byte>, out T)
  nameWithType: MemoryMarshal.TryRead<T>(ReadOnlySpan<byte>, out T)
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryRead<T>(System.ReadOnlySpan<byte>, out T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: 'public static bool TryRead<T>(ReadOnlySpan<byte> source, out T value) where T : struct'
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryRead(Of T As Structure)(source As ReadOnlySpan(Of Byte), value As T) As Boolean
  overload: System.Runtime.InteropServices.MemoryMarshal.TryRead*
  nameWithType.vb: MemoryMarshal.TryRead(Of T)(ReadOnlySpan(Of Byte), T)
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.TryRead(Of T)(System.ReadOnlySpan(Of Byte), T)
  name.vb: TryRead(Of T)(ReadOnlySpan(Of Byte), T)
- uid: System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)
  id: Write``1(System.Span{System.Byte},``0@)
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: Write<T>(Span<byte>, ref T)
  nameWithType: MemoryMarshal.Write<T>(Span<byte>, ref T)
  fullName: System.Runtime.InteropServices.MemoryMarshal.Write<T>(System.Span<byte>, ref T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: 'public static void Write<T>(Span<byte> destination, ref T value) where T : struct'
    parameters:
    - id: destination
      type: System.Span{System.Byte}
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Write(Of T As Structure)(destination As Span(Of Byte), value As T)
  overload: System.Runtime.InteropServices.MemoryMarshal.Write*
  nameWithType.vb: MemoryMarshal.Write(Of T)(Span(Of Byte), T)
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.Write(Of T)(System.Span(Of Byte), T)
  name.vb: Write(Of T)(Span(Of Byte), T)
- uid: System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)
  id: TryWrite``1(System.Span{System.Byte},``0@)
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: TryWrite<T>(Span<byte>, ref T)
  nameWithType: MemoryMarshal.TryWrite<T>(Span<byte>, ref T)
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryWrite<T>(System.Span<byte>, ref T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: 'public static bool TryWrite<T>(Span<byte> destination, ref T value) where T : struct'
    parameters:
    - id: destination
      type: System.Span{System.Byte}
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryWrite(Of T As Structure)(destination As Span(Of Byte), value As T) As Boolean
  overload: System.Runtime.InteropServices.MemoryMarshal.TryWrite*
  nameWithType.vb: MemoryMarshal.TryWrite(Of T)(Span(Of Byte), T)
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.TryWrite(Of T)(System.Span(Of Byte), T)
  name.vb: TryWrite(Of T)(Span(Of Byte), T)
- uid: System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)
  id: CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: CreateFromPinnedArray<T>(T[], int, int)
  nameWithType: MemoryMarshal.CreateFromPinnedArray<T>(T[], int, int)
  fullName: System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray<T>(T[], int, int)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static Memory<T> CreateFromPinnedArray<T>(T[] array, int start, int length)
    parameters:
    - id: array
      type: '{T}[]'
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Memory{{T}}
    content.vb: Public Shared Function CreateFromPinnedArray(Of T)(array As T(), start As Integer, length As Integer) As Memory(Of T)
  overload: System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray*
  nameWithType.vb: MemoryMarshal.CreateFromPinnedArray(Of T)(T(), Integer, Integer)
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray(Of T)(T(), Integer, Integer)
  name.vb: CreateFromPinnedArray(Of T)(T(), Integer, Integer)
- uid: System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})
  id: AsBytes``1(System.Span{``0})
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: AsBytes<T>(Span<T>)
  nameWithType: MemoryMarshal.AsBytes<T>(Span<T>)
  fullName: System.Runtime.InteropServices.MemoryMarshal.AsBytes<T>(System.Span<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: 'public static Span<byte> AsBytes<T>(Span<T> span) where T : struct'
    parameters:
    - id: span
      type: System.Span{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Span{System.Byte}
    content.vb: Public Shared Function AsBytes(Of T As Structure)(span As Span(Of T)) As Span(Of Byte)
  overload: System.Runtime.InteropServices.MemoryMarshal.AsBytes*
  nameWithType.vb: MemoryMarshal.AsBytes(Of T)(Span(Of T))
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.AsBytes(Of T)(System.Span(Of T))
  name.vb: AsBytes(Of T)(Span(Of T))
- uid: System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})
  id: AsBytes``1(System.ReadOnlySpan{``0})
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: AsBytes<T>(ReadOnlySpan<T>)
  nameWithType: MemoryMarshal.AsBytes<T>(ReadOnlySpan<T>)
  fullName: System.Runtime.InteropServices.MemoryMarshal.AsBytes<T>(System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: 'public static ReadOnlySpan<byte> AsBytes<T>(ReadOnlySpan<T> span) where T : struct'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: System.ReadOnlySpan{System.Byte}
    content.vb: Public Shared Function AsBytes(Of T As Structure)(span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)
  overload: System.Runtime.InteropServices.MemoryMarshal.AsBytes*
  nameWithType.vb: MemoryMarshal.AsBytes(Of T)(ReadOnlySpan(Of T))
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.AsBytes(Of T)(System.ReadOnlySpan(Of T))
  name.vb: AsBytes(Of T)(ReadOnlySpan(Of T))
- uid: System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})
  id: AsMemory``1(System.ReadOnlyMemory{``0})
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: AsMemory<T>(ReadOnlyMemory<T>)
  nameWithType: MemoryMarshal.AsMemory<T>(ReadOnlyMemory<T>)
  fullName: System.Runtime.InteropServices.MemoryMarshal.AsMemory<T>(System.ReadOnlyMemory<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static Memory<T> AsMemory<T>(ReadOnlyMemory<T> memory)
    parameters:
    - id: memory
      type: System.ReadOnlyMemory{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Memory{{T}}
    content.vb: Public Shared Function AsMemory(Of T)(memory As ReadOnlyMemory(Of T)) As Memory(Of T)
  overload: System.Runtime.InteropServices.MemoryMarshal.AsMemory*
  nameWithType.vb: MemoryMarshal.AsMemory(Of T)(ReadOnlyMemory(Of T))
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.AsMemory(Of T)(System.ReadOnlyMemory(Of T))
  name.vb: AsMemory(Of T)(ReadOnlyMemory(Of T))
- uid: System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})
  id: GetReference``1(System.Span{``0})
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: GetReference<T>(Span<T>)
  nameWithType: MemoryMarshal.GetReference<T>(Span<T>)
  fullName: System.Runtime.InteropServices.MemoryMarshal.GetReference<T>(System.Span<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static ref T GetReference<T>(Span<T> span)
    parameters:
    - id: span
      type: System.Span{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared ByRef Function GetReference(Of T)(span As Span(Of T)) As T
  overload: System.Runtime.InteropServices.MemoryMarshal.GetReference*
  nameWithType.vb: MemoryMarshal.GetReference(Of T)(Span(Of T))
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.GetReference(Of T)(System.Span(Of T))
  name.vb: GetReference(Of T)(Span(Of T))
- uid: System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})
  id: GetReference``1(System.ReadOnlySpan{``0})
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: GetReference<T>(ReadOnlySpan<T>)
  nameWithType: MemoryMarshal.GetReference<T>(ReadOnlySpan<T>)
  fullName: System.Runtime.InteropServices.MemoryMarshal.GetReference<T>(System.ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static ref T GetReference<T>(ReadOnlySpan<T> span)
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared ByRef Function GetReference(Of T)(span As ReadOnlySpan(Of T)) As T
  overload: System.Runtime.InteropServices.MemoryMarshal.GetReference*
  nameWithType.vb: MemoryMarshal.GetReference(Of T)(ReadOnlySpan(Of T))
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.GetReference(Of T)(System.ReadOnlySpan(Of T))
  name.vb: GetReference(Of T)(ReadOnlySpan(Of T))
- uid: System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})
  id: Cast``2(System.Span{``0})
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: Cast<TFrom, TTo>(Span<TFrom>)
  nameWithType: MemoryMarshal.Cast<TFrom, TTo>(Span<TFrom>)
  fullName: System.Runtime.InteropServices.MemoryMarshal.Cast<TFrom, TTo>(System.Span<TFrom>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: 'public static Span<TTo> Cast<TFrom, TTo>(Span<TFrom> span) where TFrom : struct where TTo : struct'
    parameters:
    - id: span
      type: System.Span{{TFrom}}
    typeParameters:
    - id: TFrom
    - id: TTo
    return:
      type: System.Span{{TTo}}
    content.vb: Public Shared Function Cast(Of TFrom As Structure, TTo As Structure)(span As Span(Of TFrom)) As Span(Of TTo)
  overload: System.Runtime.InteropServices.MemoryMarshal.Cast*
  nameWithType.vb: MemoryMarshal.Cast(Of TFrom, TTo)(Span(Of TFrom))
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.Cast(Of TFrom, TTo)(System.Span(Of TFrom))
  name.vb: Cast(Of TFrom, TTo)(Span(Of TFrom))
- uid: System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})
  commentId: M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})
  id: Cast``2(System.ReadOnlySpan{``0})
  parent: System.Runtime.InteropServices.MemoryMarshal
  langs:
  - csharp
  - vb
  name: Cast<TFrom, TTo>(ReadOnlySpan<TFrom>)
  nameWithType: MemoryMarshal.Cast<TFrom, TTo>(ReadOnlySpan<TFrom>)
  fullName: System.Runtime.InteropServices.MemoryMarshal.Cast<TFrom, TTo>(System.ReadOnlySpan<TFrom>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Runtime.InteropServices
  syntax:
    content: 'public static ReadOnlySpan<TTo> Cast<TFrom, TTo>(ReadOnlySpan<TFrom> span) where TFrom : struct where TTo : struct'
    parameters:
    - id: span
      type: System.ReadOnlySpan{{TFrom}}
    typeParameters:
    - id: TFrom
    - id: TTo
    return:
      type: System.ReadOnlySpan{{TTo}}
    content.vb: Public Shared Function Cast(Of TFrom As Structure, TTo As Structure)(span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)
  overload: System.Runtime.InteropServices.MemoryMarshal.Cast*
  nameWithType.vb: MemoryMarshal.Cast(Of TFrom, TTo)(ReadOnlySpan(Of TFrom))
  fullName.vb: System.Runtime.InteropServices.MemoryMarshal.Cast(Of TFrom, TTo)(System.ReadOnlySpan(Of TFrom))
  name.vb: Cast(Of TFrom, TTo)(ReadOnlySpan(Of TFrom))
references:
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Runtime
    name: Runtime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime
  - name: .
  - uid: System.Runtime.InteropServices
    name: InteropServices
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.interopservices
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Runtime
    name: Runtime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime
  - name: .
  - uid: System.Runtime.InteropServices
    name: InteropServices
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.interopservices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Runtime.InteropServices.MemoryMarshal.TryGetArray*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.TryGetArray
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_TryGetArray__1_System_ReadOnlyMemory___0__System_ArraySegment___0___
  name: TryGetArray
  nameWithType: MemoryMarshal.TryGetArray
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryGetArray
- uid: System.ReadOnlyMemory{{T}}
  commentId: T:System.ReadOnlyMemory{`0}
  parent: System
  definition: System.ReadOnlyMemory`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArraySegment{{T}}
  commentId: T:System.ArraySegment{`0}
  parent: System
  definition: System.ArraySegment`1
  href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.ReadOnlyMemory`1
  commentId: T:System.ReadOnlyMemory`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.arraysegment-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_TryGetMemoryManager__2_System_ReadOnlyMemory___0____1__
  name: TryGetMemoryManager
  nameWithType: MemoryMarshal.TryGetMemoryManager
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager
- uid: '{TManager}'
  commentId: '!:TManager'
  definition: TManager
  name: TManager
  nameWithType: TManager
  fullName: TManager
- uid: TManager
  name: TManager
  nameWithType: TManager
  fullName: TManager
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Runtime.InteropServices.MemoryMarshal.ToEnumerable*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_ToEnumerable__1_System_ReadOnlyMemory___0__
  name: ToEnumerable
  nameWithType: MemoryMarshal.ToEnumerable
  fullName: System.Runtime.InteropServices.MemoryMarshal.ToEnumerable
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Runtime.InteropServices.MemoryMarshal.TryGetString*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.TryGetString
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_TryGetString_System_ReadOnlyMemory_System_Char__System_String__System_Int32__System_Int32__
  name: TryGetString
  nameWithType: MemoryMarshal.TryGetString
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryGetString
- uid: System.ReadOnlyMemory{System.Char}
  commentId: T:System.ReadOnlyMemory{System.Char}
  parent: System
  definition: System.ReadOnlyMemory`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<char>
  nameWithType: ReadOnlyMemory<char>
  fullName: System.ReadOnlyMemory<char>
  nameWithType.vb: ReadOnlyMemory(Of Char)
  fullName.vb: System.ReadOnlyMemory(Of Char)
  name.vb: ReadOnlyMemory(Of Char)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Runtime.InteropServices.MemoryMarshal.Read*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.Read
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_Read__1_System_ReadOnlySpan_System_Byte__
  name: Read
  nameWithType: MemoryMarshal.Read
  fullName: System.Runtime.InteropServices.MemoryMarshal.Read
- uid: System.ReadOnlySpan{System.Byte}
  commentId: T:System.ReadOnlySpan{System.Byte}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<byte>
  nameWithType: ReadOnlySpan<byte>
  fullName: System.ReadOnlySpan<byte>
  nameWithType.vb: ReadOnlySpan(Of Byte)
  fullName.vb: System.ReadOnlySpan(Of Byte)
  name.vb: ReadOnlySpan(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Runtime.InteropServices.MemoryMarshal.TryRead*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.TryRead
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_TryRead__1_System_ReadOnlySpan_System_Byte____0__
  name: TryRead
  nameWithType: MemoryMarshal.TryRead
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryRead
- uid: System.Runtime.InteropServices.MemoryMarshal.Write*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.Write
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_Write__1_System_Span_System_Byte____0__
  name: Write
  nameWithType: MemoryMarshal.Write
  fullName: System.Runtime.InteropServices.MemoryMarshal.Write
- uid: System.Span{System.Byte}
  commentId: T:System.Span{System.Byte}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<byte>
  nameWithType: Span<byte>
  fullName: System.Span<byte>
  nameWithType.vb: Span(Of Byte)
  fullName.vb: System.Span(Of Byte)
  name.vb: Span(Of Byte)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Span`1
  commentId: T:System.Span`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Runtime.InteropServices.MemoryMarshal.TryWrite*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.TryWrite
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_TryWrite__1_System_Span_System_Byte____0__
  name: TryWrite
  nameWithType: MemoryMarshal.TryWrite
  fullName: System.Runtime.InteropServices.MemoryMarshal.TryWrite
- uid: System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_CreateFromPinnedArray__1___0___System_Int32_System_Int32_
  name: CreateFromPinnedArray
  nameWithType: MemoryMarshal.CreateFromPinnedArray
  fullName: System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Memory{{T}}
  commentId: T:System.Memory{`0}
  parent: System
  definition: System.Memory`1
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Memory`1
  commentId: T:System.Memory`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Runtime.InteropServices.MemoryMarshal.AsBytes*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.AsBytes
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_AsBytes__1_System_Span___0__
  name: AsBytes
  nameWithType: MemoryMarshal.AsBytes
  fullName: System.Runtime.InteropServices.MemoryMarshal.AsBytes
- uid: System.Span{{T}}
  commentId: T:System.Span{`0}
  parent: System
  definition: System.Span`1
  href: System.Span-1.html
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlySpan{{T}}
  commentId: T:System.ReadOnlySpan{`0}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Runtime.InteropServices.MemoryMarshal.AsMemory*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.AsMemory
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_AsMemory__1_System_ReadOnlyMemory___0__
  name: AsMemory
  nameWithType: MemoryMarshal.AsMemory
  fullName: System.Runtime.InteropServices.MemoryMarshal.AsMemory
- uid: System.Runtime.InteropServices.MemoryMarshal.GetReference*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.GetReference
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_GetReference__1_System_Span___0__
  name: GetReference
  nameWithType: MemoryMarshal.GetReference
  fullName: System.Runtime.InteropServices.MemoryMarshal.GetReference
- uid: System.Runtime.InteropServices.MemoryMarshal.Cast*
  commentId: Overload:System.Runtime.InteropServices.MemoryMarshal.Cast
  isExternal: true
  href: System.Runtime.InteropServices.MemoryMarshal.html#System_Runtime_InteropServices_MemoryMarshal_Cast__2_System_Span___0__
  name: Cast
  nameWithType: MemoryMarshal.Cast
  fullName: System.Runtime.InteropServices.MemoryMarshal.Cast
- uid: System.Span{{TFrom}}
  commentId: T:System.Span{``0}
  parent: System
  definition: System.Span`1
  href: System.Span-1.html
  name: Span<TFrom>
  nameWithType: Span<TFrom>
  fullName: System.Span<TFrom>
  nameWithType.vb: Span(Of TFrom)
  fullName.vb: System.Span(Of TFrom)
  name.vb: Span(Of TFrom)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: TFrom
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TFrom
  - name: )
- uid: System.Span{{TTo}}
  commentId: T:System.Span{``1}
  parent: System
  definition: System.Span`1
  href: System.Span-1.html
  name: Span<TTo>
  nameWithType: Span<TTo>
  fullName: System.Span<TTo>
  nameWithType.vb: Span(Of TTo)
  fullName.vb: System.Span(Of TTo)
  name.vb: Span(Of TTo)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: <
  - name: TTo
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: System.Span-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TTo
  - name: )
- uid: System.ReadOnlySpan{{TFrom}}
  commentId: T:System.ReadOnlySpan{``0}
  parent: System
  definition: System.ReadOnlySpan`1
  href: System.ReadOnlySpan-1.html
  name: ReadOnlySpan<TFrom>
  nameWithType: ReadOnlySpan<TFrom>
  fullName: System.ReadOnlySpan<TFrom>
  nameWithType.vb: ReadOnlySpan(Of TFrom)
  fullName.vb: System.ReadOnlySpan(Of TFrom)
  name.vb: ReadOnlySpan(Of TFrom)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: <
  - name: TFrom
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TFrom
  - name: )
- uid: System.ReadOnlySpan{{TTo}}
  commentId: T:System.ReadOnlySpan{``1}
  parent: System
  definition: System.ReadOnlySpan`1
  href: System.ReadOnlySpan-1.html
  name: ReadOnlySpan<TTo>
  nameWithType: ReadOnlySpan<TTo>
  fullName: System.ReadOnlySpan<TTo>
  nameWithType.vb: ReadOnlySpan(Of TTo)
  fullName.vb: System.ReadOnlySpan(Of TTo)
  name.vb: ReadOnlySpan(Of TTo)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: <
  - name: TTo
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: System.ReadOnlySpan-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TTo
  - name: )
