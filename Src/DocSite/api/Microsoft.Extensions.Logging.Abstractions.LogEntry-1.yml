### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1
  commentId: T:Microsoft.Extensions.Logging.Abstractions.LogEntry`1
  id: LogEntry`1
  parent: Microsoft.Extensions.Logging.Abstractions
  children:
  - Microsoft.Extensions.Logging.Abstractions.LogEntry`1.#ctor(Microsoft.Extensions.Logging.LogLevel,System.String,Microsoft.Extensions.Logging.EventId,`0,System.Exception,System.Func{`0,System.Exception,System.String})
  - Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Category
  - Microsoft.Extensions.Logging.Abstractions.LogEntry`1.EventId
  - Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Exception
  - Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Formatter
  - Microsoft.Extensions.Logging.Abstractions.LogEntry`1.LogLevel
  - Microsoft.Extensions.Logging.Abstractions.LogEntry`1.State
  langs:
  - csharp
  - vb
  name: LogEntry<TState>
  nameWithType: LogEntry<TState>
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>
  type: Struct
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Abstractions
  summary: Holds the information for a single log entry.
  example: []
  syntax:
    content: public readonly struct LogEntry<TState>
    typeParameters:
    - id: TState
    content.vb: Public Structure LogEntry(Of TState)
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  nameWithType.vb: LogEntry(Of TState)
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState)
  name.vb: LogEntry(Of TState)
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.#ctor(Microsoft.Extensions.Logging.LogLevel,System.String,Microsoft.Extensions.Logging.EventId,`0,System.Exception,System.Func{`0,System.Exception,System.String})
  commentId: M:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.#ctor(Microsoft.Extensions.Logging.LogLevel,System.String,Microsoft.Extensions.Logging.EventId,`0,System.Exception,System.Func{`0,System.Exception,System.String})
  id: '#ctor(Microsoft.Extensions.Logging.LogLevel,System.String,Microsoft.Extensions.Logging.EventId,`0,System.Exception,System.Func{`0,System.Exception,System.String})'
  parent: Microsoft.Extensions.Logging.Abstractions.LogEntry`1
  langs:
  - csharp
  - vb
  name: LogEntry(LogLevel, string, EventId, TState, Exception?, Func<TState, Exception?, string>)
  nameWithType: LogEntry<TState>.LogEntry(LogLevel, string, EventId, TState, Exception?, Func<TState, Exception?, string>)
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.LogEntry(Microsoft.Extensions.Logging.LogLevel, string, Microsoft.Extensions.Logging.EventId, TState, System.Exception?, System.Func<TState, System.Exception?, string>)
  type: Constructor
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Abstractions
  summary: Initializes an instance of the LogEntry struct.
  example: []
  syntax:
    content: public LogEntry(LogLevel logLevel, string category, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter)
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The log level.
    - id: category
      type: System.String
      description: The category name for the log.
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The log event Id.
    - id: state
      type: '{TState}'
      description: The state for which log is being written.
    - id: exception
      type: System.Exception
      description: The log exception.
    - id: formatter
      type: System.Func{{TState},System.Exception,System.String}
      description: The formatter.
    content.vb: Public Sub New(logLevel As LogLevel, category As String, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))
  overload: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.#ctor*
  nameWithType.vb: LogEntry(Of TState).New(LogLevel, String, EventId, TState, Exception, Func(Of TState, Exception, String))
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).New(Microsoft.Extensions.Logging.LogLevel, String, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func(Of TState, System.Exception, String))
  name.vb: New(LogLevel, String, EventId, TState, Exception, Func(Of TState, Exception, String))
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.LogLevel
  commentId: P:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.LogLevel
  id: LogLevel
  parent: Microsoft.Extensions.Logging.Abstractions.LogEntry`1
  langs:
  - csharp
  - vb
  name: LogLevel
  nameWithType: LogEntry<TState>.LogLevel
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.LogLevel
  type: Property
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Abstractions
  summary: Gets the LogLevel
  example: []
  syntax:
    content: public LogLevel LogLevel { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.LogLevel
    content.vb: Public ReadOnly Property LogLevel As LogLevel
  overload: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.LogLevel*
  nameWithType.vb: LogEntry(Of TState).LogLevel
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).LogLevel
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Category
  commentId: P:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Category
  id: Category
  parent: Microsoft.Extensions.Logging.Abstractions.LogEntry`1
  langs:
  - csharp
  - vb
  name: Category
  nameWithType: LogEntry<TState>.Category
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.Category
  type: Property
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Abstractions
  summary: Gets the log category
  example: []
  syntax:
    content: public string Category { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Category As String
  overload: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Category*
  nameWithType.vb: LogEntry(Of TState).Category
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).Category
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.EventId
  commentId: P:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.EventId
  id: EventId
  parent: Microsoft.Extensions.Logging.Abstractions.LogEntry`1
  langs:
  - csharp
  - vb
  name: EventId
  nameWithType: LogEntry<TState>.EventId
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.EventId
  type: Property
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Abstractions
  summary: Gets the log EventId
  example: []
  syntax:
    content: public EventId EventId { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.EventId
    content.vb: Public ReadOnly Property EventId As EventId
  overload: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.EventId*
  nameWithType.vb: LogEntry(Of TState).EventId
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).EventId
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.State
  commentId: P:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.State
  id: State
  parent: Microsoft.Extensions.Logging.Abstractions.LogEntry`1
  langs:
  - csharp
  - vb
  name: State
  nameWithType: LogEntry<TState>.State
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.State
  type: Property
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Abstractions
  summary: Gets the TState
  example: []
  syntax:
    content: public TState State { get; }
    parameters: []
    return:
      type: '{TState}'
    content.vb: Public ReadOnly Property State As TState
  overload: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.State*
  nameWithType.vb: LogEntry(Of TState).State
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).State
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Exception
  commentId: P:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Exception
  id: Exception
  parent: Microsoft.Extensions.Logging.Abstractions.LogEntry`1
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: LogEntry<TState>.Exception
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.Exception
  type: Property
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Abstractions
  summary: Gets the log exception
  example: []
  syntax:
    content: public Exception? Exception { get; }
    parameters: []
    return:
      type: System.Exception
    content.vb: Public ReadOnly Property Exception As Exception
  overload: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Exception*
  nameWithType.vb: LogEntry(Of TState).Exception
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).Exception
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Formatter
  commentId: P:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Formatter
  id: Formatter
  parent: Microsoft.Extensions.Logging.Abstractions.LogEntry`1
  langs:
  - csharp
  - vb
  name: Formatter
  nameWithType: LogEntry<TState>.Formatter
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.Formatter
  type: Property
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Abstractions
  summary: Gets the formatter
  example: []
  syntax:
    content: public Func<TState, Exception?, string>? Formatter { get; }
    parameters: []
    return:
      type: System.Func{{TState},System.Exception,System.String}
    content.vb: Public ReadOnly Property Formatter As Func(Of TState, Exception, String)
  overload: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Formatter*
  nameWithType.vb: LogEntry(Of TState).Formatter
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).Formatter
references:
- uid: Microsoft.Extensions.Logging.Abstractions
  commentId: N:Microsoft.Extensions.Logging.Abstractions
  isExternal: true
  href: Microsoft.html
  name: Microsoft.Extensions.Logging.Abstractions
  nameWithType: Microsoft.Extensions.Logging.Abstractions
  fullName: Microsoft.Extensions.Logging.Abstractions
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: Microsoft.html
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: Microsoft.Extensions.html
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: Microsoft.Extensions.Logging.html
  - name: .
  - uid: Microsoft.Extensions.Logging.Abstractions
    name: Abstractions
    isExternal: true
    href: Microsoft.Extensions.Logging.Abstractions.html
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: Microsoft.html
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: Microsoft.Extensions.html
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: Microsoft.Extensions.Logging.html
  - name: .
  - uid: Microsoft.Extensions.Logging.Abstractions
    name: Abstractions
    isExternal: true
    href: Microsoft.Extensions.Logging.Abstractions.html
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.#ctor*
  commentId: Overload:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.#ctor
  isExternal: true
  href: Microsoft.Extensions.Logging.Abstractions.LogEntry-1.html#Microsoft_Extensions_Logging_Abstractions_LogEntry_1__ctor_Microsoft_Extensions_Logging_LogLevel_System_String_Microsoft_Extensions_Logging_EventId__0_System_Exception_System_Func__0_System_Exception_System_String__
  name: LogEntry
  nameWithType: LogEntry<TState>.LogEntry
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.LogEntry
  nameWithType.vb: LogEntry(Of TState).New
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).New
  name.vb: New
- uid: Microsoft.Extensions.Logging.LogLevel
  commentId: T:Microsoft.Extensions.Logging.LogLevel
  parent: Microsoft.Extensions.Logging
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.loglevel
  name: LogLevel
  nameWithType: LogLevel
  fullName: Microsoft.Extensions.Logging.LogLevel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Microsoft.Extensions.Logging.EventId
  commentId: T:Microsoft.Extensions.Logging.EventId
  parent: Microsoft.Extensions.Logging
  isExternal: true
  href: Microsoft.Extensions.Logging.EventId.html
  name: EventId
  nameWithType: EventId
  fullName: Microsoft.Extensions.Logging.EventId
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Func{{TState},System.Exception,System.String}
  commentId: T:System.Func{``0,System.Exception,System.String}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TState, Exception, string>
  nameWithType: Func<TState, Exception, string>
  fullName: System.Func<TState, System.Exception, string>
  nameWithType.vb: Func(Of TState, Exception, String)
  fullName.vb: System.Func(Of TState, System.Exception, String)
  name.vb: Func(Of TState, Exception, String)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TState
  - name: ','
  - name: " "
  - uid: System.Exception
    name: Exception
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TState
  - name: ','
  - name: " "
  - uid: System.Exception
    name: Exception
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
- uid: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.LogLevel*
  commentId: Overload:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.LogLevel
  isExternal: true
  href: Microsoft.Extensions.Logging.Abstractions.LogEntry-1.html#Microsoft_Extensions_Logging_Abstractions_LogEntry_1_LogLevel
  name: LogLevel
  nameWithType: LogEntry<TState>.LogLevel
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.LogLevel
  nameWithType.vb: LogEntry(Of TState).LogLevel
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).LogLevel
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Category*
  commentId: Overload:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Category
  isExternal: true
  href: Microsoft.Extensions.Logging.Abstractions.LogEntry-1.html#Microsoft_Extensions_Logging_Abstractions_LogEntry_1_Category
  name: Category
  nameWithType: LogEntry<TState>.Category
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.Category
  nameWithType.vb: LogEntry(Of TState).Category
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).Category
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.EventId*
  commentId: Overload:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.EventId
  isExternal: true
  href: Microsoft.Extensions.Logging.Abstractions.LogEntry-1.html#Microsoft_Extensions_Logging_Abstractions_LogEntry_1_EventId
  name: EventId
  nameWithType: LogEntry<TState>.EventId
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.EventId
  nameWithType.vb: LogEntry(Of TState).EventId
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).EventId
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.State*
  commentId: Overload:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.State
  isExternal: true
  href: Microsoft.Extensions.Logging.Abstractions.LogEntry-1.html#Microsoft_Extensions_Logging_Abstractions_LogEntry_1_State
  name: State
  nameWithType: LogEntry<TState>.State
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.State
  nameWithType.vb: LogEntry(Of TState).State
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).State
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Exception*
  commentId: Overload:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Exception
  isExternal: true
  href: Microsoft.Extensions.Logging.Abstractions.LogEntry-1.html#Microsoft_Extensions_Logging_Abstractions_LogEntry_1_Exception
  name: Exception
  nameWithType: LogEntry<TState>.Exception
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.Exception
  nameWithType.vb: LogEntry(Of TState).Exception
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).Exception
- uid: Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Formatter*
  commentId: Overload:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.Formatter
  isExternal: true
  href: Microsoft.Extensions.Logging.Abstractions.LogEntry-1.html#Microsoft_Extensions_Logging_Abstractions_LogEntry_1_Formatter
  name: Formatter
  nameWithType: LogEntry<TState>.Formatter
  fullName: Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>.Formatter
  nameWithType.vb: LogEntry(Of TState).Formatter
  fullName.vb: Microsoft.Extensions.Logging.Abstractions.LogEntry(Of TState).Formatter
