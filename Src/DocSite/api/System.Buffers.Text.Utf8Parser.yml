### YamlMime:ManagedReference
items:
- uid: System.Buffers.Text.Utf8Parser
  commentId: T:System.Buffers.Text.Utf8Parser
  id: Utf8Parser
  parent: System.Buffers.Text
  children:
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)
  - System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)
  langs:
  - csharp
  - vb
  name: Utf8Parser
  nameWithType: Utf8Parser
  fullName: System.Buffers.Text.Utf8Parser
  type: Class
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static class Utf8Parser
    content.vb: Public Module Utf8Parser
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out bool, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out bool, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out bool, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out bool value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.Boolean
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As Boolean, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), Boolean, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), Boolean, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), Boolean, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out DateTime, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out DateTime, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out System.DateTime, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out DateTime value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.DateTime
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As Date, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), Date, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), Date, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), Date, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out DateTimeOffset, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out DateTimeOffset, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out System.DateTimeOffset, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out DateTimeOffset value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.DateTimeOffset
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As DateTimeOffset, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), DateTimeOffset, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), System.DateTimeOffset, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), DateTimeOffset, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out decimal, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out decimal, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out decimal, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out decimal value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.Decimal
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As Decimal, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), Decimal, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), Decimal, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), Decimal, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out float, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out float, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out float, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out float value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.Single
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As Single, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), Single, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), Single, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), Single, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out double, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out double, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out double, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out double value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.Double
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As Double, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), Double, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), Double, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), Double, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out Guid, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out Guid, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out System.Guid, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out Guid value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.Guid
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As Guid, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), Guid, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), System.Guid, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), Guid, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out sbyte, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out sbyte, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out sbyte, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool TryParse(ReadOnlySpan<byte> source, out sbyte value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.SByte
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As SByte, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), SByte, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), SByte, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), SByte, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out short, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out short, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out short, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out short value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.Int16
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As Short, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), Short, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), Short, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), Short, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out int, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out int, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out int, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out int value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.Int32
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As Integer, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), Integer, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), Integer, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), Integer, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out long, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out long, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out long, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out long value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.Int64
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As Long, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), Long, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), Long, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), Long, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out byte, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out byte, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out byte, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out byte value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.Byte
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As Byte, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), Byte, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), Byte, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), Byte, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out ushort, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out ushort, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out ushort, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool TryParse(ReadOnlySpan<byte> source, out ushort value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.UInt16
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As UShort, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), UShort, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), UShort, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), UShort, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out uint, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out uint, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out uint, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool TryParse(ReadOnlySpan<byte> source, out uint value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.UInt32
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As UInteger, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), UInteger, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), UInteger, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), UInteger, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out ulong, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out ulong, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out ulong, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool TryParse(ReadOnlySpan<byte> source, out ulong value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.UInt64
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As ULong, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), ULong, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), ULong, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), ULong, Integer, Char)
- uid: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)
  commentId: M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)
  id: TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)
  parent: System.Buffers.Text.Utf8Parser
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<byte>, out TimeSpan, out int, char)
  nameWithType: Utf8Parser.TryParse(ReadOnlySpan<byte>, out TimeSpan, out int, char)
  fullName: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan<byte>, out System.TimeSpan, out int, char)
  type: Method
  assemblies:
  - System.Memory
  namespace: System.Buffers.Text
  syntax:
    content: public static bool TryParse(ReadOnlySpan<byte> source, out TimeSpan value, out int bytesConsumed, char standardFormat = '\0')
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: System.TimeSpan
    - id: bytesConsumed
      type: System.Int32
    - id: standardFormat
      type: System.Char
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(source As ReadOnlySpan(Of Byte), value As TimeSpan, bytesConsumed As Integer, standardFormat As Char = vbNullChar) As Boolean
  overload: System.Buffers.Text.Utf8Parser.TryParse*
  nameWithType.vb: Utf8Parser.TryParse(ReadOnlySpan(Of Byte), TimeSpan, Integer, Char)
  fullName.vb: System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan(Of Byte), System.TimeSpan, Integer, Char)
  name.vb: TryParse(ReadOnlySpan(Of Byte), TimeSpan, Integer, Char)
references:
- uid: System.Buffers.Text
  commentId: N:System.Buffers.Text
  isExternal: true
  href: System.html
  name: System.Buffers.Text
  nameWithType: System.Buffers.Text
  fullName: System.Buffers.Text
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: System.html
  - name: .
  - uid: System.Buffers
    name: Buffers
    isExternal: true
    href: System.Buffers.html
  - name: .
  - uid: System.Buffers.Text
    name: Text
    isExternal: true
    href: System.Buffers.Text.html
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: System.html
  - name: .
  - uid: System.Buffers
    name: Buffers
    isExternal: true
    href: System.Buffers.html
  - name: .
  - uid: System.Buffers.Text
    name: Text
    isExternal: true
    href: System.Buffers.Text.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Buffers.Text.Utf8Parser.TryParse*
  commentId: Overload:System.Buffers.Text.Utf8Parser.TryParse
  isExternal: true
  href: System.Buffers.Text.Utf8Parser.html#System_Buffers_Text_Utf8Parser_TryParse_System_ReadOnlySpan_System_Byte__System_Boolean__System_Int32__System_Char_
  name: TryParse
  nameWithType: Utf8Parser.TryParse
  fullName: System.Buffers.Text.Utf8Parser.TryParse
- uid: System.ReadOnlySpan{System.Byte}
  commentId: T:System.ReadOnlySpan{System.Byte}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<byte>
  nameWithType: ReadOnlySpan<byte>
  fullName: System.ReadOnlySpan<byte>
  nameWithType.vb: ReadOnlySpan(Of Byte)
  fullName.vb: System.ReadOnlySpan(Of Byte)
  name.vb: ReadOnlySpan(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetimeoffset
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.decimal
  name: decimal
  nameWithType: decimal
  fullName: decimal
  nameWithType.vb: Decimal
  fullName.vb: Decimal
  name.vb: Decimal
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.sbyte
  name: sbyte
  nameWithType: sbyte
  fullName: sbyte
  nameWithType.vb: SByte
  fullName.vb: SByte
  name.vb: SByte
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int16
  name: short
  nameWithType: short
  fullName: short
  nameWithType.vb: Short
  fullName.vb: Short
  name.vb: Short
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint16
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
