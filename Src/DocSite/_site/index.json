{
  "api/CodeFactory.ActionException.html": {
    "href": "api/CodeFactory.ActionException.html",
    "title": "Class ActionException | CodeFactory for Windows",
    "keywords": "Class ActionException Exception that is raised when an error occurred that kept a code factory command from finishing execution. Inheritance object Exception CodeFactoryException ActionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class ActionException : CodeFactoryException, ISerializable Constructors ActionException(string) Creates a command exception. Declaration public ActionException(string message) Parameters Type Name Description string message The error message to be captured by the exception ActionException(string, Exception) Creates a command exception. Declaration public ActionException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.CodeFactoryException.html": {
    "href": "api/CodeFactory.CodeFactoryException.html",
    "title": "Class CodeFactoryException | CodeFactory for Windows",
    "keywords": "Class CodeFactoryException Base exception class all code factory generated exceptions are based on. Inheritance object Exception CodeFactoryException ActionException DocumentException ModelException<TModelTypes> ModelLoadException VisualStudioException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class CodeFactoryException : Exception, ISerializable Constructors CodeFactoryException() Creates a general code factory exception. Declaration public CodeFactoryException() CodeFactoryException(string) Creates a general code factory exception. Declaration public CodeFactoryException(string message) Parameters Type Name Description string message The error message to be captured by the exception. CodeFactoryException(string, Exception) Creates a model exception. Declaration public CodeFactoryException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception. Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.CodeFactoryMessages.html": {
    "href": "api/CodeFactory.CodeFactoryMessages.html",
    "title": "Class CodeFactoryMessages | CodeFactory for Windows",
    "keywords": "Class CodeFactoryMessages A strongly-typed resource class, for looking up localized strings, etc. Inheritance object CodeFactoryMessages Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class CodeFactoryMessages Properties BaseDocumentException Looks up a localized string similar to An internal error occurred could not complete the document operation.. Declaration public static string BaseDocumentException { get; } Property Value Type Description string CodeFactoryError Looks up a localized string similar to An unhandled error occurred and the current code factory operation failed to complete. Please try again.. Declaration public static string CodeFactoryError { get; } Property Value Type Description string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description CultureInfo LoadErrorsUnhandledError Looks up a localized string similar to An internal error occurred while loading the errors, was not able to retrieve the error messages.. Declaration public static string LoadErrorsUnhandledError { get; } Property Value Type Description string ModelLoadError Looks up a localized string similar to An error occurred while loading the model. Review the model to confirm that the model was able to complete loading. . Declaration public static string ModelLoadError { get; } Property Value Type Description string ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager"
  },
  "api/CodeFactory.Document.DocumentException.html": {
    "href": "api/CodeFactory.Document.DocumentException.html",
    "title": "Class DocumentException | CodeFactory for Windows",
    "keywords": "Class DocumentException Exception management class that host information about exceptions that occurred while managing documents in code factory. Inheritance object Exception CodeFactoryException DocumentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public class DocumentException : CodeFactoryException, ISerializable Constructors DocumentException() Creates a document exception. Declaration public DocumentException() DocumentException(string) Creates a document exception. Declaration public DocumentException(string message) Parameters Type Name Description string message The error message to be captured by the exception DocumentException(string, Exception) Creates a document exception. Declaration public DocumentException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.Document.DocumentLine.html": {
    "href": "api/CodeFactory.Document.DocumentLine.html",
    "title": "Class DocumentLine | CodeFactory for Windows",
    "keywords": "Class DocumentLine Data class that holds the document line information. Inheritance object DocumentLine Implements IDocumentLine Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public class DocumentLine : IDocumentLine Constructors DocumentLine(long, int, string) Constructor that creates an instance of the DocumentLine Declaration protected DocumentLine(long number, int length, string content) Parameters Type Name Description long number The line number within the document. int length The number of characters that are in the line. string content The content of the line. Properties Content The content of the line. Declaration public string Content { get; } Property Value Type Description string Length The number of characters that are in the line. Declaration public int Length { get; } Property Value Type Description int Number The line number within the document. Declaration public long Number { get; } Property Value Type Description long Methods Init(long, int, string) Creates an immutable instance of the DocumentLine Declaration public static DocumentLine Init(long number, int length, string content) Parameters Type Name Description long number The line number within the document. int length The number of characters that are in the line. string content The content of the line. Returns Type Description DocumentLine Implements IDocumentLine"
  },
  "api/CodeFactory.Document.DocumentLocation.html": {
    "href": "api/CodeFactory.Document.DocumentLocation.html",
    "title": "Class DocumentLocation | CodeFactory for Windows",
    "keywords": "Class DocumentLocation Document location data class, used to determine a point within a document. This is used for gathering and setting model information. Inheritance object DocumentLocation Implements IDocumentLocation Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public class DocumentLocation : IDocumentLocation Constructors DocumentLocation(int, int) Initializes a new instance of a DocumentLocation data class. Declaration protected DocumentLocation(int lineNumber, int characterPosition) Parameters Type Name Description int lineNumber The line number within the file. int characterPosition The character position within the line. Properties CharacterPosition The character position within the line. Declaration public int CharacterPosition { get; } Property Value Type Description int LineNumber The line number within the file. Declaration public int LineNumber { get; } Property Value Type Description int Methods Init(int, int) Returns an Immutable instance of data class that implements IDocumentLocation contract definition. Declaration public static DocumentLocation Init(int lineNumber, int characterPosition) Parameters Type Name Description int lineNumber The line number within the file. int characterPosition The character position within the line. Returns Type Description DocumentLocation Immutable instance of the document location. Implements IDocumentLocation"
  },
  "api/CodeFactory.Document.IDocumentContent.html": {
    "href": "api/CodeFactory.Document.IDocumentContent.html",
    "title": "Interface IDocumentContent | CodeFactory for Windows",
    "keywords": "Interface IDocumentContent The contents of a document loaded from code factory. Inherited Members IReadOnlyList<string>.this[int] IReadOnlyCollection<string>.Count IEnumerable<string>.GetEnumerator() Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public interface IDocumentContent : IReadOnlyList<string>, IReadOnlyCollection<string>, IEnumerable<string>, IEnumerable"
  },
  "api/CodeFactory.Document.IDocumentLine.html": {
    "href": "api/CodeFactory.Document.IDocumentLine.html",
    "title": "Interface IDocumentLine | CodeFactory for Windows",
    "keywords": "Interface IDocumentLine Metadata about a line from a document that has been returned from code factory. Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public interface IDocumentLine Properties Content The content of the line. Declaration string Content { get; } Property Value Type Description string Length The number of characters that are in the line. Declaration int Length { get; } Property Value Type Description int Number The line number within the document. Declaration long Number { get; } Property Value Type Description long"
  },
  "api/CodeFactory.Document.IDocumentLocation.html": {
    "href": "api/CodeFactory.Document.IDocumentLocation.html",
    "title": "Interface IDocumentLocation | CodeFactory for Windows",
    "keywords": "Interface IDocumentLocation Definition of the information to identify a location within a document. Namespace: CodeFactory.Document Assembly: CodeFactory.dll Syntax public interface IDocumentLocation Properties CharacterPosition The character position within the line. Declaration int CharacterPosition { get; } Property Value Type Description int LineNumber The line number within the file. Declaration int LineNumber { get; } Property Value Type Description int"
  },
  "api/CodeFactory.Document.html": {
    "href": "api/CodeFactory.Document.html",
    "title": "Namespace CodeFactory.Document | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.Document Classes DocumentException Exception management class that host information about exceptions that occurred while managing documents in code factory. DocumentLine Data class that holds the document line information. DocumentLocation Document location data class, used to determine a point within a document. This is used for gathering and setting model information. Interfaces IDocumentContent The contents of a document loaded from code factory. IDocumentLine Metadata about a line from a document that has been returned from code factory. IDocumentLocation Definition of the information to identify a location within a document."
  },
  "api/CodeFactory.ICommand-1.html": {
    "href": "api/CodeFactory.ICommand-1.html",
    "title": "Interface ICommand<TModel> | CodeFactory for Windows",
    "keywords": "Interface ICommand<TModel> Base implementation for all code factory commands. Inherited Members ICommandBase<TModel>.ExecuteCommandAsync(TModel) Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public interface ICommand<TModel> : ICommandBase<TModel> where TModel : class Type Parameters Name Description TModel Target code factory model to be provided for the command. Methods EnableCommandAsync(TModel) Validation logic that will determine if this command should be enabled for execution. Declaration Task<bool> EnableCommandAsync(TModel result) Parameters Type Name Description TModel result The target model data that will be used to determine if this command should be enabled. Returns Type Description Task<bool> Boolean flag that will tell code factory to enable this command or disable it."
  },
  "api/CodeFactory.ICommandBase-1.html": {
    "href": "api/CodeFactory.ICommandBase-1.html",
    "title": "Interface ICommandBase<TModel> | CodeFactory for Windows",
    "keywords": "Interface ICommandBase<TModel> Minimum implementation for all code factory commands. Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public interface ICommandBase<TModel> where TModel : class Type Parameters Name Description TModel Target code factory model to be provided for the command. Methods ExecuteCommandAsync(TModel) Code factory framework calls this method when the command has been executed. Declaration Task ExecuteCommandAsync(TModel result) Parameters Type Name Description TModel result The code factory model that has generated and provided to the command to process. Returns Type Description Task"
  },
  "api/CodeFactory.IModel-1.html": {
    "href": "api/CodeFactory.IModel-1.html",
    "title": "Interface IModel<TModelTypes> | CodeFactory for Windows",
    "keywords": "Interface IModel<TModelTypes> Base implementation of a code factory model. All models will be derived from this base model definition. Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public interface IModel<TModelTypes> where TModelTypes : struct, IComparable, IFormattable, IConvertible Type Parameters Name Description TModelTypes Enumeration of the model types that this model supports. Properties HasErrors Flag that determines if this model has errors. Declaration bool HasErrors { get; } Property Value Type Description bool IsLoaded Flag that determines if this model was able to load. Declaration bool IsLoaded { get; } Property Value Type Description bool ModelErrors List of all errors that occurred in this model. Declaration IReadOnlyList<ModelException<TModelTypes>> ModelErrors { get; } Property Value Type Description IReadOnlyList<ModelException<TModelTypes>> ModelType Determines the type of model that has been loaded. Declaration TModelTypes ModelType { get; } Property Value Type Description TModelTypes"
  },
  "api/CodeFactory.IModelStatus.html": {
    "href": "api/CodeFactory.IModelStatus.html",
    "title": "Interface IModelStatus | CodeFactory for Windows",
    "keywords": "Interface IModelStatus Status information about a code factory model that has been created. Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public interface IModelStatus Properties HasErrors Flag that determines if this model or one of the children of this model has an error. Declaration bool HasErrors { get; } Property Value Type Description bool IsLoaded Flag that determines if this model was able to load. Declaration bool IsLoaded { get; } Property Value Type Description bool Methods GetErrors() Gets the ModelLoadException from the current model and all child models of this model. Declaration IReadOnlyList<ModelLoadException> GetErrors() Returns Type Description IReadOnlyList<ModelLoadException> Returns a IReadOnlyList<T> of the ModelLoadException exceptions or an empty list if no exceptions exist."
  },
  "api/CodeFactory.ISourceFormatter.html": {
    "href": "api/CodeFactory.ISourceFormatter.html",
    "title": "Interface ISourceFormatter | CodeFactory for Windows",
    "keywords": "Interface ISourceFormatter Base implementation all source formatters that support CodeFactory must implement. Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public interface ISourceFormatter Methods AppendCode(string) Appends code to the end of the current line in the formatter. Declaration void AppendCode(string code) Parameters Type Name Description string code The code to append. AppendCodeBlock(int, IEnumerable<string>) Appends a target indent level to a already formatted block of code. Declaration void AppendCodeBlock(int indentLevel, IEnumerable<string> codeBlock) Parameters Type Name Description int indentLevel The target indent level to be added to the existing code block. IEnumerable<string> codeBlock The block of code to append to. AppendCodeBlock(int, string) Appends a target indent level to a already formatted block of code. Declaration void AppendCodeBlock(int indentLevel, string codeBlock) Parameters Type Name Description int indentLevel The target indent level to be added to the existing code block. string codeBlock The block of code to append to. AppendCodeLine(int) Appends a new line of code to the formatter. Declaration void AppendCodeLine(int indentLevel) Parameters Type Name Description int indentLevel The number of indent levels to add to the source code. AppendCodeLine(int, string) Appends a new line of code to the formatter. Declaration void AppendCodeLine(int indentLevel, string code) Parameters Type Name Description int indentLevel The number of indent levels to add to the source code. string code The code to add to the formatter. ResetFormatter() Clears the formatter to be reused. Declaration void ResetFormatter() ReturnSource() Returns the formatted source code. Declaration string ReturnSource() Returns Type Description string Formatted SourceCode."
  },
  "api/CodeFactory.ModelException-1.html": {
    "href": "api/CodeFactory.ModelException-1.html",
    "title": "Class ModelException<TModelTypes> | CodeFactory for Windows",
    "keywords": "Class ModelException<TModelTypes> Exception class that is designed to capture exception information during the creation of a model. Inheritance object Exception CodeFactoryException ModelException<TModelTypes> Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class ModelException<TModelTypes> : CodeFactoryException, ISerializable where TModelTypes : struct, IComparable, IFormattable, IConvertible Type Parameters Name Description TModelTypes Target enumeration of model types that this exception will support. Constructors ModelException(TModelTypes) Creates a model exception. Declaration public ModelException(TModelTypes modelType) Parameters Type Name Description TModelTypes modelType The type of model that had issues ModelException(TModelTypes, string) Creates a model exception. Declaration public ModelException(TModelTypes modelType, string message) Parameters Type Name Description TModelTypes modelType The type of model that had issues string message The error message to be captured by the exception ModelException(TModelTypes, string, Exception) Creates a model exception. Declaration public ModelException(TModelTypes modelType, string message, Exception innerException) Parameters Type Name Description TModelTypes modelType The type of model that had issues string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Properties ModelType The source type of the model that had an error when loading. Declaration public TModelTypes ModelType { get; } Property Value Type Description TModelTypes Implements ISerializable"
  },
  "api/CodeFactory.ModelLoadException.html": {
    "href": "api/CodeFactory.ModelLoadException.html",
    "title": "Class ModelLoadException | CodeFactory for Windows",
    "keywords": "Class ModelLoadException Exception class that captures information about errors during the creation of a code factory model. Inheritance object Exception CodeFactoryException ModelLoadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class ModelLoadException : CodeFactoryException, ISerializable Constructors ModelLoadException(string) Creates a model load exception. Declaration public ModelLoadException(string modelType = null) Parameters Type Name Description string modelType Optional parameter that stores the name of the target model type. ModelLoadException(string, Exception, string) Creates a model load exception. Declaration public ModelLoadException(string message, Exception innerException, string modelType = null) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. string modelType Optional parameter that stores the name of the target model type. ModelLoadException(string, string) Creates a model load exception. Declaration public ModelLoadException(string message, string modelType = null) Parameters Type Name Description string message The error message to be captured by the exception string modelType Optional parameter that stores the name of the target model type. Implements ISerializable"
  },
  "api/CodeFactory.ModelStore-1.html": {
    "href": "api/CodeFactory.ModelStore-1.html",
    "title": "Class ModelStore<T> | CodeFactory for Windows",
    "keywords": "Class ModelStore<T> Stores code factory models so they can be extracted when needed. Inheritance object ModelStore<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class ModelStore<T> where T : class Type Parameters Name Description T The type of model that is being stored. Constructors ModelStore() Initialization of the model store Declaration public ModelStore() Methods AddModel(string, T) Adds a model to the model store. Declaration public void AddModel(string index, T model) Parameters Type Name Description string index The unique index for the model. T model The model to be added to the store. The model cannot be null otherwise it will not be added. GetModel(string) Gets a target model from the store. Declaration public T GetModel(string index) Parameters Type Name Description string index Index number of the model to load. Returns Type Description T The stored model or null if the model could not be returned. Remarks Thread safe operation."
  },
  "api/CodeFactory.SourceCode.ISourceFiles.html": {
    "href": "api/CodeFactory.SourceCode.ISourceFiles.html",
    "title": "Interface ISourceFiles | CodeFactory for Windows",
    "keywords": "Interface ISourceFiles Interface that stores where target source code originated from. Namespace: CodeFactory.SourceCode Assembly: CodeFactory.dll Syntax public interface ISourceFiles Properties ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration string ModelSourceFile { get; } Property Value Type Description string SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string>"
  },
  "api/CodeFactory.SourceCode.ISourceLocation.html": {
    "href": "api/CodeFactory.SourceCode.ISourceLocation.html",
    "title": "Interface ISourceLocation | CodeFactory for Windows",
    "keywords": "Interface ISourceLocation Notes the location in a source document where the model starts and ends in definition. Namespace: CodeFactory.SourceCode Assembly: CodeFactory.dll Syntax public interface ISourceLocation Properties EndLocation The ending location for the definition of the source. Declaration DocumentLocation EndLocation { get; } Property Value Type Description DocumentLocation StartLocation The starting location for the definition of the source. Declaration DocumentLocation StartLocation { get; } Property Value Type Description DocumentLocation"
  },
  "api/CodeFactory.SourceCode.SourceCodeType.html": {
    "href": "api/CodeFactory.SourceCode.SourceCodeType.html",
    "title": "Enum SourceCodeType | CodeFactory for Windows",
    "keywords": "Enum SourceCodeType Enumeration of the source code types that are supported by code factory. Namespace: CodeFactory.SourceCode Assembly: CodeFactory.dll Syntax public enum SourceCodeType Fields Name Description CSharp The source code is implemented in the C# programming language. Unknown The source code type is not supported or unknown to code factory. VisualBasic The source code is implemented in the visual basic programming language."
  },
  "api/CodeFactory.SourceCode.SourceLocation.html": {
    "href": "api/CodeFactory.SourceCode.SourceLocation.html",
    "title": "Class SourceLocation | CodeFactory for Windows",
    "keywords": "Class SourceLocation Data model that implements the contract ISourceLocation Inheritance object SourceLocation Implements ISourceLocation Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.SourceCode Assembly: CodeFactory.dll Syntax public class SourceLocation : ISourceLocation Properties EndLocation The ending location for the definition of the source. Declaration public DocumentLocation EndLocation { get; } Property Value Type Description DocumentLocation StartLocation The starting location for the definition of the source. Declaration public DocumentLocation StartLocation { get; } Property Value Type Description DocumentLocation Methods Init(int, int, int, int) Create a instance of the SourceLocation data class. Declaration public static ISourceLocation Init(int startLine, int startPosition, int endLine, int endPosition) Parameters Type Name Description int startLine The starting line number for the source. int startPosition The starting character position for the source. int endLine The end line number for the source. int endPosition The end character position for the source. Returns Type Description ISourceLocation New instance of the SourceLocation returned as ISourceLocation. Implements ISourceLocation"
  },
  "api/CodeFactory.SourceCode.html": {
    "href": "api/CodeFactory.SourceCode.html",
    "title": "Namespace CodeFactory.SourceCode | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.SourceCode Classes SourceLocation Data model that implements the contract ISourceLocation Interfaces ISourceFiles Interface that stores where target source code originated from. ISourceLocation Notes the location in a source document where the model starts and ends in definition. Enums SourceCodeType Enumeration of the source code types that are supported by code factory."
  },
  "api/CodeFactory.SourceFormatter.html": {
    "href": "api/CodeFactory.SourceFormatter.html",
    "title": "Class SourceFormatter | CodeFactory for Windows",
    "keywords": "Class SourceFormatter Base implementation of source code formatting. This allows for control of formatted output from CodeFactory. Inheritance object SourceFormatter Implements ISourceFormatter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class SourceFormatter : ISourceFormatter Constructors SourceFormatter(string) Creates a new instance of the SourceFormatter Declaration public SourceFormatter(string indentStatement = \"\\t\") Parameters Type Name Description string indentStatement Optional parameter that allows you to set the target type of indent that will occur with each code statement. Methods AppendCode(string) Appends code to the end of the current line in the formatter. Declaration public void AppendCode(string code) Parameters Type Name Description string code The code to append. AppendCodeBlock(int, IEnumerable<string>) Appends a target indent level to a already formatted block of code. Declaration public void AppendCodeBlock(int indentLevel, IEnumerable<string> codeBlock) Parameters Type Name Description int indentLevel The target indent level to be added to the existing code block. IEnumerable<string> codeBlock The block of code to append to. AppendCodeBlock(int, string) Appends a target indent level to a already formatted block of code. Declaration public void AppendCodeBlock(int indentLevel, string codeBlock) Parameters Type Name Description int indentLevel The target indent level to be added to the existing code block. string codeBlock The block of code to append to. AppendCodeLine(int) Appends a new line of code to the formatter. Declaration public void AppendCodeLine(int indentLevel) Parameters Type Name Description int indentLevel The number of indent levels to add to the source code. AppendCodeLine(int, string) Appends a new line of code to the formatter. Declaration public void AppendCodeLine(int indentLevel, string code) Parameters Type Name Description int indentLevel The number of indent levels to add to the source code. string code The code to add to the formatter. ResetFormatter() Clears the formatter to be reused. Declaration public void ResetFormatter() ReturnSource() Returns the formatted source code. Declaration public string ReturnSource() Returns Type Description string Formatted SourceCode. Implements ISourceFormatter"
  },
  "api/CodeFactory.UnsupportedSdkLibraryException.html": {
    "href": "api/CodeFactory.UnsupportedSdkLibraryException.html",
    "title": "Class UnsupportedSdkLibraryException | CodeFactory for Windows",
    "keywords": "Class UnsupportedSdkLibraryException Exception class that tracks when a CodeFactory library is using an unsupported version of the SDK. Inheritance object Exception UnsupportedSdkLibraryException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory Assembly: CodeFactory.dll Syntax public class UnsupportedSdkLibraryException : Exception, ISerializable Constructors UnsupportedSdkLibraryException(string, string, string, string) Creates an instance of the exception UnsupportedSdkLibraryException Declaration public UnsupportedSdkLibraryException(string assemblyName, string assemblyVersion, string sdkMinVersion, string sdkMaxVersion) Parameters Type Name Description string assemblyName Name of the assembly that is not supported. string assemblyVersion The SDK version that was used to create the assembly. string sdkMinVersion The minimum supported SDK version. string sdkMaxVersion The maximum supported SDK version. Properties AssemblyName The name of the assembly that is was compiled on an unsupported SDK version. Declaration public string AssemblyName { get; } Property Value Type Description string AssemblyVersion The assembly SDK version that was used when building the assembly. Declaration public string AssemblyVersion { get; } Property Value Type Description string SdkMaxVersion The maximum supported SDK version. Declaration public string SdkMaxVersion { get; } Property Value Type Description string SdkMinVersion The minimum supported SDK version. Declaration public string SdkMinVersion { get; } Property Value Type Description string Implements ISerializable"
  },
  "api/CodeFactory.WinVs.AssemblyCFEnvironment.html": {
    "href": "api/CodeFactory.WinVs.AssemblyCFEnvironment.html",
    "title": "Class AssemblyCFEnvironment | CodeFactory for Windows",
    "keywords": "Class AssemblyCFEnvironment Assembly attribute that tracks the CodeFactory environment that this library runs in. Inheritance object Attribute AssemblyCFEnvironment Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class AssemblyCFEnvironment : Attribute Constructors AssemblyCFEnvironment() Initializes a new instance of the attribute with no data. Declaration public AssemblyCFEnvironment() AssemblyCFEnvironment(string) Initializes a new instance of the attribute. Declaration public AssemblyCFEnvironment(string value) Parameters Type Name Description string value The type of CodeFactory library being created. Properties Value The value assigned to the assembly attribute. Declaration public string Value { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.AssemblyCFSdkVersion.html": {
    "href": "api/CodeFactory.WinVs.AssemblyCFSdkVersion.html",
    "title": "Class AssemblyCFSdkVersion | CodeFactory for Windows",
    "keywords": "Class AssemblyCFSdkVersion Assembly attribute that tracks the CodeFactory SDK that was used to build this assembly. Inheritance object Attribute AssemblyCFSdkVersion Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class AssemblyCFSdkVersion : Attribute Constructors AssemblyCFSdkVersion() Initializes a new instance of the attribute with no data. Declaration public AssemblyCFSdkVersion() AssemblyCFSdkVersion(string) Initializes a new instance of the attribute. Declaration public AssemblyCFSdkVersion(string value) Parameters Type Name Description string value The type of CodeFactory library being created. Properties Value The value assigned to the assembly attribute. Declaration public string Value { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.CommandNotificationMessage.html": {
    "href": "api/CodeFactory.WinVs.CommandNotificationMessage.html",
    "title": "Class CommandNotificationMessage | CodeFactory for Windows",
    "keywords": "Class CommandNotificationMessage Immutable command notification message. Inheritance object CommandNotificationMessage Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public class CommandNotificationMessage Constructors CommandNotificationMessage(string, string, CommandNotificationStatus) Initializes the CommandNotificationMessage Declaration protected CommandNotificationMessage(string message, string category, CommandNotificationStatus status) Parameters Type Name Description string message The message to be returned. string category What category the message belongs to. CommandNotificationStatus status The status of the message. Properties Category The category the message belongs to. Declaration public string Category { get; } Property Value Type Description string Message The message to be provided to the executing command. Declaration public string Message { get; } Property Value Type Description string Status The current status of the notification message. Declaration public CommandNotificationStatus Status { get; } Property Value Type Description CommandNotificationStatus Methods Init(string, string, CommandNotificationStatus) Initializes a instance of the CommandNotificationMessage Declaration public static CommandNotificationMessage Init(string message, string category, CommandNotificationStatus status) Parameters Type Name Description string message The message to be returned. string category What category the message belongs to. CommandNotificationStatus status The status of the message. Returns Type Description CommandNotificationMessage The created instance."
  },
  "api/CodeFactory.WinVs.CommandNotificationStatus.html": {
    "href": "api/CodeFactory.WinVs.CommandNotificationStatus.html",
    "title": "Enum CommandNotificationStatus | CodeFactory for Windows",
    "keywords": "Enum CommandNotificationStatus Enumeration on the current status of a command notification message. Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public enum CommandNotificationStatus Fields Name Description Failed The automation process has ended and has failed. Finished The automation process has completed. Running The automation process is currently running Started The beginning of a automation process has started. Success The automation process has completed successfuly."
  },
  "api/CodeFactory.WinVs.CommandNotifications.html": {
    "href": "api/CodeFactory.WinVs.CommandNotifications.html",
    "title": "Class CommandNotifications | CodeFactory for Windows",
    "keywords": "Class CommandNotifications Central notification manager for all CodeFactory notifications for executing commands. Inheritance object CommandNotifications Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public static class CommandNotifications Methods SendCommandNotificationAsync(CommandNotificationStatus, string, string) Send a notification to subscribing commands. Declaration public static Task SendCommandNotificationAsync(CommandNotificationStatus status, string category, string message) Parameters Type Name Description CommandNotificationStatus status The status of the notification. string category The category the notification belongs to. string message the message to be notified to the command. Returns Type Description Task Events CommandNotification Event that notifies subscribing commands a notification message has arrived. Declaration public static event EventHandler<CommandNotificationMessage> CommandNotification Event Type Type Description EventHandler<CommandNotificationMessage>"
  },
  "api/CodeFactory.WinVs.Commands.ConfigCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigCommand.html",
    "title": "Class ConfigCommand | CodeFactory for Windows",
    "keywords": "Class ConfigCommand Stores the configuration for a CodeFactory command. Inheritance object ConfigCommand Implements IConfigGuidance Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public class ConfigCommand : IConfigGuidance Constructors ConfigCommand() Declaration public ConfigCommand() Properties Category The target category the command belongs to. Declaration public string Category { get; set; } Property Value Type Description string CommandType The fully qualified type name of the command that is used by this configuration. Declaration public string CommandType { get; set; } Property Value Type Description string ExecutionProject The project the command is executed in. Declaration public ConfigProject ExecutionProject { get; set; } Property Value Type Description ConfigProject Guidance Instructions for what data is to go into the configuration. Declaration public string Guidance { get; set; } Property Value Type Description string Name The name assigned to represent the command being executed. Declaration public string Name { get; set; } Property Value Type Description string Parameters Parameters that are used with the command implementation. Declaration public ImmutableList<ConfigParameter> Parameters { get; set; } Property Value Type Description ImmutableList<ConfigParameter> Projects Additional projects that will provide source and target projects used by the executing command. Declaration public ImmutableList<ConfigProject> Projects { get; set; } Property Value Type Description ImmutableList<ConfigProject> Methods AddParameter(ConfigParameter) Fluent method that adds a parameter to the command. Declaration public ConfigCommand AddParameter(ConfigParameter parameter) Parameters Type Name Description ConfigParameter parameter The parameter to add to the command. Returns Type Description ConfigCommand Updated command source. AddProject(ConfigProject) Fluent method that adds a project to the command. Declaration public ConfigCommand AddProject(ConfigProject project) Parameters Type Name Description ConfigProject project The project to add to the command. Returns Type Description ConfigCommand Updated command source. Parameter(string) Gets the target parameter that has been assigned to this command source. Declaration public ConfigParameter Parameter(string name) Parameters Type Name Description string name Name of the parameter to lookup. Returns Type Description ConfigParameter The parameter source or null if the parameter was not found. ParameterValue(string) Gets the target parameter value that has been assigned to a parameter source assigned to this command source. Declaration public string ParameterValue(string name) Parameters Type Name Description string name Name of the parameter to lookup. Returns Type Description string The parameter value or null. Project(string) Gets a project configured from this command by the name of the target project. Declaration public ConfigProject Project(string name) Parameters Type Name Description string name The name of the project to retrieve. Returns Type Description ConfigProject The project source or null if the target project could not be found. UpdateExecutionProject(ConfigProject) Fluent method that updates the commands execution project. Declaration public ConfigCommand UpdateExecutionProject(ConfigProject executionProject) Parameters Type Name Description ConfigProject executionProject Project configuration for the execution project. Returns Type Description ConfigCommand Updated command source. Implements IConfigGuidance Extension Methods ConfigManager.RegisterCommandWithDefaultConfiguration(ConfigCommand)"
  },
  "api/CodeFactory.WinVs.Commands.ConfigFolder.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigFolder.html",
    "title": "Class ConfigFolder | CodeFactory for Windows",
    "keywords": "Class ConfigFolder Configuration information about a target project folder. Inheritance object ConfigFolder Implements IConfigGuidance Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public class ConfigFolder : IConfigGuidance Constructors ConfigFolder() Declaration public ConfigFolder() Properties Guidance Instructions for what data is to go into the configuration. Declaration public string Guidance { get; set; } Property Value Type Description string Name Name that is associated with this directory location. Declaration public string Name { get; set; } Property Value Type Description string Path The relative path from the source that hosts this project folder. Declaration public string Path { get; set; } Property Value Type Description string Required Flag that determines if the folder is required in order for the automation to run. Declaration public bool Required { get; set; } Property Value Type Description bool Implements IConfigGuidance"
  },
  "api/CodeFactory.WinVs.Commands.ConfigManager.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigManager.html",
    "title": "Class ConfigManager | CodeFactory for Windows",
    "keywords": "Class ConfigManager Managers the loading and saving of solution configurations. Inheritance object ConfigManager Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public static class ConfigManager Properties Configuration The configuration loaded into the configuration manager, will be null if not loaded. Declaration public static ConfigSolution Configuration { get; } Property Value Type Description ConfigSolution ConfigurationName The name of the loaded configuration. Will be null if the configuration is not loaded. Declaration public static string ConfigurationName { get; } Property Value Type Description string HasConfiguration Flag that determines if a configuration has been loaded. Declaration public static bool HasConfiguration { get; } Property Value Type Description bool HasDefaultConfiguration Flag that determines if a default configuration has been loaded. Declaration public static bool HasDefaultConfiguration { get; } Property Value Type Description bool Methods CreateDefaultConfigurationAsync(VsSolution, string, string) Will check to see if a default configuration exists. if it does not will create a new default configuration. Declaration public static Task CreateDefaultConfigurationAsync(VsSolution solution, string configName, string fileName) Parameters Type Name Description VsSolution solution The solution model from code factory. string configName The name assigned to configuration. string fileName The file name without the extension. Returns Type Description Task HasAutomationConfigAsync(VsSolution, string) Determines if a ADK configuration is stored in the solution. Declaration public static Task<bool> HasAutomationConfigAsync(VsSolution solution, string fileName) Parameters Type Name Description VsSolution solution Solution model hosting the configuration model. string fileName The file name without the extension. Returns Type Description Task<bool> True file exists or false if not. LoadCommandByFolderAsync(string, string, VsModel, FolderLoadType) Identifies the command source for the executing command where the command is expected to execute from a project folder. Declaration public static Task<ConfigCommand> LoadCommandByFolderAsync(string commandType, string projectFolder, VsModel commandResult, FolderLoadType loadType = FolderLoadType.TargetFolderOnly) Parameters Type Name Description string commandType The fully qualified name of the command type to evaluated. string projectFolder the name of the Project Source project folder to be loaded. VsModel commandResult The loaded model from the requesting command to load the command source. FolderLoadType loadType The type of evaluation that should be performed. Returns Type Description Task<ConfigCommand> The command source that meetings the criteria or null if no command source meet the criteria. LoadCommandByProjectAsync(string, VsModel) Identifies the command source for the executing command where the command is expected to execute from a target project. Declaration public static Task<ConfigCommand> LoadCommandByProjectAsync(string commandType, VsModel commandResult) Parameters Type Name Description string commandType The fully qualified name of the command type to evaluated. VsModel commandResult The loaded model from the requesting command to load the command source. Returns Type Description Task<ConfigCommand> The command source that meetings the criteria or null if no command source meet the criteria. LoadConfiguration(VsSolution, string, IVsActions) Loads a ADK configuration from a target configuration file. Declaration public static ConfigSolution LoadConfiguration(VsSolution solution, string fileName, IVsActions actions) Parameters Type Name Description VsSolution solution The solution model used to locate the configuration to be loaded. string fileName The file name without the extension. IVsActions actions The Visual Studio automation for CodeFactory. Returns Type Description ConfigSolution Loaded solution configuration. RegisterCommandWithDefaultConfiguration(ConfigCommand) Registers a command configuration with the configuration manager to be used when building a default configuration. Declaration public static void RegisterCommandWithDefaultConfiguration(this ConfigCommand command) Parameters Type Name Description ConfigCommand command Command configuration to be registered SaveConfigurationAsync(VsSolution, ConfigSolution, IVsActions, string) Saves a ADK configuration to a target directory. Declaration public static Task SaveConfigurationAsync(VsSolution solution, ConfigSolution configuration, IVsActions actions, string fileName) Parameters Type Name Description VsSolution solution The CodeFactory solution model to save the configuration to. ConfigSolution configuration The solution configuration to be saved to disk. IVsActions actions The Visual Studio automation for CodeFactory. string fileName The file name of the configuration file without the extension. Returns Type Description Task Exceptions Type Condition ArgumentNullException Raised if provided parameters are null. ArgumentException Raised if the file path is not provided. CodeFactoryException Raised if the save cannot be completed. SetConfiguration(ConfigSolution, IVsActions) Register a loaded configuration with the configuration manager. Declaration public static void SetConfiguration(ConfigSolution configuration, IVsActions actions) Parameters Type Name Description ConfigSolution configuration The loaded configuration. IVsActions actions The Visual Studio automation for CodeFactory. Exceptions Type Condition ArgumentNullException"
  },
  "api/CodeFactory.WinVs.Commands.ConfigParameter.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigParameter.html",
    "title": "Class ConfigParameter | CodeFactory for Windows",
    "keywords": "Class ConfigParameter Configuration information about a target parameter to be used in CodeFactory automation. Inheritance object ConfigParameter Implements IConfigGuidance Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public class ConfigParameter : IConfigGuidance Constructors ConfigParameter() Declaration public ConfigParameter() Properties Guidance Instructions for what data is to go into the configuration. Declaration public string Guidance { get; set; } Property Value Type Description string Name Name of the parameter itself. Declaration public string Name { get; set; } Property Value Type Description string Value The value that is assigned to the parameter. Declaration public string Value { get; set; } Property Value Type Description string Implements IConfigGuidance"
  },
  "api/CodeFactory.WinVs.Commands.ConfigProject.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigProject.html",
    "title": "Class ConfigProject | CodeFactory for Windows",
    "keywords": "Class ConfigProject Holds the configuration for a target project and any target project folder under the project that are needed in the configuration. Inheritance object ConfigProject Implements IConfigGuidance Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public class ConfigProject : IConfigGuidance Constructors ConfigProject() Declaration public ConfigProject() Properties Folders ConfigFolder that are part of the project. Declaration public ImmutableList<ConfigFolder> Folders { get; set; } Property Value Type Description ImmutableList<ConfigFolder> Guidance Instructions for what data is to go into the configuration. Declaration public string Guidance { get; set; } Property Value Type Description string Name The configuration name assigned to the project. Declaration public string Name { get; set; } Property Value Type Description string Parameters Parameters that are assigned to the project. Declaration public ImmutableList<ConfigParameter> Parameters { get; set; } Property Value Type Description ImmutableList<ConfigParameter> ProjectName The target project in the solution this configuration talks to. Declaration public string ProjectName { get; set; } Property Value Type Description string Methods AddFolder(ConfigFolder) Fluent method that adds a folder to the project source. Declaration public ConfigProject AddFolder(ConfigFolder folder) Parameters Type Name Description ConfigFolder folder Target folder to add to the project. Returns Type Description ConfigProject Updated project source. AddParameter(ConfigParameter) Fluent method that adds a parameter to the project source. Declaration public ConfigProject AddParameter(ConfigParameter parameter) Parameters Type Name Description ConfigParameter parameter The parameter to add to the project. Returns Type Description ConfigProject Updated project source. Folder(string) Gets the folder from the hosting project. Declaration public ConfigFolder Folder(string name) Parameters Type Name Description string name The name of the folder to retrieve. Returns Type Description ConfigFolder The folder or null if it is not found. Parameter(string) Gets the parameter source from the hosting project. Declaration public ConfigParameter Parameter(string name) Parameters Type Name Description string name The name of the parameter to retrieve. Returns Type Description ConfigParameter The parameter source or null if it is not found. ParameterValue(string) Get the value for a parameter that is hosted in the project. Declaration public string ParameterValue(string name) Parameters Type Name Description string name The name of the parameter to get the value from. Returns Type Description string The value of the parameter or null if the parameter is not found. Implements IConfigGuidance"
  },
  "api/CodeFactory.WinVs.Commands.ConfigSolution.html": {
    "href": "api/CodeFactory.WinVs.Commands.ConfigSolution.html",
    "title": "Class ConfigSolution | CodeFactory for Windows",
    "keywords": "Class ConfigSolution The configuration information for a solution to be automated. Inheritance object ConfigSolution Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public class ConfigSolution Constructors ConfigSolution() Declaration public ConfigSolution() Properties Commands Configuration of the commands that were loaded. Declaration public ImmutableList<ConfigCommand> Commands { get; set; } Property Value Type Description ImmutableList<ConfigCommand> Name Name assigned to the configuration that is loaded by the solution. Declaration public string Name { get; set; } Property Value Type Description string Methods AddCommand(ConfigCommand) Fluent method that adds a command to the solution configuration. Declaration public ConfigSolution AddCommand(ConfigCommand command) Parameters Type Name Description ConfigCommand command Command to add to the source configuration. Returns Type Description ConfigSolution Updated solution configuration. CommandByName(string) Accesses a target command by the name assigned to the command. Declaration public ConfigCommand CommandByName(string name) Parameters Type Name Description string name The name of the command to retrieve Returns Type Description ConfigCommand The specific command or null if the command was not found. CommandsByCategory(string) Accesses target commands by the category that was assigned to the command. Declaration public IReadOnlyList<ConfigCommand> CommandsByCategory(string category) Parameters Type Name Description string category The category in which the commands where saved as. Returns Type Description IReadOnlyList<ConfigCommand> The found command sources or an empty list. CommandsByType(string) Accesses target commands by the type of command that has been saved. Declaration public IReadOnlyList<ConfigCommand> CommandsByType(string commandType) Parameters Type Name Description string commandType The type of command to retrieve from the configuration. Returns Type Description IReadOnlyList<ConfigCommand> The found command sources or an empty list."
  },
  "api/CodeFactory.WinVs.Commands.FolderLoadType.html": {
    "href": "api/CodeFactory.WinVs.Commands.FolderLoadType.html",
    "title": "Enum FolderLoadType | CodeFactory for Windows",
    "keywords": "Enum FolderLoadType Enumeration that determines how a command source that targets commands in folders should be checked. Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public enum FolderLoadType Fields Name Description Optional Target folder is optional and can be anywhere in the solution. TargetFolderAndSubFolder The command must of executed in the configured folder or a child of the target folder. TargetFolderOnly The command must of executed in the configured folder."
  },
  "api/CodeFactory.WinVs.Commands.IConfigGuidance.html": {
    "href": "api/CodeFactory.WinVs.Commands.IConfigGuidance.html",
    "title": "Interface IConfigGuidance | CodeFactory for Windows",
    "keywords": "Interface IConfigGuidance Contract definition for guidance for command configuration Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public interface IConfigGuidance Properties Guidance Instructions for what data is to go into the configuration. Declaration string Guidance { get; set; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Commands.IDE.ISolutionLoadCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.IDE.ISolutionLoadCommand.html",
    "title": "Interface ISolutionLoadCommand | CodeFactory for Windows",
    "keywords": "Interface ISolutionLoadCommand Code factory command that triggers once the solution has been loaded. Will only be called once. Inherited Members IVsEnvironmentCommand<VsSolution>.ExecuteCommandAsync(VsSolution) IVsEnvironmentCommand<VsSolution>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType Namespace: CodeFactory.WinVs.Commands.IDE Assembly: CodeFactory.WinVs.dll Syntax public interface ISolutionLoadCommand : IVsEnvironmentCommand<VsSolution>, IVsCommandInformation"
  },
  "api/CodeFactory.WinVs.Commands.IDE.SolutionLoadCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.IDE.SolutionLoadCommandBase.html",
    "title": "Class SolutionLoadCommandBase | CodeFactory for Windows",
    "keywords": "Class SolutionLoadCommandBase Base implementation of the solution explorer command ISolutionLoadCommand Inheritance object VsEnviromentCommandBase<VsSolution> SolutionLoadCommandBase Implements ISolutionLoadCommand IVsEnvironmentCommand<VsSolution> IVsCommandInformation Inherited Members VsEnviromentCommandBase<VsSolution>._commandTitle VsEnviromentCommandBase<VsSolution>._commandDescription VsEnviromentCommandBase<VsSolution>._logger VsEnviromentCommandBase<VsSolution>.ExecuteCommandAsync(VsSolution) VsEnviromentCommandBase<VsSolution>.CommandTitle VsEnviromentCommandBase<VsSolution>.CommandDescription VsEnviromentCommandBase<VsSolution>.CommandType VsEnviromentCommandBase<VsSolution>.VisualStudioActions object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands.IDE Assembly: CodeFactory.WinVs.dll Syntax public abstract class SolutionLoadCommandBase : VsEnviromentCommandBase<VsSolution>, ISolutionLoadCommand, IVsEnvironmentCommand<VsSolution>, IVsCommandInformation Constructors SolutionLoadCommandBase(ILogger, IVsActions, string, string) Declaration protected SolutionLoadCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements ISolutionLoadCommand IVsEnvironmentCommand<TModel> IVsCommandInformation"
  },
  "api/CodeFactory.WinVs.Commands.IDE.html": {
    "href": "api/CodeFactory.WinVs.Commands.IDE.html",
    "title": "Namespace CodeFactory.WinVs.Commands.IDE | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Commands.IDE Classes SolutionLoadCommandBase Base implementation of the solution explorer command ISolutionLoadCommand Interfaces ISolutionLoadCommand Code factory command that triggers once the solution has been loaded. Will only be called once."
  },
  "api/CodeFactory.WinVs.Commands.IVsCommandInformation.html": {
    "href": "api/CodeFactory.WinVs.Commands.IVsCommandInformation.html",
    "title": "Interface IVsCommandInformation | CodeFactory for Windows",
    "keywords": "Interface IVsCommandInformation Interface that provides information used by code factory to load the command. Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public interface IVsCommandInformation Properties CommandDescription An optional description that describes what this factory command is intended for. Declaration string CommandDescription { get; } Property Value Type Description string CommandTitle Command title that will be displayed within visual studio. Declaration string CommandTitle { get; } Property Value Type Description string CommandType The target type of command that is being loaded. Declaration VsCommandType CommandType { get; } Property Value Type Description VsCommandType"
  },
  "api/CodeFactory.WinVs.Commands.IVsConfigurableCommand-1.html": {
    "href": "api/CodeFactory.WinVs.Commands.IVsConfigurableCommand-1.html",
    "title": "Interface IVsConfigurableCommand<TModel> | CodeFactory for Windows",
    "keywords": "Interface IVsConfigurableCommand<TModel> Interface that defines a visual studio command that can be configured. Inherited Members IVsFactoryCommand<TModel>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<TModel>.EnableCommandAsync(TModel) ICommandBase<TModel>.ExecuteCommandAsync(TModel) Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public interface IVsConfigurableCommand<TModel> : IVsFactoryCommand<TModel>, IVsCommandInformation, ICommand<TModel>, ICommandBase<TModel> where TModel : class Type Parameters Name Description TModel Methods LoadExternalConfigDefinition() Loads the external configuration definition for this command. Declaration ConfigCommand LoadExternalConfigDefinition() Returns Type Description ConfigCommand Will return the command configuration or null if this command does not support external configurations."
  },
  "api/CodeFactory.WinVs.Commands.IVsEnvironmentCommand-1.html": {
    "href": "api/CodeFactory.WinVs.Commands.IVsEnvironmentCommand-1.html",
    "title": "Interface IVsEnvironmentCommand<TModel> | CodeFactory for Windows",
    "keywords": "Interface IVsEnvironmentCommand<TModel> Base implementation for all code factory commands that are directly executed by the Visual Studio Enviornment. Inherited Members IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public interface IVsEnvironmentCommand<TModel> : IVsCommandInformation where TModel : class Type Parameters Name Description TModel Target code factory model to be provided for the command. Properties VisualStudioActions Global visual studio commands that can be accessed from this visual studio command. Declaration IVsActions VisualStudioActions { get; } Property Value Type Description IVsActions Methods ExecuteCommandAsync(TModel) Code factory framework calls this method when the command has been executed. Declaration Task ExecuteCommandAsync(TModel result) Parameters Type Name Description TModel result The code factory model that has generated and provided to the command to process. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Commands.IVsFactoryCommand-1.html": {
    "href": "api/CodeFactory.WinVs.Commands.IVsFactoryCommand-1.html",
    "title": "Interface IVsFactoryCommand<TModel> | CodeFactory for Windows",
    "keywords": "Interface IVsFactoryCommand<TModel> Common implementation all code factory commands for visual studio must display. Inherited Members IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<TModel>.EnableCommandAsync(TModel) ICommandBase<TModel>.ExecuteCommandAsync(TModel) Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public interface IVsFactoryCommand<TModel> : IVsCommandInformation, ICommand<TModel>, ICommandBase<TModel> where TModel : class Type Parameters Name Description TModel The target mode that will be returned by this code factory command. Properties VisualStudioActions Global visual studio commands that can be accessed from this visual studio command. Declaration IVsActions VisualStudioActions { get; } Property Value Type Description IVsActions"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.CSharpSourceCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.CSharpSourceCommandBase.html",
    "title": "Class CSharpSourceCommandBase | CodeFactory for Windows",
    "keywords": "Class CSharpSourceCommandBase Base implementation of the solution explorer command ICSharpSourceCommand Inheritance object VsCommandBase<VsCSharpSource> CSharpSourceCommandBase Implements IVsConfigurableCommand<VsCSharpSource> ICSharpSourceCommand IVsFactoryCommand<VsCSharpSource> IVsCommandInformation ICommand<VsCSharpSource> ICommandBase<VsCSharpSource> Inherited Members VsCommandBase<VsCSharpSource>._commandTitle VsCommandBase<VsCSharpSource>._commandDescription VsCommandBase<VsCSharpSource>._logger VsCommandBase<VsCSharpSource>.LoadExternalConfigDefinition() VsCommandBase<VsCSharpSource>.EnableCommandAsync(VsCSharpSource) VsCommandBase<VsCSharpSource>.ExecuteCommandAsync(VsCSharpSource) VsCommandBase<VsCSharpSource>.CommandTitle VsCommandBase<VsCSharpSource>.CommandDescription VsCommandBase<VsCSharpSource>.CommandType VsCommandBase<VsCSharpSource>.VisualStudioActions object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class CSharpSourceCommandBase : VsCommandBase<VsCSharpSource>, IVsConfigurableCommand<VsCSharpSource>, ICSharpSourceCommand, IVsFactoryCommand<VsCSharpSource>, IVsCommandInformation, ICommand<VsCSharpSource>, ICommandBase<VsCSharpSource> Constructors CSharpSourceCommandBase(ILogger, IVsActions, string, string) Declaration protected CSharpSourceCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> ICSharpSourceCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ICSharpSourceCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ICSharpSourceCommand.html",
    "title": "Interface ICSharpSourceCommand | CodeFactory for Windows",
    "keywords": "Interface ICSharpSourceCommand Code factory command that is triggered from the context menu of a document that hosts a c# code file in the solution explorer window. Inherited Members IVsFactoryCommand<VsCSharpSource>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsCSharpSource>.EnableCommandAsync(VsCSharpSource) ICommandBase<VsCSharpSource>.ExecuteCommandAsync(VsCSharpSource) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface ICSharpSourceCommand : IVsFactoryCommand<VsCSharpSource>, IVsCommandInformation, ICommand<VsCSharpSource>, ICommandBase<VsCSharpSource>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectCommand.html",
    "title": "Interface IProjectCommand | CodeFactory for Windows",
    "keywords": "Interface IProjectCommand Code factory command that is triggered from the context menu of a project in the solution explorer window. Inherited Members IVsFactoryCommand<VsProject>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsProject>.EnableCommandAsync(VsProject) ICommandBase<VsProject>.ExecuteCommandAsync(VsProject) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface IProjectCommand : IVsFactoryCommand<VsProject>, IVsCommandInformation, ICommand<VsProject>, ICommandBase<VsProject>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectDocumentCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectDocumentCommand.html",
    "title": "Interface IProjectDocumentCommand | CodeFactory for Windows",
    "keywords": "Interface IProjectDocumentCommand Code factory command that is triggered from the context menu of a project document in the solution explorer window. Inherited Members IVsFactoryCommand<VsDocument>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsDocument>.EnableCommandAsync(VsDocument) ICommandBase<VsDocument>.ExecuteCommandAsync(VsDocument) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface IProjectDocumentCommand : IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument>, ICommandBase<VsDocument>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectFolderCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.IProjectFolderCommand.html",
    "title": "Interface IProjectFolderCommand | CodeFactory for Windows",
    "keywords": "Interface IProjectFolderCommand Code factory command that is triggered from the context menu of a project folder in the solution explorer window. Inherited Members IVsFactoryCommand<VsProjectFolder>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsProjectFolder>.EnableCommandAsync(VsProjectFolder) ICommandBase<VsProjectFolder>.ExecuteCommandAsync(VsProjectFolder) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface IProjectFolderCommand : IVsFactoryCommand<VsProjectFolder>, IVsCommandInformation, ICommand<VsProjectFolder>, ICommandBase<VsProjectFolder>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionCommand.html",
    "title": "Interface ISolutionCommand | CodeFactory for Windows",
    "keywords": "Interface ISolutionCommand Code factory command that triggers from the context menu of solution node in solution explorer. Inherited Members IVsFactoryCommand<VsSolution>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsSolution>.EnableCommandAsync(VsSolution) ICommandBase<VsSolution>.ExecuteCommandAsync(VsSolution) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface ISolutionCommand : IVsFactoryCommand<VsSolution>, IVsCommandInformation, ICommand<VsSolution>, ICommandBase<VsSolution>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionDocumentCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionDocumentCommand.html",
    "title": "Interface ISolutionDocumentCommand | CodeFactory for Windows",
    "keywords": "Interface ISolutionDocumentCommand Code factory command that is triggered from the context menu of a solution document in the solution explorer window. Inherited Members IVsFactoryCommand<VsDocument>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsDocument>.EnableCommandAsync(VsDocument) ICommandBase<VsDocument>.ExecuteCommandAsync(VsDocument) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface ISolutionDocumentCommand : IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument>, ICommandBase<VsDocument>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionFolderCommand.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ISolutionFolderCommand.html",
    "title": "Interface ISolutionFolderCommand | CodeFactory for Windows",
    "keywords": "Interface ISolutionFolderCommand Code factory command that is triggered from the context menu of the a solution folder in the solution explorer window. Inherited Members IVsFactoryCommand<VsSolutionFolder>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsSolutionFolder>.EnableCommandAsync(VsSolutionFolder) ICommandBase<VsSolutionFolder>.ExecuteCommandAsync(VsSolutionFolder) Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public interface ISolutionFolderCommand : IVsFactoryCommand<VsSolutionFolder>, IVsCommandInformation, ICommand<VsSolutionFolder>, ICommandBase<VsSolutionFolder>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectCommandBase.html",
    "title": "Class ProjectCommandBase | CodeFactory for Windows",
    "keywords": "Class ProjectCommandBase Base implementation of the solution explorer command IProjectCommand Inheritance object VsCommandBase<VsProject> ProjectCommandBase Implements IVsConfigurableCommand<VsProject> IProjectCommand IVsFactoryCommand<VsProject> IVsCommandInformation ICommand<VsProject> ICommandBase<VsProject> Inherited Members VsCommandBase<VsProject>._commandTitle VsCommandBase<VsProject>._commandDescription VsCommandBase<VsProject>._logger VsCommandBase<VsProject>.LoadExternalConfigDefinition() VsCommandBase<VsProject>.EnableCommandAsync(VsProject) VsCommandBase<VsProject>.ExecuteCommandAsync(VsProject) VsCommandBase<VsProject>.CommandTitle VsCommandBase<VsProject>.CommandDescription VsCommandBase<VsProject>.CommandType VsCommandBase<VsProject>.VisualStudioActions object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class ProjectCommandBase : VsCommandBase<VsProject>, IVsConfigurableCommand<VsProject>, IProjectCommand, IVsFactoryCommand<VsProject>, IVsCommandInformation, ICommand<VsProject>, ICommandBase<VsProject> Constructors ProjectCommandBase(ILogger, IVsActions, string, string) Declaration protected ProjectCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> IProjectCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectDocumentCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectDocumentCommandBase.html",
    "title": "Class ProjectDocumentCommandBase | CodeFactory for Windows",
    "keywords": "Class ProjectDocumentCommandBase Base implementation of the solution explorer command IProjectDocumentCommand Inheritance object VsCommandBase<VsDocument> ProjectDocumentCommandBase Implements IVsConfigurableCommand<VsDocument> IProjectDocumentCommand IVsFactoryCommand<VsDocument> IVsCommandInformation ICommand<VsDocument> ICommandBase<VsDocument> Inherited Members VsCommandBase<VsDocument>._commandTitle VsCommandBase<VsDocument>._commandDescription VsCommandBase<VsDocument>._logger VsCommandBase<VsDocument>.LoadExternalConfigDefinition() VsCommandBase<VsDocument>.EnableCommandAsync(VsDocument) VsCommandBase<VsDocument>.ExecuteCommandAsync(VsDocument) VsCommandBase<VsDocument>.CommandTitle VsCommandBase<VsDocument>.CommandDescription VsCommandBase<VsDocument>.CommandType VsCommandBase<VsDocument>.VisualStudioActions object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class ProjectDocumentCommandBase : VsCommandBase<VsDocument>, IVsConfigurableCommand<VsDocument>, IProjectDocumentCommand, IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument>, ICommandBase<VsDocument> Constructors ProjectDocumentCommandBase(ILogger, IVsActions, string, string) Declaration protected ProjectDocumentCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> IProjectDocumentCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectFolderCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.ProjectFolderCommandBase.html",
    "title": "Class ProjectFolderCommandBase | CodeFactory for Windows",
    "keywords": "Class ProjectFolderCommandBase Base implementation of the solution explorer command IProjectFolderCommand Inheritance object VsCommandBase<VsProjectFolder> ProjectFolderCommandBase Implements IVsConfigurableCommand<VsProjectFolder> IProjectFolderCommand IVsFactoryCommand<VsProjectFolder> IVsCommandInformation ICommand<VsProjectFolder> ICommandBase<VsProjectFolder> Inherited Members VsCommandBase<VsProjectFolder>._commandTitle VsCommandBase<VsProjectFolder>._commandDescription VsCommandBase<VsProjectFolder>._logger VsCommandBase<VsProjectFolder>.LoadExternalConfigDefinition() VsCommandBase<VsProjectFolder>.EnableCommandAsync(VsProjectFolder) VsCommandBase<VsProjectFolder>.ExecuteCommandAsync(VsProjectFolder) VsCommandBase<VsProjectFolder>.CommandTitle VsCommandBase<VsProjectFolder>.CommandDescription VsCommandBase<VsProjectFolder>.CommandType VsCommandBase<VsProjectFolder>.VisualStudioActions object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class ProjectFolderCommandBase : VsCommandBase<VsProjectFolder>, IVsConfigurableCommand<VsProjectFolder>, IProjectFolderCommand, IVsFactoryCommand<VsProjectFolder>, IVsCommandInformation, ICommand<VsProjectFolder>, ICommandBase<VsProjectFolder> Constructors ProjectFolderCommandBase(ILogger, IVsActions, string, string) Declaration protected ProjectFolderCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> IProjectFolderCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionCommandBase.html",
    "title": "Class SolutionCommandBase | CodeFactory for Windows",
    "keywords": "Class SolutionCommandBase Base implementation of the solution explorer command ISolutionCommand Inheritance object VsCommandBase<VsSolution> SolutionCommandBase Implements IVsConfigurableCommand<VsSolution> ISolutionCommand IVsFactoryCommand<VsSolution> IVsCommandInformation ICommand<VsSolution> ICommandBase<VsSolution> Inherited Members VsCommandBase<VsSolution>._commandTitle VsCommandBase<VsSolution>._commandDescription VsCommandBase<VsSolution>._logger VsCommandBase<VsSolution>.LoadExternalConfigDefinition() VsCommandBase<VsSolution>.EnableCommandAsync(VsSolution) VsCommandBase<VsSolution>.ExecuteCommandAsync(VsSolution) VsCommandBase<VsSolution>.CommandTitle VsCommandBase<VsSolution>.CommandDescription VsCommandBase<VsSolution>.CommandType VsCommandBase<VsSolution>.VisualStudioActions object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class SolutionCommandBase : VsCommandBase<VsSolution>, IVsConfigurableCommand<VsSolution>, ISolutionCommand, IVsFactoryCommand<VsSolution>, IVsCommandInformation, ICommand<VsSolution>, ICommandBase<VsSolution> Constructors SolutionCommandBase(ILogger, IVsActions, string, string) Declaration protected SolutionCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> ISolutionCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionDocumentCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionDocumentCommandBase.html",
    "title": "Class SolutionDocumentCommandBase | CodeFactory for Windows",
    "keywords": "Class SolutionDocumentCommandBase Base implementation of the solution explorer command ISolutionDocumentCommand Inheritance object VsCommandBase<VsDocument> SolutionDocumentCommandBase Implements IVsConfigurableCommand<VsDocument> ISolutionDocumentCommand IVsFactoryCommand<VsDocument> IVsCommandInformation ICommand<VsDocument> ICommandBase<VsDocument> Inherited Members VsCommandBase<VsDocument>._commandTitle VsCommandBase<VsDocument>._commandDescription VsCommandBase<VsDocument>._logger VsCommandBase<VsDocument>.LoadExternalConfigDefinition() VsCommandBase<VsDocument>.EnableCommandAsync(VsDocument) VsCommandBase<VsDocument>.ExecuteCommandAsync(VsDocument) VsCommandBase<VsDocument>.CommandTitle VsCommandBase<VsDocument>.CommandDescription VsCommandBase<VsDocument>.CommandType VsCommandBase<VsDocument>.VisualStudioActions object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class SolutionDocumentCommandBase : VsCommandBase<VsDocument>, IVsConfigurableCommand<VsDocument>, ISolutionDocumentCommand, IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument>, ICommandBase<VsDocument> Constructors SolutionDocumentCommandBase(ILogger, IVsActions, string, string) Declaration protected SolutionDocumentCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> ISolutionDocumentCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionFolderCommandBase.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.SolutionFolderCommandBase.html",
    "title": "Class SolutionFolderCommandBase | CodeFactory for Windows",
    "keywords": "Class SolutionFolderCommandBase Base implementation of the solution explorer command ISolutionFolderCommand Inheritance object VsCommandBase<VsSolutionFolder> SolutionFolderCommandBase Implements IVsConfigurableCommand<VsSolutionFolder> ISolutionFolderCommand IVsFactoryCommand<VsSolutionFolder> IVsCommandInformation ICommand<VsSolutionFolder> ICommandBase<VsSolutionFolder> Inherited Members VsCommandBase<VsSolutionFolder>._commandTitle VsCommandBase<VsSolutionFolder>._commandDescription VsCommandBase<VsSolutionFolder>._logger VsCommandBase<VsSolutionFolder>.LoadExternalConfigDefinition() VsCommandBase<VsSolutionFolder>.EnableCommandAsync(VsSolutionFolder) VsCommandBase<VsSolutionFolder>.ExecuteCommandAsync(VsSolutionFolder) VsCommandBase<VsSolutionFolder>.CommandTitle VsCommandBase<VsSolutionFolder>.CommandDescription VsCommandBase<VsSolutionFolder>.CommandType VsCommandBase<VsSolutionFolder>.VisualStudioActions object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands.SolutionExplorer Assembly: CodeFactory.WinVs.dll Syntax public abstract class SolutionFolderCommandBase : VsCommandBase<VsSolutionFolder>, IVsConfigurableCommand<VsSolutionFolder>, ISolutionFolderCommand, IVsFactoryCommand<VsSolutionFolder>, IVsCommandInformation, ICommand<VsSolutionFolder>, ICommandBase<VsSolutionFolder> Constructors SolutionFolderCommandBase(ILogger, IVsActions, string, string) Declaration protected SolutionFolderCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions string commandTitle string commandDescription Implements IVsConfigurableCommand<TModel> ISolutionFolderCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.SolutionExplorer.html": {
    "href": "api/CodeFactory.WinVs.Commands.SolutionExplorer.html",
    "title": "Namespace CodeFactory.WinVs.Commands.SolutionExplorer | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Commands.SolutionExplorer Classes CSharpSourceCommandBase Base implementation of the solution explorer command ICSharpSourceCommand ProjectCommandBase Base implementation of the solution explorer command IProjectCommand ProjectDocumentCommandBase Base implementation of the solution explorer command IProjectDocumentCommand ProjectFolderCommandBase Base implementation of the solution explorer command IProjectFolderCommand SolutionCommandBase Base implementation of the solution explorer command ISolutionCommand SolutionDocumentCommandBase Base implementation of the solution explorer command ISolutionDocumentCommand SolutionFolderCommandBase Base implementation of the solution explorer command ISolutionFolderCommand Interfaces ICSharpSourceCommand Code factory command that is triggered from the context menu of a document that hosts a c# code file in the solution explorer window. IProjectCommand Code factory command that is triggered from the context menu of a project in the solution explorer window. IProjectDocumentCommand Code factory command that is triggered from the context menu of a project document in the solution explorer window. IProjectFolderCommand Code factory command that is triggered from the context menu of a project folder in the solution explorer window. ISolutionCommand Code factory command that triggers from the context menu of solution node in solution explorer. ISolutionDocumentCommand Code factory command that is triggered from the context menu of a solution document in the solution explorer window. ISolutionFolderCommand Code factory command that is triggered from the context menu of the a solution folder in the solution explorer window."
  },
  "api/CodeFactory.WinVs.Commands.VsCommandBase-1.html": {
    "href": "api/CodeFactory.WinVs.Commands.VsCommandBase-1.html",
    "title": "Class VsCommandBase<TModel> | CodeFactory for Windows",
    "keywords": "Class VsCommandBase<TModel> Base implementation for a factory command that supports integration with visual studio. Inheritance object VsCommandBase<TModel> CSharpSourceCommandBase ProjectCommandBase ProjectDocumentCommandBase ProjectFolderCommandBase SolutionCommandBase SolutionDocumentCommandBase SolutionFolderCommandBase Implements IVsConfigurableCommand<TModel> IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsCommandBase<TModel> : IVsConfigurableCommand<TModel>, IVsFactoryCommand<TModel>, IVsCommandInformation, ICommand<TModel>, ICommandBase<TModel> where TModel : class Type Parameters Name Description TModel The target visual studio model type to be returned from the visual studio command. Constructors VsCommandBase(ILogger, IVsActions, VsCommandType, string, string) Base constructor used it initialize a visual studio command. Declaration protected VsCommandBase(ILogger logger, IVsActions commands, VsCommandType commandType, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger The code factory logger to be used by the logger. IVsActions commands The global visual studio commands that can be used by this visual studio command. VsCommandType commandType The target type of command being created. string commandTitle The title displayed in visual studio for this command. string commandDescription A brief description of the purpose of this command. Fields _commandDescription Backing field for the property CommandDescription Declaration protected readonly string _commandDescription Field Value Type Description string _commandTitle Backing field for the property CommandTitle Declaration protected readonly string _commandTitle Field Value Type Description string _logger Logging method that is used by the command to log to the code factory logging framework. Declaration protected readonly ILogger _logger Field Value Type Description ILogger Properties CommandDescription An optional discription that discribes what this factory command is intended for. Declaration public string CommandDescription { get; } Property Value Type Description string CommandTitle Action title that will be displayed within visual studio. Declaration public string CommandTitle { get; } Property Value Type Description string CommandType The target type of command that is being loaded. Declaration public VsCommandType CommandType { get; } Property Value Type Description VsCommandType VisualStudioActions Global visual studio commands that can be accessed from this visual studio command. Declaration public IVsActions VisualStudioActions { get; } Property Value Type Description IVsActions Methods EnableCommandAsync(TModel) Validation logic that will determine if this command should be enabled for execution. Declaration public abstract Task<bool> EnableCommandAsync(TModel result) Parameters Type Name Description TModel result The target model data that will be used to determine if this command should be enabled. Returns Type Description Task<bool> Boolean flag that will tell code factory to enable this command or disable it. ExecuteCommandAsync(TModel) Code factory framework calls this method when the command has been executed. Declaration public abstract Task ExecuteCommandAsync(TModel result) Parameters Type Name Description TModel result The code factory model that has generated and provided to the command to process. Returns Type Description Task LoadExternalConfigDefinition() Loads the external configuration definition for this command. Declaration public abstract ConfigCommand LoadExternalConfigDefinition() Returns Type Description ConfigCommand Will return the command configuration or null if this command does not support external configurations. Implements IVsConfigurableCommand<TModel> IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel> ICommandBase<TModel>"
  },
  "api/CodeFactory.WinVs.Commands.VsCommandType.html": {
    "href": "api/CodeFactory.WinVs.Commands.VsCommandType.html",
    "title": "Enum VsCommandType | CodeFactory for Windows",
    "keywords": "Enum VsCommandType Enumeration that determines the type of visual studio command is being executed. Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public enum VsCommandType Fields Name Description IDESolutionLoad IDE level command that is fired once the solution has been loaded. Will only be triggered once the solution is loaded. SolutionExplorerCSharpSourceCode Solution explorer command that is triggered from the context menu from a project document that supports source code. SolutionExplorerProject Solution explorer command that is triggered from the context menu from a project node. SolutionExplorerProjectDocument Solution explorer command that is triggered from the context menu from a project document node. SolutionExplorerProjectFolder Solution explorer command that is triggered from the context menu from a project folder node. SolutionExplorerSolution Solution explorer command that is triggered from the context menu from the solution node. SolutionExplorerSolutionDocument Solution explorer command that is triggered from the context menu from a solution document node. SolutionExplorerSolutionFolder Solution explorer command that is triggered from the context menu from a solution folder node. Unknown The command type is unknown"
  },
  "api/CodeFactory.WinVs.Commands.VsEnviromentCommandBase-1.html": {
    "href": "api/CodeFactory.WinVs.Commands.VsEnviromentCommandBase-1.html",
    "title": "Class VsEnviromentCommandBase<TModel> | CodeFactory for Windows",
    "keywords": "Class VsEnviromentCommandBase<TModel> Base implementation for a environment command that supports integration with the Visual studio IDE environment directly. Inheritance object VsEnviromentCommandBase<TModel> SolutionLoadCommandBase Implements IVsEnvironmentCommand<TModel> IVsCommandInformation Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Commands Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsEnviromentCommandBase<TModel> : IVsEnvironmentCommand<TModel>, IVsCommandInformation where TModel : class Type Parameters Name Description TModel The target visual studio model type to be returned from the visual studio environment command. Constructors VsEnviromentCommandBase(ILogger, IVsActions, VsCommandType, string, string) Base constructor used it initialize a visual studio command. Declaration protected VsEnviromentCommandBase(ILogger logger, IVsActions commands, VsCommandType commandType, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger The code factory logger to be used by the logger. IVsActions commands The global visual studio commands that can be used by this visual studio command. VsCommandType commandType The target type of command being created. string commandTitle The title displayed in visual studio for this command. string commandDescription A brief description of the purpose of this command. Fields _commandDescription Backing field for the property CommandDescription Declaration protected readonly string _commandDescription Field Value Type Description string _commandTitle Backing field for the property CommandTitle Declaration protected readonly string _commandTitle Field Value Type Description string _logger Logging method that is used by the command to log to the code factory logging framework. Declaration protected readonly ILogger _logger Field Value Type Description ILogger Properties CommandDescription An optional discription that discribes what this factory command is intended for. Declaration public string CommandDescription { get; } Property Value Type Description string CommandTitle Action title that will be displayed within visual studio. Declaration public string CommandTitle { get; } Property Value Type Description string CommandType The target type of command that is being loaded. Declaration public VsCommandType CommandType { get; } Property Value Type Description VsCommandType VisualStudioActions Global visual studio commands that can be accessed from this visual studio command. Declaration public IVsActions VisualStudioActions { get; } Property Value Type Description IVsActions Methods ExecuteCommandAsync(TModel) Code factory framework calls this method when the command has been executed. Declaration public abstract Task ExecuteCommandAsync(TModel result) Parameters Type Name Description TModel result The code factory model that has generated and provided to the command to process. Returns Type Description Task Implements IVsEnvironmentCommand<TModel> IVsCommandInformation"
  },
  "api/CodeFactory.WinVs.Commands.html": {
    "href": "api/CodeFactory.WinVs.Commands.html",
    "title": "Namespace CodeFactory.WinVs.Commands | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Commands Classes ConfigCommand Stores the configuration for a CodeFactory command. ConfigFolder Configuration information about a target project folder. ConfigManager Managers the loading and saving of solution configurations. ConfigParameter Configuration information about a target parameter to be used in CodeFactory automation. ConfigProject Holds the configuration for a target project and any target project folder under the project that are needed in the configuration. ConfigSolution The configuration information for a solution to be automated. VsCommandBase<TModel> Base implementation for a factory command that supports integration with visual studio. VsEnviromentCommandBase<TModel> Base implementation for a environment command that supports integration with the Visual studio IDE environment directly. Interfaces IConfigGuidance Contract definition for guidance for command configuration IVsCommandInformation Interface that provides information used by code factory to load the command. IVsConfigurableCommand<TModel> Interface that defines a visual studio command that can be configured. IVsEnvironmentCommand<TModel> Base implementation for all code factory commands that are directly executed by the Visual Studio Enviornment. IVsFactoryCommand<TModel> Common implementation all code factory commands for visual studio must display. Enums FolderLoadType Enumeration that determines how a command source that targets commands in folders should be checked. VsCommandType Enumeration that determines the type of visual studio command is being executed."
  },
  "api/CodeFactory.WinVs.FileHelper.html": {
    "href": "api/CodeFactory.WinVs.FileHelper.html",
    "title": "Class FileHelper | CodeFactory for Windows",
    "keywords": "Class FileHelper Static helper class that contains functions to support file management with visual studio. Inheritance object FileHelper Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public static class FileHelper Properties InvalidFileNameCharacters The invalid characters not allowed in a file name. Declaration public static string InvalidFileNameCharacters { get; } Property Value Type Description string Methods ContainsInvalidFileNameCharacter(string) Provided file name is checked to determine if it has Declaration public static bool ContainsInvalidFileNameCharacter(string fileName) Parameters Type Name Description string fileName The filename to be evaluated. Returns Type Description bool True if invalid characters exists or false if the file does not have invalid characters."
  },
  "api/CodeFactory.WinVs.IVsActions.html": {
    "href": "api/CodeFactory.WinVs.IVsActions.html",
    "title": "Interface IVsActions | CodeFactory for Windows",
    "keywords": "Interface IVsActions Code factory commands that are globally used in Visual Studio. Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public interface IVsActions Properties DocumentActions Visual Studio actions that work with the IVsDocument model. Declaration IVsDocumentActions DocumentActions { get; } Property Value Type Description IVsDocumentActions EnvironmentActions Visual Studio actions that directly interact with Visual Studio itself. Declaration IVsEnvironmentActions EnvironmentActions { get; } Property Value Type Description IVsEnvironmentActions ProjectActions Visual Studio actions that work with the IVsProject model. Declaration IVsProjectActions ProjectActions { get; } Property Value Type Description IVsProjectActions ProjectFolderActions Visual Studio actions that work with the IVsProjectFolder model. Declaration IVsProjectFolderActions ProjectFolderActions { get; } Property Value Type Description IVsProjectFolderActions ProjectReferenceActions Visual Studio actions that work with the IVsReference model. Declaration IVsReferenceActions ProjectReferenceActions { get; } Property Value Type Description IVsReferenceActions SolutionActions Visual Studio actions that work with the IVsSolution model. Declaration IVsSolutionActions SolutionActions { get; } Property Value Type Description IVsSolutionActions SolutionFolderActions Visual Studio actions that work with the IVsSolutionFolder model. Declaration IVsSolutionFolderActions SolutionFolderActions { get; } Property Value Type Description IVsSolutionFolderActions SourceActions Visual Studio actions that work with source models. Declaration IVsSourceActions SourceActions { get; } Property Value Type Description IVsSourceActions UserInterfaceActions Visual Studio actions that work the the Visual Studio user interface. Declaration IVsUIActions UserInterfaceActions { get; } Property Value Type Description IVsUIActions Methods GetCSharpProjectFileFromSourceAsync(CsSource) Gets the hosting C# source project file from for the CsSource model. Declaration Task<VsCSharpSource> GetCSharpProjectFileFromSourceAsync(CsSource sourceCode) Parameters Type Name Description CsSource sourceCode The source code to get the C# source from. Returns Type Description Task<VsCSharpSource> The target c# source project file or null if the project is not defined for the source code. GetCSharpSourceAsync(string) Loads the CsSource from the target code file provided. Declaration Task<CsSource> GetCSharpSourceAsync(string filePath) Parameters Type Name Description string filePath Fully qualified path to the c# code file to load. Returns Type Description Task<CsSource> The C# source model or null if the model could not be loaded. GetProjectFileFromSourceAsync(CsSource) Gets the hosting C# source project file from for the CsSource model. Declaration Task<VsDocument> GetProjectFileFromSourceAsync(CsSource sourceCode) Parameters Type Name Description CsSource sourceCode The source code to get the C# source from. Returns Type Description Task<VsDocument> The target project file or null if the project is not defined for the source code. GetProjectFromSourceAsync(CsSource) Gets the hosting project for the CsSource model. Declaration Task<VsProject> GetProjectFromSourceAsync(CsSource sourceCode) Parameters Type Name Description CsSource sourceCode The source code to get the project from. Returns Type Description Task<VsProject> The target project or null if the project is not defined for the source code. GetSolutionAsync() Gets the most current model of the solution. Declaration Task<VsSolution> GetSolutionAsync() Returns Type Description Task<VsSolution> The solution model. Extension Methods VsActionsExtensions.GetCSharpSourceAsync(IVsActions, CsContainer) VsActionsExtensions.GetCSharpSourceAsync(IVsActions, CsMember) VsActionsExtensions.GetProjectFolderFromConfigAsync(IVsActions, ConfigProject, string, bool) VsActionsExtensions.GetProjectFromConfigAsync(IVsActions, ConfigProject) VsActionsExtensions.GetTargetProjectAsync(IVsActions, string)"
  },
  "api/CodeFactory.WinVs.IVsEnvironmentActions.html": {
    "href": "api/CodeFactory.WinVs.IVsEnvironmentActions.html",
    "title": "Interface IVsEnvironmentActions | CodeFactory for Windows",
    "keywords": "Interface IVsEnvironmentActions Visual Studio actions handle interaction with Visual Studio itself. Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public interface IVsEnvironmentActions Methods WriteToCodeFactoryOutputWindowAsync(string) Writes the provided message to the CodeFactory output window in Visual Studio. Declaration Task WriteToCodeFactoryOutputWindowAsync(string message) Parameters Type Name Description string message The message to be written to the output window. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Loader.CodeFactoryConfigurationLoader.html": {
    "href": "api/CodeFactory.WinVs.Loader.CodeFactoryConfigurationLoader.html",
    "title": "Class CodeFactoryConfigurationLoader | CodeFactory for Windows",
    "keywords": "Class CodeFactoryConfigurationLoader Utility class that loads a CFA file libraries into memory and creates instances of all the visual studio actions and makes them available to visual studio for usage. Inheritance object CodeFactoryConfigurationLoader Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public static class CodeFactoryConfigurationLoader Fields CodeFactoryDirectoryName Constant that holds the name of the code factory directory. Declaration public const string CodeFactoryDirectoryName = \"CodeFactory\" Field Value Type Description string CodeFactoryExtension Constant that holds the name of the code factory file extension. Declaration public const string CodeFactoryExtension = \".cfa\" Field Value Type Description string Methods GetAssembliesToLoadFromPackage(string, VsFactoryConfiguration) Helper method that gets the list of all the assembly files that need to copied from the code factory package. Declaration public static List<string> GetAssembliesToLoadFromPackage(string packageDirectory, VsFactoryConfiguration config) Parameters Type Name Description string packageDirectory The target directory all files are to be copied to. VsFactoryConfiguration config The factory configuration to load the files from. Returns Type Description List<string> List of the assembly and support files to load, or null if a load failure error occurred. LoadCodeFactoryConfiguration(string, string, IVsActions) Loads a code factory configuration into memory and returns the target visual studio actions to be used by code factory. Declaration public static IVsCodeFactoryLoadStatus LoadCodeFactoryConfiguration(string codeFactoryPackageFile, string unpackDirectory, IVsActions actions) Parameters Type Name Description string codeFactoryPackageFile The fully qualified path to the code factory package file. string unpackDirectory The fully qualified path to the unpackDirectory for the code factory libraries. IVsActions actions The implementation of the actions interface to be injected into each created visual studio action. Returns Type Description IVsCodeFactoryLoadStatus LoadFactoryLibraries(VsFactoryConfiguration, string) Loads the factory libraries into the running visual studio instance. Declaration public static LibraryLoadStatus LoadFactoryLibraries(VsFactoryConfiguration config, string packageDirectory) Parameters Type Name Description VsFactoryConfiguration config The code factory configuration to load assemblies from. string packageDirectory The directory where the packages are found. Returns Type Description LibraryLoadStatus Data object that holds the status of loaded factory libraries. This will always return an instance of the status. LocateFactoryPackage(string) Helper method that determines if a code factory extension file is located in the directory. This will return the first CFA file that is located in the directory. Declaration public static string LocateFactoryPackage(string sourceDirectory) Parameters Type Name Description string sourceDirectory The directory to search for the code factory extension file. Returns Type Description string The fully qualified path to the code factory extension file, or null if no file was found."
  },
  "api/CodeFactory.WinVs.Loader.ConfigManager.html": {
    "href": "api/CodeFactory.WinVs.Loader.ConfigManager.html",
    "title": "Class ConfigManager | CodeFactory for Windows",
    "keywords": "Class ConfigManager Static class that manages the creation and reading of code factory configuration files. Inheritance object ConfigManager Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public static class ConfigManager Fields DEBUG_CONFIG_FILE_NAME Constant that holds the name of the debug version of the config file. Declaration public const string DEBUG_CONFIG_FILE_NAME = \"debug.cfConfig\" Field Value Type Description string PACKAGE_CONFIG_FILE_NAME Constant that holds the name of the configuration file to be stored in the configuration package. Declaration public const string PACKAGE_CONFIG_FILE_NAME = \"config.cfConfig\" Field Value Type Description string PACKAGE_CONFIG_NAMESPACE Constant that holds the xml namespace for the package configuration information. Declaration public const string PACKAGE_CONFIG_NAMESPACE = \"http://schema.codefactory.software/codefactory/v1.0/package/config\" Field Value Type Description string PACKAGE_CONFIG_VIRTUAL_FILEPATH Constant that holds the replacement string information for the logical path for configuration data. Declaration public const string PACKAGE_CONFIG_VIRTUAL_FILEPATH = \"Config\\\\{0}\" Field Value Type Description string PACKAGE_FILE_EXTENSION Constant that holds the file extension for code factory extension. Declaration public const string PACKAGE_FILE_EXTENSION = \".cfa\" Field Value Type Description string PACKAGE_LIBRARIES_NAMESPACE Constant that holds the xml namespace for the package libraries information. Declaration public const string PACKAGE_LIBRARIES_NAMESPACE = \"http://schema.codefactory.software/codefactory/v1.0/package/libraries\" Field Value Type Description string PACKAGE_LIBRARIES_VIRTUAL_FILEPATH Constant that holds the replacement string information for the logical path for library data. Declaration public const string PACKAGE_LIBRARIES_VIRTUAL_FILEPATH = \"Libraries\\\\{0}\" Field Value Type Description string Methods CopyStreamData(Stream, Stream) Extension method that copies data from one stream to another. Declaration public static bool CopyStreamData(this Stream source, Stream targetStream) Parameters Type Name Description Stream source Source stream to read from. Stream targetStream Target stream to write data to. Returns Type Description bool Flag that determines if the stream copy completed successfully. CreateCodeFactoryPackage(VsFactoryConfiguration, string, string) Creates a code factory package that consolidates the needed libraries and configuration for a code factory into one file. Declaration public static bool CreateCodeFactoryPackage(VsFactoryConfiguration sourceConfiguration, string targetDirectory, string targetPackageName) Parameters Type Name Description VsFactoryConfiguration sourceConfiguration The loaded factory configuration information to be loaded into a package file. string targetDirectory The directory the package will be placed in. string targetPackageName The file name of the package that will be created. The package extension of cfa will be appended to the package name. Returns Type Description bool CreatePackageFile(VsFactoryConfiguration, List<VsPackageFileConfig>, string) Static helper method that creates a code factory extension file. Declaration public static bool CreatePackageFile(VsFactoryConfiguration config, List<VsPackageFileConfig> packageFiles, string packageFilePath) Parameters Type Name Description VsFactoryConfiguration config The factory configuration to load into the factory extension file. List<VsPackageFileConfig> packageFiles List of the package files to load into the factory extension file. string packageFilePath The fully qualified name of the package file to be created. Returns Type Description bool Flag that determines if the factory file was created or not. ExtractLibrariesFromPackage(string, string, List<string>) Extracts a library file from the package and writes it to the target directory and library name. Declaration public static VsPackageExtractResult ExtractLibrariesFromPackage(string packageFilePath, string targetDirectory, List<string> libraries) Parameters Type Name Description string packageFilePath The fully qualified file path for the code factory package. string targetDirectory The directory the library should be copied to. List<string> libraries List of the files to be extracted to the target directory. Returns Type Description VsPackageExtractResult The results of the extract are always returned. LoadFactoryConfiguration(string) Loads the factory configuration from the package. Declaration public static PackageReadResult<VsFactoryConfiguration> LoadFactoryConfiguration(string packageFilePath) Parameters Type Name Description string packageFilePath The fully qualified path to the Code Factory package. Returns Type Description PackageReadResult<VsFactoryConfiguration> Package read result with either the error that occurred or the fully loaded factory configuration."
  },
  "api/CodeFactory.WinVs.Loader.ConfigurationMessages.html": {
    "href": "api/CodeFactory.WinVs.Loader.ConfigurationMessages.html",
    "title": "Class ConfigurationMessages | CodeFactory for Windows",
    "keywords": "Class ConfigurationMessages A strongly-typed resource class, for looking up localized strings, etc. Inheritance object ConfigurationMessages Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class ConfigurationMessages Properties CannotLocatePackageDirectory Looks up a localized string similar to The package directory '{0}'. Does not exist exist, cannot load the code factory package configuration. No automation will be loaded.. Declaration public static string CannotLocatePackageDirectory { get; } Property Value Type Description string CommandLineHelpMessage Looks up a localized string similar to Utility that create a CodeFactory configuration and package.\\r\\nThe following are the command switches supported by the configurtion manager.\\r\\nThe configuration manager will ignore unknown switches.\\r\\n\\r\\nSwitches\\r\\n? = Displays this help message\\r\\n\\r\\nHelp = displays this help message\\r\\n\\r\\n/Help = Displays this help message\\r\\n\\r\\n/DebugConfig <PathToDLL> = creates a debug configuration for the current project.\\r\\n. Declaration public static string CommandLineHelpMessage { get; } Property Value Type Description string CommandLineTitle Looks up a localized string similar to Code Factory Packaging Utility Version {0}\\r\\nCopyright 2013 LifeCycle Delivery Services, Inc.\\r\\n. Declaration public static string CommandLineTitle { get; } Property Value Type Description string ConfigNotInPackage Looks up a localized string similar to Cannot find the factory configuration in the package file '{0}'. Declaration public static string ConfigNotInPackage { get; } Property Value Type Description string ConfigurationFileCreatedSuccessfully Looks up a localized string similar to Successfully created the configuration file '{0}'.\\r\\nConfiguration file has the following resources defined.\\r\\nAutomation Libraries - '{1}' \\r\\nSupporting Libraries - '{2}' \\r\\nAutomation Actions -'{3}' \\r\\n. Declaration public static string ConfigurationFileCreatedSuccessfully { get; } Property Value Type Description string ConfigurationFileNotFound Looks up a localized string similar to The code factory . Declaration public static string ConfigurationFileNotFound { get; } Property Value Type Description string ConfigurationFileNotProvided Looks up a localized string similar to Cannot load the factory configuration file, becuase no configuration file was provided.. Declaration public static string ConfigurationFileNotProvided { get; } Property Value Type Description string CreatingConfigurationFile Looks up a localized string similar to Creating the configuration file '{0}'. Declaration public static string CreatingConfigurationFile { get; } Property Value Type Description string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description CultureInfo DeletingConfigurationFile Looks up a localized string similar to Deleting the configuration file '{0}'. Declaration public static string DeletingConfigurationFile { get; } Property Value Type Description string DirectoryDoesNotExistForConfigFile Looks up a localized string similar to Cannot find the directory that will be used to store the configuration file.. Declaration public static string DirectoryDoesNotExistForConfigFile { get; } Property Value Type Description string FactoryConfigCouldNotBeloaded Looks up a localized string similar to The factory configuration could not be loaded from the package file '{0}'. Declaration public static string FactoryConfigCouldNotBeloaded { get; } Property Value Type Description string FailedToCreateConfigurationFile Looks up a localized string similar to Failed to create the configuration file '{0}', the following error occurred during the creation process, '{1}'. Declaration public static string FailedToCreateConfigurationFile { get; } Property Value Type Description string FailedToDeleteConfigFile Looks up a localized string similar to Failed to delete the configuration file '{0}', the following error occurred during the delete process, '{1}'. Declaration public static string FailedToDeleteConfigFile { get; } Property Value Type Description string FailedToLoadAction Looks up a localized string similar to The code factory command '{0}', could not be loaded. This factory command will not avaliable for usage.. Declaration public static string FailedToLoadAction { get; } Property Value Type Description string FailedToLoadConfigurationData Looks up a localized string similar to Failed to load configuration data, will not be able to create a configuration file.. Declaration public static string FailedToLoadConfigurationData { get; } Property Value Type Description string InvalidAssemblyPath Looks up a localized string similar to The code factory command '{0}', could not be loaded due to an invalid assembly path. This factory command will not be loaded.. Declaration public static string InvalidAssemblyPath { get; } Property Value Type Description string LibrariesNotLoaded Looks up a localized string similar to An error occurred and the Code Factory libraries could not be loaded.. Declaration public static string LibrariesNotLoaded { get; } Property Value Type Description string LibraryLoadError Looks up a localized string similar to An error occurred while loading the library '{0}', no automation will be loaded.. Declaration public static string LibraryLoadError { get; } Property Value Type Description string LibraryNotInPackage Looks up a localized string similar to The library '{0}' was not found in the package. No automation will be loaded.. Declaration public static string LibraryNotInPackage { get; } Property Value Type Description string LibraryNotLoaded Looks up a localized string similar to One of the code factory libraries was not loaded. No automation will be loaded.. Declaration public static string LibraryNotLoaded { get; } Property Value Type Description string NoLibraryDirectory Looks up a localized string similar to No directory was provided. cannot load libraries.. Declaration public static string NoLibraryDirectory { get; } Property Value Type Description string NoPackageDirectory Looks up a localized string similar to No package directory was provided cannot load the code factory package configuration. No automation will be loaded.. Declaration public static string NoPackageDirectory { get; } Property Value Type Description string NoPackageFile Looks up a localized string similar to No package file was provided, cannot load libraries.. Declaration public static string NoPackageFile { get; } Property Value Type Description string NoVisualStudioActions Looks up a localized string similar to Code factory did not provide an instance of the commands to be injected into visual studio commands being loaded. No automation will be loaded.. Declaration public static string NoVisualStudioActions { get; } Property Value Type Description string PackageDirectoryCannotBeCreated Looks up a localized string similar to The package directory for the package '{0}' could not be created. Cannot load the code factory automation.. Declaration public static string PackageDirectoryCannotBeCreated { get; } Property Value Type Description string PackageDirectoryDoesNotExist Looks up a localized string similar to The target package directory of '{0}', does not exist. cannot load the package.. Declaration public static string PackageDirectoryDoesNotExist { get; } Property Value Type Description string PackageFileNotFound Looks up a localized string similar to The package file '{0}' could not be found. No automation functionality will be loaded.. Declaration public static string PackageFileNotFound { get; } Property Value Type Description string PackageLoadError Looks up a localized string similar to An error occurred while loading the code factory package. No automation will be avaliable with this project.. Declaration public static string PackageLoadError { get; } Property Value Type Description string ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager"
  },
  "api/CodeFactory.WinVs.Loader.IVsActionConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsActionConfiguration.html",
    "title": "Interface IVsActionConfiguration | CodeFactory for Windows",
    "keywords": "Interface IVsActionConfiguration Configuration data model that holds loading information for loading a target visual studio command into code factory. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsActionConfiguration Properties ActionAssemblyFullName The assembly full name for an command. Declaration string ActionAssemblyFullName { get; } Property Value Type Description string Title The title that is assigned to the command. Declaration string Title { get; } Property Value Type Description string VisualStudioActionType The type of visual studio command being loaded. Declaration VsCommandType VisualStudioActionType { get; } Property Value Type Description VsCommandType"
  },
  "api/CodeFactory.WinVs.Loader.IVsAutomationLibrary.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsAutomationLibrary.html",
    "title": "Interface IVsAutomationLibrary | CodeFactory for Windows",
    "keywords": "Interface IVsAutomationLibrary Contract that defines the automation library to be loaded into visual studio. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsAutomationLibrary Properties LibraryActions enumeration of the commands that are supported by this library. Declaration List<VsActionConfiguration> LibraryActions { get; } Property Value Type Description List<VsActionConfiguration> LibraryFilePath Fully qualified path to the library file. Declaration string LibraryFilePath { get; } Property Value Type Description string SupportLibraries enumeration of the supporting libraries required for automation library to function. Declaration List<VsLibraryConfiguration> SupportLibraries { get; } Property Value Type Description List<VsLibraryConfiguration>"
  },
  "api/CodeFactory.WinVs.Loader.IVsCodeFactoryLoadStatus.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsCodeFactoryLoadStatus.html",
    "title": "Interface IVsCodeFactoryLoadStatus | CodeFactory for Windows",
    "keywords": "Interface IVsCodeFactoryLoadStatus Status of loading all code factory visual studio commands from a CFA configuration. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsCodeFactoryLoadStatus Properties ErrorMessages The error messages that was captured while trying to load the code factory commands. This will be null if HasErrors is false. Declaration List<string> ErrorMessages { get; } Property Value Type Description List<string> HasErrors Flag that determines if errors occurred while loading the code factory commands. Declaration bool HasErrors { get; } Property Value Type Description bool IsLoaded Flag that determines if visual studio commands were able to be loaded for the code factory package. Declaration bool IsLoaded { get; } Property Value Type Description bool VisualStudioFactoryActions Enumeration of the factory commands that were loaded. This will be an empty enumeration if IsLoaded is false. Declaration IEnumerable<IVsCommandInformation> VisualStudioFactoryActions { get; } Property Value Type Description IEnumerable<IVsCommandInformation>"
  },
  "api/CodeFactory.WinVs.Loader.IVsFactoryConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsFactoryConfiguration.html",
    "title": "Interface IVsFactoryConfiguration | CodeFactory for Windows",
    "keywords": "Interface IVsFactoryConfiguration Configuration model definition all data needed to load a code factory configuration into visual studio. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsFactoryConfiguration Properties CodeFactoryActions Enumeration of the commands to be loaded into the code factory. Declaration List<VsActionConfiguration> CodeFactoryActions { get; } Property Value Type Description List<VsActionConfiguration> CodeFactoryLibraries Enumeration of the code factory libraries that need to be loaded. Declaration List<VsLibraryConfiguration> CodeFactoryLibraries { get; } Property Value Type Description List<VsLibraryConfiguration> Id The unique identifier that is assigned to the factory configuration. Declaration Guid Id { get; } Property Value Type Description Guid Name The name assigned to this automation configuration. Declaration string Name { get; } Property Value Type Description string SdkVersion The version of the CodeFactory SDK that was used to build the automation. Declaration string SdkVersion { get; } Property Value Type Description string SupportLibraries Enumeration of the support libraries that need to be loaded to run the code factory libraries. Declaration List<VsLibraryConfiguration> SupportLibraries { get; } Property Value Type Description List<VsLibraryConfiguration>"
  },
  "api/CodeFactory.WinVs.Loader.IVsLibraryConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsLibraryConfiguration.html",
    "title": "Interface IVsLibraryConfiguration | CodeFactory for Windows",
    "keywords": "Interface IVsLibraryConfiguration Data model that stores all the information needed to load a DLL into visual studio. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsLibraryConfiguration Properties AssemblyFilePath File path to where the assembly is found. This will be null if the assembly is stored in the GAC. Declaration string AssemblyFilePath { get; } Property Value Type Description string AssemblyStrongName The fully qualified name of the assembly to be loaded. This will be null if not stored in the GAC. Declaration string AssemblyStrongName { get; } Property Value Type Description string ErrorDetails Stores the exception message for the error. Declaration string ErrorDetails { get; } Property Value Type Description string ErrorType Enumeration that stores the type of error that has occurred while loading the library configuration. Declaration LibraryErrorType ErrorType { get; } Property Value Type Description LibraryErrorType HasDebugInformation Flag that determines if the PDB file is found wit the assembly in the file path. This will be false if it is stored in the GAC. Declaration bool HasDebugInformation { get; } Property Value Type Description bool HasErrors Flag that determines if their were errors loading the library configuration. Declaration bool HasErrors { get; } Property Value Type Description bool IsStoredInGac Flag that determines if the assembly is stored in the Global Assembly Cache on the computer. Declaration bool IsStoredInGac { get; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Loader.IVsPackageFileConfig.html": {
    "href": "api/CodeFactory.WinVs.Loader.IVsPackageFileConfig.html",
    "title": "Interface IVsPackageFileConfig | CodeFactory for Windows",
    "keywords": "Interface IVsPackageFileConfig Model definition that tracks information about where files are located and where to place them in the package definition. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public interface IVsPackageFileConfig Properties AssemblyPackagePath The logical location in the package the assembly will be stored. Declaration string AssemblyPackagePath { get; } Property Value Type Description string AssemblyPhysicalPath Physical location of the assembly to add to the package. Declaration string AssemblyPhysicalPath { get; } Property Value Type Description string HasDebugDatabaseFile Flag that determines if the package library has a debug database file. Declaration bool HasDebugDatabaseFile { get; } Property Value Type Description bool PDBPackagePath The logical location in the package the PDB will be stored. Declaration string PDBPackagePath { get; } Property Value Type Description string PDBPhysicalPath Physical location of the PDB to add to the package. Declaration string PDBPhysicalPath { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Loader.LibraryErrorType.html": {
    "href": "api/CodeFactory.WinVs.Loader.LibraryErrorType.html",
    "title": "Enum LibraryErrorType | CodeFactory for Windows",
    "keywords": "Enum LibraryErrorType Enumeration that stores the type error that has occurred while loading a library. Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public enum LibraryErrorType Fields Name Description AssemblyLoadError An error occurred while trying to load the assembly. FileNotFound The library file could not be found. InvalidLibrary The library is incorrectly formatted and cannot be loaded by the code factory framework. LoadException A general exception occurred while loading the library. None No error has occurred while loading the library."
  },
  "api/CodeFactory.WinVs.Loader.LibraryLoadStatus.html": {
    "href": "api/CodeFactory.WinVs.Loader.LibraryLoadStatus.html",
    "title": "Class LibraryLoadStatus | CodeFactory for Windows",
    "keywords": "Class LibraryLoadStatus Data class that tracks if the code factory libraries were loaded into memory correctly. Inheritance object LibraryLoadStatus Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class LibraryLoadStatus Constructors LibraryLoadStatus() Default constructor that initializes the properties. Declaration public LibraryLoadStatus() Properties Errors List of end user formatted errors. Declaration public List<string> Errors { get; set; } Property Value Type Description List<string> HasErrors Flag that determines if errors occurred while loading libraries. Declaration public bool HasErrors { get; set; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Loader.LibraryManager.html": {
    "href": "api/CodeFactory.WinVs.Loader.LibraryManager.html",
    "title": "Class LibraryManager | CodeFactory for Windows",
    "keywords": "Class LibraryManager Central implementation class that manages the loading of automation libraries. Inheritance object LibraryManager Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public static class LibraryManager Methods GetExternalDependentLibraries(Assembly, string) Static extension method information configuration information about external assemblies used by the source assembly. Declaration public static List<VsLibraryConfiguration> GetExternalDependentLibraries(this Assembly source, string assemblyDirectory) Parameters Type Name Description Assembly source Source assembly to get external dependencies from. string assemblyDirectory The directory in which the external dependent libraries are stored at. Returns Type Description List<VsLibraryConfiguration> List of dependent libraries or null if not dependent libraries were found. GetLibraryActions(Assembly) Extension method that loads all library commands from the current assembly. Declaration public static List<VsActionConfiguration> GetLibraryActions(this Assembly source) Parameters Type Name Description Assembly source Source assembly that holds the commands to be loaded. Returns Type Description List<VsActionConfiguration> List of the library command information or null if the assembly information can't be loaded. GetLibraryInformation(string) Loads the information about an automation library. Declaration public static VsAutomationLibrary GetLibraryInformation(string filePath) Parameters Type Name Description string filePath The fully qualified path to the automation library file to load information from. Returns Type Description VsAutomationLibrary Fully populated automation library information, or null if the library could not be loaded."
  },
  "api/CodeFactory.WinVs.Loader.PackageReadResult-1.html": {
    "href": "api/CodeFactory.WinVs.Loader.PackageReadResult-1.html",
    "title": "Class PackageReadResult<T> | CodeFactory for Windows",
    "keywords": "Class PackageReadResult<T> Data class that returns the results from reading from different parts of a Code Factory package. Inheritance object PackageReadResult<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class PackageReadResult<T> where T : class Type Parameters Name Description T Constructors PackageReadResult() Declaration public PackageReadResult() Properties Error Error message that occurred while reading from the package. This will be null if there is no error. Declaration public string Error { get; set; } Property Value Type Description string HasError Flag that determines if an error has occurred during the reading of a part of a package. Declaration public bool HasError { get; set; } Property Value Type Description bool Result The result that was returned from reading the package. This will be null if there was an error. Declaration public T Result { get; set; } Property Value Type Description T"
  },
  "api/CodeFactory.WinVs.Loader.SdkSupport.html": {
    "href": "api/CodeFactory.WinVs.Loader.SdkSupport.html",
    "title": "Class SdkSupport | CodeFactory for Windows",
    "keywords": "Class SdkSupport Data class that holds the supported versions of the SDK that can be loaded. Inheritance object SdkSupport Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public static class SdkSupport Fields CodeFactoryAssemblyName The name of the assembly that contains the CodeFactory SDK. Declaration public const string CodeFactoryAssemblyName = \"CodeFactory\" Field Value Type Description string CodeFactorySdkVersionAttributeName The name of the assembly type for the CodeFactory SDK version attribute. Declaration public const string CodeFactorySdkVersionAttributeName = \"AssemblyCFSdkVersion\" Field Value Type Description string MaxVersion The maximum version of the SDK that can be loaded and used. Declaration public const string MaxVersion = \"2.24361.0.1\" Field Value Type Description string MinVersion The minimum version of the SDK that can be loaded and used. Declaration public const string MinVersion = \"2.24224.0.1\" Field Value Type Description string NuGetSdkVersion The target version of the NuGet package this SDK is deployed from. Declaration public const string NuGetSdkVersion = \"2.24361.0.1-PreRelease\" Field Value Type Description string Methods SupportedAssembly(Assembly) Checks the assembly to see if it was created by a CodeFactory SDK. If so it checks the version to confirms it can be used by the runtime. Declaration public static void SupportedAssembly(Assembly sourceAssembly) Parameters Type Name Description Assembly sourceAssembly The target assembly to check if it supports the CodeFactory SDK."
  },
  "api/CodeFactory.WinVs.Loader.TypeExtensions.html": {
    "href": "api/CodeFactory.WinVs.Loader.TypeExtensions.html",
    "title": "Class TypeExtensions | CodeFactory for Windows",
    "keywords": "Class TypeExtensions Class that holds extension methods that support management of the type system in .Net Inheritance object TypeExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public static class TypeExtensions Methods InheritsInterface(Type, Type) Extension method that confirms if a target interface type is implemented in the supplied type. Declaration public static bool InheritsInterface(this Type source, Type targetInterface) Parameters Type Name Description Type source The source type to validate. Type targetInterface The definition of the target interface to search for. Returns Type Description bool True if implemented or false if not found."
  },
  "api/CodeFactory.WinVs.Loader.VsActionConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsActionConfiguration.html",
    "title": "Class VsActionConfiguration | CodeFactory for Windows",
    "keywords": "Class VsActionConfiguration Data model class that implements the interface IVsActionConfiguration Inheritance object VsActionConfiguration Implements IVsActionConfiguration Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax [MessagePackObject(false)] public class VsActionConfiguration : IVsActionConfiguration Constructors VsActionConfiguration() Declaration public VsActionConfiguration() Properties ActionAssemblyFullName The assembly full name for an command. Declaration [Key(0)] public string ActionAssemblyFullName { get; set; } Property Value Type Description string Title The title that is assigned to the command. Declaration [Key(1)] public string Title { get; set; } Property Value Type Description string VisualStudioActionType The type of visual studio command being loaded. Declaration [Key(2)] public VsCommandType VisualStudioActionType { get; set; } Property Value Type Description VsCommandType Implements IVsActionConfiguration"
  },
  "api/CodeFactory.WinVs.Loader.VsAutomationLibrary.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsAutomationLibrary.html",
    "title": "Class VsAutomationLibrary | CodeFactory for Windows",
    "keywords": "Class VsAutomationLibrary Data model that implements the interface IVsAutomationLibrary Inheritance object VsAutomationLibrary Implements IVsAutomationLibrary Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class VsAutomationLibrary : IVsAutomationLibrary Constructors VsAutomationLibrary() Declaration public VsAutomationLibrary() Properties LibraryActions enumeration of the commands that are supported by this library. Declaration public List<VsActionConfiguration> LibraryActions { get; set; } Property Value Type Description List<VsActionConfiguration> LibraryFilePath Fully qualified path to the library file. Declaration public string LibraryFilePath { get; set; } Property Value Type Description string SupportLibraries enumeration of the supporting libraries required for automation library to function. Declaration public List<VsLibraryConfiguration> SupportLibraries { get; set; } Property Value Type Description List<VsLibraryConfiguration> Implements IVsAutomationLibrary"
  },
  "api/CodeFactory.WinVs.Loader.VsCodeFactoryLoadStatus.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsCodeFactoryLoadStatus.html",
    "title": "Class VsCodeFactoryLoadStatus | CodeFactory for Windows",
    "keywords": "Class VsCodeFactoryLoadStatus Data model that implements the interface IVsCodeFactoryLoadStatus Inheritance object VsCodeFactoryLoadStatus Implements IVsCodeFactoryLoadStatus Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class VsCodeFactoryLoadStatus : IVsCodeFactoryLoadStatus Constructors VsCodeFactoryLoadStatus() Declaration public VsCodeFactoryLoadStatus() Properties ErrorMessages The error messages that was captured while trying to load the code factory commands. This will be null if HasErrors is false. Declaration public List<string> ErrorMessages { get; set; } Property Value Type Description List<string> HasErrors Flag that determines if errors occurred while loading the code factory commands. Declaration public bool HasErrors { get; set; } Property Value Type Description bool IsLoaded Flag that determines if visual studio commands were able to be loaded for the code factory package. Declaration public bool IsLoaded { get; set; } Property Value Type Description bool VisualStudioFactoryActions Enumeration of the factory commands that were loaded. This will be an empty enumeration if IsLoaded is false. Declaration public IEnumerable<IVsCommandInformation> VisualStudioFactoryActions { get; set; } Property Value Type Description IEnumerable<IVsCommandInformation> Implements IVsCodeFactoryLoadStatus"
  },
  "api/CodeFactory.WinVs.Loader.VsFactoryConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsFactoryConfiguration.html",
    "title": "Class VsFactoryConfiguration | CodeFactory for Windows",
    "keywords": "Class VsFactoryConfiguration Data model that implements the IVsFactoryConfiguration interface. Inheritance object VsFactoryConfiguration Implements IVsFactoryConfiguration Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax [MessagePackObject(false)] public class VsFactoryConfiguration : IVsFactoryConfiguration Constructors VsFactoryConfiguration() Declaration public VsFactoryConfiguration() Properties CodeFactoryActions Enumeration of the commands to be loaded into the code factory. Declaration [Key(5)] public List<VsActionConfiguration> CodeFactoryActions { get; set; } Property Value Type Description List<VsActionConfiguration> CodeFactoryLibraries Enumeration of the code factory libraries that need to be loaded. Declaration [Key(4)] public List<VsLibraryConfiguration> CodeFactoryLibraries { get; set; } Property Value Type Description List<VsLibraryConfiguration> Id The unique identifier that is assigned to the factory configuration. Declaration [Key(1)] public Guid Id { get; set; } Property Value Type Description Guid Name The name assigned to this automation configuration. Declaration [Key(0)] public string Name { get; set; } Property Value Type Description string SdkVersion The version of the CodeFactory SDK that was used to build the automation. Declaration [Key(2)] public string SdkVersion { get; set; } Property Value Type Description string SupportLibraries Enumeration of the support libraries that need to be loaded to run the code factory libraries. Declaration [Key(3)] public List<VsLibraryConfiguration> SupportLibraries { get; set; } Property Value Type Description List<VsLibraryConfiguration> Implements IVsFactoryConfiguration"
  },
  "api/CodeFactory.WinVs.Loader.VsLibraryConfiguration.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsLibraryConfiguration.html",
    "title": "Class VsLibraryConfiguration | CodeFactory for Windows",
    "keywords": "Class VsLibraryConfiguration Immutable data model that implements the interface IVsLibraryConfiguration Inheritance object VsLibraryConfiguration Implements IVsLibraryConfiguration Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax [MessagePackObject(false)] public class VsLibraryConfiguration : IVsLibraryConfiguration Constructors VsLibraryConfiguration() Declaration public VsLibraryConfiguration() Properties AssemblyFilePath File path to where the assembly is found. This will be null if the assembly is stored in the GAC. Declaration [Key(4)] public string AssemblyFilePath { get; set; } Property Value Type Description string AssemblyStrongName The fully qualified name of the assembly to be loaded. This will be null if not stored in the GAC. Declaration [Key(5)] public string AssemblyStrongName { get; set; } Property Value Type Description string ErrorDetails Stores the exception message for the error. Declaration [Key(3)] public string ErrorDetails { get; set; } Property Value Type Description string ErrorType Enumeration that stores the type of error that has occurred while loading the library configuration. Declaration [Key(2)] public LibraryErrorType ErrorType { get; set; } Property Value Type Description LibraryErrorType HasDebugInformation Flag that determines if the PDB file is found wit the assembly in the file path. This will be false if it is stored in the GAC. Declaration [Key(6)] public bool HasDebugInformation { get; set; } Property Value Type Description bool HasErrors Flag that determines if their were errors loading the library configuration. Declaration [Key(1)] public bool HasErrors { get; set; } Property Value Type Description bool IsStoredInGac Flag that determines if the assembly is stored in the Global Assembly Cache on the computer. Declaration [Key(0)] public bool IsStoredInGac { get; set; } Property Value Type Description bool Implements IVsLibraryConfiguration"
  },
  "api/CodeFactory.WinVs.Loader.VsPackageExtractResult.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsPackageExtractResult.html",
    "title": "Class VsPackageExtractResult | CodeFactory for Windows",
    "keywords": "Class VsPackageExtractResult Data class that stores the results of extracting files from a Code Factory package. Inheritance object VsPackageExtractResult Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class VsPackageExtractResult Constructors VsPackageExtractResult() Default constructor that initializes the properties. Declaration public VsPackageExtractResult() Properties Errors List of the human readable error messaged that occurred. This will be null if HasErrors is false. Declaration public List<string> Errors { get; set; } Property Value Type Description List<string> HasErrors Flag that determines if there were errors extracting an of the files from the package. Declaration public bool HasErrors { get; set; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Loader.VsPackageFileConfig.html": {
    "href": "api/CodeFactory.WinVs.Loader.VsPackageFileConfig.html",
    "title": "Class VsPackageFileConfig | CodeFactory for Windows",
    "keywords": "Class VsPackageFileConfig Model class that implements the interface IVsPackageFileConfig Inheritance object VsPackageFileConfig Implements IVsPackageFileConfig Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Loader Assembly: CodeFactory.WinVs.dll Syntax public class VsPackageFileConfig : IVsPackageFileConfig Constructors VsPackageFileConfig() Declaration public VsPackageFileConfig() Properties AssemblyPackagePath The logical location in the package the assembly will be stored. Declaration public string AssemblyPackagePath { get; set; } Property Value Type Description string AssemblyPhysicalPath Physical location of the assembly to add to the package. Declaration public string AssemblyPhysicalPath { get; set; } Property Value Type Description string HasDebugDatabaseFile Flag that determines if the package library has a debug database file. Declaration public bool HasDebugDatabaseFile { get; set; } Property Value Type Description bool PDBPackagePath The logical location in the package the PDB will be stored. Declaration public string PDBPackagePath { get; set; } Property Value Type Description string PDBPhysicalPath Physical location of the PDB to add to the package. Declaration public string PDBPhysicalPath { get; set; } Property Value Type Description string Implements IVsPackageFileConfig"
  },
  "api/CodeFactory.WinVs.Loader.html": {
    "href": "api/CodeFactory.WinVs.Loader.html",
    "title": "Namespace CodeFactory.WinVs.Loader | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Loader Classes CodeFactoryConfigurationLoader Utility class that loads a CFA file libraries into memory and creates instances of all the visual studio actions and makes them available to visual studio for usage. ConfigManager Static class that manages the creation and reading of code factory configuration files. ConfigurationMessages A strongly-typed resource class, for looking up localized strings, etc. LibraryLoadStatus Data class that tracks if the code factory libraries were loaded into memory correctly. LibraryManager Central implementation class that manages the loading of automation libraries. PackageReadResult<T> Data class that returns the results from reading from different parts of a Code Factory package. SdkSupport Data class that holds the supported versions of the SDK that can be loaded. TypeExtensions Class that holds extension methods that support management of the type system in .Net VsActionConfiguration Data model class that implements the interface IVsActionConfiguration VsAutomationLibrary Data model that implements the interface IVsAutomationLibrary VsCodeFactoryLoadStatus Data model that implements the interface IVsCodeFactoryLoadStatus VsFactoryConfiguration Data model that implements the IVsFactoryConfiguration interface. VsLibraryConfiguration Immutable data model that implements the interface IVsLibraryConfiguration VsPackageExtractResult Data class that stores the results of extracting files from a Code Factory package. VsPackageFileConfig Model class that implements the interface IVsPackageFileConfig Interfaces IVsActionConfiguration Configuration data model that holds loading information for loading a target visual studio command into code factory. IVsAutomationLibrary Contract that defines the automation library to be loaded into visual studio. IVsCodeFactoryLoadStatus Status of loading all code factory visual studio commands from a CFA configuration. IVsFactoryConfiguration Configuration model definition all data needed to load a code factory configuration into visual studio. IVsLibraryConfiguration Data model that stores all the information needed to load a DLL into visual studio. IVsPackageFileConfig Model definition that tracks information about where files are located and where to place them in the package definition. Enums LibraryErrorType Enumeration that stores the type error that has occurred while loading a library."
  },
  "api/CodeFactory.WinVs.Logging.ILogger.html": {
    "href": "api/CodeFactory.WinVs.Logging.ILogger.html",
    "title": "Interface ILogger | CodeFactory for Windows",
    "keywords": "Interface ILogger Standard logging interface used by Code factory to log information about the execution of code factory. Namespace: CodeFactory.WinVs.Logging Assembly: CodeFactory.WinVs.dll Syntax public interface ILogger Methods Critical(string, Exception, string, int) Logs critical level information about the executing code base. This level is always logged when enabled. Declaration void Critical(string message, Exception exception, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. Exception exception The exception that occurred that needs to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Critical(string, string, int) Logs critical level information about the executing code base. This level is always logged when enabled. Declaration void Critical(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Debug(string, string, int) Logs debug level information. This level is used for application debugging. Declaration void Debug(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. DebugEnter(string, int) Logs the entering into a member. This is an debuglevel log message. Declaration void DebugEnter(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged. Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs. Important the compiler will populate this value automatically. DebugExit(string, int) Logs the exiting of a member. This is an debug level log message. Declaration void DebugExit(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Error(string, Exception, string, int) Logs error level information about the executing code base. This level is always logged when enabled. Declaration void Error(string message, Exception exception, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. Exception exception The exception that occurred that needs to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Error(string, string, int) Logs error level information about the executing code base. This level is always logged when enabled. Declaration void Error(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. InfoEnter(string, int) Logs the entering into a member. This is an information level log message. Declaration void InfoEnter(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged. Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs. Important the compiler will populate this value automatically. InfoExit(string, int) Logs the exiting of a member. This is an information level log message. Declaration void InfoExit(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Information(string, string, int) Logs general information about the executing code base. This is the default logging level. Declaration void Information(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Trace(string, string, int) Logs detailed execution information. This level is used for application tracing. Declaration void Trace(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. TraceEnter(string, int) Logs the entering into a member. This is an trace level log message. Declaration void TraceEnter(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged. Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs. Important the compiler will populate this value automatically. TraceExit(string, int) Logs the exiting of a member. This is an trace level log message. Declaration void TraceExit(string memberName = null, int lineNumber = 0) Parameters Type Name Description string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Warning(string, Exception, string, int) Logs warning level information about the executing code base. This level is always logged when enabled. Declaration void Warning(string message, Exception exception, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. Exception exception The exception that occurred that needs to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. Warning(string, string, int) Logs warning level information about the executing code base. This level is always logged when enabled. Declaration void Warning(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description string message Message to be logged. string memberName The name of the member being logged.Important the compiler will populate this value automatically. int lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically."
  },
  "api/CodeFactory.WinVs.Logging.LogManager.html": {
    "href": "api/CodeFactory.WinVs.Logging.LogManager.html",
    "title": "Class LogManager | CodeFactory for Windows",
    "keywords": "Class LogManager Manager class that returns the correct instance of the logger managed by code factory. Inheritance object LogManager Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Logging Assembly: CodeFactory.WinVs.dll Syntax public static class LogManager Methods GetLogger(Type) Loads the target logger instance. Declaration public static ILogger GetLogger(Type loggerType) Parameters Type Name Description Type loggerType The type the logger will support. Returns Type Description ILogger Instance of the target code factory logger. GetLogger<T>() Loads the target logger instance. Declaration public static ILogger GetLogger<T>() where T : class Returns Type Description ILogger Instance of the target code factory logger. Type Parameters Name Description T The target class type to be logged."
  },
  "api/CodeFactory.WinVs.Logging.LoggingProperties.html": {
    "href": "api/CodeFactory.WinVs.Logging.LoggingProperties.html",
    "title": "Class LoggingProperties | CodeFactory for Windows",
    "keywords": "Class LoggingProperties The name of the properties that are included in logging. Inheritance object LoggingProperties Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Logging Assembly: CodeFactory.WinVs.dll Syntax public static class LoggingProperties Fields LineNumber Constant that stores the property name to log a line number. Declaration public const string LineNumber = \"LineNumber\" Field Value Type Description string MemberName Constant that stores the property name to log a member name. Declaration public const string MemberName = \"MemberName\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Logging.html": {
    "href": "api/CodeFactory.WinVs.Logging.html",
    "title": "Namespace CodeFactory.WinVs.Logging | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Logging Classes LogManager Manager class that returns the correct instance of the logger managed by code factory. LoggingProperties The name of the properties that are included in logging. Interfaces ILogger Standard logging interface used by Code factory to log information about the execution of code factory."
  },
  "api/CodeFactory.WinVs.Models.CSharp.AttributeParameterKind.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.AttributeParameterKind.html",
    "title": "Enum AttributeParameterKind | CodeFactory for Windows",
    "keywords": "Enum AttributeParameterKind Enumeration that determines the type of attribute parameter data that is being returned. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum AttributeParameterKind Fields Name Description Array Is an array of multiple parameter values. Enum Is an enumeration item. Type Is a target named type. Unknown The return data is unknown. Value Is a simple value."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseBoundsCheckBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseBoundsCheckBlock.html",
    "title": "Class BaseBoundsCheckBlock | CodeFactory for Windows",
    "keywords": "Class BaseBoundsCheckBlock Base class implementation for generation of bounds checking logic. Inheritance object BaseBoundsCheckBlock BoundsCheckBlockNull BoundsCheckBlockString Implements IBoundsCheckBlock IBlock Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseBoundsCheckBlock : IBoundsCheckBlock, IBlock Constructors BaseBoundsCheckBlock(string, bool, ILoggerBlock) Initializes the base class for the bounds check. Declaration protected BaseBoundsCheckBlock(string name, bool ignoreWhenDefaultValueIsSet, ILoggerBlock loggerBlock) Parameters Type Name Description string name The unique name that identifies the type of bounds check being implemented. bool ignoreWhenDefaultValueIsSet Flag that determines if the bounds checking should be ignored if a default value is set. ILoggerBlock loggerBlock Logger block used with bounds check logic. Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType IgnoreWhenDefaultValueIsSet Flag that determines if a bounds check should be ignored if the parameter has a default value set. Declaration public bool IgnoreWhenDefaultValueIsSet { get; } Property Value Type Description bool LoggerBlock The logger block assigned to this bounds check. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Name Unique name assigned to identify the type of bounds check being performed. Declaration public string Name { get; } Property Value Type Description string Methods GenerateBoundsCheck(CsMethod, CsParameter) Generates the bounds check syntax if the parameter meets the criteria for a bounds check. Declaration public abstract (bool hasBoundsCheck, string boundsCheckSyntax) GenerateBoundsCheck(CsMethod sourceMethod, CsParameter checkParameter) Parameters Type Name Description CsMethod sourceMethod The target method the parameter belongs to. CsParameter checkParameter The parameter to build the bounds check for. Returns Type Description (bool hasBoundsCheck, string boundsCheckSyntax) Returns a tuple that contains a boolean that determines if the bounds check syntax was created for the parameter. Implements IBoundsCheckBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseCatchBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseCatchBlock.html",
    "title": "Class BaseCatchBlock | CodeFactory for Windows",
    "keywords": "Class BaseCatchBlock Base class implementation of the catch block Inheritance object BaseCatchBlock CatchBlockStandard Implements ICatchBlock IBlock Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseCatchBlock : ICatchBlock, IBlock Constructors BaseCatchBlock(ILoggerBlock) Base constructor for the BaseCatchBlock Declaration protected BaseCatchBlock(ILoggerBlock loggerBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the logger block. Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType LoggerBlock The logger block supporting the catch block, this is optional. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods BuildCatchBlock(string, IEnumerable<NamedSyntax>, string) Builds the catch block Declaration protected abstract string BuildCatchBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the catch block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the catch block,optional parameter. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(IEnumerable<NamedSyntax>, string) Generates the catch block Declaration public string GenerateCatchBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string) Generates the catch block Declaration public string GenerateCatchBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string, IEnumerable<NamedSyntax>, string) Generates the catch block Declaration public string GenerateCatchBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the catch block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string, string) Generates the catch block Declaration public string GenerateCatchBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block Implements ICatchBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseCustomBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseCustomBlock.html",
    "title": "Class BaseCustomBlock | CodeFactory for Windows",
    "keywords": "Class BaseCustomBlock Base class definition all custom blocks implementation should implement. Inheritance object BaseCustomBlock Implements ICustomBlock IBlock Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseCustomBlock : ICustomBlock, IBlock Constructors BaseCustomBlock() Declaration protected BaseCustomBlock() Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType Methods BuildBlock(string, IEnumerable<NamedSyntax>, string) Generates the block Declaration protected abstract string BuildBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the block, optional parameter. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(IEnumerable<NamedSyntax>, string) Generates the block Declaration public string GenerateBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string) Generates the block Declaration public string GenerateBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string, IEnumerable<NamedSyntax>, string) Generates the block Declaration public string GenerateBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string, string) Generates the block Declaration public string GenerateBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block Implements ICustomBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseEventBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseEventBuilder.html",
    "title": "Class BaseEventBuilder | CodeFactory for Windows",
    "keywords": "Class BaseEventBuilder Base implementation for event builders. Inheritance object BaseEventBuilder EventBuilderStandard Implements IEventBuilder IBuilder Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseEventBuilder : IEventBuilder, IBuilder Constructors BaseEventBuilder() Declaration protected BaseEventBuilder() Properties BuilderType The type of builder that has been implemented. Declaration public BuilderType BuilderType { get; } Property Value Type Description BuilderType Methods BuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and returns the defined syntax to the caller. Declaration public Task<string> BuildEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task<string> Formatted event definition. GenerateBuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and returns the defined syntax to the caller. Declaration protected abstract Task<string> GenerateBuildEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task<string> Formatted event definition. InjectEventAsync(CsEvent, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and injects into the managed source container. Declaration public Task InjectEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.EventAfter, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the event will be injected, default is after the event definitions string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task Implements IEventBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseFieldBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseFieldBuilder.html",
    "title": "Class BaseFieldBuilder | CodeFactory for Windows",
    "keywords": "Class BaseFieldBuilder Base class implementation for all field builders. Inheritance object BaseFieldBuilder Implements IFieldBuilder IBuilder Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseFieldBuilder : IFieldBuilder, IBuilder Constructors BaseFieldBuilder() Declaration protected BaseFieldBuilder() Properties BuilderType The type of builder that has been implemented. Declaration public BuilderType BuilderType { get; } Property Value Type Description BuilderType Methods BuildFieldAsync(CsField, ISourceManager, int, string, CsType, CsSecurity, bool, IEnumerable<string>, string, bool, bool, bool, string, string, IEnumerable<NamedSyntax>, FieldNameFormatting) Generates the syntax for the field and returns the defined syntax to the caller. Declaration public Task<string> BuildFieldAsync(CsField sourceModel, ISourceManager manager, int indentLevel, string fieldName = null, CsType type = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, string defaultValueSyntax = null, bool staticKeyword = false, bool constantKeyword = false, bool readonlyKeyword = false, string xmlDocumentationSummaryTag = null, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, FieldNameFormatting nameFormat = null) Parameters Type Name Description CsField sourceModel Target field model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string fieldName Optional, the name to create the field as, default is null. CsType type Optional, the c# formatted type name including namespace to set the field to, default is null. CsSecurity security Optional, the security level to set the field to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the event, default is null. string defaultValueSyntax Optional, the default value to set the field to, default is null. bool staticKeyword Optional, set the field to be static, default is false. bool constantKeyword Optional, set the field to be a constant field, default is false. bool readonlyKeyword Optional, set the field to be read only. string xmlDocumentationSummaryTag Optional, set custom information for xml document summary tag. string syntax Provided syntax that will be used in generating the field definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the field definition. FieldNameFormatting nameFormat Optional parameter that determines the name formatting to use with the field. Returns Type Description Task<string> Formatted field definition. GenerateBuildFieldAsync(CsField, ISourceManager, int, string, CsType, CsSecurity, bool, IEnumerable<string>, string, bool, bool, bool, string, string, IEnumerable<NamedSyntax>, FieldNameFormatting) Generates the syntax for the field and returns the defined syntax to the caller. Declaration protected abstract Task<string> GenerateBuildFieldAsync(CsField sourceModel, ISourceManager manager, int indentLevel, string fieldName = null, CsType type = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, string defaultValueSyntax = null, bool staticKeyword = false, bool constantKeyword = false, bool readonlyKeyword = false, string xmlDocumentationSummaryTag = null, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, FieldNameFormatting nameFormat = null) Parameters Type Name Description CsField sourceModel Target field model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string fieldName Optional, the name to create the field as, default is null. CsType type Optional, the c# formatted type name including namespace to set the field to, default is null. CsSecurity security Optional, the security level to set the field to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the event, default is null. string defaultValueSyntax Optional, the default value to set the field to, default is null. bool staticKeyword Optional, set the field to be static, default is false. bool constantKeyword Optional, set the field to be a constant field, default is false. bool readonlyKeyword Optional, set the field to be read only. string xmlDocumentationSummaryTag Optional, set custom information for xml document summary tag. string syntax Provided syntax that will be used in generating the field definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the field definition. FieldNameFormatting nameFormat Optional parameter that determines the name formatting to use with the field. Returns Type Description Task<string> Formatted field definition. InjectFieldAsync(CsField, ISourceManager, int, InjectionLocation, string, CsType, CsSecurity, bool, IEnumerable<string>, string, bool, bool, bool, string, string, IEnumerable<NamedSyntax>, FieldNameFormatting) Generates the syntax for the field and injects into the managed source container. Declaration public Task InjectFieldAsync(CsField sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.FieldAfter, string fieldName = null, CsType type = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, string defaultValueSyntax = null, bool staticKeyword = false, bool constantKeyword = false, bool readonlyKeyword = false, string xmlDocumentationSummaryTag = null, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, FieldNameFormatting nameFormat = null) Parameters Type Name Description CsField sourceModel Target field model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the field will be injected, default is after the field definitions string fieldName Optional, the name to create the field as, default is null. CsType type Optional, the c# formatted type name including namespace to set the field to, default is null. CsSecurity security Optional, the security level to set the field to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the event, default is null. string defaultValueSyntax Optional, the default value to set the field to, default is null. bool staticKeyword Optional, set the field to be static, default is false. bool constantKeyword Optional, set the field to be a constant field, default is false. bool readonlyKeyword Optional, set the field to be read only. string xmlDocumentationSummaryTag Optional, set custom information for xml document summary tag. string syntax Provided syntax that will be used in generating the field definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the field definition. FieldNameFormatting nameFormat Optional parameter that determines the name formatting to use with the field. Returns Type Description Task Implements IFieldBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseFinallyBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseFinallyBlock.html",
    "title": "Class BaseFinallyBlock | CodeFactory for Windows",
    "keywords": "Class BaseFinallyBlock Base class implementation of the finally block Inheritance object BaseFinallyBlock FinallyBlockStandard Implements IFinallyBlock IBlock Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseFinallyBlock : IFinallyBlock, IBlock Constructors BaseFinallyBlock(ILoggerBlock) Base constructure for the BaseFinallyBlock Declaration protected BaseFinallyBlock(ILoggerBlock loggerBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the loggerblock. Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType LoggerBlock The logger block supporting the finally block, this is optional. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods BuildFinallyBlock(string, IEnumerable<NamedSyntax>, string) Builds the finally block Declaration protected abstract string BuildFinallyBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the finally block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the finally block,optional parameter. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(IEnumerable<NamedSyntax>, string) Generates the finally block Declaration public string GenerateFinallyBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string) Generates the finally block Declaration public string GenerateFinallyBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string, IEnumerable<NamedSyntax>, string) Generates the finally block Declaration public string GenerateFinallyBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the finally block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string, string) Generates the finally block Declaration public string GenerateFinallyBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block Implements IFinallyBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseLoggerBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseLoggerBlock.html",
    "title": "Class BaseLoggerBlock | CodeFactory for Windows",
    "keywords": "Class BaseLoggerBlock Base implementation of a logger block. Inheritance object BaseLoggerBlock LoggerBlockMicrosoft Implements ILoggerBlock IBlock Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseLoggerBlock : ILoggerBlock, IBlock Constructors BaseLoggerBlock(string, string, string, string, string, string, string) Constructor for the base class implementation. Declaration protected BaseLoggerBlock(string fieldName, string traceMethodName, string debugMethodName, string informationMethodName, string warningMethodName, string errorMethodName, string criticalMethodName) Parameters Type Name Description string fieldName The name of the logger field. string traceMethodName The name of the trace method. string debugMethodName The name of the debug method. string informationMethodName The name of the information method. string warningMethodName The name of the warning method. string errorMethodName The name of the error method. string criticalMethodName The name of the critical method. Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType CriticalMethodName Method name for the critical method. Declaration public string CriticalMethodName { get; } Property Value Type Description string DebugMethodName Method name for the debug method. Declaration public string DebugMethodName { get; } Property Value Type Description string ErrorMethodName Method name for the error method. Declaration public string ErrorMethodName { get; } Property Value Type Description string InformationMethodName Method name for the information method. Declaration public string InformationMethodName { get; } Property Value Type Description string LoggerFieldName the field name used for Generating logger Name. Declaration public string LoggerFieldName { get; } Property Value Type Description string TraceMethodName Method name for the trace method. Declaration public string TraceMethodName { get; } Property Value Type Description string WarningMethodName Method name for the warning method. Declaration public string WarningMethodName { get; } Property Value Type Description string Methods GenerateEnterLogging(LogLevel, string) Generates a logging message entering the target member name. Declaration public abstract string GenerateEnterLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. GenerateExitLogging(LogLevel, string) Generates a logging message exiting the target member name. Declaration public abstract string GenerateExitLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. GenerateLogging(LogLevel, string, bool, string) Create formatted logging to be used with automation. Declaration public abstract string GenerateLogging(LogLevel level, string message, bool isFormattedMessage = false, string exceptionName = null) Parameters Type Name Description LogLevel level The logging level for the logger Name. string message the target message for logging. bool isFormattedMessage optional parameter that determines if the string uses a $ formatted string for the message with double quotes in the formatted output. string exceptionName Optional parameter to pass the exception field name to be included with the logging. Returns Type Description string The formatted logging Name to be Generated. If no message is provided will return null. LogMethodName(LogLevel) Returns the name of the method used by the logging framework based on the provided logging level. Declaration public string LogMethodName(LogLevel level) Parameters Type Name Description LogLevel level The logging level to get the method name for. Returns Type Description string The logging method name based on the logging level. Implements ILoggerBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseMethodBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseMethodBuilder.html",
    "title": "Class BaseMethodBuilder | CodeFactory for Windows",
    "keywords": "Class BaseMethodBuilder Base implementation for method builders. Inheritance object BaseMethodBuilder MethodBuilderStandard Implements IMethodBuilder IBuilder Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseMethodBuilder : IMethodBuilder, IBuilder Constructors BaseMethodBuilder(ILoggerBlock, IEnumerable<IBoundsCheckBlock>, ITryBlock) Base constructor for method builders. Declaration protected BaseMethodBuilder(ILoggerBlock loggerBlock = null, IEnumerable<IBoundsCheckBlock> boundsCheckBlocks = null, ITryBlock tryBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Logger block to be used by the method builder, default is null. IEnumerable<IBoundsCheckBlock> boundsCheckBlocks Enumeration of bounds check blocks to be used by the method builder, default is null. ITryBlock tryBlock Try block to be used by the method builder, default is null. Properties BoundsChecksBlocks Bound check blocks assigned to this builder, this is optional and will be an empty list if none are provided. Declaration public IEnumerable<IBoundsCheckBlock> BoundsChecksBlocks { get; } Property Value Type Description IEnumerable<IBoundsCheckBlock> BuilderType The type of builder that has been implemented. Declaration public BuilderType BuilderType { get; } Property Value Type Description BuilderType LoggerBlock The logger assigned to this builder, this is optional and can be null. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock TryBlock Try block assigned to this builder, this is optional and can be null. Declaration public ITryBlock TryBlock { get; } Property Value Type Description ITryBlock Methods BuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and returns the defined syntax to the caller. Declaration public Task<string> BuildMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task<string> Formatted method definition. GenerateBuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and returns the defined syntax to the caller. Declaration public abstract Task<string> GenerateBuildMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task<string> Formatted method definition. InjectMethodAsync(CsMethod, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and injects into the managed source container. Declaration public Task InjectMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.MethodAfter, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the method will be injected, default is after the method definitions string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task Implements IMethodBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BasePropertyBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BasePropertyBuilder.html",
    "title": "Class BasePropertyBuilder | CodeFactory for Windows",
    "keywords": "Class BasePropertyBuilder Base class implementation for all property builders. Inheritance object BasePropertyBuilder PropertyBuilderStandard Implements IPropertyBuilder IBuilder Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BasePropertyBuilder : IPropertyBuilder, IBuilder Constructors BasePropertyBuilder(ILoggerBlock, ITryBlock) Base constructor that initializes base class logic. Declaration protected BasePropertyBuilder(ILoggerBlock loggerBlock = null, ITryBlock tryBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional logger block that can be used with building, default is null. ITryBlock tryBlock Optional try block that can be used with building, default is null. Properties BuilderType The type of builder that has been implemented. Declaration public BuilderType BuilderType { get; } Property Value Type Description BuilderType LoggerBlock Logger block that can be used to add logging. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock TryBlock Try block that can be used for syntax implementation. Declaration public ITryBlock TryBlock { get; } Property Value Type Description ITryBlock Methods BuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and returns the defined syntax to the caller. Declaration public Task<string> BuildPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task<string> Formatted property definition. GenerateBuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and returns the defined syntax to the caller. Declaration public abstract Task<string> GenerateBuildPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task<string> Formatted property definition. InjectPropertyAsync(CsProperty, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and injects into the managed source container. Declaration public Task InjectPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.PropertyAfter, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the property will be injected, default is after the property definitions string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task Implements IPropertyBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseSyntaxBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseSyntaxBuilder.html",
    "title": "Class BaseSyntaxBuilder | CodeFactory for Windows",
    "keywords": "Class BaseSyntaxBuilder Base implementation for syntax builders. Inheritance object BaseSyntaxBuilder Implements ISyntaxBuilder IBuilder Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseSyntaxBuilder : ISyntaxBuilder, IBuilder Constructors BaseSyntaxBuilder() Declaration protected BaseSyntaxBuilder() Properties BuilderType The type of builder that has been implemented. Declaration public BuilderType BuilderType { get; } Property Value Type Description BuilderType Methods BuildSyntaxAsync(CsModel, ISourceManager, int) Generates syntax from the provided model. Declaration public Task<string> BuildSyntaxAsync(CsModel sourceModel, ISourceManager manager, int indentLevel) Parameters Type Name Description CsModel sourceModel Source C# model to generate syntax from. ISourceManager manager Source manager to provide access to namespace manager and namespace mapping information. int indentLevel The level to indent when generating the syntax. Returns Type Description Task<string> Generated syntax. BuildSyntaxAsync(IEnumerable<NamedModel>, ISourceManager, int) Generates syntax from the provided model. Declaration public Task<string> BuildSyntaxAsync(IEnumerable<NamedModel> sourceModels, ISourceManager manager, int indentLevel) Parameters Type Name Description IEnumerable<NamedModel> sourceModels Enumeration of named source C# models to generate syntax from. ISourceManager manager Source manager to provide access to namespace manager and namespace mapping information. int indentLevel The level to indent when generating the syntax. Returns Type Description Task<string> Generated syntax. GenerateBuildSyntaxAsync(ISourceManager, int, CsModel, IEnumerable<NamedModel>) Generates syntax from the provided model. Declaration protected abstract Task<string> GenerateBuildSyntaxAsync(ISourceManager manager, int indentLevel, CsModel sourceModel = null, IEnumerable<NamedModel> sourceModels = null) Parameters Type Name Description ISourceManager manager Source manager to provide access to namespace manager and namespace mapping information. int indentLevel The level to indent when generating the syntax. CsModel sourceModel Optional, source C# model to generate syntax from, default is null. IEnumerable<NamedModel> sourceModels Optional, enumeration of named source C# models to generate syntax from, default is null. Returns Type Description Task<string> Generated syntax. Implements ISyntaxBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseTryBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BaseTryBlock.html",
    "title": "Class BaseTryBlock | CodeFactory for Windows",
    "keywords": "Class BaseTryBlock Base class implementation of the try block Inheritance object BaseTryBlock TryBlockStandard Implements ITryBlock IBlock Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class BaseTryBlock : ITryBlock, IBlock Constructors BaseTryBlock(ILoggerBlock, IEnumerable<ICatchBlock>, IFinallyBlock) Base constructure for the BaseTryBlock Declaration protected BaseTryBlock(ILoggerBlock loggerBlock = null, IEnumerable<ICatchBlock> catchBlocks = null, IFinallyBlock finallyBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the loggerblock. IEnumerable<ICatchBlock> catchBlocks Optional parameter catch blocks that support the try block. IFinallyBlock finallyBlock Optional parameter finally block that supports the try block. Properties BlockType The type of code block that has been implemented. Declaration public CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType CatchBlocks Catch blocks that support the try block, these are optional. Declaration public IEnumerable<ICatchBlock> CatchBlocks { get; } Property Value Type Description IEnumerable<ICatchBlock> FinallyBlock Finally blick that supports the try block, this is optional. Declaration public IFinallyBlock FinallyBlock { get; } Property Value Type Description IFinallyBlock LoggerBlock The logger block supporting the try block, this is optional. Declaration public ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods BuildTryBlock(string, IEnumerable<NamedSyntax>, string) Builds the try block Declaration protected abstract string BuildTryBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the try block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the try block,optional parameter. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(IEnumerable<NamedSyntax>, string) Generates the try block Declaration public string GenerateTryBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string) Generates the try block Declaration public string GenerateTryBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string, IEnumerable<NamedSyntax>, string) Generates the try block Declaration public string GenerateTryBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the try block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string, string) Generates the try block Declaration public string GenerateTryBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block Implements ITryBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BoundsCheckBlockNull.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BoundsCheckBlockNull.html",
    "title": "Class BoundsCheckBlockNull | CodeFactory for Windows",
    "keywords": "Class BoundsCheckBlockNull Bounds checks for nulls in non value parameter types. Inheritance object BaseBoundsCheckBlock BoundsCheckBlockNull Implements IBoundsCheckBlock IBlock Inherited Members BaseBoundsCheckBlock.BlockType BaseBoundsCheckBlock.Name BaseBoundsCheckBlock.IgnoreWhenDefaultValueIsSet BaseBoundsCheckBlock.LoggerBlock object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class BoundsCheckBlockNull : BaseBoundsCheckBlock, IBoundsCheckBlock, IBlock Constructors BoundsCheckBlockNull(bool, ILoggerBlock) Initializes the bounds check block. Declaration public BoundsCheckBlockNull(bool ignoreWhenDefaultValueIsSet, ILoggerBlock loggerBlock) Parameters Type Name Description bool ignoreWhenDefaultValueIsSet Flag that determines if the bounds checking should be ignored if a default value is set. ILoggerBlock loggerBlock Logger block used with bounds check logic. Methods GenerateBoundsCheck(CsMethod, CsParameter) Generates the bounds check syntax if the parameter meets the criteria for a bounds check. Declaration public override (bool hasBoundsCheck, string boundsCheckSyntax) GenerateBoundsCheck(CsMethod sourceMethod, CsParameter checkParameter) Parameters Type Name Description CsMethod sourceMethod The target method the parameter belongs to. CsParameter checkParameter The parameter to build the bounds check for. Returns Type Description (bool hasBoundsCheck, string boundsCheckSyntax) Returns a tuple that contains a boolean that determines if the bounds check syntax was created for the parameter. Overrides BaseBoundsCheckBlock.GenerateBoundsCheck(CsMethod, CsParameter) Implements IBoundsCheckBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BoundsCheckBlockString.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BoundsCheckBlockString.html",
    "title": "Class BoundsCheckBlockString | CodeFactory for Windows",
    "keywords": "Class BoundsCheckBlockString Bounds checks a parameter that has a string is not null or empty. Inheritance object BaseBoundsCheckBlock BoundsCheckBlockString Implements IBoundsCheckBlock IBlock Inherited Members BaseBoundsCheckBlock.BlockType BaseBoundsCheckBlock.Name BaseBoundsCheckBlock.IgnoreWhenDefaultValueIsSet BaseBoundsCheckBlock.LoggerBlock object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class BoundsCheckBlockString : BaseBoundsCheckBlock, IBoundsCheckBlock, IBlock Constructors BoundsCheckBlockString(bool, ILoggerBlock) Initializes the bounds check block. Declaration public BoundsCheckBlockString(bool ignoreWhenDefaultValueIsSet, ILoggerBlock loggerBlock) Parameters Type Name Description bool ignoreWhenDefaultValueIsSet Flag that determines if the bounds checking should be ignored if a default value is set. ILoggerBlock loggerBlock Logger block used with bounds check logic. Methods GenerateBoundsCheck(CsMethod, CsParameter) Generates the bounds check syntax if the parameter meets the criteria for a bounds check. Declaration public override (bool hasBoundsCheck, string boundsCheckSyntax) GenerateBoundsCheck(CsMethod sourceMethod, CsParameter checkParameter) Parameters Type Name Description CsMethod sourceMethod The target method the parameter belongs to. CsParameter checkParameter The parameter to build the bounds check for. Returns Type Description (bool hasBoundsCheck, string boundsCheckSyntax) Returns a tuple that contains a boolean that determines if the bounds check syntax was created for the parameter. Overrides BaseBoundsCheckBlock.GenerateBoundsCheck(CsMethod, CsParameter) Implements IBoundsCheckBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.BuilderType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.BuilderType.html",
    "title": "Enum BuilderType | CodeFactory for Windows",
    "keywords": "Enum BuilderType The type of builder supported by CodeFactory automation. Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public enum BuilderType Fields Name Description Event Builds a event definition. Field Builds a member field definition. Method Buildsa method definition. Property Builds a property definition. Syntax Builds syntax from source C# model definitions."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.CatchBlockStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.CatchBlockStandard.html",
    "title": "Class CatchBlockStandard | CodeFactory for Windows",
    "keywords": "Class CatchBlockStandard Catch basic code block standard implementation. Supports injection of syntax inside the catch block, or generation of standard logging and rethrow of exception. Inheritance object BaseCatchBlock CatchBlockStandard Implements ICatchBlock IBlock Inherited Members BaseCatchBlock.GenerateCatchBlock(string) BaseCatchBlock.GenerateCatchBlock(string, string) BaseCatchBlock.GenerateCatchBlock(IEnumerable<NamedSyntax>, string) BaseCatchBlock.GenerateCatchBlock(string, IEnumerable<NamedSyntax>, string) BaseCatchBlock.BlockType BaseCatchBlock.LoggerBlock object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class CatchBlockStandard : BaseCatchBlock, ICatchBlock, IBlock Constructors CatchBlockStandard(ILoggerBlock) Creates a instance of the code block. Declaration public CatchBlockStandard(ILoggerBlock loggerBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the logger block. Methods BuildCatchBlock(string, IEnumerable<NamedSyntax>, string) Builds the catch block Declaration protected override string BuildCatchBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the catch block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the catch block,optional parameter. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block Overrides BaseCatchBlock.BuildCatchBlock(string, IEnumerable<NamedSyntax>, string) Implements ICatchBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.CodeBlockType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.CodeBlockType.html",
    "title": "Enum CodeBlockType | CodeFactory for Windows",
    "keywords": "Enum CodeBlockType Categories of code block types used with building C# code. Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public enum CodeBlockType Fields Name Description BoundsCheck Implements a bounds check block of code. Catch Implements a catch code block statement. Custom Code block is a custom implementation of a code block. Finally Implements a finally code block statement. Logging Implements a logging code block. Try Implements a try code block statement."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.EventBuilderStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.EventBuilderStandard.html",
    "title": "Class EventBuilderStandard | CodeFactory for Windows",
    "keywords": "Class EventBuilderStandard Builder that builds a standard event definition in C# language. Inheritance object BaseEventBuilder EventBuilderStandard Implements IEventBuilder IBuilder Inherited Members BaseEventBuilder.BuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) BaseEventBuilder.InjectEventAsync(CsEvent, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) BaseEventBuilder.BuilderType object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class EventBuilderStandard : BaseEventBuilder, IEventBuilder, IBuilder Constructors EventBuilderStandard() Creates a new instance of EventBuilderStandard Declaration public EventBuilderStandard() Methods GenerateBuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and returns the defined syntax to the caller. Declaration protected override Task<string> GenerateBuildEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task<string> Formatted event definition. Overrides BaseEventBuilder.GenerateBuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Implements IEventBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.FieldNameFormatting.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.FieldNameFormatting.html",
    "title": "Class FieldNameFormatting | CodeFactory for Windows",
    "keywords": "Class FieldNameFormatting Helper class that provides name formatting options to be used with field builders. Inheritance object NameFormatting FieldNameFormatting Inherited Members NameFormatting.NamePrefix NameFormatting.NameSuffix object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class FieldNameFormatting : NameFormatting Constructors FieldNameFormatting() Declaration public FieldNameFormatting() Properties UseCamelCase Flag that determines if the field name should use camel case. Declaration public bool UseCamelCase { get; set; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.FinallyBlockStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.FinallyBlockStandard.html",
    "title": "Class FinallyBlockStandard | CodeFactory for Windows",
    "keywords": "Class FinallyBlockStandard Finally basic code block standard implementation. Supports injection of syntax inside the finally block. Inheritance object BaseFinallyBlock FinallyBlockStandard Implements IFinallyBlock IBlock Inherited Members BaseFinallyBlock.GenerateFinallyBlock(string) BaseFinallyBlock.GenerateFinallyBlock(string, string) BaseFinallyBlock.GenerateFinallyBlock(IEnumerable<NamedSyntax>, string) BaseFinallyBlock.GenerateFinallyBlock(string, IEnumerable<NamedSyntax>, string) BaseFinallyBlock.BlockType BaseFinallyBlock.LoggerBlock object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class FinallyBlockStandard : BaseFinallyBlock, IFinallyBlock, IBlock Constructors FinallyBlockStandard(ILoggerBlock) Creates a instance of the code block. Declaration public FinallyBlockStandard(ILoggerBlock loggerBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the logger block. Methods BuildFinallyBlock(string, IEnumerable<NamedSyntax>, string) Builds the finally block Declaration protected override string BuildFinallyBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the finally block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the finally block,optional parameter. string memberName Optional parameter that provides the name of the member to be used in the finally block logic. Returns Type Description string Returns the generated finally block Overrides BaseFinallyBlock.BuildFinallyBlock(string, IEnumerable<NamedSyntax>, string) Implements IFinallyBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IBlock.html",
    "title": "Interface IBlock | CodeFactory for Windows",
    "keywords": "Interface IBlock Contract definition all Blocks must implement Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IBlock Properties BlockType The type of code block that has been implemented. Declaration CodeBlockType BlockType { get; } Property Value Type Description CodeBlockType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IBoundsCheckBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IBoundsCheckBlock.html",
    "title": "Interface IBoundsCheckBlock | CodeFactory for Windows",
    "keywords": "Interface IBoundsCheckBlock Contract all bounds checking code blocks must implement. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IBoundsCheckBlock : IBlock Properties IgnoreWhenDefaultValueIsSet Flag that determines if a bounds check should be ignored if the parameter has a default value set. Declaration bool IgnoreWhenDefaultValueIsSet { get; } Property Value Type Description bool LoggerBlock The logger block assigned to this bounds check. Declaration ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Name Unique name assigned to identify the type of bounds check being performed. Declaration string Name { get; } Property Value Type Description string Methods GenerateBoundsCheck(CsMethod, CsParameter) Generates the bounds check syntax if the parameter meets the criteria for a bounds check. Declaration (bool hasBoundsCheck, string boundsCheckSyntax) GenerateBoundsCheck(CsMethod sourceMethod, CsParameter checkParameter) Parameters Type Name Description CsMethod sourceMethod The target method the parameter belongs to. CsParameter checkParameter The parameter to build the bounds check for. Returns Type Description (bool hasBoundsCheck, string boundsCheckSyntax) Returns a tuple that contains a boolean that determines if the bounds check syntax was created for the parameter."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IBuildManagement.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IBuildManagement.html",
    "title": "Interface IBuildManagement | CodeFactory for Windows",
    "keywords": "Interface IBuildManagement Definition of core management functionality that is used during build of functionality. Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IBuildManagement Properties MappedNamespaces Mapped namespaces used for model moving from a source to a new target. Declaration List<MapNamespace> MappedNamespaces { get; } Property Value Type Description List<MapNamespace> NamespaceManager The namespace manager that is used for updating source. Declaration NamespaceManager NamespaceManager { get; } Property Value Type Description NamespaceManager VsActions The code factory actions for visual studio to be used with updates to the source. Declaration IVsActions VsActions { get; } Property Value Type Description IVsActions Methods LoadNamespaceManager() Loads a new instance of a NamespaceManager from the current source and assigns it to the NamespaceManager property. Declaration void LoadNamespaceManager() Exceptions Type Condition ArgumentNullException Thrown if either the source is null. UpdateMappedNamespaces(List<MapNamespace>) Refreshes the mapped namespaces. Declaration void UpdateMappedNamespaces(List<MapNamespace> mappedNamespaces) Parameters Type Name Description List<MapNamespace> mappedNamespaces the mapped namespaces to add to management. UpdateNamespaceManager(NamespaceManager) Refreshes the current version of the namespace manager for the sources. Declaration void UpdateNamespaceManager(NamespaceManager namespaceManager) Parameters Type Name Description NamespaceManager namespaceManager Updated namespace to register Exceptions Type Condition ArgumentNullException Thrown if the namespace manager is null. UsingStatementAddAsync(string, string) Creates a new using statement in the source if the using statement does not exist. It will also reload the namespace manager and update it. Declaration Task UsingStatementAddAsync(string nameSpace, string alias = null) Parameters Type Name Description string nameSpace Namespace to add to the source file. string alias Optional parameter to assign a alias to the using statement. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source is null."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IBuilder.html",
    "title": "Interface IBuilder | CodeFactory for Windows",
    "keywords": "Interface IBuilder Base contract defintion all builders must inherit from. Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IBuilder Properties BuilderType The type of builder that has been implemented. Declaration BuilderType BuilderType { get; } Property Value Type Description BuilderType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ICatchBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ICatchBlock.html",
    "title": "Interface ICatchBlock | CodeFactory for Windows",
    "keywords": "Interface ICatchBlock Contract definition all catch block implementation should implement. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ICatchBlock : IBlock Properties LoggerBlock The logger block supporting the catch block, this is optional. Declaration ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods GenerateCatchBlock(IEnumerable<NamedSyntax>, string) Generates the catch block Declaration string GenerateCatchBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string) Generates the catch block Declaration string GenerateCatchBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string, IEnumerable<NamedSyntax>, string) Generates the Catch block Declaration string GenerateCatchBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the Catch block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the Catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block GenerateCatchBlock(string, string) Generates the catch block Declaration string GenerateCatchBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the catch block. string memberName Optional parameter that determines the target member the catch block is implemented in. Returns Type Description string Returns the generated catch block"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ICustomBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ICustomBlock.html",
    "title": "Interface ICustomBlock | CodeFactory for Windows",
    "keywords": "Interface ICustomBlock Contract definition all custom blocks implementation should implement. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ICustomBlock : IBlock Methods GenerateBlock(IEnumerable<NamedSyntax>, string) Generates the block Declaration string GenerateBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string) Generates the block Declaration string GenerateBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string, IEnumerable<NamedSyntax>, string) Generates the block Declaration string GenerateBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block GenerateBlock(string, string) Generates the block Declaration string GenerateBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the block. string memberName Optional parameter that determines the target member the block is implemented in. Returns Type Description string Returns the generated block"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IEventBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IEventBuilder.html",
    "title": "Interface IEventBuilder | CodeFactory for Windows",
    "keywords": "Interface IEventBuilder Base contract all event builders have to implement. Inherited Members IBuilder.BuilderType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IEventBuilder : IBuilder Methods BuildEventAsync(CsEvent, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and returns the defined syntax to the caller. Declaration Task<string> BuildEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task<string> Formatted event definition. InjectEventAsync(CsEvent, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the event and injects into the managed source container. Declaration Task InjectEventAsync(CsEvent sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.EventAfter, string eventName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsEvent sourceModel Target event model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the event will be injected, default is after the event definitions string eventName Optional, the name to create the event as, default is null. CsSecurity security Optional, the security level to set the event to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. bool includeKeywords Optional,flag that determines if the events original key words will be included in the definition, default is false. bool includeAbstractKeyword Optional, flag that determines if the events original keywords are being added if the abstract keyword will also be added if is defined, default is false. bool abstractKeyword Optional, defines if the event should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the event definition, default is false. bool staticKeyword Optional, set the event to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the event definition, default is false. bool overrideKeyword Optional, flag that determines if the keyword override is added to the event declaration, default is false. string syntax Provided syntax that will be used in generating the event definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the event definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the event. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IFieldBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IFieldBuilder.html",
    "title": "Interface IFieldBuilder | CodeFactory for Windows",
    "keywords": "Interface IFieldBuilder Base contract all field builders have to implement. Inherited Members IBuilder.BuilderType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IFieldBuilder : IBuilder Methods BuildFieldAsync(CsField, ISourceManager, int, string, CsType, CsSecurity, bool, IEnumerable<string>, string, bool, bool, bool, string, string, IEnumerable<NamedSyntax>, FieldNameFormatting) Generates the syntax for the field and returns the defined syntax to the caller. Declaration Task<string> BuildFieldAsync(CsField sourceModel, ISourceManager manager, int indentLevel, string fieldName = null, CsType type = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, string defaultValueSyntax = null, bool staticKeyword = false, bool constantKeyword = false, bool readonlyKeyword = false, string xmlDocumentationSummaryTag = null, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, FieldNameFormatting nameFormat = null) Parameters Type Name Description CsField sourceModel Target field model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string fieldName Optional, the name to create the field as, default is null. CsType type Optional, the c# formatted type name including namespace to set the field to, default is null. CsSecurity security Optional, the security level to set the field to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. string defaultValueSyntax Optional, the default value to set the field to, default is null. bool staticKeyword Optional, set the field to be static, default is false. bool constantKeyword Optional, set the field to be a constant field, default is false. bool readonlyKeyword Optional, set the field to be read only. string xmlDocumentationSummaryTag string syntax Provided syntax that will be used in generating the field definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the field definition. FieldNameFormatting nameFormat Optional parameter that determines the name formatting to use with the field. Returns Type Description Task<string> Formatted field definition. InjectFieldAsync(CsField, ISourceManager, int, InjectionLocation, string, CsType, CsSecurity, bool, IEnumerable<string>, string, bool, bool, bool, string, string, IEnumerable<NamedSyntax>, FieldNameFormatting) Generates the syntax for the field and injects into the managed source container. Declaration Task InjectFieldAsync(CsField sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.FieldAfter, string fieldName = null, CsType type = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, string defaultValueSyntax = null, bool staticKeyword = false, bool constantKeyword = false, bool readonlyKeyword = false, string xmlDocumentationSummaryTag = null, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, FieldNameFormatting nameFormat = null) Parameters Type Name Description CsField sourceModel Target field model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the field will be injected, default is after the field definitions string fieldName Optional, the name to create the field as, default is null. CsType type Optional, the c# formatted type name including namespace to set the field to, default is null. CsSecurity security Optional, the security level to set the field to, default is unknown. bool includeAttributes Optional, determines if the event attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the event - will need to use the full name of the attribute, default is null. string defaultValueSyntax Optional, the default value to set the field to, default is null. bool staticKeyword Optional, set the field to be static, default is false. bool constantKeyword Optional, set the field to be a constant field, default is false. bool readonlyKeyword Optional, set the field to be read only. string xmlDocumentationSummaryTag string syntax Provided syntax that will be used in generating the field definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the field definition. FieldNameFormatting nameFormat Optional parameter that determines the name formatting to use with the field. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IFinallyBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IFinallyBlock.html",
    "title": "Interface IFinallyBlock | CodeFactory for Windows",
    "keywords": "Interface IFinallyBlock Contract definition all finally block implementation should implement. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IFinallyBlock : IBlock Properties LoggerBlock The logger block supporting the finally block, this is optional. Declaration ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods GenerateFinallyBlock(IEnumerable<NamedSyntax>, string) Generates the finally block Declaration string GenerateFinallyBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string) Generates the finally block Declaration string GenerateFinallyBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string, IEnumerable<NamedSyntax>, string) Generates the Finally block Declaration string GenerateFinallyBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the Finally block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the Finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block GenerateFinallyBlock(string, string) Generates the finally block Declaration string GenerateFinallyBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the finally block. string memberName Optional parameter that determines the target member the finally block is implemented in. Returns Type Description string Returns the generated finally block"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ILoggerBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ILoggerBlock.html",
    "title": "Interface ILoggerBlock | CodeFactory for Windows",
    "keywords": "Interface ILoggerBlock Contract definition for implementation of a logger block. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ILoggerBlock : IBlock Properties CriticalMethodName Method name for the critical method. Declaration string CriticalMethodName { get; } Property Value Type Description string DebugMethodName Method name for the debug method. Declaration string DebugMethodName { get; } Property Value Type Description string ErrorMethodName Method name for the error method. Declaration string ErrorMethodName { get; } Property Value Type Description string InformationMethodName Method name for the information method. Declaration string InformationMethodName { get; } Property Value Type Description string LoggerFieldName The field name used for Generateing logger Name. Declaration string LoggerFieldName { get; } Property Value Type Description string TraceMethodName Method name for the trace method. Declaration string TraceMethodName { get; } Property Value Type Description string WarningMethodName Method name for the warning method. Declaration string WarningMethodName { get; } Property Value Type Description string Methods GenerateEnterLogging(LogLevel, string) Generates a logging message entering the target member name. Declaration string GenerateEnterLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. GenerateExitLogging(LogLevel, string) Generates a logging message exiting the target member name. Declaration string GenerateExitLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. GenerateLogging(LogLevel, string, bool, string) Create formatted logging to be used with automation. Declaration string GenerateLogging(LogLevel level, string message, bool isFormattedMessage = false, string exceptionName = null) Parameters Type Name Description LogLevel level The logging level for the logger Name. string message the target message for logging. bool isFormattedMessage optional parameter that determines if the string uses a $ formatted string for the message. string exceptionName Optional parameter to pass the exception field name to be included with the logging. Returns Type Description string The formatted logging Name to be Generateed. If no message is provided will return null. LogMethodName(LogLevel) Returns the name of the method used by the logging framework based on the provided logging level. Declaration string LogMethodName(LogLevel level) Parameters Type Name Description LogLevel level The logging level to get the method name for. Returns Type Description string The logging method name based on the logging level."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IMethodBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IMethodBuilder.html",
    "title": "Interface IMethodBuilder | CodeFactory for Windows",
    "keywords": "Interface IMethodBuilder Base contract all method builders have to implement. Inherited Members IBuilder.BuilderType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IMethodBuilder : IBuilder Methods BuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and returns the defined syntax to the caller. Declaration Task<string> BuildMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task<string> Formatted method definition. InjectMethodAsync(CsMethod, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and injects into the managed source container. Declaration Task InjectMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.MethodAfter, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the method will be injected, default is after the method definitions string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.IPropertyBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.IPropertyBuilder.html",
    "title": "Interface IPropertyBuilder | CodeFactory for Windows",
    "keywords": "Interface IPropertyBuilder Base contract all property builders have to implement. Inherited Members IBuilder.BuilderType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface IPropertyBuilder : IBuilder Methods BuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and returns the defined syntax to the caller. Declaration Task<string> BuildPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task<string> Formatted property definition. InjectPropertyAsync(CsProperty, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and injects into the managed source container. Declaration Task InjectPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, InjectionLocation location = InjectionLocation.PropertyAfter, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. InjectionLocation location The location the property will be injected, default is after the property definitions string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ISourceContainerManager-1.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ISourceContainerManager-1.html",
    "title": "Interface ISourceContainerManager<TContainerType> | CodeFactory for Windows",
    "keywords": "Interface ISourceContainerManager<TContainerType> Contract that is used to track the source code and target container that is being updated. Inherited Members ISourceManager.AddByInjectionLocationAsync(string, InjectionLocation) ISourceManager.SourceAddToBeginningAsync(string) ISourceManager.SourceAddToBeginningTransactionAsync(string) ISourceManager.SourceAddToEndAsync(string) ISourceManager.SourceAddToEndTransactionAsync(string) ISourceManager.ContainerAddBeforeAsync(string) ISourceManager.ContainerAddBeforeTransactionAsync(string) ISourceManager.ContainerAddAfterAsync(string) ISourceManager.ContainerAddAfterTransactionAsync(string) ISourceManager.ContainerAddToBeginningAsync(string) ISourceManager.ContainerAddToBeginningTransactionAsync(string) ISourceManager.ContainerAddToEndAsync(string) ISourceManager.ContainerAddToEndTransactionAsync(string) ISourceManager.UsingStatementsAddBeforeAsync(string) ISourceManager.UsingStatementsAddBeforeTransactionAsync(string) ISourceManager.UsingStatementsAddAfterAsync(string) ISourceManager.UsingStatementsAddAfterTransactionAsync(string) ISourceManager.FieldsAddBeforeAsync(string) ISourceManager.FieldsAddBeforeTransactionAsync(string) ISourceManager.FieldsAddAfterAsync(string) ISourceManager.FieldsAddAfterTransactionAsync(string) ISourceManager.ConstructorsAddBeforeAsync(string) ISourceManager.ConstructorsAddBeforeTransactionAsync(string) ISourceManager.ConstructorsAddAfterAsync(string) ISourceManager.ConstructorsAddAfterTransactionAsync(string) ISourceManager.PropertiesAddBeforeAsync(string) ISourceManager.PropertiesAddBeforeTransactionAsync(string) ISourceManager.PropertiesAddAfterAsync(string) ISourceManager.PropertiesAddAfterTransactionAsync(string) ISourceManager.EventsAddBeforeAsync(string) ISourceManager.EventsAddBeforeTransactionAsync(string) ISourceManager.EventsAddAfterAsync(string) ISourceManager.EventsAddAfterTransactionAsync(string) ISourceManager.MethodsAddBeforeAsync(string) ISourceManager.MethodsAddBeforeTransactionAsync(string) ISourceManager.MethodsAddAfterAsync(string) ISourceManager.MethodsAddAfterTransactionAsync(string) ISourceManager.MemberAddBeforeAsync(CsMember, string) ISourceManager.MemberAddBeforeTransactionAsync(CsMember, string) ISourceManager.MemberAddAfterAsync(CsMember, string) ISourceManager.MemberAddAfterTransactionAsync(CsMember, string) ISourceManager.MemberCommentOut(CsMember, string) ISourceManager.MemberReplaceAsync(CsMember, string) ISourceManager.MemberReplaceTransactionAsync(CsMember, string) ISourceManager.MemberRemoveAsync(CsMember) ISourceManager.NestedEnumAddBeforeAsync(string) ISourceManager.NestedEnumAddBeforeTransactionAsync(string) ISourceManager.NestedEnumAddAfterAsync(string) ISourceManager.NestedEnumAddAfterTransactionAsync(string) ISourceManager.NestedEnumRemoveAsync(CsEnum) ISourceManager.NestedEnumReplaceAsync(CsEnum, string) ISourceManager.NestedEnumReplaceTransactionAsync(CsEnum, string) ISourceManager.NestedInterfaceAddBeforeAsync(string) ISourceManager.NestedInterfaceAddBeforeTransactionAsync(string) ISourceManager.NestedInterfaceAddAfterAsync(string) ISourceManager.NestedInterfaceAddAfterTransactionAsync(string) ISourceManager.NestedInterfaceRemoveAsync(CsInterface) ISourceManager.NestedInterfaceReplaceAsync(CsInterface, string) ISourceManager.NestedInterfaceReplaceTransactionAsync(CsInterface, string) ISourceManager.NestedStructuresAddBeforeAsync(string) ISourceManager.NestedStructuresAddBeforeTransactionAsync(string) ISourceManager.NestedStructuresAddAfterAsync(string) ISourceManager.NestedStructuresAddAfterTransactionAsync(string) ISourceManager.NestedStructureRemoveAsync(CsStructure) ISourceManager.NestedStructureReplaceAsync(CsStructure, string) ISourceManager.NestedStructureReplaceTransactionAsync(CsStructure, string) ISourceManager.NestedClassesAddBeforeAsync(string) ISourceManager.NestedClassesAddBeforeTransactionAsync(string) ISourceManager.NestedClassesAddAfterAsync(string) ISourceManager.NestedClassesAddAfterTransactoinAsync(string) ISourceManager.NestedClassesRemoveAsync(CsClass) ISourceManager.NestedClassesReplaceAsync(CsClass, string) ISourceManager.NestedClassesReplaceTransactionAsync(CsClass, string) ISourceManager.AddMissingUsingStatementsAsync(CsMethod) ISourceManager.AddMissingUsingStatementsAsync(CsProperty) ISourceManager.AddMissingUsingStatementsAsync(CsEvent) ISourceManager.AddMissingUsingStatementsAsync(CsField) ISourceManager.AddMissingUsingStatementsAsync(CsAttribute) ISourceManager.AddMissingUsingStatementsAsync(CsType) ISourceManager.Source IBuildManagement.UpdateMappedNamespaces(List<MapNamespace>) IBuildManagement.UpdateNamespaceManager(NamespaceManager) IBuildManagement.LoadNamespaceManager() IBuildManagement.UsingStatementAddAsync(string, string) IBuildManagement.VsActions IBuildManagement.NamespaceManager IBuildManagement.MappedNamespaces Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ISourceContainerManager<TContainerType> : ISourceManager, IBuildManagement where TContainerType : CsContainer Type Parameters Name Description TContainerType Target type of the container that is being updated. Properties Container Target container being updated. Declaration TContainerType Container { get; } Property Value Type Description TContainerType Methods AddMissingUsingStatementsAsync() Checks all types definitions for the loaded container if the container is not loaded will not add missing using statements. Declaration Task AddMissingUsingStatementsAsync() Returns Type Description Task UpdateSources(CsSource, TContainerType) Refreshes the current version of the update sources. Declaration void UpdateSources(CsSource source, TContainerType container) Parameters Type Name Description CsSource source The updated CsSource. TContainerType container The updates hosting CsContainer type. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ISourceManager.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ISourceManager.html",
    "title": "Interface ISourceManager | CodeFactory for Windows",
    "keywords": "Interface ISourceManager Contract that manages the update to the source tracked by the manager implementation Inherited Members IBuildManagement.UpdateMappedNamespaces(List<MapNamespace>) IBuildManagement.UpdateNamespaceManager(NamespaceManager) IBuildManagement.LoadNamespaceManager() IBuildManagement.UsingStatementAddAsync(string, string) IBuildManagement.VsActions IBuildManagement.NamespaceManager IBuildManagement.MappedNamespaces Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ISourceManager : IBuildManagement Properties Source Target source that is being updated. Declaration CsSource Source { get; } Property Value Type Description CsSource Methods AddByInjectionLocationAsync(string, InjectionLocation) Adds the provided syntax to the target injection location provided. Declaration Task AddByInjectionLocationAsync(string syntax, InjectionLocation location) Parameters Type Name Description string syntax Target syntax to be added. InjectionLocation location The location within the source code file to inject at. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. AddMissingUsingStatementsAsync(CsAttribute) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsAttribute sourceAttribute) Parameters Type Name Description CsAttribute sourceAttribute The target model to check using statements on. Returns Type Description Task Missing using statements added or the original update source if no additional using statements needed. AddMissingUsingStatementsAsync(CsEvent) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsEvent sourceEvent) Parameters Type Name Description CsEvent sourceEvent The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsField) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsField sourceField) Parameters Type Name Description CsField sourceField The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsMethod) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsMethod sourceMethod) Parameters Type Name Description CsMethod sourceMethod The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsProperty) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsProperty sourceProperty) Parameters Type Name Description CsProperty sourceProperty The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsType) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration Task AddMissingUsingStatementsAsync(CsType sourceType) Parameters Type Name Description CsType sourceType The target model to check using statements on. Returns Type Description Task Missing using statements added or the original update source if no additional using statements needed. ConstructorsAddAfterAsync(string) Add the provided syntax after the constructor definitions. Declaration Task ConstructorsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddAfterTransactionAsync(string) Add the provided syntax after the constructor definitions. Declaration Task<TransactionDetail> ConstructorsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeAsync(string) Add the provided syntax before the constructor definitions. Declaration Task ConstructorsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeTransactionAsync(string) Add the provided syntax before the constructor definitions. Declaration Task<TransactionDetail> ConstructorsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddAfterAsync(string) Adds the provided syntax after containers definition. Declaration Task ContainerAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddAfterTransactionAsync(string) Adds the provided syntax after containers definition. Declaration Task<TransactionDetail> ContainerAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddBeforeAsync(string) Adds the provided syntax before the containers definition. Declaration Task ContainerAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddBeforeTransactionAsync(string) Adds the provided syntax before the containers definition. Declaration Task<TransactionDetail> ContainerAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToBeginningAsync(string) Adds the provided syntax to the beginning of the containers definition. Declaration Task ContainerAddToBeginningAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToBeginningTransactionAsync(string) Adds the provided syntax to the beginning of the containers definition. Declaration Task<TransactionDetail> ContainerAddToBeginningTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToEndAsync(string) Adds the provided syntax to the end of the containers definition. Declaration Task ContainerAddToEndAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToEndTransactionAsync(string) Adds the provided syntax to the end of the containers definition. Declaration Task<TransactionDetail> ContainerAddToEndTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddAfterAsync(string) Add the provided syntax after the event definitions. Declaration Task EventsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddAfterTransactionAsync(string) Add the provided syntax after the event definitions. Declaration Task<TransactionDetail> EventsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddBeforeAsync(string) Add the provided syntax before the event definitions. Declaration Task EventsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddBeforeTransactionAsync(string) Add the provided syntax before the event definitions. Declaration Task<TransactionDetail> EventsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterAsync(string) Adds the provided syntax after the field definitions. Declaration Task FieldsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterTransactionAsync(string) Adds the provided syntax after the field definitions. Declaration Task<TransactionDetail> FieldsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeAsync(string) Adds the provided syntax before the field definitions. Declaration Task FieldsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeTransactionAsync(string) Adds the provided syntax before the field definitions. Declaration Task<TransactionDetail> FieldsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberAddAfterAsync(CsMember, string) Add the syntax after the target member. Declaration Task MemberAddAfterAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberAddAfterTransactionAsync(CsMember, string) Add the syntax after the target member. Declaration Task<TransactionDetail> MemberAddAfterTransactionAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberAddBeforeAsync(CsMember, string) Add the syntax before the target member. Declaration Task MemberAddBeforeAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberAddBeforeTransactionAsync(CsMember, string) Add the syntax before the target member. Declaration Task<TransactionDetail> MemberAddBeforeTransactionAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberCommentOut(CsMember, string) Comments out member from the source container. Declaration Task MemberCommentOut(CsMember member, string commentSyntax = \"//\") Parameters Type Name Description CsMember member Target member. string commentSyntax Optional parameters sets the syntax to use when commenting out the member. This will default to use '//' Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberRemoveAsync(CsMember) Removes the target member. Declaration Task MemberRemoveAsync(CsMember member) Parameters Type Name Description CsMember member Target member. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberReplaceAsync(CsMember, string) Syntax replaces the target member. Declaration Task MemberReplaceAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberReplaceTransactionAsync(CsMember, string) Syntax replaces the target member. Declaration Task<TransactionDetail> MemberReplaceTransactionAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddAfterAsync(string) Add the provided syntax after the method definitions. Declaration Task MethodsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddAfterTransactionAsync(string) Add the provided syntax after the method definitions. Declaration Task<TransactionDetail> MethodsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddBeforeAsync(string) Add the provided syntax before the method definitions. Declaration Task MethodsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddBeforeTransactionAsync(string) Add the provided syntax before the method definitions. Declaration Task<TransactionDetail> MethodsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddAfterAsync(string) Add the provided syntax after the nested classes definitions. Declaration Task NestedClassesAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddAfterTransactoinAsync(string) Add the provided syntax after the nested classes definitions. Declaration Task<TransactionDetail> NestedClassesAddAfterTransactoinAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddBeforeAsync(string) Add the provided syntax before the nested classes definitions. Declaration Task NestedClassesAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddBeforeTransactionAsync(string) Add the provided syntax before the nested classes definitions. Declaration Task<TransactionDetail> NestedClassesAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesRemoveAsync(CsClass) Removes the nested class. Declaration Task NestedClassesRemoveAsync(CsClass nested) Parameters Type Name Description CsClass nested The target nested class. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesReplaceAsync(CsClass, string) Replaces the nested class with the provided syntax Declaration Task NestedClassesReplaceAsync(CsClass nested, string syntax) Parameters Type Name Description CsClass nested The target nested class. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesReplaceTransactionAsync(CsClass, string) Replaces the nested class with the provided syntax Declaration Task<TransactionDetail> NestedClassesReplaceTransactionAsync(CsClass nested, string syntax) Parameters Type Name Description CsClass nested The target nested class. string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddAfterAsync(string) Add the provided syntax after the nested enumeration definitions. Declaration Task NestedEnumAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddAfterTransactionAsync(string) Add the provided syntax after the nested enumeration definitions. Declaration Task<TransactionDetail> NestedEnumAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddBeforeAsync(string) Add the provided syntax before the nested enumeration definitions. Declaration Task NestedEnumAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddBeforeTransactionAsync(string) Add the provided syntax before the nested enumeration definitions. Declaration Task<TransactionDetail> NestedEnumAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumRemoveAsync(CsEnum) Removes the nested enumeration. Declaration Task NestedEnumRemoveAsync(CsEnum nested) Parameters Type Name Description CsEnum nested The target nested enumeration. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumReplaceAsync(CsEnum, string) Replaces the nested enumeration with the provided syntax Declaration Task NestedEnumReplaceAsync(CsEnum nested, string syntax) Parameters Type Name Description CsEnum nested The target nested enumeration. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumReplaceTransactionAsync(CsEnum, string) Replaces the nested enumeration with the provided syntax Declaration Task<TransactionDetail> NestedEnumReplaceTransactionAsync(CsEnum nested, string syntax) Parameters Type Name Description CsEnum nested The target nested enumeration. string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddAfterAsync(string) Add the provided syntax after the nested interface definitions. Declaration Task NestedInterfaceAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddAfterTransactionAsync(string) Add the provided syntax after the nested interface definitions. Declaration Task<TransactionDetail> NestedInterfaceAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddBeforeAsync(string) Add the provided syntax before the nested interface definitions. Declaration Task NestedInterfaceAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddBeforeTransactionAsync(string) Add the provided syntax before the nested interface definitions. Declaration Task<TransactionDetail> NestedInterfaceAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceRemoveAsync(CsInterface) Removes the nested interface. Declaration Task NestedInterfaceRemoveAsync(CsInterface nested) Parameters Type Name Description CsInterface nested The target nested interface. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceReplaceAsync(CsInterface, string) Replaces the nested interface with the provided syntax Declaration Task NestedInterfaceReplaceAsync(CsInterface nested, string syntax) Parameters Type Name Description CsInterface nested The target nested interface. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceReplaceTransactionAsync(CsInterface, string) Replaces the nested interface with the provided syntax Declaration Task<TransactionDetail> NestedInterfaceReplaceTransactionAsync(CsInterface nested, string syntax) Parameters Type Name Description CsInterface nested The target nested interface. string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructureRemoveAsync(CsStructure) Removes the nested structure. Declaration Task NestedStructureRemoveAsync(CsStructure nested) Parameters Type Name Description CsStructure nested The target nested structure. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructureReplaceAsync(CsStructure, string) Replaces the nested structure with the provided syntax Declaration Task NestedStructureReplaceAsync(CsStructure nested, string syntax) Parameters Type Name Description CsStructure nested The target nested structure. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructureReplaceTransactionAsync(CsStructure, string) Replaces the nested structure with the provided syntax Declaration Task<TransactionDetail> NestedStructureReplaceTransactionAsync(CsStructure nested, string syntax) Parameters Type Name Description CsStructure nested The target nested structure. string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddAfterAsync(string) Add the provided syntax after the nested structures definitions. Declaration Task NestedStructuresAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddAfterTransactionAsync(string) Add the provided syntax after the nested structures definitions. Declaration Task<TransactionDetail> NestedStructuresAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddBeforeAsync(string) Add the provided syntax before the nested structures definitions. Declaration Task NestedStructuresAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddBeforeTransactionAsync(string) Add the provided syntax before the nested structures definitions. Declaration Task<TransactionDetail> NestedStructuresAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddAfterAsync(string) Add the provided syntax after the property definitions. Declaration Task PropertiesAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddAfterTransactionAsync(string) Add the provided syntax after the property definitions. Declaration Task<TransactionDetail> PropertiesAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddBeforeAsync(string) Add the provided syntax before the property definitions. Declaration Task PropertiesAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddBeforeTransactionAsync(string) Add the provided syntax before the property definitions. Declaration Task<TransactionDetail> PropertiesAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToBeginningAsync(string) Adds the provided syntax to the beginning of the source file. Declaration Task SourceAddToBeginningAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToBeginningTransactionAsync(string) Adds the provided syntax to the beginning of the source file. Declaration Task<TransactionDetail> SourceAddToBeginningTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToEndAsync(string) Adds the provided syntax to the end of the source file. Declaration Task SourceAddToEndAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToEndTransactionAsync(string) Adds the provided syntax to the end of the source file. Declaration Task<TransactionDetail> SourceAddToEndTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UsingStatementsAddAfterAsync(string) Adds the provided syntax before the first using statement definition. Declaration Task UsingStatementsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UsingStatementsAddAfterTransactionAsync(string) Adds the provided syntax before the first using statement definition. Declaration Task<TransactionDetail> UsingStatementsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UsingStatementsAddBeforeAsync(string) Adds the provided syntax before the first using statement definition. Declaration Task UsingStatementsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UsingStatementsAddBeforeTransactionAsync(string) Adds the provided syntax before the first using statement definition. Declaration Task<TransactionDetail> UsingStatementsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ISyntaxBuilder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ISyntaxBuilder.html",
    "title": "Interface ISyntaxBuilder | CodeFactory for Windows",
    "keywords": "Interface ISyntaxBuilder Default contract all syntax builders must implement. Inherited Members IBuilder.BuilderType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ISyntaxBuilder : IBuilder Methods BuildSyntaxAsync(CsModel, ISourceManager, int) Generates syntax from the provided model. Declaration Task<string> BuildSyntaxAsync(CsModel sourceModel, ISourceManager manager, int indentLevel) Parameters Type Name Description CsModel sourceModel Source C# model to generate syntax from. ISourceManager manager Source manager to provide access to namespace manager and namespace mapping information. int indentLevel The level to indent when generating the syntax. Returns Type Description Task<string> Generated syntax. BuildSyntaxAsync(IEnumerable<NamedModel>, ISourceManager, int) Generates syntax from the provided model. Declaration Task<string> BuildSyntaxAsync(IEnumerable<NamedModel> sourceModels, ISourceManager manager, int indentLevel) Parameters Type Name Description IEnumerable<NamedModel> sourceModels Enumeration of named source C# models to generate syntax from. ISourceManager manager Source manager to provide access to namespace manager and namespace mapping information. int indentLevel The level to indent when generating the syntax. Returns Type Description Task<string> Generated syntax."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.ITryBlock.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.ITryBlock.html",
    "title": "Interface ITryBlock | CodeFactory for Windows",
    "keywords": "Interface ITryBlock Contract definition all try block implementation should implement. Inherited Members IBlock.BlockType Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public interface ITryBlock : IBlock Properties CatchBlocks Catch blocks that support the try block, these are optional. Declaration IEnumerable<ICatchBlock> CatchBlocks { get; } Property Value Type Description IEnumerable<ICatchBlock> FinallyBlock Finally blick that supports the try block, this is optional. Declaration IFinallyBlock FinallyBlock { get; } Property Value Type Description IFinallyBlock LoggerBlock The logger block supporting the try block, this is optional. Declaration ILoggerBlock LoggerBlock { get; } Property Value Type Description ILoggerBlock Methods GenerateTryBlock(IEnumerable<NamedSyntax>, string) Generates the try block Declaration string GenerateTryBlock(IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string) Generates the try block Declaration string GenerateTryBlock(string memberName = null) Parameters Type Name Description string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string, IEnumerable<NamedSyntax>, string) Generates the Try block Declaration string GenerateTryBlock(string syntax, IEnumerable<NamedSyntax> multipleSyntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the Try block. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the Try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block GenerateTryBlock(string, string) Generates the try block Declaration string GenerateTryBlock(string syntax, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the try block. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.InjectionLocation.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.InjectionLocation.html",
    "title": "Enum InjectionLocation | CodeFactory for Windows",
    "keywords": "Enum InjectionLocation Determines the location with a source code file to inject generated builder syntax. Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public enum InjectionLocation Fields Name Description ConstructorAfter Injects right after the definition of the constructor methods section of the container. ConstructorBefore Injects right before the definition of the constructor methods section of the container. ContainerAfter Injects right after the definition of the target container. ContainerBefore Injects right before the definition of the target container. ContainerBeginning Injects inside the container at the beginning of the containers definition. ContainerEnd Injects inside the container at the end of the containers definition. EventAfter Injects right after the definition of the events section of the container. EventBefore Injects right before the definition of the wvents section of the container. FieldAfter Injects right after the definition of the fields section of the container. FieldBefore Injects before the definition of the fields section of the container. MethodAfter Injects right after the definition of the methods section of the container. MethodBefore Injects right before the definition of the methods section of the container. NestedClassAfter Injects right after the definition of the nested classes section of the container. NestedClassBefore Injects right before the definition of the nested classes section of the container. NestedEnumAfter Injects right after the definition of the nested enums section of the container. NestedEnumBefore Injects right before the definition of the nested enums section of the container. NestedInterfaceAfter Injects right after the definition of the nested interfaces section of the container. NestedInterfaceBefore Injects right before the definition of the nested interfaces section of the container. NestedStructureAfter Injects right after the definition of the nested structures section of the container. NestedStructureBefore Injects right before the definition of the nested structures section of the container. None Do not inject the code at any location in the source control file. PropertyAfter Injects right after the definition of the properties section of the container. PropertyBefore Injects right before the definition of the properties section of the container. SourceBeginning Injects at the beginning of the source source file. SourceEnd Injects at the end of the source file."
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.LoggerBlockMicrosoft.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.LoggerBlockMicrosoft.html",
    "title": "Class LoggerBlockMicrosoft | CodeFactory for Windows",
    "keywords": "Class LoggerBlockMicrosoft Logger block that supports the ILogger implementation. Inheritance object BaseLoggerBlock LoggerBlockMicrosoft Implements ILoggerBlock IBlock Inherited Members BaseLoggerBlock.LogMethodName(LogLevel) BaseLoggerBlock.BlockType BaseLoggerBlock.LoggerFieldName BaseLoggerBlock.TraceMethodName BaseLoggerBlock.DebugMethodName BaseLoggerBlock.InformationMethodName BaseLoggerBlock.WarningMethodName BaseLoggerBlock.ErrorMethodName BaseLoggerBlock.CriticalMethodName object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class LoggerBlockMicrosoft : BaseLoggerBlock, ILoggerBlock, IBlock Constructors LoggerBlockMicrosoft(string) Creates a new instance of the LoggerBlockMicrosoft Declaration public LoggerBlockMicrosoft(string fieldName) Parameters Type Name Description string fieldName The name of the logger field. Methods GenerateEnterLogging(LogLevel, string) Generates a logging message entering the target member name. Declaration public override string GenerateEnterLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. Overrides BaseLoggerBlock.GenerateEnterLogging(LogLevel, string) GenerateExitLogging(LogLevel, string) Generates a logging message exiting the target member name. Declaration public override string GenerateExitLogging(LogLevel level, string memberName = null) Parameters Type Name Description LogLevel level The level to log the message at. string memberName Optional parameter that provides the member name. Returns Type Description string The formatted logging string. Overrides BaseLoggerBlock.GenerateExitLogging(LogLevel, string) GenerateLogging(LogLevel, string, bool, string) Create formatted logging to be used with automation. Declaration public override string GenerateLogging(LogLevel level, string message, bool isFormattedMessage = false, string exceptionName = null) Parameters Type Name Description LogLevel level The logging level for the logger Name. string message the target message for logging. bool isFormattedMessage optional parameter that determines if the string uses a $ formatted string for the message with double quotes in the formatted output. string exceptionName Optional parameter to pass the exception field name to be included with the logging. Returns Type Description string The formatted logging Name to be Generated. If no message is provided will return null. Overrides BaseLoggerBlock.GenerateLogging(LogLevel, string, bool, string) Implements ILoggerBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.MethodBuilderStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.MethodBuilderStandard.html",
    "title": "Class MethodBuilderStandard | CodeFactory for Windows",
    "keywords": "Class MethodBuilderStandard Standard builder implementation for a method. Method supports logger, catch blocks, and as try block. Inheritance object BaseMethodBuilder MethodBuilderStandard Implements IMethodBuilder IBuilder Inherited Members BaseMethodBuilder.BuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) BaseMethodBuilder.InjectMethodAsync(CsMethod, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) BaseMethodBuilder.LoggerBlock BaseMethodBuilder.BoundsChecksBlocks BaseMethodBuilder.TryBlock BaseMethodBuilder.BuilderType object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class MethodBuilderStandard : BaseMethodBuilder, IMethodBuilder, IBuilder Constructors MethodBuilderStandard(ILoggerBlock, IEnumerable<IBoundsCheckBlock>, ITryBlock) Creates a instance of the MethodBuilderStandard. Declaration public MethodBuilderStandard(ILoggerBlock loggerBlock = null, IEnumerable<IBoundsCheckBlock> boundsCheckBlocks = null, ITryBlock tryBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Logger block to be used by the method builder, default is null. IEnumerable<IBoundsCheckBlock> boundsCheckBlocks Enumeration of bounds check blocks to be used by the method builder, default is null. ITryBlock tryBlock Try block to be used by the method builder, default is null. Methods GenerateBuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Generates the syntax for the method and returns the defined syntax to the caller. Declaration public override Task<string> GenerateBuildMethodAsync(CsMethod sourceModel, ISourceManager manager, int indentLevel, string methodName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAsyncKeyword = true, LogLevel defaultLogLevel = LogLevel.Critical, bool forceAsyncDefinition = false, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, MethodNameFormatting nameFormat = null) Parameters Type Name Description CsMethod sourceModel Target method model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string methodName Optional, the name to create the method as, default is null. CsSecurity security Optional, the security level to set the method to, default is unknown. bool includeAttributes Optional, determines if the method attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the method - will need to use the full name of the attribute, default is null. bool includeKeywords Optional parameter that determines if the methods keywords will be included, default is false. bool includeAbstractKeyword Optional, if keywords are included a flag that determines if the method is abstract if it will add the abstract keyword, default is false. bool abstractKeyword Optional, defines if the method should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the method definition, default is false. bool staticKeyword Optional, set the method to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the method definition, default is false. bool overrideKeyword Optional, add the override keyword to the method definition, default is false. bool includeAsyncKeyword Optional, if a methods return type is Task will add the async keyword to the definition, default is true. LogLevel defaultLogLevel Determines the default level of logging if included with the method, default is critical. bool forceAsyncDefinition Optional, flag that determines the method will be implemented as a async method, default is false. string syntax Provided syntax that will be used in generating the method definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the method definition. MethodNameFormatting nameFormat Optional parameter that determines the name formatting to use with the method. Returns Type Description Task<string> Formatted method definition. Overrides BaseMethodBuilder.GenerateBuildMethodAsync(CsMethod, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, string, IEnumerable<NamedSyntax>, MethodNameFormatting) Implements IMethodBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.MethodNameFormatting.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.MethodNameFormatting.html",
    "title": "Class MethodNameFormatting | CodeFactory for Windows",
    "keywords": "Class MethodNameFormatting Helper class that provides name formatting options to be used with builders. Inheritance object NameFormatting MethodNameFormatting Inherited Members NameFormatting.NamePrefix NameFormatting.NameSuffix object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class MethodNameFormatting : NameFormatting Constructors MethodNameFormatting() Declaration public MethodNameFormatting() Properties AsyncPrefix The method name will start with a defined async prefix. Declaration public string AsyncPrefix { get; set; } Property Value Type Description string AsyncSuffix The method name will start with a defined async suffix. Declaration public string AsyncSuffix { get; set; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.NameFormatting.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.NameFormatting.html",
    "title": "Class NameFormatting | CodeFactory for Windows",
    "keywords": "Class NameFormatting Helper class that provides name formatting options to be used with builders. Inheritance object NameFormatting FieldNameFormatting MethodNameFormatting Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class NameFormatting Constructors NameFormatting() Declaration public NameFormatting() Properties NamePrefix The name should include the following prefix if not null. Is null by default. Declaration public string NamePrefix { get; set; } Property Value Type Description string NameSuffix The name should include the following suffix if not null. Is null by default. Declaration public string NameSuffix { get; set; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.NamedModel.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.NamedModel.html",
    "title": "Class NamedModel | CodeFactory for Windows",
    "keywords": "Class NamedModel Data class that provides a C# model by a target name. Used in blocks and builders when more then one set of models needs to be provided. Inheritance object NamedModel Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class NamedModel Constructors NamedModel(string, string) Creates a new instance of NamedModel Declaration public NamedModel(string name, string model) Parameters Type Name Description string name The name to be used to identify the model. string model C# model used to be used in blocks or builders. Properties Model C# model used to be used in blocks or builders. Declaration public string Model { get; } Property Value Type Description string Name The name to be used to identify the model. Declaration public string Name { get; } Property Value Type Description string Methods Create(string, string) Creates a new instance of NamedModel Declaration public static NamedModel Create(string name, string model) Parameters Type Name Description string name The name to be used to identify the C# model. string model C# model used to be used in blocks or builders. Returns Type Description NamedModel"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.NamedSyntax.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.NamedSyntax.html",
    "title": "Class NamedSyntax | CodeFactory for Windows",
    "keywords": "Class NamedSyntax Data class that provides syntax by a target name. Used in blocks and builders when more then one set of syntax needs to be provided. Inheritance object NamedSyntax Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class NamedSyntax Constructors NamedSyntax(string, string) Creates a new instance of NamedSyntax Declaration public NamedSyntax(string name, string syntax) Parameters Type Name Description string name The name to be used to identify the syntax. string syntax syntax used to be used in blocks or builders. Properties Name The name to be used to identify the syntax. Declaration public string Name { get; } Property Value Type Description string Syntax syntax used to be used in blocks or builders. Declaration public string Syntax { get; } Property Value Type Description string Methods Create(string, string) Creates a new instance of NamedSyntax Declaration public static NamedSyntax Create(string name, string syntax) Parameters Type Name Description string name The name to be used to identify the syntax. string syntax syntax used to be used in blocks or builders. Returns Type Description NamedSyntax"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.PropertyBuilderStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.PropertyBuilderStandard.html",
    "title": "Class PropertyBuilderStandard | CodeFactory for Windows",
    "keywords": "Class PropertyBuilderStandard Builds a standard property with no backing fields using the get and set accessors. Inheritance object BasePropertyBuilder PropertyBuilderStandard Implements IPropertyBuilder IBuilder Inherited Members BasePropertyBuilder.BuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) BasePropertyBuilder.InjectPropertyAsync(CsProperty, ISourceManager, int, InjectionLocation, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) BasePropertyBuilder.BuilderType BasePropertyBuilder.LoggerBlock BasePropertyBuilder.TryBlock object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class PropertyBuilderStandard : BasePropertyBuilder, IPropertyBuilder, IBuilder Constructors PropertyBuilderStandard() Creates a new instance of the PropertyBuilderStandard Declaration public PropertyBuilderStandard() Methods GenerateBuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Generates the syntax for the property and returns the defined syntax to the caller. Declaration public override Task<string> GenerateBuildPropertyAsync(CsProperty sourceModel, ISourceManager manager, int indentLevel, string propertyName = null, CsSecurity security = CsSecurity.Unknown, bool includeAttributes = false, IEnumerable<string> ignoreAttributeTypes = null, bool includeKeywords = false, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, LogLevel defaultLogLevel = LogLevel.Critical, bool requireGet = false, CsSecurity getSecurity = CsSecurity.Unknown, bool requireSet = false, CsSecurity setSecurity = CsSecurity.Unknown, string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, NameFormatting nameFormat = null) Parameters Type Name Description CsProperty sourceModel Target property model to build from. ISourceManager manager The source manager to use for injection int indentLevel The number of indents to prepend to all source code during the build. string propertyName Optional, the name to create the property as, default is null. CsSecurity security Optional, the security level to set the property to, default is unknown. bool includeAttributes Optional, determines if the property attributes are added, default is false. IEnumerable<string> ignoreAttributeTypes Optional, list of attributes to not include with the property - will need to use the full name of the attribute, default is null. bool includeKeywords Optional, flag that determines if keywords should be included in the property definition, default is false. bool includeAbstractKeyword Optional, flag that determines if keywords are included to also include the abstract keyword if it is set, default is false. bool abstractKeyword Optional, defines if the property should be implemented as abstract, default is false. bool sealedKeyword Optional, add the sealed keyword to the property definition, default is false. bool staticKeyword Optional, set the property to be static, default is false. bool virtualKeyword Optional, adds the virtual keyword to the property definition, default is false. bool overrideKeyword Optional, flag that determines if the override keyword is to be added the property definition, default is false. LogLevel defaultLogLevel Determines the default level of logging if included with the property, default is critical. bool requireGet Optional, flag that determines if a get accessor will be required on the property, default is false. CsSecurity getSecurity Optional, sets the security level for the get accessor if used, default is unknown. bool requireSet Optional, flag that determines if a set accessor will be required on the property, default is false. CsSecurity setSecurity Optional, set the security level for the set accessor if used, default is unknown. string syntax Provided syntax that will be used in generating the property definition. IEnumerable<NamedSyntax> multipleSyntax Provides multiple named syntax that can be used in generating the property definition. NameFormatting nameFormat Optional parameter that determines the name formatting to use with the property. Returns Type Description Task<string> Formatted property definition. Overrides BasePropertyBuilder.GenerateBuildPropertyAsync(CsProperty, ISourceManager, int, string, CsSecurity, bool, IEnumerable<string>, bool, bool, bool, bool, bool, bool, bool, LogLevel, bool, CsSecurity, bool, CsSecurity, string, IEnumerable<NamedSyntax>, NameFormatting) Implements IPropertyBuilder IBuilder"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceClassManager.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceClassManager.html",
    "title": "Class SourceClassManager | CodeFactory for Windows",
    "keywords": "Class SourceClassManager Manages changes to a hosting CsSource model and the target CsClass model hosted in source code. Inheritance object SourceContainerManager<CsClass> SourceClassManager Implements ISourceContainerManager<CsClass> ISourceManager IBuildManagement Inherited Members SourceContainerManager<CsClass>.ContainerPath SourceContainerManager<CsClass>.UpdateMappedNamespaces(List<MapNamespace>) SourceContainerManager<CsClass>.UpdateSources(CsSource, CsClass) SourceContainerManager<CsClass>.UpdateNamespaceManager(NamespaceManager) SourceContainerManager<CsClass>.LoadNamespaceManager() SourceContainerManager<CsClass>.UsingStatementAddAsync(string, string) SourceContainerManager<CsClass>.SourceAddToBeginningAsync(string) SourceContainerManager<CsClass>.SourceAddToBeginningTransactionAsync(string) SourceContainerManager<CsClass>.SourceAddToEndAsync(string) SourceContainerManager<CsClass>.SourceAddToEndTransactionAsync(string) SourceContainerManager<CsClass>.ContainerAddBeforeAsync(string) SourceContainerManager<CsClass>.ContainerAddBeforeTransactionAsync(string) SourceContainerManager<CsClass>.ContainerAddAfterAsync(string) SourceContainerManager<CsClass>.ContainerAddAfterTransactionAsync(string) SourceContainerManager<CsClass>.ContainerAddToBeginningAsync(string) SourceContainerManager<CsClass>.ContainerAddToBeginningTransactionAsync(string) SourceContainerManager<CsClass>.ContainerAddToEndAsync(string) SourceContainerManager<CsClass>.ContainerAddToEndTransactionAsync(string) SourceContainerManager<CsClass>.UsingStatementsAddBeforeAsync(string) SourceContainerManager<CsClass>.UsingStatementsAddBeforeTransactionAsync(string) SourceContainerManager<CsClass>.UsingStatementsAddAfterAsync(string) SourceContainerManager<CsClass>.UsingStatementsAddAfterTransactionAsync(string) SourceContainerManager<CsClass>.PropertiesAddBeforeAsync(string) SourceContainerManager<CsClass>.PropertiesAddBeforeTransactionAsync(string) SourceContainerManager<CsClass>.PropertiesAddAfterAsync(string) SourceContainerManager<CsClass>.PropertiesAddAfterTransactionAsync(string) SourceContainerManager<CsClass>.EventsAddBeforeAsync(string) SourceContainerManager<CsClass>.EventsAddBeforeTransactionAsync(string) SourceContainerManager<CsClass>.EventsAddAfterAsync(string) SourceContainerManager<CsClass>.EventsAddAfterTransactionAsync(string) SourceContainerManager<CsClass>.MethodsAddBeforeAsync(string) SourceContainerManager<CsClass>.MethodsAddBeforeTransactionAsync(string) SourceContainerManager<CsClass>.MethodsAddAfterAsync(string) SourceContainerManager<CsClass>.MethodsAddAfterTransactionAsync(string) SourceContainerManager<CsClass>.MemberAddBeforeAsync(CsMember, string) SourceContainerManager<CsClass>.MemberAddBeforeTransactionAsync(CsMember, string) SourceContainerManager<CsClass>.MemberAddAfterAsync(CsMember, string) SourceContainerManager<CsClass>.MemberAddAfterTransactionAsync(CsMember, string) SourceContainerManager<CsClass>.MemberCommentOut(CsMember, string) SourceContainerManager<CsClass>.MemberReplaceAsync(CsMember, string) SourceContainerManager<CsClass>.MemberReplaceTransactionAsync(CsMember, string) SourceContainerManager<CsClass>.MemberRemoveAsync(CsMember) SourceContainerManager<CsClass>.NestedEnumAddBeforeAsync(string) SourceContainerManager<CsClass>.NestedEnumAddBeforeTransactionAsync(string) SourceContainerManager<CsClass>.NestedEnumAddAfterAsync(string) SourceContainerManager<CsClass>.NestedEnumAddAfterTransactionAsync(string) SourceContainerManager<CsClass>.NestedEnumRemoveAsync(CsEnum) SourceContainerManager<CsClass>.NestedEnumReplaceAsync(CsEnum, string) SourceContainerManager<CsClass>.NestedEnumReplaceTransactionAsync(CsEnum, string) SourceContainerManager<CsClass>.NestedInterfaceAddBeforeAsync(string) SourceContainerManager<CsClass>.NestedInterfaceAddBeforeTransactionAsync(string) SourceContainerManager<CsClass>.NestedInterfaceAddAfterAsync(string) SourceContainerManager<CsClass>.NestedInterfaceAddAfterTransactionAsync(string) SourceContainerManager<CsClass>.NestedInterfaceRemoveAsync(CsInterface) SourceContainerManager<CsClass>.NestedInterfaceReplaceAsync(CsInterface, string) SourceContainerManager<CsClass>.NestedInterfaceReplaceTransactionAsync(CsInterface, string) SourceContainerManager<CsClass>.NestedStructuresAddBeforeAsync(string) SourceContainerManager<CsClass>.NestedStructuresAddBeforeTransactionAsync(string) SourceContainerManager<CsClass>.NestedStructuresAddAfterAsync(string) SourceContainerManager<CsClass>.NestedStructuresAddAfterTransactionAsync(string) SourceContainerManager<CsClass>.NestedStructureRemoveAsync(CsStructure) SourceContainerManager<CsClass>.NestedStructureReplaceAsync(CsStructure, string) SourceContainerManager<CsClass>.NestedStructureReplaceTransactionAsync(CsStructure, string) SourceContainerManager<CsClass>.NestedClassesAddBeforeAsync(string) SourceContainerManager<CsClass>.NestedClassesAddBeforeTransactionAsync(string) SourceContainerManager<CsClass>.NestedClassesAddAfterAsync(string) SourceContainerManager<CsClass>.NestedClassesAddAfterTransactoinAsync(string) SourceContainerManager<CsClass>.NestedClassesRemoveAsync(CsClass) SourceContainerManager<CsClass>.NestedClassesReplaceAsync(CsClass, string) SourceContainerManager<CsClass>.NestedClassesReplaceTransactionAsync(CsClass, string) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsMethod) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsProperty) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsEvent) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsField) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsAttribute) SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync(CsType) SourceContainerManager<CsClass>.AddByInjectionLocationAsync(string, InjectionLocation) SourceContainerManager<CsClass>.Source SourceContainerManager<CsClass>.Container SourceContainerManager<CsClass>.VsActions SourceContainerManager<CsClass>.NamespaceManager SourceContainerManager<CsClass>.MappedNamespaces object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class SourceClassManager : SourceContainerManager<CsClass>, ISourceContainerManager<CsClass>, ISourceManager, IBuildManagement Constructors SourceClassManager(CsSource, CsClass, IVsActions, NamespaceManager, List<MapNamespace>) Constructor for the source class manager. Declaration public SourceClassManager(CsSource source, CsClass container, IVsActions vsActions, NamespaceManager namespaceManager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsSource source The C# source code to be managed. CsClass container The target class to be managed. IVsActions vsActions The CodeFactory API for Visual Studio. NamespaceManager namespaceManager Optional parameter that sets the default namespace manager to use, default is null. List<MapNamespace> mappedNamespaces Optional parameter that sets the mapped namespaces used for namespace management. Methods AddMissingUsingStatementsAsync() Checks all types definitions for the loaded container if the container is not loaded will not add missing using statements. Declaration public override Task AddMissingUsingStatementsAsync() Returns Type Description Task Overrides SourceContainerManager<CsClass>.AddMissingUsingStatementsAsync() ConstructorsAddAfterAsync(string) Add the provided syntax after the constructor definitions. Declaration public override Task ConstructorsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsClass>.ConstructorsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddAfterTransactionAsync(string) Add the provided syntax after the constructor definitions. Declaration public override Task<TransactionDetail> ConstructorsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsClass>.ConstructorsAddAfterTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeAsync(string) Add the provided syntax before the constructor definitions. Declaration public override Task ConstructorsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsClass>.ConstructorsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeTransactionAsync(string) Add the provided syntax before the constructor definitions. Declaration public override Task<TransactionDetail> ConstructorsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsClass>.ConstructorsAddBeforeTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterAsync(string) Adds the provided syntax after the field definitions. Declaration public override Task FieldsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsClass>.FieldsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterTransactionAsync(string) Adds the provided syntax after the field definitions. Declaration public override Task<TransactionDetail> FieldsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsClass>.FieldsAddAfterTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeAsync(string) Adds the provided syntax before the field definitions. Declaration public override Task FieldsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsClass>.FieldsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeTransactionAsync(string) Adds the provided syntax before the field definitions. Declaration public override Task<TransactionDetail> FieldsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsClass>.FieldsAddBeforeTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. Implements ISourceContainerManager<TContainerType> ISourceManager IBuildManagement"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceContainerManager-1.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceContainerManager-1.html",
    "title": "Class SourceContainerManager<TContainerType> | CodeFactory for Windows",
    "keywords": "Class SourceContainerManager<TContainerType> Base class implementation of the ISourceContainerManager<TContainerType> contract. Inheritance object SourceContainerManager<TContainerType> SourceClassManager SourceInterfaceManager SourceStructureManager Implements ISourceContainerManager<TContainerType> ISourceManager IBuildManagement Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public abstract class SourceContainerManager<TContainerType> : ISourceContainerManager<TContainerType>, ISourceManager, IBuildManagement where TContainerType : CsContainer Type Parameters Name Description TContainerType Target CsContainer type. Constructors SourceContainerManager(CsSource, TContainerType, IVsActions, NamespaceManager, List<MapNamespace>) Base constructor for source container managers. Declaration protected SourceContainerManager(CsSource source, TContainerType container, IVsActions vsActions, NamespaceManager namespaceManager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsSource source The C# source code to be managed. TContainerType container The target container to be managed. IVsActions vsActions The CodeFactory API for Visual Studio. NamespaceManager namespaceManager Optional parameter that sets the default namespace manager to use, default is null. List<MapNamespace> mappedNamespaces Optional parameter that sets the mapped namespaces used for namespace management. Fields ContainerPath Lookup path used for loading the container from the source. Declaration protected readonly string ContainerPath Field Value Type Description string Properties Container Target container being updated. Declaration public TContainerType Container { get; } Property Value Type Description TContainerType MappedNamespaces Mapped namespaces used for model moving from a source to a new target. Declaration public List<MapNamespace> MappedNamespaces { get; } Property Value Type Description List<MapNamespace> NamespaceManager The namespace manager that is used for updating source. Declaration public NamespaceManager NamespaceManager { get; } Property Value Type Description NamespaceManager Source Target source that is being updated. Declaration public CsSource Source { get; } Property Value Type Description CsSource VsActions The code factory actions for visual studio to be used with updates to the source. Declaration public IVsActions VsActions { get; } Property Value Type Description IVsActions Methods AddByInjectionLocationAsync(string, InjectionLocation) Adds the provided syntax to the target injection location provided. Declaration public Task AddByInjectionLocationAsync(string syntax, InjectionLocation location) Parameters Type Name Description string syntax Target syntax to be added. InjectionLocation location The location within the source code file to inject at. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. AddMissingUsingStatementsAsync() Checks all types definitions for the loaded container if the container is not loaded will not add missing using statements. Declaration public abstract Task AddMissingUsingStatementsAsync() Returns Type Description Task AddMissingUsingStatementsAsync(CsAttribute) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsAttribute sourceAttribute) Parameters Type Name Description CsAttribute sourceAttribute The target model to check using statements on. Returns Type Description Task Missing using statements added or the original update source if no additional using statements needed. AddMissingUsingStatementsAsync(CsEvent) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsEvent sourceEvent) Parameters Type Name Description CsEvent sourceEvent The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsField) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsField sourceField) Parameters Type Name Description CsField sourceField The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsMethod) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsMethod sourceMethod) Parameters Type Name Description CsMethod sourceMethod The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsProperty) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsProperty sourceProperty) Parameters Type Name Description CsProperty sourceProperty The target model to check using statements on. Returns Type Description Task AddMissingUsingStatementsAsync(CsType) Checks all types definitions and makes sure they are included in the namespace manager for the target update source. Declaration public Task AddMissingUsingStatementsAsync(CsType sourceType) Parameters Type Name Description CsType sourceType The target model to check using statements on. Returns Type Description Task Missing using statements added or the original update source if no additional using statements needed. ConstructorsAddAfterAsync(string) Add the provided syntax after the constructor definitions. Declaration public abstract Task ConstructorsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddAfterTransactionAsync(string) Add the provided syntax after the constructor definitions. Declaration public abstract Task<TransactionDetail> ConstructorsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeAsync(string) Add the provided syntax before the constructor definitions. Declaration public abstract Task ConstructorsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeTransactionAsync(string) Add the provided syntax before the constructor definitions. Declaration public abstract Task<TransactionDetail> ConstructorsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddAfterAsync(string) Adds the provided syntax after containers definition. Declaration public Task ContainerAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddAfterTransactionAsync(string) Adds the provided syntax after containers definition. Declaration public Task<TransactionDetail> ContainerAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddBeforeAsync(string) Adds the provided syntax before the containers definition. Declaration public Task ContainerAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddBeforeTransactionAsync(string) Adds the provided syntax before the containers definition. Declaration public Task<TransactionDetail> ContainerAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToBeginningAsync(string) Adds the provided syntax to the beginning of the containers definition. Declaration public Task ContainerAddToBeginningAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToBeginningTransactionAsync(string) Adds the provided syntax to the beginning of the containers definition. Declaration public Task<TransactionDetail> ContainerAddToBeginningTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToEndAsync(string) Adds the provided syntax to the end of the containers definition. Declaration public Task ContainerAddToEndAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ContainerAddToEndTransactionAsync(string) Adds the provided syntax to the end of the containers definition. Declaration public Task<TransactionDetail> ContainerAddToEndTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddAfterAsync(string) Add the provided syntax after the event definitions. Declaration public Task EventsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddAfterTransactionAsync(string) Add the provided syntax after the event definitions. Declaration public Task<TransactionDetail> EventsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddBeforeAsync(string) Add the provided syntax before the event definitions. Declaration public Task EventsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. EventsAddBeforeTransactionAsync(string) Add the provided syntax before the event definitions. Declaration public Task<TransactionDetail> EventsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterAsync(string) Adds the provided syntax after the field definitions. Declaration public abstract Task FieldsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterTransactionAsync(string) Adds the provided syntax after the field definitions. Declaration public abstract Task<TransactionDetail> FieldsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeAsync(string) Adds the provided syntax before the field definitions. Declaration public abstract Task FieldsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeTransactionAsync(string) Adds the provided syntax before the field definitions. Declaration public abstract Task<TransactionDetail> FieldsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. LoadNamespaceManager() Loads a new instance of a NamespaceManager from the current source and assigns it to the NamespaceManager property. Declaration public void LoadNamespaceManager() Exceptions Type Condition ArgumentNullException Thrown if either the source or container is null. MemberAddAfterAsync(CsMember, string) Add the syntax after the target member. Declaration public Task MemberAddAfterAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberAddAfterTransactionAsync(CsMember, string) Add the syntax after the target member. Declaration public Task<TransactionDetail> MemberAddAfterTransactionAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberAddBeforeAsync(CsMember, string) Add the syntax before the target member. Declaration public Task MemberAddBeforeAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberAddBeforeTransactionAsync(CsMember, string) Add the syntax before the target member. Declaration public Task<TransactionDetail> MemberAddBeforeTransactionAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberCommentOut(CsMember, string) Comments out member from the source container. Declaration public Task MemberCommentOut(CsMember member, string commentSyntax = \"//\") Parameters Type Name Description CsMember member Target member. string commentSyntax Optional parameters sets the syntax to use when commenting out the member. This will default to use '//' Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberRemoveAsync(CsMember) Removes the target member. Declaration public Task MemberRemoveAsync(CsMember member) Parameters Type Name Description CsMember member Target member. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberReplaceAsync(CsMember, string) Syntax replaces the target member. Declaration public Task MemberReplaceAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MemberReplaceTransactionAsync(CsMember, string) Syntax replaces the target member. Declaration public Task<TransactionDetail> MemberReplaceTransactionAsync(CsMember member, string syntax) Parameters Type Name Description CsMember member Target member. string syntax The syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddAfterAsync(string) Add the provided syntax after the method definitions. Declaration public Task MethodsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddAfterTransactionAsync(string) Add the provided syntax after the method definitions. Declaration public Task<TransactionDetail> MethodsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddBeforeAsync(string) Add the provided syntax before the method definitions. Declaration public Task MethodsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. MethodsAddBeforeTransactionAsync(string) Add the provided syntax before the method definitions. Declaration public Task<TransactionDetail> MethodsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddAfterAsync(string) Add the provided syntax after the nested classes definitions. Declaration public Task NestedClassesAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddAfterTransactoinAsync(string) Add the provided syntax after the nested classes definitions. Declaration public Task<TransactionDetail> NestedClassesAddAfterTransactoinAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddBeforeAsync(string) Add the provided syntax before the nested classes definitions. Declaration public Task NestedClassesAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesAddBeforeTransactionAsync(string) Add the provided syntax before the nested classes definitions. Declaration public Task<TransactionDetail> NestedClassesAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesRemoveAsync(CsClass) Removes the nested class. Declaration public Task NestedClassesRemoveAsync(CsClass nested) Parameters Type Name Description CsClass nested The target nested class. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesReplaceAsync(CsClass, string) Replaces the nested class with the provided syntax Declaration public Task NestedClassesReplaceAsync(CsClass nested, string syntax) Parameters Type Name Description CsClass nested The target nested class. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedClassesReplaceTransactionAsync(CsClass, string) Replaces the nested class with the provided syntax Declaration public Task<TransactionDetail> NestedClassesReplaceTransactionAsync(CsClass nested, string syntax) Parameters Type Name Description CsClass nested The target nested class. string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddAfterAsync(string) Add the provided syntax after the nested enumeration definitions. Declaration public Task NestedEnumAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddAfterTransactionAsync(string) Add the provided syntax after the nested enumeration definitions. Declaration public Task<TransactionDetail> NestedEnumAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddBeforeAsync(string) Add the provided syntax before the nested enumeration definitions. Declaration public Task NestedEnumAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumAddBeforeTransactionAsync(string) Add the provided syntax before the nested enumeration definitions. Declaration public Task<TransactionDetail> NestedEnumAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumRemoveAsync(CsEnum) Removes the nested enumeration. Declaration public Task NestedEnumRemoveAsync(CsEnum nested) Parameters Type Name Description CsEnum nested The target nested enumeration. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumReplaceAsync(CsEnum, string) Replaces the nested enumeration with the provided syntax Declaration public Task NestedEnumReplaceAsync(CsEnum nested, string syntax) Parameters Type Name Description CsEnum nested The target nested enumeration. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedEnumReplaceTransactionAsync(CsEnum, string) Replaces the nested enumeration with the provided syntax Declaration public Task<TransactionDetail> NestedEnumReplaceTransactionAsync(CsEnum nested, string syntax) Parameters Type Name Description CsEnum nested The target nested enumeration. string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddAfterAsync(string) Add the provided syntax after the nested interface definitions. Declaration public Task NestedInterfaceAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddAfterTransactionAsync(string) Add the provided syntax after the nested interface definitions. Declaration public Task<TransactionDetail> NestedInterfaceAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddBeforeAsync(string) Add the provided syntax before the nested interface definitions. Declaration public Task NestedInterfaceAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceAddBeforeTransactionAsync(string) Add the provided syntax before the nested interface definitions. Declaration public Task<TransactionDetail> NestedInterfaceAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceRemoveAsync(CsInterface) Removes the nested interface. Declaration public Task NestedInterfaceRemoveAsync(CsInterface nested) Parameters Type Name Description CsInterface nested The target nested interface. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceReplaceAsync(CsInterface, string) Replaces the nested interface with the provided syntax Declaration public Task NestedInterfaceReplaceAsync(CsInterface nested, string syntax) Parameters Type Name Description CsInterface nested The target nested interface. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedInterfaceReplaceTransactionAsync(CsInterface, string) Replaces the nested interface with the provided syntax Declaration public Task<TransactionDetail> NestedInterfaceReplaceTransactionAsync(CsInterface nested, string syntax) Parameters Type Name Description CsInterface nested The target nested interface. string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructureRemoveAsync(CsStructure) Removes the nested structure. Declaration public Task NestedStructureRemoveAsync(CsStructure nested) Parameters Type Name Description CsStructure nested The target nested structure. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructureReplaceAsync(CsStructure, string) Replaces the nested structure with the provided syntax Declaration public Task NestedStructureReplaceAsync(CsStructure nested, string syntax) Parameters Type Name Description CsStructure nested The target nested structure. string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructureReplaceTransactionAsync(CsStructure, string) Replaces the nested structure with the provided syntax Declaration public Task<TransactionDetail> NestedStructureReplaceTransactionAsync(CsStructure nested, string syntax) Parameters Type Name Description CsStructure nested The target nested structure. string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddAfterAsync(string) Add the provided syntax after the nested structures definitions. Declaration public Task NestedStructuresAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddAfterTransactionAsync(string) Add the provided syntax after the nested structures definitions. Declaration public Task<TransactionDetail> NestedStructuresAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddBeforeAsync(string) Add the provided syntax before the nested structures definitions. Declaration public Task NestedStructuresAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. NestedStructuresAddBeforeTransactionAsync(string) Add the provided syntax before the nested structures definitions. Declaration public Task<TransactionDetail> NestedStructuresAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddAfterAsync(string) Add the provided syntax after the property definitions. Declaration public Task PropertiesAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddAfterTransactionAsync(string) Add the provided syntax after the property definitions. Declaration public Task<TransactionDetail> PropertiesAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddBeforeAsync(string) Add the provided syntax before the property definitions. Declaration public Task PropertiesAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. PropertiesAddBeforeTransactionAsync(string) Add the provided syntax before the property definitions. Declaration public Task<TransactionDetail> PropertiesAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToBeginningAsync(string) Adds the provided syntax to the beginning of the source file. Declaration public Task SourceAddToBeginningAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToBeginningTransactionAsync(string) Adds the provided syntax to the beginning of the source file. Declaration public Task<TransactionDetail> SourceAddToBeginningTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToEndAsync(string) Adds the provided syntax to the end of the source file. Declaration public Task SourceAddToEndAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. SourceAddToEndTransactionAsync(string) Adds the provided syntax to the end of the source file. Declaration public Task<TransactionDetail> SourceAddToEndTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UpdateMappedNamespaces(List<MapNamespace>) Refreshes the mapped namespaces. Declaration public void UpdateMappedNamespaces(List<MapNamespace> mappedNamespaces) Parameters Type Name Description List<MapNamespace> mappedNamespaces the mapped namespaces to add to management. UpdateNamespaceManager(NamespaceManager) Refreshes the current version of the namespace manager for the sources. Declaration public void UpdateNamespaceManager(NamespaceManager namespaceManager) Parameters Type Name Description NamespaceManager namespaceManager Updated namespace to register Exceptions Type Condition ArgumentNullException Thrown if the namespace manager is null. UpdateSources(CsSource, TContainerType) Refreshes the current version of the update sources. Declaration public void UpdateSources(CsSource source, TContainerType container) Parameters Type Name Description CsSource source The updated CsSource. TContainerType container The updates hosting CsContainer type. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null. UsingStatementAddAsync(string, string) Creates a new using statement in the source if the using statement does not exist. It will also reload the namespace manager and update it. Declaration public Task UsingStatementAddAsync(string nameSpace, string alias = null) Parameters Type Name Description string nameSpace Namespace to add to the source file. string alias Optional parameter to assign a alias to the using statement. Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if the source is null. UsingStatementsAddAfterAsync(string) Adds the provided syntax before the first using statement definition. Declaration public Task UsingStatementsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UsingStatementsAddAfterTransactionAsync(string) Adds the provided syntax before the first using statement definition. Declaration public Task<TransactionDetail> UsingStatementsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UsingStatementsAddBeforeAsync(string) Adds the provided syntax before the first using statement definition. Declaration public Task UsingStatementsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. UsingStatementsAddBeforeTransactionAsync(string) Adds the provided syntax before the first using statement definition. Declaration public Task<TransactionDetail> UsingStatementsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. Implements ISourceContainerManager<TContainerType> ISourceManager IBuildManagement"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceInterfaceManager.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceInterfaceManager.html",
    "title": "Class SourceInterfaceManager | CodeFactory for Windows",
    "keywords": "Class SourceInterfaceManager Manages changes to a hosting CsSource model and the target CsInterface model hosted in source code. Inheritance object SourceContainerManager<CsInterface> SourceInterfaceManager Implements ISourceContainerManager<CsInterface> ISourceManager IBuildManagement Inherited Members SourceContainerManager<CsInterface>.ContainerPath SourceContainerManager<CsInterface>.UpdateMappedNamespaces(List<MapNamespace>) SourceContainerManager<CsInterface>.UpdateSources(CsSource, CsInterface) SourceContainerManager<CsInterface>.UpdateNamespaceManager(NamespaceManager) SourceContainerManager<CsInterface>.LoadNamespaceManager() SourceContainerManager<CsInterface>.UsingStatementAddAsync(string, string) SourceContainerManager<CsInterface>.SourceAddToBeginningAsync(string) SourceContainerManager<CsInterface>.SourceAddToBeginningTransactionAsync(string) SourceContainerManager<CsInterface>.SourceAddToEndAsync(string) SourceContainerManager<CsInterface>.SourceAddToEndTransactionAsync(string) SourceContainerManager<CsInterface>.ContainerAddBeforeAsync(string) SourceContainerManager<CsInterface>.ContainerAddBeforeTransactionAsync(string) SourceContainerManager<CsInterface>.ContainerAddAfterAsync(string) SourceContainerManager<CsInterface>.ContainerAddAfterTransactionAsync(string) SourceContainerManager<CsInterface>.ContainerAddToBeginningAsync(string) SourceContainerManager<CsInterface>.ContainerAddToBeginningTransactionAsync(string) SourceContainerManager<CsInterface>.ContainerAddToEndAsync(string) SourceContainerManager<CsInterface>.ContainerAddToEndTransactionAsync(string) SourceContainerManager<CsInterface>.UsingStatementsAddBeforeAsync(string) SourceContainerManager<CsInterface>.UsingStatementsAddBeforeTransactionAsync(string) SourceContainerManager<CsInterface>.UsingStatementsAddAfterAsync(string) SourceContainerManager<CsInterface>.UsingStatementsAddAfterTransactionAsync(string) SourceContainerManager<CsInterface>.PropertiesAddBeforeAsync(string) SourceContainerManager<CsInterface>.PropertiesAddBeforeTransactionAsync(string) SourceContainerManager<CsInterface>.PropertiesAddAfterAsync(string) SourceContainerManager<CsInterface>.PropertiesAddAfterTransactionAsync(string) SourceContainerManager<CsInterface>.EventsAddBeforeAsync(string) SourceContainerManager<CsInterface>.EventsAddBeforeTransactionAsync(string) SourceContainerManager<CsInterface>.EventsAddAfterAsync(string) SourceContainerManager<CsInterface>.EventsAddAfterTransactionAsync(string) SourceContainerManager<CsInterface>.MethodsAddBeforeAsync(string) SourceContainerManager<CsInterface>.MethodsAddBeforeTransactionAsync(string) SourceContainerManager<CsInterface>.MethodsAddAfterAsync(string) SourceContainerManager<CsInterface>.MethodsAddAfterTransactionAsync(string) SourceContainerManager<CsInterface>.MemberAddBeforeAsync(CsMember, string) SourceContainerManager<CsInterface>.MemberAddBeforeTransactionAsync(CsMember, string) SourceContainerManager<CsInterface>.MemberAddAfterAsync(CsMember, string) SourceContainerManager<CsInterface>.MemberAddAfterTransactionAsync(CsMember, string) SourceContainerManager<CsInterface>.MemberCommentOut(CsMember, string) SourceContainerManager<CsInterface>.MemberReplaceAsync(CsMember, string) SourceContainerManager<CsInterface>.MemberReplaceTransactionAsync(CsMember, string) SourceContainerManager<CsInterface>.MemberRemoveAsync(CsMember) SourceContainerManager<CsInterface>.NestedEnumAddBeforeAsync(string) SourceContainerManager<CsInterface>.NestedEnumAddBeforeTransactionAsync(string) SourceContainerManager<CsInterface>.NestedEnumAddAfterAsync(string) SourceContainerManager<CsInterface>.NestedEnumAddAfterTransactionAsync(string) SourceContainerManager<CsInterface>.NestedEnumRemoveAsync(CsEnum) SourceContainerManager<CsInterface>.NestedEnumReplaceAsync(CsEnum, string) SourceContainerManager<CsInterface>.NestedEnumReplaceTransactionAsync(CsEnum, string) SourceContainerManager<CsInterface>.NestedInterfaceAddBeforeAsync(string) SourceContainerManager<CsInterface>.NestedInterfaceAddBeforeTransactionAsync(string) SourceContainerManager<CsInterface>.NestedInterfaceAddAfterAsync(string) SourceContainerManager<CsInterface>.NestedInterfaceAddAfterTransactionAsync(string) SourceContainerManager<CsInterface>.NestedInterfaceRemoveAsync(CsInterface) SourceContainerManager<CsInterface>.NestedInterfaceReplaceAsync(CsInterface, string) SourceContainerManager<CsInterface>.NestedInterfaceReplaceTransactionAsync(CsInterface, string) SourceContainerManager<CsInterface>.NestedStructuresAddBeforeAsync(string) SourceContainerManager<CsInterface>.NestedStructuresAddBeforeTransactionAsync(string) SourceContainerManager<CsInterface>.NestedStructuresAddAfterAsync(string) SourceContainerManager<CsInterface>.NestedStructuresAddAfterTransactionAsync(string) SourceContainerManager<CsInterface>.NestedStructureRemoveAsync(CsStructure) SourceContainerManager<CsInterface>.NestedStructureReplaceAsync(CsStructure, string) SourceContainerManager<CsInterface>.NestedStructureReplaceTransactionAsync(CsStructure, string) SourceContainerManager<CsInterface>.NestedClassesAddBeforeAsync(string) SourceContainerManager<CsInterface>.NestedClassesAddBeforeTransactionAsync(string) SourceContainerManager<CsInterface>.NestedClassesAddAfterAsync(string) SourceContainerManager<CsInterface>.NestedClassesAddAfterTransactoinAsync(string) SourceContainerManager<CsInterface>.NestedClassesRemoveAsync(CsClass) SourceContainerManager<CsInterface>.NestedClassesReplaceAsync(CsClass, string) SourceContainerManager<CsInterface>.NestedClassesReplaceTransactionAsync(CsClass, string) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsMethod) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsProperty) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsEvent) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsField) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsAttribute) SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync(CsType) SourceContainerManager<CsInterface>.AddByInjectionLocationAsync(string, InjectionLocation) SourceContainerManager<CsInterface>.Source SourceContainerManager<CsInterface>.Container SourceContainerManager<CsInterface>.VsActions SourceContainerManager<CsInterface>.NamespaceManager SourceContainerManager<CsInterface>.MappedNamespaces object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class SourceInterfaceManager : SourceContainerManager<CsInterface>, ISourceContainerManager<CsInterface>, ISourceManager, IBuildManagement Constructors SourceInterfaceManager(CsSource, CsInterface, IVsActions, NamespaceManager, List<MapNamespace>) Constructor for the source interface manager. Declaration public SourceInterfaceManager(CsSource source, CsInterface container, IVsActions vsActions, NamespaceManager namespaceManager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsSource source The C# source code to be managed. CsInterface container The target interface to be managed. IVsActions vsActions The CodeFactory API for Visual Studio. NamespaceManager namespaceManager Optional parameter that sets the default namespace manager to use, default is null. List<MapNamespace> mappedNamespaces Optional parameter that sets the mapped namespaces used for namespace management. Methods AddMissingUsingStatementsAsync() Checks all types definitions for the loaded container if the container is not loaded will not add missing using statements. Declaration public override Task AddMissingUsingStatementsAsync() Returns Type Description Task Overrides SourceContainerManager<CsInterface>.AddMissingUsingStatementsAsync() ConstructorsAddAfterAsync(string) Add the provided syntax after the constructor definitions. Declaration public override Task ConstructorsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsInterface>.ConstructorsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddAfterTransactionAsync(string) Add the provided syntax after the constructor definitions. Declaration public override Task<TransactionDetail> ConstructorsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsInterface>.ConstructorsAddAfterTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeAsync(string) Add the provided syntax before the constructor definitions. Declaration public override Task ConstructorsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsInterface>.ConstructorsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeTransactionAsync(string) Add the provided syntax before the constructor definitions. Declaration public override Task<TransactionDetail> ConstructorsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsInterface>.ConstructorsAddBeforeTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterAsync(string) Adds the provided syntax after the field definitions. Declaration public override Task FieldsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsInterface>.FieldsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterTransactionAsync(string) Adds the provided syntax after the field definitions. Declaration public override Task<TransactionDetail> FieldsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsInterface>.FieldsAddAfterTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeAsync(string) Adds the provided syntax before the field definitions. Declaration public override Task FieldsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsInterface>.FieldsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeTransactionAsync(string) Adds the provided syntax before the field definitions. Declaration public override Task<TransactionDetail> FieldsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsInterface>.FieldsAddBeforeTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. Implements ISourceContainerManager<TContainerType> ISourceManager IBuildManagement"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceManagerExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceManagerExtensions.html",
    "title": "Class SourceManagerExtensions | CodeFactory for Windows",
    "keywords": "Class SourceManagerExtensions Extension methods that support classes that implement the ISourceManager interface. Inheritance object SourceManagerExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public static class SourceManagerExtensions"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceStructureManager.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SourceStructureManager.html",
    "title": "Class SourceStructureManager | CodeFactory for Windows",
    "keywords": "Class SourceStructureManager Manages changes to a hosting CsSource model and the target CsStructure model hosted in source code. Inheritance object SourceContainerManager<CsStructure> SourceStructureManager Implements ISourceContainerManager<CsStructure> ISourceManager IBuildManagement Inherited Members SourceContainerManager<CsStructure>.ContainerPath SourceContainerManager<CsStructure>.UpdateMappedNamespaces(List<MapNamespace>) SourceContainerManager<CsStructure>.UpdateSources(CsSource, CsStructure) SourceContainerManager<CsStructure>.UpdateNamespaceManager(NamespaceManager) SourceContainerManager<CsStructure>.LoadNamespaceManager() SourceContainerManager<CsStructure>.UsingStatementAddAsync(string, string) SourceContainerManager<CsStructure>.SourceAddToBeginningAsync(string) SourceContainerManager<CsStructure>.SourceAddToBeginningTransactionAsync(string) SourceContainerManager<CsStructure>.SourceAddToEndAsync(string) SourceContainerManager<CsStructure>.SourceAddToEndTransactionAsync(string) SourceContainerManager<CsStructure>.ContainerAddBeforeAsync(string) SourceContainerManager<CsStructure>.ContainerAddBeforeTransactionAsync(string) SourceContainerManager<CsStructure>.ContainerAddAfterAsync(string) SourceContainerManager<CsStructure>.ContainerAddAfterTransactionAsync(string) SourceContainerManager<CsStructure>.ContainerAddToBeginningAsync(string) SourceContainerManager<CsStructure>.ContainerAddToBeginningTransactionAsync(string) SourceContainerManager<CsStructure>.ContainerAddToEndAsync(string) SourceContainerManager<CsStructure>.ContainerAddToEndTransactionAsync(string) SourceContainerManager<CsStructure>.UsingStatementsAddBeforeAsync(string) SourceContainerManager<CsStructure>.UsingStatementsAddBeforeTransactionAsync(string) SourceContainerManager<CsStructure>.UsingStatementsAddAfterAsync(string) SourceContainerManager<CsStructure>.UsingStatementsAddAfterTransactionAsync(string) SourceContainerManager<CsStructure>.PropertiesAddBeforeAsync(string) SourceContainerManager<CsStructure>.PropertiesAddBeforeTransactionAsync(string) SourceContainerManager<CsStructure>.PropertiesAddAfterAsync(string) SourceContainerManager<CsStructure>.PropertiesAddAfterTransactionAsync(string) SourceContainerManager<CsStructure>.EventsAddBeforeAsync(string) SourceContainerManager<CsStructure>.EventsAddBeforeTransactionAsync(string) SourceContainerManager<CsStructure>.EventsAddAfterAsync(string) SourceContainerManager<CsStructure>.EventsAddAfterTransactionAsync(string) SourceContainerManager<CsStructure>.MethodsAddBeforeAsync(string) SourceContainerManager<CsStructure>.MethodsAddBeforeTransactionAsync(string) SourceContainerManager<CsStructure>.MethodsAddAfterAsync(string) SourceContainerManager<CsStructure>.MethodsAddAfterTransactionAsync(string) SourceContainerManager<CsStructure>.MemberAddBeforeAsync(CsMember, string) SourceContainerManager<CsStructure>.MemberAddBeforeTransactionAsync(CsMember, string) SourceContainerManager<CsStructure>.MemberAddAfterAsync(CsMember, string) SourceContainerManager<CsStructure>.MemberAddAfterTransactionAsync(CsMember, string) SourceContainerManager<CsStructure>.MemberCommentOut(CsMember, string) SourceContainerManager<CsStructure>.MemberReplaceAsync(CsMember, string) SourceContainerManager<CsStructure>.MemberReplaceTransactionAsync(CsMember, string) SourceContainerManager<CsStructure>.MemberRemoveAsync(CsMember) SourceContainerManager<CsStructure>.NestedEnumAddBeforeAsync(string) SourceContainerManager<CsStructure>.NestedEnumAddBeforeTransactionAsync(string) SourceContainerManager<CsStructure>.NestedEnumAddAfterAsync(string) SourceContainerManager<CsStructure>.NestedEnumAddAfterTransactionAsync(string) SourceContainerManager<CsStructure>.NestedEnumRemoveAsync(CsEnum) SourceContainerManager<CsStructure>.NestedEnumReplaceAsync(CsEnum, string) SourceContainerManager<CsStructure>.NestedEnumReplaceTransactionAsync(CsEnum, string) SourceContainerManager<CsStructure>.NestedInterfaceAddBeforeAsync(string) SourceContainerManager<CsStructure>.NestedInterfaceAddBeforeTransactionAsync(string) SourceContainerManager<CsStructure>.NestedInterfaceAddAfterAsync(string) SourceContainerManager<CsStructure>.NestedInterfaceAddAfterTransactionAsync(string) SourceContainerManager<CsStructure>.NestedInterfaceRemoveAsync(CsInterface) SourceContainerManager<CsStructure>.NestedInterfaceReplaceAsync(CsInterface, string) SourceContainerManager<CsStructure>.NestedInterfaceReplaceTransactionAsync(CsInterface, string) SourceContainerManager<CsStructure>.NestedStructuresAddBeforeAsync(string) SourceContainerManager<CsStructure>.NestedStructuresAddBeforeTransactionAsync(string) SourceContainerManager<CsStructure>.NestedStructuresAddAfterAsync(string) SourceContainerManager<CsStructure>.NestedStructuresAddAfterTransactionAsync(string) SourceContainerManager<CsStructure>.NestedStructureRemoveAsync(CsStructure) SourceContainerManager<CsStructure>.NestedStructureReplaceAsync(CsStructure, string) SourceContainerManager<CsStructure>.NestedStructureReplaceTransactionAsync(CsStructure, string) SourceContainerManager<CsStructure>.NestedClassesAddBeforeAsync(string) SourceContainerManager<CsStructure>.NestedClassesAddBeforeTransactionAsync(string) SourceContainerManager<CsStructure>.NestedClassesAddAfterAsync(string) SourceContainerManager<CsStructure>.NestedClassesAddAfterTransactoinAsync(string) SourceContainerManager<CsStructure>.NestedClassesRemoveAsync(CsClass) SourceContainerManager<CsStructure>.NestedClassesReplaceAsync(CsClass, string) SourceContainerManager<CsStructure>.NestedClassesReplaceTransactionAsync(CsClass, string) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsMethod) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsProperty) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsEvent) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsField) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsAttribute) SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync(CsType) SourceContainerManager<CsStructure>.AddByInjectionLocationAsync(string, InjectionLocation) SourceContainerManager<CsStructure>.Source SourceContainerManager<CsStructure>.Container SourceContainerManager<CsStructure>.VsActions SourceContainerManager<CsStructure>.NamespaceManager SourceContainerManager<CsStructure>.MappedNamespaces object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class SourceStructureManager : SourceContainerManager<CsStructure>, ISourceContainerManager<CsStructure>, ISourceManager, IBuildManagement Constructors SourceStructureManager(CsSource, CsStructure, IVsActions, NamespaceManager, List<MapNamespace>) Constructor for the source class manager. Declaration public SourceStructureManager(CsSource source, CsStructure container, IVsActions vsActions, NamespaceManager namespaceManager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsSource source The C# source code to be managed. CsStructure container The target structure to be managed. IVsActions vsActions The CodeFactory API for Visual Studio. NamespaceManager namespaceManager Optional parameter that sets the default namespace manager to use, default is null. List<MapNamespace> mappedNamespaces Optional parameter that sets the mapped namespaces used for namespace management. Methods AddMissingUsingStatementsAsync() Checks all types definitions for the loaded container if the container is not loaded will not add missing using statements. Declaration public override Task AddMissingUsingStatementsAsync() Returns Type Description Task Overrides SourceContainerManager<CsStructure>.AddMissingUsingStatementsAsync() ConstructorsAddAfterAsync(string) Add the provided syntax after the constructor definitions. Declaration public override Task ConstructorsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsStructure>.ConstructorsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddAfterTransactionAsync(string) Add the provided syntax after the constructor definitions. Declaration public override Task<TransactionDetail> ConstructorsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsStructure>.ConstructorsAddAfterTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeAsync(string) Add the provided syntax before the constructor definitions. Declaration public override Task ConstructorsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsStructure>.ConstructorsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. ConstructorsAddBeforeTransactionAsync(string) Add the provided syntax before the constructor definitions. Declaration public override Task<TransactionDetail> ConstructorsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsStructure>.ConstructorsAddBeforeTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterAsync(string) Adds the provided syntax after the field definitions. Declaration public override Task FieldsAddAfterAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsStructure>.FieldsAddAfterAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddAfterTransactionAsync(string) Adds the provided syntax after the field definitions. Declaration public override Task<TransactionDetail> FieldsAddAfterTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsStructure>.FieldsAddAfterTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeAsync(string) Adds the provided syntax before the field definitions. Declaration public override Task FieldsAddBeforeAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task Overrides SourceContainerManager<CsStructure>.FieldsAddBeforeAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. FieldsAddBeforeTransactionAsync(string) Adds the provided syntax before the field definitions. Declaration public override Task<TransactionDetail> FieldsAddBeforeTransactionAsync(string syntax) Parameters Type Name Description string syntax Target syntax to be added. Returns Type Description Task<TransactionDetail> The details of the updated source or null if the transaction details could not be saved. Overrides SourceContainerManager<CsStructure>.FieldsAddBeforeTransactionAsync(string) Exceptions Type Condition ArgumentNullException Thrown if either the source or the container is null after updating. Implements ISourceContainerManager<TContainerType> ISourceManager IBuildManagement"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.SyntaxBuilderFieldStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.SyntaxBuilderFieldStandard.html",
    "title": "Class SyntaxBuilderFieldStandard | CodeFactory for Windows",
    "keywords": "Class SyntaxBuilderFieldStandard Syntax builder that generates C# field syntax. Inheritance object SyntaxBuilderFieldStandard Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class SyntaxBuilderFieldStandard Constructors SyntaxBuilderFieldStandard() Creates a new instance of the SyntaxBuilderFieldStandard Declaration public SyntaxBuilderFieldStandard() Methods GenerateFieldSyntaxAsync(string, ISourceManager, CsType, int, CsSecurity, string, string, bool, bool, bool, FieldNameFormatting) Generates a C# field definition Declaration public Task<string> GenerateFieldSyntaxAsync(string name, ISourceManager manager, CsType type, int indentLevel, CsSecurity security = CsSecurity.Private, string defaultValueSyntax = null, string summaryDocumentation = null, bool constKeyword = false, bool staticKeyword = false, bool readOnlyKeyword = false, FieldNameFormatting nameFormatting = null) Parameters Type Name Description string name Name of the field to create. ISourceManager manager Manager that holds the namespace manager and the mapped namespaces used for formatting. CsType type The C# type model the field represents. int indentLevel Number of levels to indent the syntax on creation. CsSecurity security Optional, security for the field, default is private. string defaultValueSyntax Optional, syntax that holds the default value to set the field to. This must be fully formatted C# code. default is null. string summaryDocumentation Optional the summary description for the field, default is null. bool constKeyword Optional, flag that determines if the const keyword should be added to the field, default is false. bool staticKeyword Optional, flag that determines if the static keyword should be added to the field, default is false. bool readOnlyKeyword Optional, flag that determines if the readonly keyword should be added to the field, default is false. FieldNameFormatting nameFormatting Optional, formatting requirements for the field name, default is null Returns Type Description Task<string> The full syntax for definition of the field. Exceptions Type Condition ArgumentNullException"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.TryBlockStandard.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.TryBlockStandard.html",
    "title": "Class TryBlockStandard | CodeFactory for Windows",
    "keywords": "Class TryBlockStandard Try basic code block standard implementation. Supports injection of syntax inside the try block, it also will generate the catch and finally blocks if they are provided. Inheritance object BaseTryBlock TryBlockStandard Implements ITryBlock IBlock Inherited Members BaseTryBlock.GenerateTryBlock(string) BaseTryBlock.GenerateTryBlock(string, string) BaseTryBlock.GenerateTryBlock(IEnumerable<NamedSyntax>, string) BaseTryBlock.GenerateTryBlock(string, IEnumerable<NamedSyntax>, string) BaseTryBlock.BlockType BaseTryBlock.LoggerBlock BaseTryBlock.CatchBlocks BaseTryBlock.FinallyBlock object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.Builder Assembly: CodeFactory.WinVs.dll Syntax public class TryBlockStandard : BaseTryBlock, ITryBlock, IBlock Constructors TryBlockStandard(ILoggerBlock, IEnumerable<ICatchBlock>, IFinallyBlock) Creates a instance of the code block. Declaration public TryBlockStandard(ILoggerBlock loggerBlock = null, IEnumerable<ICatchBlock> catchBlocks = null, IFinallyBlock finallyBlock = null) Parameters Type Name Description ILoggerBlock loggerBlock Optional parameter that provides the logger block. IEnumerable<ICatchBlock> catchBlocks Optional parameter catch blocks that support the try block. IFinallyBlock finallyBlock Optional parameter finally block that supports the try block. Methods BuildTryBlock(string, IEnumerable<NamedSyntax>, string) Builds the try block Declaration protected override string BuildTryBlock(string syntax = null, IEnumerable<NamedSyntax> multipleSyntax = null, string memberName = null) Parameters Type Name Description string syntax Syntax to be injected into the try block, optional parameter. IEnumerable<NamedSyntax> multipleSyntax Multiple syntax statements has been provided to be used by the try block,optional parameter. string memberName Optional parameter that determines the target member the try block is implemented in. Returns Type Description string Returns the generated try block Overrides BaseTryBlock.BuildTryBlock(string, IEnumerable<NamedSyntax>, string) Implements ITryBlock IBlock"
  },
  "api/CodeFactory.WinVs.Models.CSharp.Builder.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.Builder.html",
    "title": "Namespace CodeFactory.WinVs.Models.CSharp.Builder | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Models.CSharp.Builder Classes BaseBoundsCheckBlock Base class implementation for generation of bounds checking logic. BaseCatchBlock Base class implementation of the catch block BaseCustomBlock Base class definition all custom blocks implementation should implement. BaseEventBuilder Base implementation for event builders. BaseFieldBuilder Base class implementation for all field builders. BaseFinallyBlock Base class implementation of the finally block BaseLoggerBlock Base implementation of a logger block. BaseMethodBuilder Base implementation for method builders. BasePropertyBuilder Base class implementation for all property builders. BaseSyntaxBuilder Base implementation for syntax builders. BaseTryBlock Base class implementation of the try block BoundsCheckBlockNull Bounds checks for nulls in non value parameter types. BoundsCheckBlockString Bounds checks a parameter that has a string is not null or empty. CatchBlockStandard Catch basic code block standard implementation. Supports injection of syntax inside the catch block, or generation of standard logging and rethrow of exception. EventBuilderStandard Builder that builds a standard event definition in C# language. FieldNameFormatting Helper class that provides name formatting options to be used with field builders. FinallyBlockStandard Finally basic code block standard implementation. Supports injection of syntax inside the finally block. LoggerBlockMicrosoft Logger block that supports the ILogger implementation. MethodBuilderStandard Standard builder implementation for a method. Method supports logger, catch blocks, and as try block. MethodNameFormatting Helper class that provides name formatting options to be used with builders. NameFormatting Helper class that provides name formatting options to be used with builders. NamedModel Data class that provides a C# model by a target name. Used in blocks and builders when more then one set of models needs to be provided. NamedSyntax Data class that provides syntax by a target name. Used in blocks and builders when more then one set of syntax needs to be provided. PropertyBuilderStandard Builds a standard property with no backing fields using the get and set accessors. SourceClassManager Manages changes to a hosting CsSource model and the target CsClass model hosted in source code. SourceContainerManager<TContainerType> Base class implementation of the ISourceContainerManager<TContainerType> contract. SourceInterfaceManager Manages changes to a hosting CsSource model and the target CsInterface model hosted in source code. SourceManagerExtensions Extension methods that support classes that implement the ISourceManager interface. SourceStructureManager Manages changes to a hosting CsSource model and the target CsStructure model hosted in source code. SyntaxBuilderFieldStandard Syntax builder that generates C# field syntax. TryBlockStandard Try basic code block standard implementation. Supports injection of syntax inside the try block, it also will generate the catch and finally blocks if they are provided. Interfaces IBlock Contract definition all Blocks must implement IBoundsCheckBlock Contract all bounds checking code blocks must implement. IBuildManagement Definition of core management functionality that is used during build of functionality. IBuilder Base contract defintion all builders must inherit from. ICatchBlock Contract definition all catch block implementation should implement. ICustomBlock Contract definition all custom blocks implementation should implement. IEventBuilder Base contract all event builders have to implement. IFieldBuilder Base contract all field builders have to implement. IFinallyBlock Contract definition all finally block implementation should implement. ILoggerBlock Contract definition for implementation of a logger block. IMethodBuilder Base contract all method builders have to implement. IPropertyBuilder Base contract all property builders have to implement. ISourceContainerManager<TContainerType> Contract that is used to track the source code and target container that is being updated. ISourceManager Contract that manages the update to the source tracked by the manager implementation ISyntaxBuilder Default contract all syntax builders must implement. ITryBlock Contract definition all try block implementation should implement. Enums BuilderType The type of builder supported by CodeFactory automation. CodeBlockType Categories of code block types used with building C# code. InjectionLocation Determines the location with a source code file to inject generated builder syntax."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsAttribute.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsAttribute.html",
    "title": "Class CsAttribute | CodeFactory for Windows",
    "keywords": "Class CsAttribute Data model that represents an attribute. Inheritance object CsModel CsAttribute Implements ICsAttribute ICsModel IModelStatus IParent ISourceFiles Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsAttribute : CsModel, ICsAttribute, ICsModel, IModelStatus, IParent, ISourceFiles Constructors CsAttribute(bool, bool, bool, SourceCodeType, string, IReadOnlyList<string>, bool, string, IReadOnlyList<CsAttributeParameter>, CsType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsAttribute Declaration protected CsAttribute(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasParameters, string parentPath, IReadOnlyList<CsAttributeParameter> parameters, CsType type, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. string modelSourceFile The soure code file for the model. IReadOnlyList<string> sourceFiles The list of source files the attribute is defined in. bool hasParameters Flag that determines if the attribute has parameters. string parentPath The fully qualified lookup path to the parent model for this attribute. IReadOnlyList<CsAttributeParameter> parameters The list of parameters assigned to the attribute. CsType type The target type of the attribute. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties HasParameters Flag that determines if the attribute has parameters Declaration public bool HasParameters { get; } Property Value Type Description bool ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Parameters Enumeration of the parameters that are assigned to the attribute. This will be an empty list if HasParameters is false. Declaration public IReadOnlyList<CsAttributeParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsAttributeParameter> Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Type The type information for the attribute itself. Declaration public CsType Type { get; } Property Value Type Description CsType Methods AddAfterAsync(string) Adds the source code directly after the definition of the CsAttributein the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the CsAttributein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterTransactionAsync(string) Adds the source code directly after the definition of the CsAttributein the target document. Declaration public abstract Task<CsSourceTransaction> AddAfterTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsAttributein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsAttributein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string) Adds the source code directly before the definition of the ICsAttributein the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the attribute from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the attribute from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the attribute is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the attribute is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the attribute is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the attribute defined in. Returns Type Description Task<ISourceLocation> The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current attribute with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current attribute with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceTransactionAsync(string) Replaces the current attribute with the provided source code. Declaration public abstract Task<CsSourceTransaction> ReplaceTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsAttribute ICsModel IModelStatus IParent ISourceFiles Extension Methods GenerateCSharpAttributeExtensions.GenerateCSharpAttributeSignature(CsAttribute, NamespaceManager, List<MapNamespace>)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsAttributeParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsAttributeParameter.html",
    "title": "Class CsAttributeParameter | CodeFactory for Windows",
    "keywords": "Class CsAttributeParameter Data model that represents a attribute parameter. Inheritance object CsModel CsAttributeParameter Implements ICsAttributeParameter ICsModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsAttributeParameter : CsModel, ICsAttributeParameter, ICsModel, IModelStatus Constructors CsAttributeParameter(bool, bool, bool, SourceCodeType, bool, string, CsAttributeParameterValue, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsAttributeParameter Declaration protected CsAttributeParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, bool hasNamedParameter, string name, CsAttributeParameterValue value, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. bool hasNamedParameter Flag that determines if the attribute parameter is a named parameter. string name The name of the parameter, should be null if not named. CsAttributeParameterValue value The value assigned to the parameter. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties HasNamedParameter Flag that determines if the attribute parameter is a named value, or just part of the attributes constructor. Declaration public bool HasNamedParameter { get; } Property Value Type Description bool Name The name of the parameter, if this is not a named parameter then it will be set to null Declaration public string Name { get; } Property Value Type Description string Value The value that was assigned to the parameter. Declaration public CsAttributeParameterValue Value { get; } Property Value Type Description CsAttributeParameterValue Implements ICsAttributeParameter ICsModel IModelStatus"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsAttributeParameterValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsAttributeParameterValue.html",
    "title": "Class CsAttributeParameterValue | CodeFactory for Windows",
    "keywords": "Class CsAttributeParameterValue Data class that represents an attributes parameter value. Inheritance object CsModel CsAttributeParameterValue Implements ICsAttributeParameterValue ICsModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsAttributeParameterValue : CsModel, ICsAttributeParameterValue, ICsModel, IModelStatus Constructors CsAttributeParameterValue(bool, bool, bool, SourceCodeType, AttributeParameterKind, string, string, CsType, IReadOnlyList<CsAttributeParameterValue>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsAttributeParameterValue Declaration protected CsAttributeParameterValue(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, AttributeParameterKind parameterKind, string value, string enumValue, CsType typeValue, IReadOnlyList<CsAttributeParameterValue> values, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. AttributeParameterKind parameterKind The kind of attribute parameter. string value The value of the attribute parameter. string enumValue The value of the enumeration if the parameter is an enumeration. CsType typeValue The type if the parameter is a single value. IReadOnlyList<CsAttributeParameterValue> values The list of values if the parameter has more then one value. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties EnumValue The enum value provides the name of the enumeration value that was provided. This will be populated if the property ParameterKind is set to 'Enum' Declaration public string EnumValue { get; } Property Value Type Description string ParameterKind Determines the kind of parameter that has been returned. Declaration public AttributeParameterKind ParameterKind { get; } Property Value Type Description AttributeParameterKind TypeValue The type definition of the parameter that was passed. This will be populated if the property ParameterKind is set to 'Type' Declaration public CsType TypeValue { get; } Property Value Type Description CsType Value Gets the raw value assigned to the parameter. This will be populated if the property ParameterKind is not set to 'Array' Declaration public string Value { get; } Property Value Type Description string Values Gets an enumeration of all the parameter values that were assigned to the attribute parameter. This will be populated if the property ParameterKind is set to 'Array' Declaration public IReadOnlyList<CsAttributeParameterValue> Values { get; } Property Value Type Description IReadOnlyList<CsAttributeParameterValue> Implements ICsAttributeParameterValue ICsModel IModelStatus Extension Methods GenerateCSharpAttributeExtensions.GenerateCSharpAttributeParameterValueSignature(CsAttributeParameterValue)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsClass.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsClass.html",
    "title": "Class CsClass | CodeFactory for Windows",
    "keywords": "Class CsClass Data model that represents a class implementation. Inheritance object CsModel CsContainer CsContainerWithNestedContainers CsClass Implements ICsNestedModel ICsClass ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsContainerWithNestedContainers.NestedModels CsContainerWithNestedContainers.NestedClasses CsContainerWithNestedContainers.NestedInterfaces CsContainerWithNestedContainers.NestedStructures CsContainerWithNestedContainers.NestedEnums CsContainerWithNestedContainers.NestedType CsContainerWithNestedContainers.IsNested CsContainer.AddBeforeDocsAsync(string) CsContainer.AddBeforeDocsTransactionAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.AddAfterDocsTransactionAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.ReplaceDocsTransactionAsync(string) CsContainer.DeleteDocsAsync() CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddBeforeTransactionAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddAfterTransactionAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToBeginningTransactionAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.AddToEndTransactionAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.ReplaceTransactionAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.AddBeforeTransactionAsync(string, bool) CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsClass : CsContainerWithNestedContainers, ICsNestedModel, ICsClass, ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsClass(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, bool, CsNestedType, bool, bool, bool, CsClass, IReadOnlyList<ICsNestedModel>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsClass Declaration protected CsClass(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isNested, CsNestedType nestedType, bool isStatic, bool isAbstract, bool isSealed, CsClass baseClass, IReadOnlyList<ICsNestedModel> nestedModels, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. bool isNested Flag that determines if the container type is nested in another type definition. CsNestedType nestedType Enumeration of the type of nesting the container is. bool isStatic Flag that determines if the model is static. bool isAbstract Flag that determines if the model is abstract. bool isSealed Flag that determines if the model is sealed. CsClass baseClass The class model that is base class of this class. IReadOnlyList<ICsNestedModel> nestedModels List of nested models assigned to this container. This is an optional parameter and can be null string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties BaseClass The base class assigned to this class. This will be null if HasBase is false. Declaration public CsClass BaseClass { get; } Property Value Type Description CsClass Constructors List of the constructors implemented in this class. Declaration public IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Destructor The destructor implemented in this class. Declaration public CsMethod Destructor { get; } Property Value Type Description CsMethod Fields List of the fields implemented in this class. Declaration public IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> IsAbstract Flat that determines if this is an abstract class. Declaration public bool IsAbstract { get; } Property Value Type Description bool IsSealed Flag that determines if this class has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this class is static. Declaration public bool IsStatic { get; } Property Value Type Description bool Implements ICsNestedModel ICsClass ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetMissingInterfaceMembers(CsClass, List<MapNamespace>) CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpCsContainerExtensions.GenerateCSharpTypeName(CsContainer, NamespaceManager, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsContainer.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsContainer.html",
    "title": "Class CsContainer | CodeFactory for Windows",
    "keywords": "Class CsContainer Data model that implements the base implement for all models that support members. Inheritance object CsModel CsContainer CsContainerWithNestedContainers CsRecord CsRecordStructure Implements ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsContainer : CsModel, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsContainer(bool, bool, bool, SourceCodeType, CsModelType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsContainerType, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsContainer Declaration protected CsContainer(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsContainerType containerType, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source file the model was loaded from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsContainerType containerType The type of container this model represents. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> ContainerType The type of container model that has been implemented. Declaration public CsContainerType ContainerType { get; } Property Value Type Description CsContainerType Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description string Events Enumeration of the events assigned to this container. If HasEvents is false this will be null. Declaration public IReadOnlyList<CsEvent> Events { get; } Property Value Type Description IReadOnlyList<CsEvent> GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList<CsGenericParameter> GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description bool HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description bool InheritedInterfaces List of the interfaces that are inherited by this container. Declaration public IReadOnlyList<CsInterface> InheritedInterfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string Members List of the members that are implemented in this container. Declaration public IReadOnlyList<CsMember> Members { get; } Property Value Type Description IReadOnlyList<CsMember> Methods List of the methods that are implemented in this container. Declaration public IReadOnlyList<CsMethod> Methods { get; } Property Value Type Description IReadOnlyList<CsMethod> ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name of the container. Declaration public string Name { get; } Property Value Type Description string Namespace The namespace the container objects belongs to. Declaration public string Namespace { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Properties List of the properties that are implemented in this container. Declaration public IReadOnlyList<CsProperty> Properties { get; } Property Value Type Description IReadOnlyList<CsProperty> Security The security scope assigned to the container. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsContainerin the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsContainerin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddAfterDocsTransactionAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSourceTransaction> AddAfterDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterTransactionAsync(string) Adds the source code directly after the definition of the ICsContainerin the target document. Declaration public abstract Task<CsSourceTransaction> AddAfterTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the container definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeDocsTransactionAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSourceTransaction> AddBeforeDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string, bool) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the container definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToBeginningAsync(string) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration public abstract Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToBeginningAsync(string, string) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddToBeginningAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToBeginningTransactionAsync(string) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration public abstract Task<CsSourceTransaction> AddToBeginningTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToEndAsync(string) Adds the source code inside of the container at the end of where members are defined in the container. Declaration public abstract Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndAsync(string, string) Adds the source code inside of the container at the end of where members are defined in the container. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddToEndAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndTransactionAsync(string) Adds the source code inside of the container at the end of where members are defined in the container. Declaration public abstract Task<CsSourceTransaction> AddToEndTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the container from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the container from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the container is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration public abstract Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. GetBodySourceLocationAsync() Gets the starting and ending locations of the body located in the container. Declaration public abstract Task<ISourceLocation> GetBodySourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetBodySourceLocationAsync(string) Gets the starting and ending locations of the body located in the container. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetBodySourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task<ISourceLocation> The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetBodySyntaxAsync() The source code syntax that is stored in the body of the container model. This will be null if the container was not loaded from source code. Declaration public abstract Task<string> GetBodySyntaxAsync() Returns Type Description Task<string> GetSourceLocationAsync() Gets the starting and ending locations within the document where the container is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the container is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task<ISourceLocation> The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current container with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current container with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. ReplaceDocsTransactionAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSourceTransaction> ReplaceDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceTransactionAsync(string) Replaces the current container with the provided source code. Declaration public abstract Task<CsSourceTransaction> ReplaceTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpCsContainerExtensions.GenerateCSharpTypeName(CsContainer, NamespaceManager, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsContainerExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsContainerExtensions.html",
    "title": "Class CsContainerExtensions | CodeFactory for Windows",
    "keywords": "Class CsContainerExtensions Extension management class that manages models that implement CsContainer. Inheritance object CsContainerExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsContainerExtensions Methods GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) Loads all members from a target model that implements CsContainer and returns all members and the comparison hash code for each member. Declaration public static IReadOnlyList<KeyValuePair<int, CsMember>> GetComparisonMembers(this CsContainer source, MemberComparisonType comparisonType = MemberComparisonType.Base, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsContainer source The target container to load members from. MemberComparisonType comparisonType The type of hash code to build for comparision. Default comparison type is set to the base comparison. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description IReadOnlyList<KeyValuePair<int, CsMember>> List of all the hash codes and the members for each hashcode. Exceptions Type Condition ArgumentNullException Thrown if the source container is null. GetMissingInterfaceMembers(CsClass, List<MapNamespace>) Creates a list of the interface members that are not implemented in the CsClass model. Declaration public static IReadOnlyList<CsMember> GetMissingInterfaceMembers(this CsClass source, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsClass source The source model to check. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description IReadOnlyList<CsMember> List of models that are missing or an empty list if there are no missing members. Exceptions Type Condition ArgumentNullException Throws an argument null exception if the model does not exist. GetMissingInterfaceMembers(CsStructure, List<MapNamespace>) Creates a list of the interface members that are not implemented in the CsStructure model. Declaration public static IReadOnlyList<CsMember> GetMissingInterfaceMembers(this CsStructure source, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsStructure source The source model to check. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description IReadOnlyList<CsMember> List of models that are missing or an empty list if there are no missing members. Exceptions Type Condition ArgumentNullException Throws an argument null exception if the model does not exist."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsContainerType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsContainerType.html",
    "title": "Enum CsContainerType | CodeFactory for Windows",
    "keywords": "Enum CsContainerType Definition of the different types of container based members are supported by the C# source code type. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsContainerType Fields Name Description Class The container implements a class model. Interface The container implements a interface model. Record The container implements a record model. RecordStructure The container implements a record structure model. Structure The container implements a structure model. Unknown The container is of an unknown type."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsContainerWithNestedContainers.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsContainerWithNestedContainers.html",
    "title": "Class CsContainerWithNestedContainers | CodeFactory for Windows",
    "keywords": "Class CsContainerWithNestedContainers Data model that implements the base implement for all models that support members. Inheritance object CsModel CsContainer CsContainerWithNestedContainers CsClass CsInterface CsStructure Implements ICsNestedContainers ICsContainer ICsGeneric ICsNestedModel ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsContainer.AddBeforeDocsAsync(string) CsContainer.AddBeforeDocsTransactionAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.AddAfterDocsTransactionAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.ReplaceDocsTransactionAsync(string) CsContainer.DeleteDocsAsync() CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddBeforeTransactionAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddAfterTransactionAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToBeginningTransactionAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.AddToEndTransactionAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.ReplaceTransactionAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.AddBeforeTransactionAsync(string, bool) CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsContainerWithNestedContainers : CsContainer, ICsNestedContainers, ICsContainer, ICsGeneric, ICsNestedModel, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsContainerWithNestedContainers(bool, bool, bool, SourceCodeType, CsModelType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsContainerType, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, bool, CsNestedType, IReadOnlyList<ICsNestedModel>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsContainerWithNestedContainers Declaration protected CsContainerWithNestedContainers(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsContainerType containerType, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isNested, CsNestedType nestedType, IReadOnlyList<ICsNestedModel> nestedModels = null, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source file the model was loaded from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsContainerType containerType The type of container this model represents. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. bool isNested Flag that determines if the container type is nested in another type definition. CsNestedType nestedType Enumeration of the type of nesting the container is. IReadOnlyList<ICsNestedModel> nestedModels List of nested models assigned to this container. This is an optional parameter and can be null string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties IsNested Flag that determines if this model is nested in a parent model. Declaration public bool IsNested { get; } Property Value Type Description bool NestedClasses Classes that are nested in this container. Declaration public IReadOnlyList<CsClass> NestedClasses { get; } Property Value Type Description IReadOnlyList<CsClass> NestedEnums Enums that are nested in this container. Declaration public IReadOnlyList<CsEnum> NestedEnums { get; } Property Value Type Description IReadOnlyList<CsEnum> NestedInterfaces Interfaces that are nested in this container. Declaration public IReadOnlyList<CsInterface> NestedInterfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> NestedModels Models that are nested in the implementation of this container. Declaration public IReadOnlyList<ICsNestedModel> NestedModels { get; } Property Value Type Description IReadOnlyList<ICsNestedModel> NestedStructures Structures that are nested in this container. Declaration public IReadOnlyList<CsStructure> NestedStructures { get; } Property Value Type Description IReadOnlyList<CsStructure> NestedType Identifies the type of model that has been nested. Declaration public CsNestedType NestedType { get; } Property Value Type Description CsNestedType Implements ICsNestedContainers ICsContainer ICsGeneric ICsNestedModel ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpCsContainerExtensions.GenerateCSharpTypeName(CsContainer, NamespaceManager, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsDelegate.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsDelegate.html",
    "title": "Class CsDelegate | CodeFactory for Windows",
    "keywords": "Class CsDelegate Data model that represents the definition of a delegate. Inheritance object CsModel CsDelegate Implements ICsDelegate ICsModel IModelStatus ICsAttributes ICsGeneric IDocumentation IParent ILookup ISourceFiles Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsDelegate : CsModel, ICsDelegate, ICsModel, IModelStatus, ICsAttributes, ICsGeneric, IDocumentation, IParent, ILookup, ISourceFiles Constructors CsDelegate(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, bool, string, string, string, IReadOnlyList<string>, string, string, bool, bool, string, CsSecurity, CsType, IReadOnlyList<CsParameter>, CsMethod, CsMethod, CsMethod, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsDelegate Declaration protected CsDelegate(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, bool hasDocumentation, string documentation, string lookupPath, string modelSourceFile, IReadOnlyList<string> sourceFiles, string name, string ns, bool hasParameters, bool isVoid, string parentPath, CsSecurity security, CsType returnType, IReadOnlyList<CsParameter> parameters, CsMethod invokeMethod, CsMethod beginInvokeMethod, CsMethod endInvokeMethod, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the delegate is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the delegate. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the delegate. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string modelSourceFile The source code file the model was created from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. string name The name of the model. string ns The namespace this delegate is assigned to. bool hasParameters Flag that determines if the delegate had parameters. bool isVoid Flag that determines if the return type is void. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. CsType returnType The type definition for the return type. IReadOnlyList<CsParameter> parameters The parameters assigned to the delegate. CsMethod invokeMethod The invoke method definition assigned to this delegate. CsMethod beginInvokeMethod The begin invoke method definition assigned to this delegate. CsMethod endInvokeMethod The end invoke method definition assigned to this delegate. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> BeginInvokeMethod The begin invoke delegate definition for this delegate. Declaration public CsMethod BeginInvokeMethod { get; } Property Value Type Description CsMethod Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description string EndInvokeMethod The end invoke delegate definition for this delegate. Declaration public CsMethod EndInvokeMethod { get; } Property Value Type Description CsMethod GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList<CsGenericParameter> GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description bool HasParameters Flag that determines if the delegate has parameters assigned to it. Declaration public bool HasParameters { get; } Property Value Type Description bool HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description bool InvokeMethod The invoke delegate definition for this delegate. Declaration public CsMethod InvokeMethod { get; } Property Value Type Description CsMethod IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description bool IsVoid Flag that determines if the delegate return is a void. Declaration public bool IsVoid { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name assigned to the this item. Declaration public string Name { get; } Property Value Type Description string Namespace The namespace the delegate is assigned to. Declaration public string Namespace { get; } Property Value Type Description string Parameters List of the parameters that have been assigned to the delegate. If HasParameters property is set to false this will be an empty list. Declaration public IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsParameter> Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel ReturnType The type information about the return type assigned to the delegate. Declaration public CsType ReturnType { get; } Property Value Type Description CsType Security The security scope that has been assigned to this item. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddAfterDocsTransactionAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSourceTransaction> AddAfterDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterTransactionAsync(string) Adds the source code directly after the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSourceTransaction> AddAfterTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the delegate definition not before the documentation or attributes that are assigned. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeDocsTransactionAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSourceTransaction> AddBeforeDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string, bool) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the delegate definition not before the documentation or attributes that are assigned. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration public abstract Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. ReplaceDocsTransactionAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSourceTransaction> ReplaceDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceTransactionAsync(string) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSourceTransaction> ReplaceTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsDelegate ICsModel IModelStatus ICsAttributes ICsGeneric IDocumentation IParent ILookup ISourceFiles Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsEnum.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsEnum.html",
    "title": "Class CsEnum | CodeFactory for Windows",
    "keywords": "Class CsEnum Data model that represents an enumeration definition. Inheritance object CsModel CsEnum Implements ICsEnum ICsNestedModel ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsEnum : CsModel, ICsEnum, ICsNestedModel, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsEnum(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, bool, string, string, string, IReadOnlyList<string>, string, string, CsSecurity, IReadOnlyList<CsEnumValue>, bool, CsNestedType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsEnum Declaration protected CsEnum(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string parentPath, bool hasDocumentation, string documentation, string lookupPath, string modelSourceFile, IReadOnlyList<string> sourceFiles, string name, string ns, CsSecurity security, IReadOnlyList<CsEnumValue> values, bool isNested, CsNestedType nestedType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string parentPath The fully qualified lookup path for the parent model to this one. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. string name The name of the model. string ns CsSecurity security The security scope assigned to this model. IReadOnlyList<CsEnumValue> values The enumeration values assigned to this enumeration. bool isNested Flag that determines if the container type is nested in another type definition. CsNestedType nestedType Enumeration of the type of nesting the container is. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description string HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description bool IsNested Flag that determines if this model is nested in a parent model. Declaration public bool IsNested { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name of the enumeration. Declaration public string Name { get; } Property Value Type Description string Namespace The namespace the enumeration belongs to. Declaration public string Namespace { get; } Property Value Type Description string NestedType Identifies the type of model that has been nested. Declaration public CsNestedType NestedType { get; } Property Value Type Description CsNestedType Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Security The security scope assigned to the enumeration. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Values List of the enumeration values implemented in this enumeration. Declaration public IReadOnlyList<CsEnumValue> Values { get; } Property Value Type Description IReadOnlyList<CsEnumValue> Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsEnumin the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsEnumin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddAfterDocsTransactionAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSourceTransaction> AddAfterDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterTransactionAsync(string) Adds the source code directly after the definition of the ICsEnumin the target document. Declaration public abstract Task<CsSourceTransaction> AddAfterTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the enum definition not before the documentation or attributes that are assigned. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeDocsTransactionAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSourceTransaction> AddBeforeDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string, bool) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the enum definition not before the documentation or attributes that are assigned. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToBeginningAsync(string) Adds the source code inside of the enumeration at the beginning of where members are defined in the enumeration. Declaration public abstract Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToBeginningTransactionAsync(string) Adds the source code inside of the enumeration at the beginning of where members are defined in the enumeration. Declaration public abstract Task<CsSourceTransaction> AddToBeginningTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToEndAsync(string) Adds the source code inside of the enumeration at the end of where members are defined in the enumeration. Declaration public abstract Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndTransactionAsync(string) Adds the source code inside of the enumeration at the end of where members are defined in the enumeration. Declaration public abstract Task<CsSourceTransaction> AddToEndTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the enumeration from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the enumeration has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the enumeration from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the enumeration is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the enumeration has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration public abstract Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. GetBodySourceLocationAsync() Gets the starting and ending locations of the body located in the enum. Declaration public abstract Task<ISourceLocation> GetBodySourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location in the enum. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the enumeration is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the enumeration. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the enumeration is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the enumeration defined in. Returns Type Description Task<ISourceLocation> The source location for the enumeration. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current enumeration with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current enumeration with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. ReplaceDocsTransactionAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSourceTransaction> ReplaceDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceTransactionAsync(string) Replaces the current enumeration with the provided source code. Declaration public abstract Task<CsSourceTransaction> ReplaceTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsEnum ICsNestedModel ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods GenerateCSharpEnumExtensions.GenerateCSharpEnumValue(CsEnum, string) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsEnumValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsEnumValue.html",
    "title": "Class CsEnumValue | CodeFactory for Windows",
    "keywords": "Class CsEnumValue Data model that represents a defined value for an enumeration. Inheritance object CsModel CsEnumValue Implements ICsEnumValue ICsModel IModelStatus ICsAttributes IDocumentation IParent ILookup ISourceFiles Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsEnumValue : CsModel, ICsEnumValue, ICsModel, IModelStatus, ICsAttributes, IDocumentation, IParent, ILookup, ISourceFiles Constructors CsEnumValue(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, bool, string, string, string, IReadOnlyList<string>, string, string, CsSecurity, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsEnumValue Declaration protected CsEnumValue(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string parentPath, bool hasDocumentation, string documentation, string lookupPath, string modelSourceFile, IReadOnlyList<string> sourceFiles, string name, string value, CsSecurity security, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string parentPath The fully qualified lookup path for the parent model to this one. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. string name The name of the model. string value The value assigned to the enumeration value. CsSecurity security The security scope assigned to this model. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description string HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name of the enumeration value. Declaration public string Name { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Security The security scope assigned to the enumeration value. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Value The value that has been assigned to the enumeration value. Declaration public string Value { get; } Property Value Type Description string Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsEnumValuein the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsEnumValuein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddAfterDocsTransactionAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSourceTransaction> AddAfterDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterTransactionAsync(string) Adds the source code directly after the definition of the ICsEnumValuein the target document. Declaration public abstract Task<CsSourceTransaction> AddAfterTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the member definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeDocsTransactionAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSourceTransaction> AddBeforeDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string, bool) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the member definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the delegate from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration public abstract Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the delegate is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current delegate with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. ReplaceDocsTransactionAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSourceTransaction> ReplaceDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceTransactionAsync(string) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSourceTransaction> ReplaceTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsEnumValue ICsModel IModelStatus ICsAttributes IDocumentation IParent ILookup ISourceFiles Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsEvent.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsEvent.html",
    "title": "Class CsEvent | CodeFactory for Windows",
    "keywords": "Class CsEvent Data model that represents the definition of an event. Inheritance object CsModel CsMember CsEvent Implements ICsEvent ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsMember.AddBeforeDocsAsync(string) CsMember.AddBeforeDocsTransactionAsync(string) CsMember.AddAfterDocsAsync(string) CsMember.AddAfterDocsTransactionAsync(string) CsMember.ReplaceDocsAsync(string) CsMember.ReplaceDocsTransactionAsync(string) CsMember.DeleteDocsAsync() CsMember.AddBeforeAsync(string, string) CsMember.AddBeforeAsync(string) CsMember.AddBeforeTransactionAsync(string) CsMember.AddBeforeAsync(string, bool) CsMember.AddBeforeTransactionAsync(string, bool) CsMember.AddAfterAsync(string, string) CsMember.AddAfterAsync(string) CsMember.AddAfterTransactionAsync(string) CsMember.DeleteAsync(string) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(string) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(string, string) CsMember.ReplaceAsync(string) CsMember.ReplaceTransactionAsync(string) CsMember.CommentOutSyntaxAsync(string) CsMember.GetMemberSyntaxAsync() CsMember.HasAttributes CsMember.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.ModelSourceFile CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsEvent : CsMember, ICsEvent, ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsEvent(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, IReadOnlyList<string>, bool, string, string, string, string, CsSecurity, bool, bool, bool, bool, bool, CsDelegate, CsMethod, CsMethod, CsMethod, CsType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsEvent Declaration protected CsEvent(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool isAbstract, bool isVirtual, bool isOverride, bool isSealed, bool isStatic, CsDelegate eventHandlerDelegate, CsMethod raiseMethod, CsMethod addMethod, CsMethod removeMethod, CsType eventType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. bool isAbstract Flag that determines if the model is abstract. bool isVirtual Flag that determines if the model is virtual. bool isOverride Flag that determines if the model is overridden. bool isSealed Flag that determines if the model is sealed. bool isStatic Flag that determines if the model is static. CsDelegate eventHandlerDelegate Delegate model for this event. CsMethod raiseMethod Model for the raise method for this event. CsMethod addMethod Model for the add method for this event. CsMethod removeMethod Model for the remove method for this event. CsType eventType The type definition that supports this event. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties AddMethod The method that adds a subscription to the event. Declaration public CsMethod AddMethod { get; } Property Value Type Description CsMethod EventHandlerDelegate The event handler delegate used by the event. Declaration public CsDelegate EventHandlerDelegate { get; } Property Value Type Description CsDelegate EventType The event handler type that is assigned to the event. Declaration public CsType EventType { get; } Property Value Type Description CsType IsAbstract Flag that determines if the event has been implemented as an abstract event. Declaration public bool IsAbstract { get; } Property Value Type Description bool IsOverride Flag that determines if the event has been overridden. Declaration public bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the event has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if the event is static. Declaration public bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the event is implemented as virtual. Declaration public bool IsVirtual { get; } Property Value Type Description bool RaiseMethod The method definition to raise the event. Declaration public CsMethod RaiseMethod { get; } Property Value Type Description CsMethod RemoveMethod The method that removes a subscription to the event. Declaration public CsMethod RemoveMethod { get; } Property Value Type Description CsMethod Implements ICsEvent ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods CsEventExtensions.GetComparisonHashCode(CsEvent, bool, bool, bool, List<MapNamespace>, string, string) GenerateCSharpCsEventExtensions.GenerateCSharpEventDeclaration(CsEvent, NamespaceManager, List<MapNamespace>, string, bool, CsSecurity, bool, bool, bool, bool, bool, bool, bool, string, string) GenerateCSharpCsEventExtensions.GenerateCSharpInterfaceEventDeclaration(CsEvent, NamespaceManager, List<MapNamespace>, string, string) CsMemberExtensions.GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsEventExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsEventExtensions.html",
    "title": "Class CsEventExtensions | CodeFactory for Windows",
    "keywords": "Class CsEventExtensions Extension methods that support the CsEvent model. Inheritance object CsEventExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsEventExtensions Methods GetComparisonHashCode(CsEvent, bool, bool, bool, List<MapNamespace>, string, string) Creates a comparision hashcode from a CsMethod model. Declaration public static int GetComparisonHashCode(this CsEvent source, bool includeSecurity = true, bool includeKeywords = true, bool includeAbstractKeyword = false, List<MapNamespace> mappedNamespaces = null, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsEvent source Source model to use to build the hash. bool includeSecurity Optional parameter that includes security in the comparision hash, default value is true. bool includeKeywords Optional parameter that includes keywords in the comparision hash, default value is true. bool includeAbstractKeyword Optional parameter that includes abstract keyword in the comparision hash, default value is false. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description int Computed hash value for the method signature."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsField.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsField.html",
    "title": "Class CsField | CodeFactory for Windows",
    "keywords": "Class CsField Data model that represents a field definition. Inheritance object CsModel CsMember CsField Implements ICsField ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsMember.AddBeforeDocsAsync(string) CsMember.AddBeforeDocsTransactionAsync(string) CsMember.AddAfterDocsAsync(string) CsMember.AddAfterDocsTransactionAsync(string) CsMember.ReplaceDocsAsync(string) CsMember.ReplaceDocsTransactionAsync(string) CsMember.DeleteDocsAsync() CsMember.AddBeforeAsync(string, string) CsMember.AddBeforeAsync(string) CsMember.AddBeforeTransactionAsync(string) CsMember.AddBeforeAsync(string, bool) CsMember.AddBeforeTransactionAsync(string, bool) CsMember.AddAfterAsync(string, string) CsMember.AddAfterAsync(string) CsMember.AddAfterTransactionAsync(string) CsMember.DeleteAsync(string) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(string) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(string, string) CsMember.ReplaceAsync(string) CsMember.ReplaceTransactionAsync(string) CsMember.CommentOutSyntaxAsync(string) CsMember.GetMemberSyntaxAsync() CsMember.HasAttributes CsMember.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.ModelSourceFile CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsField : CsMember, ICsField, ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsField(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, IReadOnlyList<string>, bool, string, string, string, string, CsSecurity, bool, bool, bool, string, CsType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsField Declaration protected CsField(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool isReadOnly, bool isStatic, bool isConstant, string constantValue, CsType dataType, string sourceDocument, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. bool isReadOnly Flag that determines if the model is read only. bool isStatic Flag that determines if the model is a static definition. bool isConstant Flag that determines if the field is a constant definition. string constantValue The value assigned to the field if it is a constant definition. CsType dataType The type definition for the field. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties ConstantValue The value that was assigned to the constant. Will return as the string representation of the value. Declaration public string ConstantValue { get; } Property Value Type Description string DataType The data type assigned to the field. Declaration public CsType DataType { get; } Property Value Type Description CsType IsConstant Flag that determines if the field is a constant. Declaration public bool IsConstant { get; } Property Value Type Description bool IsReadOnly Flag that determines if this field is set to readonly. Declaration public bool IsReadOnly { get; } Property Value Type Description bool IsStatic Flag that determines if the field is set to be static. Declaration public bool IsStatic { get; } Property Value Type Description bool Implements ICsField ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods CsFieldExtensions.GetComparisonHashCode(CsField, CsSecurity, bool, List<MapNamespace>, bool, string, string) GenerateCSharpCsFieldExtensions.GenerateCSharpFieldDeclaration(CsField, NamespaceManager, List<MapNamespace>, bool, CsSecurity, bool, string, string) CsMemberExtensions.GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsFieldExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsFieldExtensions.html",
    "title": "Class CsFieldExtensions | CodeFactory for Windows",
    "keywords": "Class CsFieldExtensions Extension methods that support the CsField model. Inheritance object CsFieldExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsFieldExtensions Methods GetComparisonHashCode(CsField, CsSecurity, bool, List<MapNamespace>, bool, string, string) Creates a comparision hashcode from a CsMethod model. Declaration public static int GetComparisonHashCode(this CsField source, CsSecurity targetSecurity = CsSecurity.Unknown, bool includeKeywords = true, List<MapNamespace> mappedNamespaces = null, bool useCamelCase = false, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsField source Source model to use to build the hash. CsSecurity targetSecurity Optional parameter that determines the target security to set field to for comparision purposes, default is unknown which will use the current security. bool includeKeywords Optional parameter that includes keywords in the comparision hash, default value is true. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool useCamelCase Optional parameter that determines if the parameter should be formated to use camel case, default is false. string namePrefix Optional parameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description int Computed hash value for the method signature."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsGenericParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsGenericParameter.html",
    "title": "Class CsGenericParameter | CodeFactory for Windows",
    "keywords": "Class CsGenericParameter Data model that represents the a generic parameter definition. Inheritance object CsModel CsGenericParameter Implements ICsGenericParameter ICsModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsGenericParameter : CsModel, ICsGenericParameter, ICsModel, IModelStatus Constructors CsGenericParameter(bool, bool, bool, SourceCodeType, CsModelType, bool, bool, bool, bool, bool, IReadOnlyList<CsType>, CsType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsGenericParameter Declaration protected CsGenericParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, bool hasOutKeyword, bool hasNewConstraint, bool hasClassConstraint, bool hasStructConstraint, bool hasConstraintTypes, IReadOnlyList<CsType> constrainingTypes, CsType type, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. bool hasOutKeyword Flag that determines if parameter has out keyword assigned. bool hasNewConstraint Flag that determines if generic parameter supports new keyword. bool hasClassConstraint flag that determines if the generic parameter has a constraint requirement to classes. bool hasStructConstraint Flag that determines if the generic parameter has a constraint requirement to structures. bool hasConstraintTypes Flag that determines if the generic parameter has additional type constraints. IReadOnlyList<CsType> constrainingTypes List of of additional constraints the generic parameter supports. CsType type The type definition for the generic type string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties ConstrainingTypes The constraining types the generic parameter must ad hear to. If there are no constraining types an empty list will be returned. Declaration public IReadOnlyList<CsType> ConstrainingTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasClassConstraint Flag that determines if the generic parameter has a constraint that it must implement from a class. Declaration public bool HasClassConstraint { get; } Property Value Type Description bool HasConstraintTypes Flag that determines if the generic parameter has constraining types the parameter must ad hear to. Declaration public bool HasConstraintTypes { get; } Property Value Type Description bool HasNewConstraint Flag that determines if the generic parameter has a constraint that is must support construction of a new type. Declaration public bool HasNewConstraint { get; } Property Value Type Description bool HasOutKeyword Flag that determines if the generic parameter uses the out keyword. Declaration public bool HasOutKeyword { get; } Property Value Type Description bool HasStructConstraint Flag that determines if the generic parameter has a constraint that is must implement from a structure. Declaration public bool HasStructConstraint { get; } Property Value Type Description bool Type The type definition of the generic parameter. Declaration public CsType Type { get; } Property Value Type Description CsType Implements ICsGenericParameter ICsModel IModelStatus Extension Methods GenerateCSharpGenericParameterExtensions.GenerateCSharpGenericWhereClauseSignature(CsGenericParameter, NamespaceManager, List<MapNamespace>)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsInterface.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsInterface.html",
    "title": "Class CsInterface | CodeFactory for Windows",
    "keywords": "Class CsInterface Data model that represents in definition of an interface. Inheritance object CsModel CsContainer CsContainerWithNestedContainers CsInterface Implements ICsNestedModel ICsInterface ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsContainerWithNestedContainers.NestedModels CsContainerWithNestedContainers.NestedClasses CsContainerWithNestedContainers.NestedInterfaces CsContainerWithNestedContainers.NestedStructures CsContainerWithNestedContainers.NestedEnums CsContainerWithNestedContainers.NestedType CsContainerWithNestedContainers.IsNested CsContainer.AddBeforeDocsAsync(string) CsContainer.AddBeforeDocsTransactionAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.AddAfterDocsTransactionAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.ReplaceDocsTransactionAsync(string) CsContainer.DeleteDocsAsync() CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddBeforeTransactionAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddAfterTransactionAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToBeginningTransactionAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.AddToEndTransactionAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.ReplaceTransactionAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.AddBeforeTransactionAsync(string, bool) CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsInterface : CsContainerWithNestedContainers, ICsNestedModel, ICsInterface, ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsInterface(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, bool, CsNestedType, IReadOnlyList<ICsNestedModel>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsInterface Declaration protected CsInterface(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isNested, CsNestedType nestedType, IReadOnlyList<ICsNestedModel> nestedModels = null, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. bool isNested Flag that determines if the container type is nested in another type definition. CsNestedType nestedType Enumeration of the type of nesting the container is. IReadOnlyList<ICsNestedModel> nestedModels List of nested models assigned to this container. This is an optional parameter and can be null string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Implements ICsNestedModel ICsInterface ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpCsContainerExtensions.GenerateCSharpTypeName(CsContainer, NamespaceManager, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsKnownLanguageType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsKnownLanguageType.html",
    "title": "Enum CsKnownLanguageType | CodeFactory for Windows",
    "keywords": "Enum CsKnownLanguageType Enumeration that identifies well know types used by the C# language. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsKnownLanguageType Fields Name Description Boolean The well known data type of bool Character The well know data type of char that stores a character. DateTime Well known type that holds a date and a time DateTime Decimal The well known data type is a decimal floating point number ±1.0 x 10-28 to ±7.9228 x 10 to the 28 power decimal Double The well known data type is a double precision floating point number ±5.0 × 10−324 to ±1.7 × 10 to the 308 power double NotWellKnown The language type definition is not well known (Default Value) Object Implements the well known type object. PlatformPointer Well known type that represents a pointer that is platform specific UIntPtr Pointer Well known type that is used to represent the location of a pointer or handle IntPtr Signed16BitInteger The well known data type is a signed 16 bit integer -32,768 to 32,767 short Signed32BitInteger The well known data type is a signed 32 bit integer -2,147,483,648 to 2,147,483,647 int Signed64BitInteger The well known data type is a signed 64 bit integer -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 long Signed8BitInteger The well know data type is a signed 8 bit integer -128 to 127 sbyte. Single The well known data type is a single precision floating point number ±1.5 x 10−45 to ±3.4 x 10 to the 38 power float String Well know type that contains an immutable sequence of UTF-16 code units string UnSigned8BitInteger The well know data type is an unsigned 8 bit integer 0 to 255 byte Unsigned16BitInteger The well know data type is a unsigned 16 bit integer 0 to 65,535 ushort Unsigned32BitInteger The well know data type is a unsigned 32 bit integer 0 to 4,294,967,295 uint Unsigned64BitInteger The well known data type is a unsigned 64 bit integer 0 to 18,446,744,073,709,551,615 ulong Void Is a special return type that specifies no value will be returned. void"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMember.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMember.html",
    "title": "Class CsMember | CodeFactory for Windows",
    "keywords": "Class CsMember Data model that builds the base class definition for all member types. Inheritance object CsModel CsMember CsEvent CsField CsMethod CsProperty Implements ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsMember : CsModel, ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsMember(bool, bool, bool, SourceCodeType, CsModelType, IReadOnlyList<CsAttribute>, string, IReadOnlyList<string>, bool, string, string, string, string, CsSecurity, CsMemberType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsMember Declaration protected CsMember(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, IReadOnlyList<CsAttribute> attributes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, CsMemberType memberType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of model that represents this member. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. CsMemberType memberType The type of member this model represents. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description string HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string MemberType The type of member the model is. Declaration public CsMemberType MemberType { get; } Property Value Type Description CsMemberType ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name assigned to the member. Declaration public string Name { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Security The security scope that has been assigned to the member. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsMemberin the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsMemberin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddAfterDocsTransactionAsync(string) Adds the supplied source code directly after the documentation. Declaration public abstract Task<CsSourceTransaction> AddAfterDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterTransactionAsync(string) Adds the source code directly after the definition of the ICsMemberin the target document. Declaration public abstract Task<CsSourceTransaction> AddAfterTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the member definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeDocsTransactionAsync(string) Adds the supplied source code directly before the documentation. Declaration public abstract Task<CsSourceTransaction> AddBeforeDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string, bool) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the member definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CommentOutSyntaxAsync(string) Comments out the member hosting syntax. Declaration public abstract Task<CsSource> CommentOutSyntaxAsync(string commentSyntax = \"//\") Parameters Type Name Description string commentSyntax Optional parameter that sets the syntax used to comment out the member defaults to '//' Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the member has been commented out. This will return the current instance if the model was not loaded from source. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the member from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the member from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the member is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration public abstract Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. GetMemberSyntaxAsync() Gets the syntax that defined the member model. Declaration public abstract Task<string> GetMemberSyntaxAsync() Returns Type Description Task<string> The syntax that makes up the member or null if the syntax cannot be loaded. This will be null if the model was not loaded from source code. GetSourceLocationAsync() Gets the starting and ending locations within the document where the member is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the member is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the member defined in. Returns Type Description Task<ISourceLocation> The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current member with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current member with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. ReplaceDocsTransactionAsync(string) Replaces the supplied source code directly this the documentation. Declaration public abstract Task<CsSourceTransaction> ReplaceDocsTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceTransactionAsync(string) Replaces the current member with the provided source code. Declaration public abstract Task<CsSourceTransaction> ReplaceTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods CsMemberExtensions.GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMemberExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMemberExtensions.html",
    "title": "Class CsMemberExtensions | CodeFactory for Windows",
    "keywords": "Class CsMemberExtensions Extension methods that support model that implement the CsMember interface. Inheritance object CsMemberExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsMemberExtensions Methods GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) Gets the hash code for a formatted model signature using the C# format. Declaration public static int GetMemberComparisonHashCode(this CsMember source, MemberComparisonType comparisonType = MemberComparisonType.Base, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsMember source The sources ICsModel model. MemberComparisonType comparisonType The type of comparision format to use when generating the hashcode. Default is set to the base comparision type. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description int The has code of the formatted model. Exceptions Type Condition ArgumentNullException This is thrown if the model is null."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMemberType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMemberType.html",
    "title": "Enum CsMemberType | CodeFactory for Windows",
    "keywords": "Enum CsMemberType Enumeration of the types of members that are supported in the c# source code type. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsMemberType Fields Name Description Event The member is a event model. Field The member is a field model. Method The member is a method model. Property The member is a property model. Unknown The member type is currently not known."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMethod.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMethod.html",
    "title": "Class CsMethod | CodeFactory for Windows",
    "keywords": "Class CsMethod Data model that represents a method definition. Inheritance object CsModel CsMember CsMethod Implements ICsMethod ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup ICsGeneric Inherited Members CsMember.AddBeforeDocsAsync(string) CsMember.AddBeforeDocsTransactionAsync(string) CsMember.AddAfterDocsAsync(string) CsMember.AddAfterDocsTransactionAsync(string) CsMember.ReplaceDocsAsync(string) CsMember.ReplaceDocsTransactionAsync(string) CsMember.DeleteDocsAsync() CsMember.AddBeforeAsync(string, string) CsMember.AddBeforeAsync(string) CsMember.AddBeforeTransactionAsync(string) CsMember.AddBeforeAsync(string, bool) CsMember.AddBeforeTransactionAsync(string, bool) CsMember.AddAfterAsync(string, string) CsMember.AddAfterAsync(string) CsMember.AddAfterTransactionAsync(string) CsMember.DeleteAsync(string) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(string) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(string, string) CsMember.ReplaceAsync(string) CsMember.ReplaceTransactionAsync(string) CsMember.CommentOutSyntaxAsync(string) CsMember.GetMemberSyntaxAsync() CsMember.HasAttributes CsMember.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.ModelSourceFile CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsMethod : CsMember, ICsMethod, ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup, ICsGeneric Constructors CsMethod(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, IReadOnlyList<string>, bool, string, string, string, string, CsSecurity, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, bool, bool, bool, bool, bool, bool, bool, bool, bool, CsMethodType, CsType, IReadOnlyList<CsParameter>, SyntaxType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsMethod Declaration protected CsMethod(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, bool hasParameters, bool isAbstract, bool isVirtual, bool isSealed, bool isOverride, bool isStatic, bool isVoid, bool isAsync, bool isExtension, CsMethodType methodType, CsType returnType, IReadOnlyList<CsParameter> parameters, SyntaxType contentSyntax = SyntaxType.Unknown, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string modelSourceFile Source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. bool isGeneric Flag that determines if the method is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the method. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the method. bool hasParameters Flag that determines if the method had parameters. bool isAbstract Flag that determines if the model is abstract. bool isVirtual Flag that determines if the model is virtual. bool isSealed Flag that determines if the model is sealed. bool isOverride Flag that determines if the model is overridden. bool isStatic Flag that determines if the model is static. bool isVoid Flag that determines if the return type is void. bool isAsync Flag that determines if the method has the async keyword assigned. bool isExtension Flag that determines if the method is an extension method. CsMethodType methodType The type of method that was implemented. CsType returnType The type definition for the return type. IReadOnlyList<CsParameter> parameters The parameters assigned to the method. SyntaxType contentSyntax How syntax is stored in the method. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList<CsGenericParameter> GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasParameters Flag that determines if the method has parameters assigned to it. Declaration public bool HasParameters { get; } Property Value Type Description bool HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description bool IsAbstract Flag that determines if the method has been implemented as abstract. Declaration public bool IsAbstract { get; } Property Value Type Description bool IsAsync Flag that determines if the method implements the Async keyword. Declaration public bool IsAsync { get; } Property Value Type Description bool IsExtension Flag that determines if the method is an extension method. Declaration public bool IsExtension { get; } Property Value Type Description bool IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description bool IsOverride Flag that determines if the method has been overridden. Declaration public bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the method has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this is a static method. Declaration public bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the method has been implemented as virtual. Declaration public bool IsVirtual { get; } Property Value Type Description bool IsVoid Flag that determines if the methods return type is void. Declaration public bool IsVoid { get; } Property Value Type Description bool MethodType Determines the type of method that was loaded into this model. Declaration public CsMethodType MethodType { get; } Property Value Type Description CsMethodType Parameters Enumeration of the parameters that have been assigned to the method. If HasParameters property is set to false this will be null. Declaration public IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsParameter> ReturnType The type information about the return type assigned to the method. if flag IsVoid is true then the return type will be set to null. Declaration public CsType ReturnType { get; } Property Value Type Description CsType SyntaxContent Determines how the internal syntax for the method is stored. Declaration public SyntaxType SyntaxContent { get; } Property Value Type Description SyntaxType Methods AddToBeginningBodySyntaxAsync(string) Adds the source code to the beginning of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSource> AddToBeginningBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToBeginningBodySyntaxAsync(string, string) Adds the source code to the beginning of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddToBeginningBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToBeginningBodySyntaxTransactionAsync(string) Adds the source code to the beginning of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSourceTransaction> AddToBeginningBodySyntaxTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToEndBodySyntaxAsync(string) Adds the source code to the end of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSource> AddToEndBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToEndBodySyntaxAsync(string, string) Adds the source code to the end of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> AddToEndBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToEndBodySyntaxTransactionAsync(string) Adds the source code to the end of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSourceTransaction> AddToEndBodySyntaxTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteBodySyntaxAsync() Deletes the source syntax from the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSource> DeleteBodySyntaxAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. DeleteBodySyntaxAsync(string) Deletes the source syntax from the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> DeleteBodySyntaxAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. GetBodySyntaxAsync() The source code syntax that is stored in the body of the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Body. Declaration public abstract Task<string> GetBodySyntaxAsync() Returns Type Description Task<string> GetBodySyntaxListAsync() The source code syntax that is stored in the body of the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Body. This will return each line of code that has a line feed or return as a separate string. Declaration public abstract Task<List<string>> GetBodySyntaxListAsync() Returns Type Description Task<List<string>> GetExpressionSyntaxAsync() Gets the expression that has been assigned to the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Expression. Declaration public abstract Task<string> GetExpressionSyntaxAsync() Returns Type Description Task<string> ReplaceBodySyntaxAsync(string) Replaces the syntax in the body of the method. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSource> ReplaceBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceBodySyntaxAsync(string, string) Replaces the syntax in the body of the method. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the body of the method. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceBodySyntaxTransactionAsync(string) Replaces the syntax in the body of the method. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration public abstract Task<CsSourceTransaction> ReplaceBodySyntaxTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceExpressionAsync(string) Replaces the expression assigned to the method with the provided source code. The ContentSyntax must be set to Expression or else an exception will be thrown. Declaration public abstract Task<CsSource> ReplaceExpressionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that will replace the original expression. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceExpressionAsync(string, string) Replaces the expression assigned to the method with the provided source code. The ContentSyntax must be set to Expression or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] public abstract Task<CsSource> ReplaceExpressionAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that will replace the original expression. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceExpressionTransactionAsync(string) Replaces the expression assigned to the method with the provided source code. The ContentSyntax must be set to Expression or else an exception will be thrown. Declaration public abstract Task<CsSourceTransaction> ReplaceExpressionTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that will replace the original expression. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsMethod ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup ICsGeneric Extension Methods CsMemberExtensions.GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) CsMethodExtentions.GetComparisonHashCode(CsMethod, bool, bool, bool, List<MapNamespace>, bool, string, string, string, string) GenerateCSharpMethodExtensions.GenerateCSharpMethodName(CsMethod, bool, string, string, string, string) GenerateCSharpMethodExtensions.GenerateCSharpMethodSignature(CsMethod, NamespaceManager, bool, bool, CsSecurity, bool, bool, bool, bool, bool, bool, bool, List<MapNamespace>, bool, string, string, bool, string, string, string) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMethodExtentions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMethodExtentions.html",
    "title": "Class CsMethodExtentions | CodeFactory for Windows",
    "keywords": "Class CsMethodExtentions Extension methods that support the CsMethod model. Inheritance object CsMethodExtentions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsMethodExtentions Methods GetComparisonHashCode(CsMethod, bool, bool, bool, List<MapNamespace>, bool, string, string, string, string) Creates a comparision hashcode from a CsMethod model. Declaration public static int GetComparisonHashCode(this CsMethod source, bool includeSecurity = true, bool includeKeywords = true, bool includeAbstractKeyword = false, List<MapNamespace> mappedNamespaces = null, bool forceAsyncDefinition = false, string asyncPrefix = null, string asyncSuffix = null, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsMethod source Source model to use to build the hash. bool includeSecurity Optional parameter that includes security in the comparision hash, default value is true. bool includeKeywords Optional parameter that includes keywords in the comparision hash, default value is true. bool includeAbstractKeyword Optional parameter that includes abstract keyword in the comparision hash, default value is false. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool forceAsyncDefinition Optional parameter that forces the method to confirm to an async signature, default value is false. string asyncPrefix Optional parameter that is used with forceAsyncDefinition that includes an expected prefix on the method name, default value is null. string asyncSuffix Optional parameter that is used with forceAsyncDefinition that includes an expected suffix on the method name, default value is Async. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description int Computed hash value for the method signature."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsMethodType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsMethodType.html",
    "title": "Enum CsMethodType | CodeFactory for Windows",
    "keywords": "Enum CsMethodType Enumeration of the type of methods that are supported in C#. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsMethodType Fields Name Description Add The method is a add method that adds subscription to a event. Constructor The method is a constructor for a supporting class or structure. Destructor The method is a destructor for a supporting class. Get The method supports the get functionality from a property. Init The method supports the init functionality from a property or an indexer. Invoke The method supports the Invoke functionality from a delegate. Local The method is a local method and imbedded in another method Member The method is a member of a supporting interface, class or structure. PartialDefinition This method is the definition for a partial method. PartialImplementation This method is the implementation for a partial method. Raise The method supports the raise functionality from an event. Remove The method is a remove method that removes subscription from an event. Set The method supports the set functionality from a property. Unknown The type of method is unknown"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsModel.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsModel.html",
    "title": "Class CsModel | CodeFactory for Windows",
    "keywords": "Class CsModel Base class that all C# compiler based data models derive from. Inheritance object CsModel CsAttribute CsAttributeParameter CsAttributeParameterValue CsContainer CsDelegate CsEnum CsEnumValue CsGenericParameter CsMember CsNamespace CsParameter CsParameterDefaultValue CsSource CsTupleTypeParameter CsType CsUsingStatement Implements ICsModel IModelStatus Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsModel : ICsModel, IModelStatus Constructors CsModel(bool, bool, bool, SourceCodeType, CsModelType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsModel Declaration protected CsModel(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Fields LocalModelErrors Model field that stores the models load exceptions. Declaration protected readonly IReadOnlyList<ModelLoadException> LocalModelErrors Field Value Type Description IReadOnlyList<ModelLoadException> ModelStore Model field used to lookup models that were created during the compile or reference lookup using the C# compiler. Declaration protected readonly ModelStore<ICsModel> ModelStore Field Value Type Description ModelStore<ICsModel> Properties HasErrors Flag that determines if this model or one of the children of this model has an error. Declaration public bool HasErrors { get; } Property Value Type Description bool IsLoaded Flag that determines if this model was able to load. Declaration public bool IsLoaded { get; } Property Value Type Description bool Language The target language this model was loaded from. Declaration public SourceCodeType Language { get; } Property Value Type Description SourceCodeType LoadedFromSource Flag that determines if this model was loaded from source code or was loaded through reflects or symbol libraries. Declaration public bool LoadedFromSource { get; } Property Value Type Description bool ModelType The type of c# model that is implemented. Declaration public CsModelType ModelType { get; } Property Value Type Description CsModelType SourceDocument The fully qualified path to the document that was used to load the model from source. This will be populated if the model was loaded from source. Declaration public string SourceDocument { get; } Property Value Type Description string Methods GetErrors() Gets the ModelLoadException from the current model and all child models of this model. Declaration public abstract IReadOnlyList<ModelLoadException> GetErrors() Returns Type Description IReadOnlyList<ModelLoadException> Returns a IReadOnlyList<T> of the ModelLoadException exceptions or an empty list if no exceptions exist. GetModel(string) Searchs for an existing C# model that has been loaded with the load of the source code. Declaration public CsModel GetModel(string lookupPath) Parameters Type Name Description string lookupPath The lookup path that is assigned to a loaded model. Returns Type Description CsModel Returns the model as the base CsModel type. GetModel<T>(string) Searchs for an existing C# model that has been loaded with the load of the source code. Declaration public T GetModel<T>(string lookupPath) where T : class, ICsModel Parameters Type Name Description string lookupPath The lookup path that is assigned to a loaded model. Returns Type Description T Returns the model as the identified type it will either return the instance or null if it is not found or not the correct type. Type Parameters Name Description T The target CsModel type to cast to before returning. LookupModel(string) Helper method that looks up a code factory model from the model store. Declaration [Obsolete(\"LookupModel is obsolete and will be removed in later versions of the framework. Use GetModel or GetModel<T>\", false)] protected CsModel LookupModel(string path) Parameters Type Name Description string path The fully qualified path of the model to be loaded from the model store. Returns Type Description CsModel The loaded model or null if the model could not be loaded, or found. Implements ICsModel IModelStatus"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsModelStore.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsModelStore.html",
    "title": "Class CsModelStore | CodeFactory for Windows",
    "keywords": "Class CsModelStore Model storage class used to store c# code factory models, to be used to pass data to factories. Inheritance object CsModelStore Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public class CsModelStore Constructors CsModelStore() Creates a new instance of the CsModelStore and initializes the store for data to be added. Declaration public CsModelStore() CsModelStore(ICsModel) Creates a new instance of the CsModelStore and sets a single model in the store. Declaration public CsModelStore(ICsModel model) Parameters Type Name Description ICsModel model The model to be added to the store. CsModelStore(Dictionary<string, IEnumerable<ICsModel>>) Creates a new instance of the CsModelStore and loads all the data for all the categories. Declaration public CsModelStore(Dictionary<string, IEnumerable<ICsModel>> allModels) Parameters Type Name Description Dictionary<string, IEnumerable<ICsModel>> allModels All the model data to be added to the store. Properties Model The single ICsModel that is provided for the T4 Template. Declaration public ICsModel Model { get; } Property Value Type Description ICsModel Methods AddModels(string, IEnumerable<ICsModel>) Adds many C# models to the store by category. Declaration public void AddModels(string category, IEnumerable<ICsModel> models) Parameters Type Name Description string category Name used to keep track of the models that are stored together. IEnumerable<ICsModel> models The models stored by the target category. Models(string) Gets the models from a target category. Declaration public IEnumerable<ICsModel> Models(string category) Parameters Type Name Description string category Category to get models for. Returns Type Description IEnumerable<ICsModel> Returns a enumeration of the models. If no models were found then an empty enumeration is returned. SetModel(ICsModel) Sets the single model to be shared with a factory. Declaration public void SetModel(ICsModel model) Parameters Type Name Description ICsModel model Target model to be used in a factory."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsModelType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsModelType.html",
    "title": "Enum CsModelType | CodeFactory for Windows",
    "keywords": "Enum CsModelType The code factory model types that represent the C# source code type. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsModelType Fields Name Description Attribute Model is a attribute implementation. AttributeParameter Model is a attribute parameter implementation. AttributeParameterValue Model stores a parameter value from an attribute. Class Model is a class implementation. Delegate Model is a delegate definition. DelegateParameter Model is a delegate parameter definition. DelegateParameterValue Model is a delegate parameter value. Enum Model stores enumeration definition. EnumValue Model that stores a unique value in an enumeration. Event Model is a event definition. Field Model is a field definition. GenericParameter Model is a generic parameter that belongs to a generic type. Interface Model is a interface implementation. Method Model is a method definition. Namespace Model is a namespace definition. Parameter Model is a parameter definition. ParameterDefaultValue Model that stores default value information for a parameter. Property Model is a property definition. Record Model stores a record implementation. RecordStructure Model stores a record structure implementation. Source Model that hosts all the source models that have been loaded. Structure Model is a structure implementation. TupleTypeParameter Model is a tuple type parameter that belongs to a tuple type. Type Model is a type definition. Unknown The model is currently not know by the C# source type. Using Model is a using statement."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsNamespace.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsNamespace.html",
    "title": "Class CsNamespace | CodeFactory for Windows",
    "keywords": "Class CsNamespace Data model that represents the definition of a namespace. Inheritance object CsModel CsNamespace Implements ICsNamespace ICsModel IModelStatus IParent ILookup ISourceFiles Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsNamespace : CsModel, ICsNamespace, ICsModel, IModelStatus, IParent, ILookup, ISourceFiles Constructors CsNamespace(bool, bool, bool, SourceCodeType, string, string, IReadOnlyList<string>, string, string, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsNamespace Declaration protected CsNamespace(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, string modelSourceFile, IReadOnlyList<string> sourceFiles, string name, string parentPath, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. string lookupPath The fully qualified lookup path for the model to be used in the model store. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles The source files where the namespace is defined in. string name The fully qualified name of the namespace. string parentPath The fully qualified path for the model that is a parent of this model. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string ModelSourceFile If this model was loaded from source code, then this will contain the target file definition was loaded from. This will be null if not loaded from source. Declaration public string ModelSourceFile { get; } Property Value Type Description string Name The name of the namespace. Declaration public string Name { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList<string> Implements ICsNamespace ICsModel IModelStatus IParent ILookup ISourceFiles"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsNestedType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsNestedType.html",
    "title": "Enum CsNestedType | CodeFactory for Windows",
    "keywords": "Enum CsNestedType Enumeration that identifies the target model type that is nested. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsNestedType Fields Name Description Class This nested type is a Class implementation Enum This nested type is a Enum implementation Interface This nested type is a Interface implementation NotNested This model is currently not nested in any other type. Structure This nested type is a Struct implementation"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsParameter.html",
    "title": "Class CsParameter | CodeFactory for Windows",
    "keywords": "Class CsParameter Data model that represents a parameter definition. Inheritance object CsModel CsParameter Implements ICsParameter ICsModel IModelStatus ICsAttributes IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsParameter : CsModel, ICsParameter, ICsModel, IModelStatus, ICsAttributes, IParent, ILookup Constructors CsParameter(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, string, bool, bool, bool, bool, bool, bool, string, CsType, CsParameterDefaultValue, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsParameter Declaration protected CsParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string lookupPath, string name, bool isOut, bool isRef, bool isParams, bool isOptional, bool isGenericParameter, bool hasDefaultValue, string parentPath, CsType parameterType, CsParameterDefaultValue defaultValue, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes Attributes assigned to this model. string lookupPath The fully qualified path of the model that is stored in the model store. string name The name of the parameter. bool isOut Parameter is assigned the out keyword. bool isRef Parameter is assigned the ref keyword. bool isParams Parameter supports a parameter array. bool isOptional Parameter is optional. bool isGenericParameter Is a generic parameter. bool hasDefaultValue Parameter has an assigned default value. string parentPath The fully qualified path name for the parent model to this model. CsType parameterType The type that this parameter supports. CsParameterDefaultValue defaultValue The default value assigned to this parameter. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> DefaultValue The default value assigned to the parameter. This will be null if the HasDefaultValue property is set to false. Declaration public CsParameterDefaultValue DefaultValue { get; } Property Value Type Description CsParameterDefaultValue HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description bool HasDefaultValue Flag that determines if the parameter has a default value. Declaration public bool HasDefaultValue { get; } Property Value Type Description bool IsGenericParameter Flag that determines if the parameter is a generic place holder. Declaration public bool IsGenericParameter { get; } Property Value Type Description bool IsOptional Flag that determines if the parameter is optional. Declaration public bool IsOptional { get; } Property Value Type Description bool IsOut Flag that determines if the parameter is assigned the out keyword. Declaration public bool IsOut { get; } Property Value Type Description bool IsParams Flag that determines if the parameter is an parameter array. Declaration public bool IsParams { get; } Property Value Type Description bool IsRef Flag that determines if the parameter is assigned the ref keyword. Declaration public bool IsRef { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string Name The name of the parameter. Declaration public string Name { get; } Property Value Type Description string ParameterType The data type assigned to the parameter. Declaration public CsType ParameterType { get; } Property Value Type Description CsType Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Implements ICsParameter ICsModel IModelStatus ICsAttributes IParent ILookup"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsParameterDefaultValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsParameterDefaultValue.html",
    "title": "Class CsParameterDefaultValue | CodeFactory for Windows",
    "keywords": "Class CsParameterDefaultValue Data model that represents the default value for a parameter. Inheritance object CsModel CsParameterDefaultValue Implements ICsParameterDefaultValue ICsModel IModelStatus IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsParameterDefaultValue : CsModel, ICsParameterDefaultValue, ICsModel, IModelStatus, IParent, ILookup Constructors CsParameterDefaultValue(bool, bool, bool, SourceCodeType, string, ParameterDefaultValueType, string, string, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsParameterDefaultValue Declaration protected CsParameterDefaultValue(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, ParameterDefaultValueType valueType, string value, string parentPath, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. string lookupPath The fully qualified path for the model in the model store. ParameterDefaultValueType valueType The type of default value assigned to the parameter. string value The value assigned as the default value. string parentPath The fully qualified path name for the parent model to this model. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Value If the default value is a literal value the value will be set, otherwise it will be set to null. Declaration public string Value { get; } Property Value Type Description string ValueType The type of default value assigned to the parameter. Declaration public ParameterDefaultValueType ValueType { get; } Property Value Type Description ParameterDefaultValueType Implements ICsParameterDefaultValue ICsModel IModelStatus IParent ILookup Extension Methods GenerateCSharpParameterExtensions.GenerateCSharpParameterDefaultValue(CsParameterDefaultValue, CsType)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsProperty.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsProperty.html",
    "title": "Class CsProperty | CodeFactory for Windows",
    "keywords": "Class CsProperty Data model that represents the definition of a property. Inheritance object CsModel CsMember CsProperty Implements ICsProperty ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Inherited Members CsMember.AddBeforeDocsAsync(string) CsMember.AddBeforeDocsTransactionAsync(string) CsMember.AddAfterDocsAsync(string) CsMember.AddAfterDocsTransactionAsync(string) CsMember.ReplaceDocsAsync(string) CsMember.ReplaceDocsTransactionAsync(string) CsMember.DeleteDocsAsync() CsMember.AddBeforeAsync(string, string) CsMember.AddBeforeAsync(string) CsMember.AddBeforeTransactionAsync(string) CsMember.AddBeforeAsync(string, bool) CsMember.AddBeforeTransactionAsync(string, bool) CsMember.AddAfterAsync(string, string) CsMember.AddAfterAsync(string) CsMember.AddAfterTransactionAsync(string) CsMember.DeleteAsync(string) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(string) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(string, string) CsMember.ReplaceAsync(string) CsMember.ReplaceTransactionAsync(string) CsMember.CommentOutSyntaxAsync(string) CsMember.GetMemberSyntaxAsync() CsMember.HasAttributes CsMember.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.ModelSourceFile CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsProperty : CsMember, ICsProperty, ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Constructors CsProperty(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, string, IReadOnlyList<string>, bool, string, string, string, string, CsSecurity, bool, CsMethod, bool, CsMethod, bool, CsMethod, bool, bool, bool, bool, bool, CsType, CsSecurity, CsSecurity, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsProperty Declaration protected CsProperty(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool hasGet, CsMethod getMethod, bool hasSet, CsMethod setMethod, bool hasInit, CsMethod initMethod, bool isAbstract, bool isVirtual, bool isSealed, bool isOverride, bool isStatic, CsType propertyType, CsSecurity getSecurity, CsSecurity setSecurity, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this member is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. bool hasGet Flag that determines if the property implements a getter. CsMethod getMethod The get accessor method assigned to the property bool hasSet Flag that determines if the property implements a setter. CsMethod setMethod The set accessor method assigned to the property. bool hasInit Flag that determines if the property implements a init accessor. CsMethod initMethod The init accessor method assigned to the property. bool isAbstract Flag that determines if the model is abstract. bool isVirtual Flag that determines if the model is virtual. bool isSealed Flag that determines if the model is sealed. bool isOverride Flag that determines if the model is overridden. bool isStatic Flag that determines if the model is static. CsType propertyType The type the property supports. CsSecurity getSecurity The security access assigned to the getter. CsSecurity setSecurity The security access assigned to the setter. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties GetMethod Provides access to the get method statement in the property. This will be null if the property does not have a get statement. Declaration public CsMethod GetMethod { get; } Property Value Type Description CsMethod GetSecurity The security scope that is assigned to the get accessor. Make sure you check the HasGet to determine if the property supports get operations. Declaration public CsSecurity GetSecurity { get; } Property Value Type Description CsSecurity HasGet Flag that determines if this property supports get access. Declaration public bool HasGet { get; } Property Value Type Description bool HasInit Flag that determines if this property supports init accessor. Declaration public bool HasInit { get; } Property Value Type Description bool HasSet Flag that determines if this property supports set access. Declaration public bool HasSet { get; } Property Value Type Description bool InitMethod Provides access to the init method statement in the property. This will be null the property does not have a init statement. Declaration public CsMethod InitMethod { get; } Property Value Type Description CsMethod IsAbstract Flag that determines if the property is implemented as an abstract property. Declaration public bool IsAbstract { get; } Property Value Type Description bool IsOverride Flag that determines if the property has been overridden. Declaration public bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the property has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if the property has been implemented as static. Declaration public bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the property is implemented as virtual. Declaration public bool IsVirtual { get; } Property Value Type Description bool PropertyType The source data type that is managed by this property. Declaration public CsType PropertyType { get; } Property Value Type Description CsType SetMethod Provides access to the set method statement in the property. This will be null if the property does not have a set statement. Declaration public CsMethod SetMethod { get; } Property Value Type Description CsMethod SetSecurity The security scope that is assigned to the set accessor. Make sure you check the HasSet to determine if the property supports set operations. Declaration public CsSecurity SetSecurity { get; } Property Value Type Description CsSecurity Methods LoadGetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the GetMethod property to access the get method details.\", false)] public abstract Task<string> LoadGetBodySyntaxAsync() Returns Type Description Task<string> LoadSetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the SetMethod property to access the set method details.\", false)] public abstract Task<string> LoadSetBodySyntaxAsync() Returns Type Description Task<string> Implements ICsProperty ICsMember ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation IParent ILookup Extension Methods CsMemberExtensions.GetMemberComparisonHashCode(CsMember, MemberComparisonType, List<MapNamespace>) CsPropertyExtensions.GetComparisonHashCode(CsProperty, bool, bool, List<MapNamespace>, CsSecurity, CsSecurity, CsSecurity, string, string) GenerateCSharpCsPropertyExtensions.GenerateCSharpDefaultPropertySignature(CsProperty, NamespaceManager, List<MapNamespace>, bool, bool, CsSecurity, CsSecurity, CsSecurity, string, string) GenerateCSharpCsPropertyExtensions.GenerateCSharpDefaultValue(CsProperty) GenerateCSharpCsPropertyExtensions.GenerateCSharpGetStatement(CsProperty, CsSecurity, CsSecurity) GenerateCSharpCsPropertyExtensions.GenerateCSharpPropertyDeclaration(CsProperty, NamespaceManager, List<MapNamespace>, bool, bool, bool, CsSecurity, string, string) GenerateCSharpCsPropertyExtensions.GenerateCSharpSetStatement(CsProperty, CsSecurity, CsSecurity) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsPropertyExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsPropertyExtensions.html",
    "title": "Class CsPropertyExtensions | CodeFactory for Windows",
    "keywords": "Class CsPropertyExtensions Static class that holds extension methods that support the CsProperty model. Inheritance object CsPropertyExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsPropertyExtensions Methods GetComparisonHashCode(CsProperty, bool, bool, List<MapNamespace>, CsSecurity, CsSecurity, CsSecurity, string, string) Creates a comparision hashcode from a CsProperty model. Declaration public static int GetComparisonHashCode(this CsProperty source, bool includeKeywords = true, bool includeAbstractKeyword = false, List<MapNamespace> mappedNamespaces = null, CsSecurity propertySecurity = CsSecurity.Unknown, CsSecurity getSecurity = CsSecurity.Unknown, CsSecurity setSecurity = CsSecurity.Unknown, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsProperty source Source model to use to build the hash. bool includeKeywords Optional parameter that includes keywords in the comparision hash, default value is true. bool includeAbstractKeyword Optional parameter that includes abstract keyword in the comparision hash, default value is false. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. CsSecurity propertySecurity Optional parameter that sets the target security for the property, default is unknown which uses the property current security. CsSecurity getSecurity Optional parameter that sets the target security for the properties getter, default is unknown which uses the property current security. CsSecurity setSecurity Optional parameter that sets the target security for the properties setter, default is unknown which uses the property current security. string namePrefix Optional parameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description int Computed hash value for the method signature."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsRecord.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsRecord.html",
    "title": "Class CsRecord | CodeFactory for Windows",
    "keywords": "Class CsRecord Data model that represents a record implementation. Inheritance object CsModel CsContainer CsRecord Implements ICsRecord ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsContainer.AddBeforeDocsAsync(string) CsContainer.AddBeforeDocsTransactionAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.AddAfterDocsTransactionAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.ReplaceDocsTransactionAsync(string) CsContainer.DeleteDocsAsync() CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddBeforeTransactionAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddAfterTransactionAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToBeginningTransactionAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.AddToEndTransactionAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.ReplaceTransactionAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.AddBeforeTransactionAsync(string, bool) CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsRecord : CsContainer, ICsRecord, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsRecord(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, bool, bool, bool, CsRecord, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsRecord Declaration protected CsRecord(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isStatic, bool isAbstract, bool isSealed, CsRecord baseRecord, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source code file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. bool isStatic Flag that determines if the model is static. bool isAbstract Flag that determines if the model is abstract. bool isSealed Flag that determines if the model is sealed. CsRecord baseRecord The record model that is base record of this record. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties BaseRecord The base record assigned to this record. This will be null if HasBase is false. Declaration public CsRecord BaseRecord { get; } Property Value Type Description CsRecord Constructors List of the constructors implemented in this record. Declaration public IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Destructor The destructor implemented in this record. Declaration public CsMethod Destructor { get; } Property Value Type Description CsMethod Fields List of the fields implemented in this record. Declaration public IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> IsAbstract Flat that determines if this is an abstract record. Declaration public bool IsAbstract { get; } Property Value Type Description bool IsSealed Flag that determines if this record has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this record is static. Declaration public bool IsStatic { get; } Property Value Type Description bool Implements ICsRecord ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpCsContainerExtensions.GenerateCSharpTypeName(CsContainer, NamespaceManager, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsRecordStructure.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsRecordStructure.html",
    "title": "Class CsRecordStructure | CodeFactory for Windows",
    "keywords": "Class CsRecordStructure Data model that represents the definition of a record structure. Inheritance object CsModel CsContainer CsRecordStructure Implements ICsRecordStructure ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsContainer.AddBeforeDocsAsync(string) CsContainer.AddBeforeDocsTransactionAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.AddAfterDocsTransactionAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.ReplaceDocsTransactionAsync(string) CsContainer.DeleteDocsAsync() CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddBeforeTransactionAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddAfterTransactionAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToBeginningTransactionAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.AddToEndTransactionAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.ReplaceTransactionAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.AddBeforeTransactionAsync(string, bool) CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsRecordStructure : CsContainer, ICsRecordStructure, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsRecordStructure(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsRecordStructure Declaration protected CsRecordStructure(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Constructors List of the constructors for this record structure. Declaration public IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Fields List of the fields for this record structure. Declaration public IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> Implements ICsRecordStructure ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpCsContainerExtensions.GenerateCSharpTypeName(CsContainer, NamespaceManager, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsSecurity.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsSecurity.html",
    "title": "Enum CsSecurity | CodeFactory for Windows",
    "keywords": "Enum CsSecurity Enumeration that determines the security scope of the C# model being represented. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum CsSecurity Fields Name Description Internal Security is set to internal access Private Security is set to private access Protected Security is set to protected access ProtectedInternal Security is set to protected internal access ProtectedOrInternal Security is set to projected or internal access Public Security is set to public access Unknown Security scope is unknown Extension Methods GenerateCSharpCsSecurityExtensions.GenerateCSharpKeyword(CsSecurity)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsSource.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsSource.html",
    "title": "Class CsSource | CodeFactory for Windows",
    "keywords": "Class CsSource Data model that represents source code. Inheritance object CsModel CsSource Implements ICsSource ICsModel IModelStatus IParent ILookup Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsSource : CsModel, ICsSource, ICsModel, IModelStatus, IParent, ILookup Constructors CsSource(bool, bool, bool, SourceCodeType, string, string, string, IReadOnlyList<CsUsingStatement>, IReadOnlyList<CsInterface>, IReadOnlyList<CsClass>, IReadOnlyList<CsStructure>, IReadOnlyList<CsRecord>, IReadOnlyList<CsRecordStructure>, IReadOnlyList<CsDelegate>, IReadOnlyList<CsEnum>, IReadOnlyList<CsNamespace>, bool, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsSource Declaration protected CsSource(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, string sourceDocument, string parentPath, IReadOnlyList<CsUsingStatement> namespaceReferences, IReadOnlyList<CsInterface> interfaces, IReadOnlyList<CsClass> classes, IReadOnlyList<CsStructure> structures, IReadOnlyList<CsRecord> records, IReadOnlyList<CsRecordStructure> recordStructures, IReadOnlyList<CsDelegate> delegates, IReadOnlyList<CsEnum> enums, IReadOnlyList<CsNamespace> namespaces, bool hostedInProject, string projectName, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. string lookupPath The fully qualified name of the model to be used with the model store. string sourceDocument The fully qualified path to the source document that loaded this model. string parentPath The fully qualified path to the parent model of this model. IReadOnlyList<CsUsingStatement> namespaceReferences The namespace reference in the source. IReadOnlyList<CsInterface> interfaces The interfaces that are define in this source. IReadOnlyList<CsClass> classes The classes that are defined in this source. IReadOnlyList<CsStructure> structures The structures that are defined in this source. IReadOnlyList<CsRecord> records The records that are defined in this source. IReadOnlyList<CsRecordStructure> recordStructures The record structures that are defined in this source. IReadOnlyList<CsDelegate> delegates The delegates that are defined in this source. IReadOnlyList<CsEnum> enums The enumerations defined in this source. IReadOnlyList<CsNamespace> namespaces The namespaces that are defined in this source. bool hostedInProject Flag that determines if the source is hosted in a project. string projectName The name of the project the source belongs to. This will be null if the source is not hosted in a project. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Classes The classes that were defined in the source. Declaration public IReadOnlyList<CsClass> Classes { get; } Property Value Type Description IReadOnlyList<CsClass> Delegates The delegates that were defined in the source. Declaration public IReadOnlyList<CsDelegate> Delegates { get; } Property Value Type Description IReadOnlyList<CsDelegate> Enums The enumerations that were defined in the source. Declaration public IReadOnlyList<CsEnum> Enums { get; } Property Value Type Description IReadOnlyList<CsEnum> HostedInProject Flag that determines if the source code was hosted in a project. Declaration public bool HostedInProject { get; } Property Value Type Description bool Interfaces The interfaces that were defined in the source. Declaration public IReadOnlyList<CsInterface> Interfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string NamespaceReferences The namespaces that are used as references to access other libraries not hosted in the source document. Declaration public IReadOnlyList<CsUsingStatement> NamespaceReferences { get; } Property Value Type Description IReadOnlyList<CsUsingStatement> Namespaces The namespaces that were defined in the source. Declaration public IReadOnlyList<CsNamespace> Namespaces { get; } Property Value Type Description IReadOnlyList<CsNamespace> Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel ProjectName The name of the project the source is hosted in. This will be null if this source is not hosted in a project. Declaration public string ProjectName { get; } Property Value Type Description string RecordStructures The record structures that were defined in the source. Declaration public IReadOnlyList<CsRecordStructure> RecordStructures { get; } Property Value Type Description IReadOnlyList<CsRecordStructure> Records The records that were defined in the source. Declaration public IReadOnlyList<CsRecord> Records { get; } Property Value Type Description IReadOnlyList<CsRecord> Structures The structures that were defined in the source. Declaration public IReadOnlyList<CsStructure> Structures { get; } Property Value Type Description IReadOnlyList<CsStructure> Methods AddToBeginningAsync(string) Adds the source code to the beginning of the ICsSource model. Declaration public abstract Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToBeginningTransactionAsync(string) Adds the source code to the beginning of the ICsSource model. Declaration public abstract Task<CsSourceTransaction> AddToBeginningTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToEndAsync(string) Adds the source code the end of the ICsSource model. Declaration public abstract Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToEndTransactionAsync(string) Adds the source code the end of the ICsSource model. Declaration public abstract Task<CsSourceTransaction> AddToEndTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the content from the ICsSource model. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string) Replaces the content of the ICsSource model. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceTransactionAsync(string) Replaces the content of the ICsSource model. Declaration public abstract Task<CsSourceTransaction> ReplaceTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsSource ICsModel IModelStatus IParent ILookup Extension Methods CsSourceExtensions.AddMissingNamespaces(CsSource, IEnumerable<CsMember>, string) CsSourceExtensions.AddUsingStatementAsync(CsSource, string, string) CsSourceExtensions.HasUsingStatement(CsSource, string, string)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsSourceExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsSourceExtensions.html",
    "title": "Class CsSourceExtensions | CodeFactory for Windows",
    "keywords": "Class CsSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the CsSource model. Inheritance object CsSourceExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsSourceExtensions Methods AddMissingNamespaces(CsSource, IEnumerable<CsMember>, string) Scans members for types that are accessible at the member definition level. If the namespace is missing will add it to the source code file. Declaration public static Task<CsSource> AddMissingNamespaces(this CsSource source, IEnumerable<CsMember> members, string excludeNamespace = null) Parameters Type Name Description CsSource source The source model to be updated. IEnumerable<CsMember> members The members to be checked for type definitions. string excludeNamespace A target namespace that should be excluded from adding to the using statement list. This is generally the target namespace of the code file. This is optional Returns Type Description Task<CsSource> Updated Source Model with all the missing namespaces added as using statements. AddUsingStatementAsync(CsSource, string, string) Extension method that will add a using statement to target source code. If the using statement already exists it will simply return the existing source. Declaration public static Task<CsSource> AddUsingStatementAsync(this CsSource source, string nameSpace, string alias = null) Parameters Type Name Description CsSource source The source code to update. string nameSpace The namespace to be added to the using statement. string alias Optional parameter to set if you want an alias assigned to the namespace. Returns Type Description Task<CsSource> The updated source code or the original source code if no changes were necessary. HasUsingStatement(CsSource, string, string) Extension method that determines if the source code has a target namespace as a using statement. Declaration public static bool HasUsingStatement(this CsSource source, string nameSpace, string alias = null) Parameters Type Name Description CsSource source The source code to search through. string nameSpace The namespace to search for in the using statements. string alias Optional parameter that captures the alias of the namespace used in the using statement. Returns Type Description bool Flag that determines if it has the using statement."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsSourceTransaction.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsSourceTransaction.html",
    "title": "Class CsSourceTransaction | CodeFactory for Windows",
    "keywords": "Class CsSourceTransaction Represents a transaction that was performed on a C# source file. Inheritance object CsSourceTransaction Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public class CsSourceTransaction Constructors CsSourceTransaction() Declaration public CsSourceTransaction() Properties Source Current version of the source code for a C# source file. Declaration public CsSource Source { get; set; } Property Value Type Description CsSource Transaction The details of the transaction that was performed on the source code. Declaration public TransactionDetail Transaction { get; set; } Property Value Type Description TransactionDetail"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsStructure.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsStructure.html",
    "title": "Class CsStructure | CodeFactory for Windows",
    "keywords": "Class CsStructure Data model that represents the definition of a structure. Inheritance object CsModel CsContainer CsContainerWithNestedContainers CsStructure Implements ICsNestedModel ICsStructure ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Inherited Members CsContainerWithNestedContainers.NestedModels CsContainerWithNestedContainers.NestedClasses CsContainerWithNestedContainers.NestedInterfaces CsContainerWithNestedContainers.NestedStructures CsContainerWithNestedContainers.NestedEnums CsContainerWithNestedContainers.NestedType CsContainerWithNestedContainers.IsNested CsContainer.AddBeforeDocsAsync(string) CsContainer.AddBeforeDocsTransactionAsync(string) CsContainer.AddAfterDocsAsync(string) CsContainer.AddAfterDocsTransactionAsync(string) CsContainer.ReplaceDocsAsync(string) CsContainer.ReplaceDocsTransactionAsync(string) CsContainer.DeleteDocsAsync() CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(string, string) CsContainer.AddBeforeAsync(string) CsContainer.AddBeforeTransactionAsync(string) CsContainer.AddAfterAsync(string, string) CsContainer.AddAfterAsync(string) CsContainer.AddAfterTransactionAsync(string) CsContainer.AddToBeginningAsync(string, string) CsContainer.AddToBeginningAsync(string) CsContainer.AddToBeginningTransactionAsync(string) CsContainer.AddToEndAsync(string, string) CsContainer.AddToEndAsync(string) CsContainer.AddToEndTransactionAsync(string) CsContainer.DeleteAsync(string) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(string) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(string) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(string, string) CsContainer.ReplaceAsync(string) CsContainer.ReplaceTransactionAsync(string) CsContainer.AddBeforeAsync(string, bool) CsContainer.AddBeforeTransactionAsync(string, bool) CsContainer.HasAttributes CsContainer.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.HasStrongTypesInGenerics CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.LookupPath CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.Parent CsContainer.ModelSourceFile CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsStructure : CsContainerWithNestedContainers, ICsNestedModel, ICsStructure, ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Constructors CsStructure(bool, bool, bool, SourceCodeType, IReadOnlyList<CsAttribute>, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, IReadOnlyList<string>, bool, string, string, string, string, string, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, bool, CsNestedType, IReadOnlyList<ICsNestedModel>, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsStructure Declaration protected CsStructure(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string modelSourceFile, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isNested, CsNestedType nestedType, IReadOnlyList<ICsNestedModel> nestedModels = null, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList<CsAttribute> attributes List of the attributes assigned to this model. bool isGeneric Flag that determines if the container is a generic definition. bool hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the container. IReadOnlyList<CsType> genericTypes Target types for the generic parameters assigned to the container. string modelSourceFile The source file the model was generated from. IReadOnlyList<string> sourceFiles List of the fully qualified paths to the source code files this model is defined in. bool hasDocumentation Flag that determines if the model has XML documentation assigned to it. string documentation The xml documentation assigned to the model. string lookupPath The fully qualified model lookup path for this model. string name The name of the model. string ns The namespace the container belongs to. string parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList<CsInterface> inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList<CsMember> members The members assigned to this container. bool isNested Flag that determines if the container type is nested in another type definition. CsNestedType nestedType Enumeration of the type of nesting the container is. IReadOnlyList<ICsNestedModel> nestedModels List of nested models assigned to this container. This is an optional parameter and can be null string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Constructors List of the constructors for this structure. Declaration public IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Fields List of the fields for this structure. Declaration public IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> Implements ICsNestedModel ICsStructure ICsNestedContainers ICsContainer ICsModel IModelStatus ISourceFiles ICsAttributes IDocumentation ICsGeneric IParent ILookup Extension Methods CsContainerExtensions.GetComparisonMembers(CsContainer, MemberComparisonType, List<MapNamespace>) GenerateCSharpCsContainerExtensions.GenerateCSharpTypeName(CsContainer, NamespaceManager, List<MapNamespace>) CsContainerExtensions.GetMissingInterfaceMembers(CsStructure, List<MapNamespace>) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsTupleTypeParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsTupleTypeParameter.html",
    "title": "Class CsTupleTypeParameter | CodeFactory for Windows",
    "keywords": "Class CsTupleTypeParameter Data model that represents a tuple type parameter. Inheritance object CsModel CsTupleTypeParameter Implements ICsTupleTypeParameter ICsModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsTupleTypeParameter : CsModel, ICsTupleTypeParameter, ICsModel, IModelStatus Constructors CsTupleTypeParameter(bool, bool, bool, SourceCodeType, bool, string, CsType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsModel Declaration protected CsTupleTypeParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, bool hasDefaultName, string name, CsType tupleType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. bool hasDefaultName Does the type parameter use a distinct name. string name The distinct name assigned to the type. CsType tupleType The type definition of the tuple type. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties HasDefaultName Flag that determines if the named assigned to the tuple was system generated or defined in source. Declaration public bool HasDefaultName { get; } Property Value Type Description bool Name The name assigned to the tuple parameter. Declaration public string Name { get; } Property Value Type Description string TupleType The model with the type definition assigned to the tuple. Declaration public CsType TupleType { get; } Property Value Type Description CsType Implements ICsTupleTypeParameter ICsModel IModelStatus"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsType.html",
    "title": "Class CsType | CodeFactory for Windows",
    "keywords": "Class CsType Data model that represents the definition of a type. Inheritance object CsModel CsType Implements ICsType ICsModel IModelStatus ICsGeneric Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsType : CsModel, ICsType, ICsModel, IModelStatus, ICsGeneric Constructors CsType(bool, bool, bool, SourceCodeType, bool, bool, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, string, string, bool, string, bool, bool, bool, bool, bool, bool, IReadOnlyList<int>, bool, bool, bool, bool, IReadOnlyList<CsTupleTypeParameter>, CsKnownLanguageType, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsType Declaration protected CsType(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string name, string ns, bool isWellKnownType, string valueTypeDefaultValue, bool isValueType, bool supportsDisposable, bool isInterface, bool isStructure, bool isClass, bool isArray, IReadOnlyList<int> arrayDimensions, bool isGenericPlaceHolder, bool isEnum, bool isDelegate, bool isTuple, IReadOnlyList<CsTupleTypeParameter> tupleTypes, CsKnownLanguageType wellKnownType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. bool isGeneric Flag that determines if the type is generic. bool hasStrongTypesInGenerics Flag that determines if the generics are strong types or placeholders. IReadOnlyList<CsGenericParameter> genericParameters Generic parameters assigned to the type. IReadOnlyList<CsType> genericTypes The type definitions for the generic implementation. string name The name of the type. string ns The namespace the type belongs to. bool isWellKnownType Is the type one of the well known types for the language. string valueTypeDefaultValue The default value if the type is a value type. bool isValueType Flag that determines if it is a value type. bool supportsDisposable Flag that determines if the type implements IDisposable interface. bool isInterface Flag that determines if the type is an interface definition. bool isStructure Flag that determines if the type is a structure definition. bool isClass Flag that determines if the type is a class definition. bool isArray Flag that determines if the type is also an array. IReadOnlyList<int> arrayDimensions The dimensions assigned to the array. bool isGenericPlaceHolder Flag that determines if the type is a generic place holder definition. bool isEnum Flag that determines if the type is an enumeration. bool isDelegate Flag that determines if the type is a delegate definition. bool isTuple Flag that determines if the type is a tuple. IReadOnlyList<CsTupleTypeParameter> tupleTypes The type information for each part of the tuple. CsKnownLanguageType wellKnownType The well known type from the language if it is well known. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties ArrayDimensions Gets a list of the dimensions that are assigned to the array. This will contain more then one value if the array is a jagged array. This will be empty if the type is not an array. Declaration public IReadOnlyList<int> ArrayDimensions { get; } Property Value Type Description IReadOnlyList<int> GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList<CsGenericParameter> GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description bool IsArray Flag that determines if the type is an array of the target type. Declaration public bool IsArray { get; } Property Value Type Description bool IsClass Flag that determines if the type is a class. Declaration public bool IsClass { get; } Property Value Type Description bool IsDelegate Flag that determines if the type is a delegate. Declaration public bool IsDelegate { get; } Property Value Type Description bool IsEnum Flag that determines if the type is a enumeration. Declaration public bool IsEnum { get; } Property Value Type Description bool IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description bool IsGenericPlaceHolder Flag that determines if the type is a generic place holder definition. Declaration public bool IsGenericPlaceHolder { get; } Property Value Type Description bool IsInterface Flag that determines if the type is an interface. Declaration public bool IsInterface { get; } Property Value Type Description bool IsStructure Flag that determines if the type is a structure. Declaration public bool IsStructure { get; } Property Value Type Description bool IsTuple Flag that determine if the type is a Tuple Declaration public bool IsTuple { get; } Property Value Type Description bool IsValueType Flag that determines if the type is a value type. Declaration public bool IsValueType { get; } Property Value Type Description bool IsWellKnownType Flag that determines if the type is one of the well know data types of the language. Declaration public bool IsWellKnownType { get; } Property Value Type Description bool Name The name of the type. Declaration public string Name { get; } Property Value Type Description string Namespace The namespace the type belongs to. Declaration public string Namespace { get; } Property Value Type Description string SupportsDisposable Flag that determines if the type supports the interface IDisposable. Declaration public bool SupportsDisposable { get; } Property Value Type Description bool TupleTypes List of the types that are implemented in the Tuple. This will an empty list if the type is not a tuple. Declaration public IReadOnlyList<CsTupleTypeParameter> TupleTypes { get; } Property Value Type Description IReadOnlyList<CsTupleTypeParameter> ValueTypeDefaultValue The default value for well known value data types. This will be null if the value is not a well known value type. Declaration public string ValueTypeDefaultValue { get; } Property Value Type Description string WellKnownType Enumeration of the target well known type this type represents. Declaration public CsKnownLanguageType WellKnownType { get; } Property Value Type Description CsKnownLanguageType Methods GetClassModel() Loads the full ICsClass model from the type definition. Declaration public CsClass GetClassModel() Returns Type Description CsClass Return the fully loaded model or an empty model if the type is not a class. GetClassModelData() Loads the full ICsClass model from the type definition. Declaration protected abstract CsClass GetClassModelData() Returns Type Description CsClass Return the fully loaded model or an empty model if the type is not a class. GetDelegateModel() Loads the full ICsDelegate model from the type definition. Declaration public CsDelegate GetDelegateModel() Returns Type Description CsDelegate Return the fully loaded model or an empty model if the type is not a delegate. GetDelegateModelData() Loads the full ICsDelegate model from the type definition. Declaration protected abstract CsDelegate GetDelegateModelData() Returns Type Description CsDelegate Return the fully loaded model or an empty model if the type is not a delegate. GetEnumModel() Loads the full ICsEnum model from the type definition. Declaration public CsEnum GetEnumModel() Returns Type Description CsEnum Return the fully loaded model or an empty model if the type is not an enumeration. GetEnumModelData() Logic to load the full model data for an enumeration. Declaration protected abstract CsEnum GetEnumModelData() Returns Type Description CsEnum Return the fully loaded model or an empty model if the type is not an enumeration. GetInterfaceModel() Loads the full CsInterface model from the type definition. Declaration public CsInterface GetInterfaceModel() Returns Type Description CsInterface Return the fully loaded model or an empty model if the type is not an interface. GetInterfaceModelData() Loads the full ICsInterface model from the type definition. Declaration protected abstract CsInterface GetInterfaceModelData() Returns Type Description CsInterface Return the fully loaded model or an empty model if the type is not an interface. GetStructureModel() Loads the full ICsStructure model from the type definition. Declaration public CsStructure GetStructureModel() Returns Type Description CsStructure Return the fully loaded model or an empty model if the type is not a structure. GetStructureModelData() Loads the full ICsStructure model from the type definition. Declaration protected abstract CsStructure GetStructureModelData() Returns Type Description CsStructure Return the fully loaded model or an empty model if the type is not a structure. Implements ICsType ICsModel IModelStatus ICsGeneric Extension Methods CsTypeExtensions.IsTaskOnlyType(CsType) CsTypeExtensions.IsTaskType(CsType) CsTypeExtensions.TaskReturnType(CsType) CsTypeExtensions.TypeInNamespace(CsType, string) CsTypeExtensions.TypeInTargetNamespace(CsType, string) GenereateCSharpTypeExtensions.GenerateCSharpArraySignature(CsType) GenereateCSharpTypeExtensions.GenerateCSharpDefaultValue(CsType) GenereateCSharpTypeExtensions.GenerateCSharpTupleSignature(CsType, NamespaceManager, List<MapNamespace>) GenereateCSharpTypeExtensions.GenerateCSharpTypeName(CsType, NamespaceManager, List<MapNamespace>) GenereateCSharpTypeExtensions.GenerateCSharpTypeNameRemoveNullableDefinition(CsType, NamespaceManager, List<MapNamespace>) GenereateCSharpTypeExtensions.GenerateCSharpValueSyntax(CsType, string)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsTypeExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsTypeExtensions.html",
    "title": "Class CsTypeExtensions | CodeFactory for Windows",
    "keywords": "Class CsTypeExtensions Extension methods that support the CsType model. Inheritance object CsTypeExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class CsTypeExtensions Methods IsTaskOnlyType(CsType) Determines if the type is a task type. Declaration public static bool IsTaskOnlyType(this CsType source) Parameters Type Name Description CsType source the source type to validate. Returns Type Description bool True if the type is a standard task or a generic task implementation. False otherwise. Exceptions Type Condition CodeFactoryException If no type definition is provided. IsTaskType(CsType) Determines if the type is a task type. Declaration public static bool IsTaskType(this CsType source) Parameters Type Name Description CsType source The source type to validate. Returns Type Description bool True if the type is a standard task or a generic task implementation. False otherwise. TaskReturnType(CsType) Returns the type definition for the target type that is supported by a task type. If the type is not a task type it will return the type definition. Declaration public static CsType TaskReturnType(this CsType source) Parameters Type Name Description CsType source source type to check. Returns Type Description CsType The target type or null if the type is void or a non generic task type. Exceptions Type Condition CodeFactoryException If no type definition is provided or the generic task type has no type definition. TypeInNamespace(CsType, string) Checks to see if the type or any generic types in the type implement the target namespace. Declaration public static bool TypeInNamespace(this CsType source, string nameSpace) Parameters Type Name Description CsType source Property to check string nameSpace target namespace to check for. Returns Type Description bool True if found in the type or generic parameters assigned to the type, false if not found. TypeInTargetNamespace(CsType, string) Checks the type is stored in a target namespace. Declaration public static bool TypeInTargetNamespace(this CsType source, string targetNamespace) Parameters Type Name Description CsType source Type to check string targetNamespace Target namespace to check in Returns Type Description bool True the type is in the target namespace, false if not. Exceptions Type Condition CodeFactoryException Could not access the target namespace data."
  },
  "api/CodeFactory.WinVs.Models.CSharp.CsUsingStatement.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.CsUsingStatement.html",
    "title": "Class CsUsingStatement | CodeFactory for Windows",
    "keywords": "Class CsUsingStatement Data model that represents a namespace reference in source code. Inheritance object CsModel CsUsingStatement Implements ICsUsingStatement ICsModel IModelStatus IParent ILookup IUsingStatementNamespace Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.GetErrors() CsModel.LookupModel(string) CsModel.GetModel<T>(string) CsModel.GetModel(string) CsModel.IsLoaded CsModel.HasErrors CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public abstract class CsUsingStatement : CsModel, ICsUsingStatement, ICsModel, IModelStatus, IParent, ILookup, IUsingStatementNamespace Constructors CsUsingStatement(bool, bool, bool, SourceCodeType, string, string, bool, string, string, string, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsUsingStatement Declaration protected CsUsingStatement(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, string referenceNamespace, bool hasAlias, string alias, string parentPath, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description bool isLoaded Flag that determines if the model was loaded. bool hasErrors Flag that determine if errors were found creating the model. bool loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. string lookupPath Fully qualified path for the model to be stored in the model store. string referenceNamespace The full namespace being referenced. bool hasAlias Flag that determines if the namespace is referenced by a alias name. string alias The alias name for the referenced namespace. this will be null when HasAlias is false string parentPath Fully qualified lookup path for the parent model to this model. string sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore<ICsModel> modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList<ModelLoadException> modelErrors Optional the error that occurred while creating the model. Properties Alias The alias assigned to the namespace being imported. This will be null if the HasAlias is false. Declaration public string Alias { get; } Property Value Type Description string HasAlias Flag that determines if the namespace reference has an alias. Declaration public bool HasAlias { get; } Property Value Type Description bool LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description string Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel ReferenceNamespace The target namespace that is being imported into the sources scope. Declaration public string ReferenceNamespace { get; } Property Value Type Description string Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterTransactionAsync(string) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSourceTransaction> AddAfterTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterTransactionAsync(string, string) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSourceTransaction> AddAfterTransactionAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeTransactionAsync(string, string) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSourceTransaction> AddBeforeTransactionAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the using statement from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the using statement from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the using statement is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the using statement is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the using statement is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the using statement defined in. Returns Type Description Task<ISourceLocation> The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current using statement with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current using statement with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceTransactionAsync(string) Replaces the current using statement with the provided source code. Declaration public abstract Task<CsSourceTransaction> ReplaceTransactionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceTransactionAsync(string, string) Replaces the current using statement with the provided source code. Declaration public abstract Task<CsSourceTransaction> ReplaceTransactionAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSourceTransaction> Updated source model and the transaction details. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Implements ICsUsingStatement ICsModel IModelStatus IParent ILookup IUsingStatementNamespace"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.CommonContextualKeywords.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.CommonContextualKeywords.html",
    "title": "Class CommonContextualKeywords | CodeFactory for Windows",
    "keywords": "Class CommonContextualKeywords Syntax formatting for common keywords that are contextual in nature and not reserved words in the C# language. They will belong to one or more target libraries. Inheritance object CommonContextualKeywords Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.FormattedSyntax Assembly: CodeFactory.WinVs.dll Syntax public static class CommonContextualKeywords Fields Add Keyword to defining a custom event accessor. Declaration public const string Add = \"add\" Field Value Type Description string Alias Keyword to assign an alias name to reference types in a target assembly. Declaration public const string Alias = \"alias\" Field Value Type Description string Ascending Keyword to denote an ascending sort order from smallest to largest in an order by clause in a LINQ expression. Declaration public const string Ascending = \"ascending\" Field Value Type Description string Async Keyword that denotes the method is implemented as an async operation and is always paired with one or more await keywords. Declaration public const string Async = \"async\" Field Value Type Description string Await Keyword that denotes an async operation is executing and waiting for the result of the operation. Always used with one Async keyword decloration. Declaration public const string Await = \"await\" Field Value Type Description string By Keyword that is used in a grouping clause how the returned items should be grouped. This is used in LINQ syntax. Declaration public const string By = \"by\" Field Value Type Description string Descending Keyword to denote an descending sort order from largest to smallest in an order by clause in a LINQ expression. Declaration public const string Descending = \"descending\" Field Value Type Description string Dynamic Keyword that is used by variables that skips compile time checking. Declaration public const string Dynamic = \"dynamic\" Field Value Type Description string From Keyword that denotes the source of a an expression. This is used in LINQ expressions. Declaration public const string From = \"from\" Field Value Type Description string Get Keyword that defines an accessor method for properties or indexers. Declaration public const string Get = \"get\" Field Value Type Description string Global Keyword that denotes a global scope namespace. Declaration public const string Global = \"global\" Field Value Type Description string Group Keyword that defines a grouping operation in a LINQ expression. Declaration public const string Group = \"group\" Field Value Type Description string Into Keyword that creates a temporary named identifier for the results of a group, join or select clause in a LINQ expression. Declaration public const string Into = \"into\" Field Value Type Description string Join Keyword that defines the start of a join operation in a LINQ expression. Declaration public const string Join = \"join\" Field Value Type Description string KeywordEquals Keyword that is used in join clauses to denotes the two target values are equal. This is used in LINQ expressions. Declaration public const string KeywordEquals = \"equals\" Field Value Type Description string Let Keyword that stores the results of a sub expression used in LINQ expressions. Declaration public const string Let = \"let\" Field Value Type Description string NameOf Keyword operation that gets the name of the variable, type, or member. Declaration public const string NameOf = \"nameof\" Field Value Type Description string On Keyword using in join operations used to specify a join condition. This is used in LINQ expressions. Declaration public const string On = \"on\" Field Value Type Description string OrderBy Keyword used to set the return order definition from a LINQ expression. Declaration public const string OrderBy = \"orderby\" Field Value Type Description string Partial Keyword that defines that a class or method definition will be split across at least two code files. Declaration public const string Partial = \"partial\" Field Value Type Description string Remove Keyword that defines an event accessor method that removes a subscription from a target event. Declaration public const string Remove = \"remove\" Field Value Type Description string Select Keyword that defines the collection of data, used in LINQ expressions. Declaration public const string Select = \"select\" Field Value Type Description string Set Keyword that defines an accessor method for properties and indexers. Declaration public const string Set = \"set\" Field Value Type Description string Value Keyword that denotes the value that has been passed to a set accessor. Declaration public const string Value = \"value\" Field Value Type Description string Var Keyword that defines a local variable used within the scope of a method body. Declaration public const string Var = \"var\" Field Value Type Description string When Keyword that is used a validation condition in switch statements. (Note: Available in C# 7.0 and later). Also used as a validation condition with catch statements. (Note: Available in C# 6.0 and later). Declaration public const string When = \"when\" Field Value Type Description string Where Keyword used to start the definition of constraining condition on a generic type. Also used a evaluation to determine what data will be returned from a LINQ expression. Declaration public const string Where = \"where\" Field Value Type Description string Yield Keyword used to denote in an iterator. Used with return and break statements. Declaration public const string Yield = \"yield\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Keywords.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Keywords.html",
    "title": "Class Keywords | CodeFactory for Windows",
    "keywords": "Class Keywords Data class that contains the C# formatted syntax for keywords. Inheritance object Keywords Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.FormattedSyntax Assembly: CodeFactory.WinVs.dll Syntax public static class Keywords Fields Abstract Keyword for an abstraction Declaration public const string Abstract = \"abstract\" Field Value Type Description string As Keyword for type conversion using an 'as' statement Declaration public const string As = \"as\" Field Value Type Description string Base Keyword for usage of the base keyword used with constructors Declaration public const string Base = \"base\" Field Value Type Description string Break Keyword for exiting a running loop. Declaration public const string Break = \"break\" Field Value Type Description string Case Keyword for a particular item to be evaluated in a switch statement. Declaration public const string Case = \"case\" Field Value Type Description string Catch Keyword that captures an exception used with a try statement. Declaration public const string Catch = \"catch\" Field Value Type Description string Checked Keyword to check math operations are within bounds of the target type. Declaration public const string Checked = \"checked\" Field Value Type Description string Class Keyword that defines a class. Declaration public const string Class = \"class\" Field Value Type Description string Constant Keyword that denotes the field is a constant value. Declaration public const string Constant = \"const\" Field Value Type Description string Continue Keyword that manages control flow in a loop and tell the control to continue operation at the beginning of the loop. Declaration public const string Continue = \"continue\" Field Value Type Description string Default Keyword to denote the default label in a switch statement, also used to return the default value of a type. Declaration public const string Default = \"default\" Field Value Type Description string Delegate Keyword to know the definition of a delegate method. Declaration public const string Delegate = \"delegate\" Field Value Type Description string Do Keyword to define an expression check to be true in order for the loop to continue execution. Declaration public const string Do = \"do\" Field Value Type Description string Else Keyword to cause execution of an alternate set of logic when an if statement is not true. Declaration public const string Else = \"else\" Field Value Type Description string Enum Keyword to begin the definition of an enumeration type. Declaration public const string Enum = \"enum\" Field Value Type Description string Event Keyword to begin the definition of an event. Declaration public const string Event = \"event\" Field Value Type Description string Explicit Keyword that denotes a data conversion that can throw an error or lose information. Declaration public const string Explicit = \"explicit\" Field Value Type Description string Extern Keyword used to declare a method that is implemented in an externally accessed library. (Used with DLL imports) Declaration public const string Extern = \"extern\" Field Value Type Description string False Keyword that notes a false statement for a bool data type. Declaration public const string False = \"false\" Field Value Type Description string Finally Keyword to force the execution of statement after try and catch blocks have executed. Declaration public const string Finally = \"finally\" Field Value Type Description string Fixed Keyword to keep the garbage collector from moving a variable. Generally used with external api and unmanaged calls. Declaration public const string Fixed = \"fixed\" Field Value Type Description string For Keyword to define a for loop. Declaration public const string For = \"for\" Field Value Type Description string ForEach Keyword to define a for each loop. Declaration public const string ForEach = \"foreach\" Field Value Type Description string Goto Keyword that informs where the logic execution will move to. Declaration public const string Goto = \"goto\" Field Value Type Description string If Keyword that starts an evaluation to determine if a statement is true. Declaration public const string If = \"if\" Field Value Type Description string Implicit Keyword used to declare a data conversion that is safe and will not throw an error or lose data. Declaration public const string Implicit = \"implicit\" Field Value Type Description string In Keyword used in 4 cases, generic type parameters , a parameter modifer to pass arguments, define the target value in for each statements, usage in from clauses, and in join clauses. Declaration public const string In = \"in\" Field Value Type Description string Interface Keyword that starts the definition of a interface type. Declaration public const string Interface = \"interface\" Field Value Type Description string Is Keyword that checks if an expression is compatible with a target type. Declaration public const string Is = \"is\" Field Value Type Description string Lock Keyword that starts the execution of code that can be accessed by one thread at a time. Declaration public const string Lock = \"lock\" Field Value Type Description string Namespace Keyword that defines the namespace the following code definitions belong to. Declaration public const string Namespace = \"namespace\" Field Value Type Description string New Keyword that defines the new instance of a data type. Declaration public const string New = \"new\" Field Value Type Description string Null Keyword that defines a reference type does not exist and has no memory reference. Declaration public const string Null = \"null\" Field Value Type Description string Operator Keyword that starts a custom definition of operation for the target type. Declaration public const string Operator = \"operator\" Field Value Type Description string Out Keyword that signals that a passed parameter will receive an output of data. Also used with generic definitions to note the type parameter is covariant. Declaration public const string Out = \"out\" Field Value Type Description string Override Keyword that signals that an extension or modification of methods, properties, indexers, or events. Declaration public const string Override = \"override\" Field Value Type Description string Params Keyword that signals that a method parameter will be taking on a variable number of additional arguments of the target type. Declaration public const string Params = \"params\" Field Value Type Description string Readonly Keyword that notes a field cannot be changed once the constructor has run. Declaration public const string Readonly = \"readonly\" Field Value Type Description string Ref Keyword to note the value was passed by reference. Declaration public const string Ref = \"ref\" Field Value Type Description string Return Keyword to return a target set of data from the executing method body. Declaration public const string Return = \"return\" Field Value Type Description string Sealed Keyword to lock the definition from being inherited by other classes. Declaration public const string Sealed = \"sealed\" Field Value Type Description string SizeOf Keyword operator that returns the number of bytes occupied by the variable. Declaration public const string SizeOf = \"sizeof\" Field Value Type Description string StackAlloc Keyword allocates memory during execution of a method and removes at the end of the execution of the method. Allocated directly from the stack. Declaration public const string StackAlloc = \"stackalloc\" Field Value Type Description string Static Keyword that declares a static member that belongs to the type and not to an instance of the type. Declaration public const string Static = \"static\" Field Value Type Description string Structure Keyword that declares the creation of a structure. Declaration public const string Structure = \"struct\" Field Value Type Description string Switch Keyword that declares a switch statement. Declaration public const string Switch = \"switch\" Field Value Type Description string This Keyword that references the current instance of the hosting class. Declaration public const string This = \"this\" Field Value Type Description string Throw Keyword that raises an instance of a target exception. Declaration public const string Throw = \"throw\" Field Value Type Description string True Keyword that is a true condition in a bool data type. Declaration public const string True = \"true\" Field Value Type Description string Try Keyword that is the start of a try block. Declaration public const string Try = \"try\" Field Value Type Description string TypeOf Keyword that determines gets the type definition of the object. Declaration public const string TypeOf = \"typeof\" Field Value Type Description string UnChecked Keyword to suppress overflow checking in arithmetic operations and conversions. Declaration public const string UnChecked = \"unchecked\" Field Value Type Description string UnSafe Keyword to note this call access pointers and is unsafe for memory collection. Declaration public const string UnSafe = \"unsafe\" Field Value Type Description string Using Keyword directive to note a target namespace that is used in the scope of a code file. Declaration public const string Using = \"using\" Field Value Type Description string UsingStatic Keyword directive to a static type where the static members and nested type can be accessed without specifying the type. Declaration public const string UsingStatic = \"using static\" Field Value Type Description string Virtual Keyword to note that a method, property, indexer, or event can be overridden. Declaration public const string Virtual = \"virtual\" Field Value Type Description string Void Keyword that notes that the method will not return a value. Declaration public const string Void = \"void\" Field Value Type Description string Volatile Keyword that determines a field can be modified by multiple threads during execution at the same time. Declaration public const string Volatile = \"volatile\" Field Value Type Description string While Keyword that continues execution of a code block while the evaluation statement is true. Declaration public const string While = \"while\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Security.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Security.html",
    "title": "Class Security | CodeFactory for Windows",
    "keywords": "Class Security Data class that defines the syntax for security scope within the C# language. Inheritance object Security Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.FormattedSyntax Assembly: CodeFactory.WinVs.dll Syntax public static class Security Fields Internal Security scope that allows access to types and members only within files in the same assembly. Declaration public const string Internal = \"internal\" Field Value Type Description string Private Security scope that allows access only within the scope of the body of a class or structure. Declaration public const string Private = \"private\" Field Value Type Description string PrivateProtected Security scope that allows access only within the containing class or types that derive from the containing class. (Note: Only in version 7.2 or later of the C# language) Declaration public const string PrivateProtected = \"private protected\" Field Value Type Description string Protected Security scope that allows access with the target class and any classes that derived from that class. Declaration public const string Protected = \"protected\" Field Value Type Description string ProtectedInternal Security scope limited access to the current assembly or types derived from the containing class. Declaration public const string ProtectedInternal = \"protected internal\" Field Value Type Description string Public Security scope that allows access to types and members and is the least restrictive security type. Declaration public const string Public = \"public\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Symbols.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.Symbols.html",
    "title": "Class Symbols | CodeFactory for Windows",
    "keywords": "Class Symbols Data class that provides the syntax to common symbols used in the definition of C# source code. Inheritance object Symbols Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.FormattedSyntax Assembly: CodeFactory.WinVs.dll Syntax public static class Symbols Fields ArrayDefinitionEnd Symbol that ends the definition of an array. Declaration public const string ArrayDefinitionEnd = \"]\" Field Value Type Description string ArrayDefinitionStart Symbol that starts the definition of an array. Declaration public const string ArrayDefinitionStart = \"[\" Field Value Type Description string EndOfStatement Symbol that denotes the end of a C# code statement. Declaration public const string EndOfStatement = \";\" Field Value Type Description string GenericDefinitionEnd Symbol that ends the definition of a generic. Declaration public const string GenericDefinitionEnd = \">\" Field Value Type Description string GenericDefinitionStart Symbol that starts the definition of a generic. Declaration public const string GenericDefinitionStart = \"<\" Field Value Type Description string MultipleStatementEnd Symbol that ends the definition of multiple C# statements to be executed. Declaration public const string MultipleStatementEnd = \"}\" Field Value Type Description string MultipleStatementStart Symbol that starts the definition for multiple C# statements to be executed. Declaration public const string MultipleStatementStart = \"{\" Field Value Type Description string ParametersDefinitionEnd Symbol that ends the definition of a parameters section. Declaration public const string ParametersDefinitionEnd = \")\" Field Value Type Description string ParametersDefinitionStart Symbol that starts the definition of a parameters section. Declaration public const string ParametersDefinitionStart = \"(\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.WellKnownTypes.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.WellKnownTypes.html",
    "title": "Class WellKnownTypes | CodeFactory for Windows",
    "keywords": "Class WellKnownTypes Data class that holds the c# syntax definition for well know data types. Inheritance object WellKnownTypes Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp.FormattedSyntax Assembly: CodeFactory.WinVs.dll Syntax public static class WellKnownTypes Fields Boolean Syntax for a Boolean data type. Declaration public const string Boolean = \"bool\" Field Value Type Description string Byte Syntax for a byte data type. Declaration public const string Byte = \"byte\" Field Value Type Description string Character Syntax for a char data type. Declaration public const string Character = \"char\" Field Value Type Description string Datetime Syntax for a DateTime data type. Declaration public const string Datetime = \"DateTime\" Field Value Type Description string Decimal Syntax for a decimal data type. Declaration public const string Decimal = \"decimal\" Field Value Type Description string Double Syntax for a double data type. Declaration public const string Double = \"double\" Field Value Type Description string Float Syntax for a float data type. Declaration public const string Float = \"float\" Field Value Type Description string Int Syntax for a int data type. Declaration public const string Int = \"int\" Field Value Type Description string Long Syntax for a long data type. Declaration public const string Long = \"long\" Field Value Type Description string Object Syntax for a object data type. Declaration public const string Object = \"object\" Field Value Type Description string PlatformPointer Syntax for a UIntPtr data type. Declaration public const string PlatformPointer = \"UIntPtr\" Field Value Type Description string Pointer Syntax for a IntPtr data type. Declaration public const string Pointer = \"IntPtr\" Field Value Type Description string SByte Syntax for a sbyte data type. Declaration public const string SByte = \"sbyte\" Field Value Type Description string Short Syntax for a short data type. Declaration public const string Short = \"short\" Field Value Type Description string String Syntax for a string data type. Declaration public const string String = \"string\" Field Value Type Description string Uint Syntax for a uint data type. Declaration public const string Uint = \"uint\" Field Value Type Description string Ulong Syntax for a ulong data type. Declaration public const string Ulong = \"ulong\" Field Value Type Description string Ushort Syntax for a ushort data type. Declaration public const string Ushort = \"ushort\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.FormattedSyntax.html",
    "title": "Namespace CodeFactory.WinVs.Models.CSharp.FormattedSyntax | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Models.CSharp.FormattedSyntax Classes CommonContextualKeywords Syntax formatting for common keywords that are contextual in nature and not reserved words in the C# language. They will belong to one or more target libraries. Keywords Data class that contains the C# formatted syntax for keywords. Security Data class that defines the syntax for security scope within the C# language. Symbols Data class that provides the syntax to common symbols used in the definition of C# source code. WellKnownTypes Data class that holds the c# syntax definition for well know data types."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpAttributeExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpAttributeExtensions.html",
    "title": "Class GenerateCSharpAttributeExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpAttributeExtensions Extension methods that support the generation of source in the C# language from the CsAttribute model. Inheritance object GenerateCSharpAttributeExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpAttributeExtensions Methods GenerateCSharpAttributeDeclarationEnumerator(IReadOnlyList<CsAttribute>, NamespaceManager, List<MapNamespace>) An iterator that returns fully formatted declaration syntax for a attribute in the C# language Declaration public static IEnumerable<string> GenerateCSharpAttributeDeclarationEnumerator(this IReadOnlyList<CsAttribute> source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description IReadOnlyList<CsAttribute> source List of attributes to be processed. NamespaceManager manager Namespace manager used to format type names.This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description IEnumerable<string> Fully formatted syntax for the attribute. GenerateCSharpAttributeParameterValueSignature(CsAttributeParameterValue) Creates the implementation of an attribute value formatted for C#. Declaration public static string GenerateCSharpAttributeParameterValueSignature(this CsAttributeParameterValue source) Parameters Type Name Description CsAttributeParameterValue source The source value to format. Returns Type Description string The formatted value, or null if the model does not exist. GenerateCSharpAttributeParametersSignature(IReadOnlyList<CsAttributeParameter>) Extension method that creates the attributes parameters list for a attribute definition in c# syntax format. Declaration public static string GenerateCSharpAttributeParametersSignature(this IReadOnlyList<CsAttributeParameter> source) Parameters Type Name Description IReadOnlyList<CsAttributeParameter> source THe source list of parameters to be created. Returns Type Description string The fully formatted parameters section of a attribute declaration. GenerateCSharpAttributeSignature(CsAttribute, NamespaceManager, List<MapNamespace>) Extension method that returns a full attribute declaration in the C# language format. Declaration public static string GenerateCSharpAttributeSignature(this CsAttribute source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsAttribute source The attribute toe generate the c# signature for. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The formatted attribute signature or null if data was missing to create the attribute."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsContainerExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsContainerExtensions.html",
    "title": "Class GenerateCSharpCsContainerExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpCsContainerExtensions Extension methods that support the generation of source in the C# language from the CsContainer model. Inheritance object GenerateCSharpCsContainerExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpCsContainerExtensions Methods GenerateCSharpTypeName(CsContainer, NamespaceManager, List<MapNamespace>) Generates the C# type name. Declaration public static string GenerateCSharpTypeName(this CsContainer source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsContainer source Source container to generate the type name from. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The formatted type name."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsEventExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsEventExtensions.html",
    "title": "Class GenerateCSharpCsEventExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpCsEventExtensions Extension methods that support the generation of source in the C# language from the CsEvent model. Inheritance object GenerateCSharpCsEventExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpCsEventExtensions Methods GenerateCSharpEventDeclaration(CsEvent, NamespaceManager, List<MapNamespace>, string, bool, CsSecurity, bool, bool, bool, bool, bool, bool, bool, string, string) Generates the syntax definition of an event in c# syntax. Declaration public static string GenerateCSharpEventDeclaration(this CsEvent source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null, string eventName = null, bool includeSecurity = true, CsSecurity eventSecurity = CsSecurity.Unknown, bool includeKeywords = true, bool includeAbstractKeyword = false, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsEvent source The source CsEvent model to generate. NamespaceManager manager Namespace manager used to format type names.This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. string eventName Optional parameter that will set the event name to the provided name, default is null. bool includeSecurity Includes the security scope which was defined in the model. CsSecurity eventSecurity Optional parameter that sets the target security scope for the event. bool includeKeywords Optional parameter that determines if it will include all keywords assigned to the source model, default is false. bool includeAbstractKeyword Optional parameter that determines if it will include the definition for the abstract keyword in the definition if it is defined. default is false. bool abstractKeyword Optional flag that determines if the abstract keyword is added to the event, default is false. bool sealedKeyword Optional flag that determines if the sealed keyword is added to the event, default is false. bool staticKeyword Optional flag that determines if the static keyword is added to the event, default is false. bool virtualKeyword Optional flag that determines if the virtual keyword is added to the event, default is false. bool overrideKeyword Optional flag that determines if the override keyword is added to the event, default is false. string namePrefix Optional parameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description string Fully formatted event definition or null if the event data could not be generated. Examples With Keywords [security] [keywords] event [event handler type] [name]; Without Keywords [security] [keywords] event [event handler type] [name]; GenerateCSharpInterfaceEventDeclaration(CsEvent, NamespaceManager, List<MapNamespace>, string, string) Defines a standard event declaration for a interface. Declaration public static string GenerateCSharpInterfaceEventDeclaration(this CsEvent source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsEvent source Event model to load. NamespaceManager manager Namespace manager used to format type names.This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description string Fully formatted event definition or null if the event data could not be generated."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsFieldExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsFieldExtensions.html",
    "title": "Class GenerateCSharpCsFieldExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpCsFieldExtensions Extension methods that support the generation of source in the C# language from the CsField model. Inheritance object GenerateCSharpCsFieldExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpCsFieldExtensions Methods GenerateCSharpFieldDeclaration(CsField, NamespaceManager, List<MapNamespace>, bool, CsSecurity, bool, string, string) Generates the syntax definition of field in c# syntax. The default definition with all options turned off will return the filed signature and constants if defined and the default values. Declaration public static string GenerateCSharpFieldDeclaration(this CsField source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null, bool includeKeywords = true, CsSecurity fieldSecurity = CsSecurity.Unknown, bool useCamelCase = false, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsField source The source CsField model to generate. NamespaceManager manager Namespace manager used to format type names.This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool includeKeywords Optional parameter that will include all keywords assigned to the field from the source model. This is true by default. CsSecurity fieldSecurity Optional parameter to set the target security for the field. bool useCamelCase Optional parameter that determines if the field name should set to camel case format, default is false. string namePrefix Optional prameter that determines if the field name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the field name will have a prefix assigned to it, default is null. Returns Type Description string Fully formatted field definition or null if the field data could not be generated. Examples With Keywords [Security] [Keywords] [FieldType] [Name]; With Keywords and a constant [Security] [Keywords] [FieldType] [Name] = [Constant Value]; Without Keywords [Security] [FieldType] [Name]; Without Keywords and a constant [Security] [FieldType] [Name] = [Constant Value];"
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsPropertyExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsPropertyExtensions.html",
    "title": "Class GenerateCSharpCsPropertyExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpCsPropertyExtensions Extension methods that support the generation of source in the C# language from the CsProperty model. Inheritance object GenerateCSharpCsPropertyExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpCsPropertyExtensions Methods GenerateCSharpDefaultPropertySignature(CsProperty, NamespaceManager, List<MapNamespace>, bool, bool, CsSecurity, CsSecurity, CsSecurity, string, string) Generates a default property definition with no backing properties. Will determine security modifiers and append to get and set statements when needed. Declaration public static string GenerateCSharpDefaultPropertySignature(this CsProperty source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null, bool includeKeywords = false, bool includeAbstractKeyword = false, CsSecurity propertySecurity = CsSecurity.Unknown, CsSecurity setSecurity = CsSecurity.Unknown, CsSecurity getSecurity = CsSecurity.Unknown, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsProperty source Property model used for generation. NamespaceManager manager Namespace manager used to format type names.This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool includeKeywords Optional parameter that determines if the keywords will be appended. Default is false. bool includeAbstractKeyword Will include the definition for the abstract keyword in the definition if it is defined. default is false. CsSecurity propertySecurity Optional parameter that overrides the models property security and sets a new security access level. CsSecurity setSecurity Optional parameter that overrides the models set security level with a new access level. Will also define a set statement even if it is not defined. CsSecurity getSecurity Optional parameter that overrides the models get security level with a new access level. Will also define a get statement even if it is not defined. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description string Formatted property or null if model data was missing. Examples With Keywords [security] [keywords] [property type] [property name] { [get when used]; [set when used]; } No Keywords [security] [property type] [property name] { [get when used]; [set when used]; } GenerateCSharpDefaultValue(CsProperty) Property extension that returns the formatted C# syntax of either the name of the property or the method to get the default value of the property if it is nullable. Declaration public static string GenerateCSharpDefaultValue(this CsProperty source) Parameters Type Name Description CsProperty source Property to get the formatted C# syntax for. Returns Type Description string Formatted C# syntax to access a properties value. Exceptions Type Condition CodeFactoryException Raised if required information is missing to create the syntax. GenerateCSharpGetStatement(CsProperty, CsSecurity, CsSecurity) Extension method that generates the get statement of a property definition. Declaration public static string GenerateCSharpGetStatement(this CsProperty source, CsSecurity propertySecurity = CsSecurity.Unknown, CsSecurity getSecurity = CsSecurity.Unknown) Parameters Type Name Description CsProperty source the source property definition CsSecurity propertySecurity Optional parameter that defined the security used by the implementing property. CsSecurity getSecurity Optional parameter that allows you to set the get security level. Returns Type Description string Will return the formatted get statement or null if the property model is empty or the property does not support get. Examples With the same security [get] will return example: get With different security [security] [get] will return example: public get GenerateCSharpPropertyDeclaration(CsProperty, NamespaceManager, List<MapNamespace>, bool, bool, bool, CsSecurity, string, string) Generates the initial definition portion of a property. Declaration public static string GenerateCSharpPropertyDeclaration(this CsProperty source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null, bool includeSecurity = true, bool includeKeyWords = false, bool includeAbstractKeyword = false, CsSecurity propertySecurity = CsSecurity.Unknown, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsProperty source The source property to use for formatting. NamespaceManager manager Namespace manager used to format type names. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool includeSecurity Optional flag that determines if the security scope will be applied to the property definition. Default is true. bool includeKeyWords Optional flag that determines if keywords assigned to the property should be included in the signature. Default is false. bool includeAbstractKeyword Will include the definition for the abstract keyword in the definition if it is defined. default is false. CsSecurity propertySecurity Optional parameter to override the models security and set your own security. string namePrefix Optional prameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description string The formatted signature or null if the model data was not loaded. Examples Format with Keywords [Security] [Keywords*] [ReturnType] [PropertyName] = public static string FirstName Format without Keywords [Security] [ReturnType] [PropertyName] = public string FirstName GenerateCSharpSetStatement(CsProperty, CsSecurity, CsSecurity) Extension method that generates the set statement of a property definition. Declaration public static string GenerateCSharpSetStatement(this CsProperty source, CsSecurity propertySecurity = CsSecurity.Unknown, CsSecurity setSecurity = CsSecurity.Unknown) Parameters Type Name Description CsProperty source the source property definition CsSecurity propertySecurity Optional parameter that defined the security used by the implementing property. CsSecurity setSecurity Optional parameter that allows you to set the set security level. Returns Type Description string Will return the formatted set statement or null if the property model is empty or the property does not support set. Examples With the same security [set] will return example: set With different security [security] [set] will return example: public set"
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsSecurityExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpCsSecurityExtensions.html",
    "title": "Class GenerateCSharpCsSecurityExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpCsSecurityExtensions Extension methods that support the generation of source in the C# language from the CsSecurity model. Inheritance object GenerateCSharpCsSecurityExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpCsSecurityExtensions Methods GenerateCSharpKeyword(CsSecurity) Gets the security keyword for the C# language. Declaration public static string GenerateCSharpKeyword(this CsSecurity source) Parameters Type Name Description CsSecurity source The source security object to get the keyword from. Returns Type Description string The name of the security keyword or null."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpDocumentationExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpDocumentationExtensions.html",
    "title": "Class GenerateCSharpDocumentationExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpDocumentationExtensions Extension method class that supports c# model generation for IDocumentation hosted models Inheritance object GenerateCSharpDocumentationExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpDocumentationExtensions Methods GenerateCSharpDocumentationLine(string) Takes documentation and returns a XML comment based documentation for C# code. Declaration public static string GenerateCSharpDocumentationLine(string source) Parameters Type Name Description string source documentation string to be evaluated. Returns Type Description string The comment formatted c# documentation or null if the string is not for documentation. GenerateCSharpXmlDocumentation(IDocumentation, int) Generates XML documentation that supports C# source code. Declaration public static string GenerateCSharpXmlDocumentation(this IDocumentation source, int indentLevel = 0) Parameters Type Name Description IDocumentation source The C# model that supports the IDocumentation interface. int indentLevel Optional parameter that sets the level of indents to assign before each XML documentation line, default value is 0. Returns Type Description string GenerateCSharpXmlDocumentationEnumerator(IDocumentation) An Iterator that returns fully formatted XML documentation for the C# programming language. Declaration public static IEnumerable<string> GenerateCSharpXmlDocumentationEnumerator(this IDocumentation documentation) Parameters Type Name Description IDocumentation documentation The source code model that has documentation. Returns Type Description IEnumerable<string> The enumerator that loads the formatted XML documentation for the CSharp Language."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpEnumExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpEnumExtensions.html",
    "title": "Class GenerateCSharpEnumExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpEnumExtensions Extension methods that support the generation of source in the C# language from the CsEnum model. Inheritance object GenerateCSharpEnumExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpEnumExtensions Methods GenerateCSharpEnumValue(CsEnum, string) Extension method that will lookup the value of an enumeration by the enumeration type name. Declaration public static string GenerateCSharpEnumValue(this CsEnum source, string enumName) Parameters Type Name Description CsEnum source The target CsEnum model to get the enumeration value from. string enumName The target numerical named item to use to lookup the enumeration value. Returns Type Description string The target enumeration value or null if it could not be found."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpGenericParameterExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpGenericParameterExtensions.html",
    "title": "Class GenerateCSharpGenericParameterExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpGenericParameterExtensions Extension methods that support the generation of source in the C# language from the CsGenericParameter model. Inheritance object GenerateCSharpGenericParameterExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpGenericParameterExtensions Methods GenerateCSharpGenericWhereClauseSignature(CsGenericParameter, NamespaceManager, List<MapNamespace>) Extension method that generates the where clause for a generic parameter if one exists. This will not generate if the generic parameter is not a place holder type, or if no where clause conditions have been provided. Declaration public static string GenerateCSharpGenericWhereClauseSignature(this CsGenericParameter source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsGenericParameter source Generic parameter to generate the where clause from. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string Null if the where clause was not generated, or the C# syntax for the where clause."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpMethodExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpMethodExtensions.html",
    "title": "Class GenerateCSharpMethodExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpMethodExtensions Extension methods that support the generation of source in the C# language from the CsMethod model. Inheritance object GenerateCSharpMethodExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpMethodExtensions Methods GenerateCSharpMethodName(CsMethod, bool, string, string, string, string) Creates a full formatted method name from a source method model Declaration public static string GenerateCSharpMethodName(this CsMethod source, bool forceAsyncMethod = false, string namePrefix = null, string nameSuffix = null, string asyncPrefix = null, string asyncSuffix = null) Parameters Type Name Description CsMethod source Method model to generate the name from. bool forceAsyncMethod Optional, determines if the method name should be forced for async method, default is false. string namePrefix Optional,prefix to be added to the name, default is null. string nameSuffix Optional,suffix to be added to the name, default is null. string asyncPrefix Optional,prefix to be added to the name if it is a async method, default is null. string asyncSuffix Optional,suffix to be added to the name if it is a async method, default is null. Returns Type Description string GenerateCSharpMethodSignature(CsMethod, NamespaceManager, bool, bool, CsSecurity, bool, bool, bool, bool, bool, bool, bool, List<MapNamespace>, bool, string, string, bool, string, string, string) Generates a C# method signature from model data. This provides a fully customizable method for generating the signature. Declaration public static string GenerateCSharpMethodSignature(this CsMethod source, NamespaceManager manager = null, bool includeAsyncKeyword = true, bool includeSecurity = true, CsSecurity methodSecurity = CsSecurity.Unknown, bool includeKeywords = true, bool abstractKeyword = false, bool sealedKeyword = false, bool staticKeyword = false, bool virtualKeyword = false, bool overrideKeyword = false, bool includeAbstractKeyword = false, List<MapNamespace> mappedNamespaces = null, bool forceAsyncDefinition = false, string asyncPrefix = null, string asyncSuffix = null, bool isInterfaceSignature = false, string methodName = null, string namePrefix = null, string nameSuffix = null) Parameters Type Name Description CsMethod source The source method data to generate the signature from. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. bool includeAsyncKeyword Include the async keyword if the return type is Task bool includeSecurity Includes the security scope which was defined in the model. CsSecurity methodSecurity Optional parameter that allows you to set the security scope for the method. bool includeKeywords Includes all keywords assigned to the source model. bool abstractKeyword Optional flag that will add the abstract keyword to the method signature,default is false. bool sealedKeyword Optional flag that will add the sealed keyword to the method signature, default is false. bool staticKeyword Optional flag that will add the static keyword to the method signature, default is false. bool virtualKeyword Optional flag that will add the static keyword to the method signature, default is false. bool overrideKeyword Optional flag that will add the override keyword to the method signature, default is false. bool includeAbstractKeyword Will include the definition for the abstract keyword in the definition if it is defined. default is false. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. bool forceAsyncDefinition Optional parameter that forces the method to confirm to an async signature, default value is false. string asyncPrefix Optional parameter that is used with forceAsyncDefinition that includes an expected prefix on the method name, default value is null. string asyncSuffix Optional parameter that is used with forceAsyncDefinition that includes an expected suffix on the method name, default value is null. bool isInterfaceSignature Optional parameter used to determine if the method is being built for a interface definition, default value is null. string methodName Optional parameter that sets what the methods name will return as with the signature. string namePrefix Optional parameter that determines if the name will have a prefix assigned to it, default is null. string nameSuffix Optional parameter that determines if the name will have a prefix assigned to it, default is null. Returns Type Description string Fully formatted method deceleration or null if the method data was missing."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpParameterExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpParameterExtensions.html",
    "title": "Class GenerateCSharpParameterExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpParameterExtensions Extension methods that support the generation of source in the C# language from the CsParameter model. Inheritance object GenerateCSharpParameterExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpParameterExtensions Methods GenerateCSharpParameterDefaultValue(CsParameterDefaultValue, CsType) Extension method that generates the default value syntax for a parameter in the C# language. Declaration public static string GenerateCSharpParameterDefaultValue(this CsParameterDefaultValue source, CsType type) Parameters Type Name Description CsParameterDefaultValue source The target default value to format. CsType type The target type of the value to be formatted. Returns Type Description string The fully formatted syntax for the default value or null if data was missing. GenerateCSharpParametersSignature(IReadOnlyList<CsParameter>, NamespaceManager, List<MapNamespace>) Extension method that create the fully formatted parameters section in c# syntax. Declaration public static string GenerateCSharpParametersSignature(this IReadOnlyList<CsParameter> source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description IReadOnlyList<CsParameter> source The source list of parameters to be turned into a parameters signature. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The fully formatted parameters signature or null if data was missing."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpStringExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenerateCSharpStringExtensions.html",
    "title": "Class GenerateCSharpStringExtensions | CodeFactory for Windows",
    "keywords": "Class GenerateCSharpStringExtensions Extension methods that support the generation of source in the C# language from the name of target csharp models. Inheritance object GenerateCSharpStringExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenerateCSharpStringExtensions Methods GenerateCSharpCamelCase(string) Formats a string as camel case. Declaration public static string GenerateCSharpCamelCase(this string source) Parameters Type Name Description string source The source string to format as camel case. Returns Type Description string The formatted string. GenerateCSharpFormattedClassName(string, string, string) Formates a C# object name to be a class name with proper case formatting. Declaration public static string GenerateCSharpFormattedClassName(this string source, string prefix = null, string suffix = null) Parameters Type Name Description string source Name to be formatted. string prefix Optional parameter with the prefix to add to the name, default is null. string suffix Optional parameter with the suffix to add to the name, default is null. Returns Type Description string Formatted class name, or null if no name was provided. GenerateCSharpFormattedInterfaceName(string, string, string) Formats a C# object name to be a interface name with proper case formatting. Declaration public static string GenerateCSharpFormattedInterfaceName(this string source, string prefix = null, string suffix = null) Parameters Type Name Description string source Name to be formatted. string prefix Optional parameter with the prefix to add to the name, default is null. string suffix Optional parameter with the suffix to add to the name, default is null. Returns Type Description string Formatted class name, or null if no name was provided. GenerateCSharpFormattedName(string, string, string, bool, bool) Formats a C# object name to the target format provided. Declaration public static string GenerateCSharpFormattedName(this string source, string prefix = null, string suffix = null, bool useCamelCase = false, bool useProperCase = false) Parameters Type Name Description string source Name to be formatted. string prefix Optional parameter with the prefix to add to the name, default is null. string suffix Optional parameter with the suffix to add to the name, default is null. bool useCamelCase Optional parameter that determines if the name should follow the camel case format. Note: applied before the prefix is assigned. bool useProperCase Optional parameter that determines if the name should follow the proper case format. Note: applied before the prefix is assigned. Returns Type Description string GenerateCSharpProperCase(string) Formats a string as proper case. Declaration public static string GenerateCSharpProperCase(this string source) Parameters Type Name Description string source the source string to format as proper case. Returns Type Description string The formatted string."
  },
  "api/CodeFactory.WinVs.Models.CSharp.GenereateCSharpTypeExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.GenereateCSharpTypeExtensions.html",
    "title": "Class GenereateCSharpTypeExtensions | CodeFactory for Windows",
    "keywords": "Class GenereateCSharpTypeExtensions Extension methods that support the generation of source in the C# language from the CsType model. Inheritance object GenereateCSharpTypeExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class GenereateCSharpTypeExtensions Methods GenerateCSharpArraySignature(CsType) Extension method that creates the array portion definition of a type definition in C# syntax. Declaration public static string GenerateCSharpArraySignature(this CsType source) Parameters Type Name Description CsType source The source type to get the array information to format. Returns Type Description string The formatted array syntax for the target type, or null if no array data was provided in the type definition. GenerateCSharpDefaultValue(CsType) Gets an initial default value syntax for the target type. This will generally be used on the right side of a = sign. Declaration public static string GenerateCSharpDefaultValue(this CsType source) Parameters Type Name Description CsType source Type to generate syntax for. Returns Type Description string Formatted C# syntax for the default value, or null if the default value syntax cannot be identified. Exceptions Type Condition ArgumentNullException Instance of the type was not provided. GenerateCSharpGenericParametersSignature(IReadOnlyList<CsGenericParameter>, NamespaceManager, List<MapNamespace>) Extension method that generates the generics definition part of a signature in the C# format. Declaration public static string GenerateCSharpGenericParametersSignature(this IReadOnlyList<CsGenericParameter> source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description IReadOnlyList<CsGenericParameter> source The target types that make up the generics signature. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The fully formatted definition of the generics signature, or null if the source is not provided. GenerateCSharpTupleSignature(CsType, NamespaceManager, List<MapNamespace>) Extension method that creates a C# signature for the tuple type. Declaration public static string GenerateCSharpTupleSignature(this CsType source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsType source The target declaration syntax for a tuple. NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The formatted tuple or null if data is missing. GenerateCSharpTypeName(CsType, NamespaceManager, List<MapNamespace>) Formats a type name to match the C# syntax for a type deceleration in C#. Declaration public static string GenerateCSharpTypeName(this CsType source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsType source The type model to use to generate the type signature for c# NamespaceManager manager Optional parameter that contains all the using statements from the source code, when used will replace namespaces on type definition in code. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The formatted type definition for C# GenerateCSharpTypeNameRemoveNullableDefinition(CsType, NamespaceManager, List<MapNamespace>) Formats a CsType into a C# compliant type name. If the type is nullable it return the non nullable version of the type. Declaration public static string GenerateCSharpTypeNameRemoveNullableDefinition(this CsType source, NamespaceManager manager = null, List<MapNamespace> mappedNamespaces = null) Parameters Type Name Description CsType source The type to generate the c# type name from. NamespaceManager manager Namespace manager that will determine what namespaces can be truncated from the name of the type. This is an optional parameter. List<MapNamespace> mappedNamespaces Optional parameter that provides namespaces to be mapped to. Returns Type Description string The fully formatted c# type name. Exceptions Type Condition ArgumentNullException If the source type is null will throw an exception. CodeFactoryException If the nullable base type cannot be determined. GenerateCSharpValueSyntax(CsType, string) Extension method that returns a value declaration in the C# language format. Declaration public static string GenerateCSharpValueSyntax(this CsType source, string value) Parameters Type Name Description CsType source The target type to create the value definition for. string value The value to be formatted. Returns Type Description string The definition of the value formatted for C#"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsAttribute.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsAttribute.html",
    "title": "Interface ICsAttribute | CodeFactory for Windows",
    "keywords": "Interface ICsAttribute Model definition for an attribute in a c# implementation. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors IParent.Parent ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsAttribute : ICsModel, IModelStatus, IParent, ISourceFiles Properties HasParameters Flag that determines if the attribute has parameters Declaration bool HasParameters { get; } Property Value Type Description bool Parameters Enumeration of the parameters that are assigned to the attribute. This will be an empty list if HasParameters is false. Declaration IReadOnlyList<CsAttributeParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsAttributeParameter> Type The type information for the attribute itself. Declaration CsType Type { get; } Property Value Type Description CsType Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsAttributein the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsAttributein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsAttributein the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsAttributein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the attribute from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the attribute from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the attribute is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the attribute is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the attribute is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the attribute defined in. Returns Type Description Task<ISourceLocation> The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current attribute with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current attribute with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsAttributeParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsAttributeParameter.html",
    "title": "Interface ICsAttributeParameter | CodeFactory for Windows",
    "keywords": "Interface ICsAttributeParameter The model information for a attribute used for a c# implementation. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsAttributeParameter : ICsModel, IModelStatus Properties HasNamedParameter Flag that determines if the attribute parameter is a named value, or just part of the attributes constructor. Declaration bool HasNamedParameter { get; } Property Value Type Description bool Name The name of the parameter, if this is not a named parameter then it will be set to null Declaration string Name { get; } Property Value Type Description string Value The value that was assigned to the parameter. Declaration CsAttributeParameterValue Value { get; } Property Value Type Description CsAttributeParameterValue"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsAttributeParameterValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsAttributeParameterValue.html",
    "title": "Interface ICsAttributeParameterValue | CodeFactory for Windows",
    "keywords": "Interface ICsAttributeParameterValue The model information for an attributes parameter value for c# implementation. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsAttributeParameterValue : ICsModel, IModelStatus Properties EnumValue The enum value provides the name of the enumeration value that was provided. This will be populated if the property ParameterKind is set to 'Enum' Declaration string EnumValue { get; } Property Value Type Description string ParameterKind Determines the kind of parameter that has been returned. Declaration AttributeParameterKind ParameterKind { get; } Property Value Type Description AttributeParameterKind TypeValue The type definition of the parameter that was passed. This will be populated if the property ParameterKind is set to 'Type' Declaration CsType TypeValue { get; } Property Value Type Description CsType Value Gets the raw value assigned to the parameter. This will be populated if the property ParameterKind is not set to 'Array' Declaration string Value { get; } Property Value Type Description string Values Gets an enumeration of all the parameter values that were assigned to the attribute parameter. This will be populated if the property ParameterKind is set to 'Array' Declaration IReadOnlyList<CsAttributeParameterValue> Values { get; } Property Value Type Description IReadOnlyList<CsAttributeParameterValue>"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsAttributes.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsAttributes.html",
    "title": "Interface ICsAttributes | CodeFactory for Windows",
    "keywords": "Interface ICsAttributes Interface that determines if a c# model has attributes assigned. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsAttributes Properties Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList<CsAttribute> HasAttributes Flag that determines if attributes are assigned. Declaration bool HasAttributes { get; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsClass.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsClass.html",
    "title": "Interface ICsClass | CodeFactory for Windows",
    "keywords": "Interface ICsClass Model definition for a class in C#. Inherited Members ICsNestedContainers.NestedModels ICsNestedContainers.NestedClasses ICsNestedContainers.NestedInterfaces ICsNestedContainers.NestedStructures ICsNestedContainers.NestedEnums ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsClass : ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties BaseClass The base class assigned to this class. This will be null if HasBase is false. Declaration CsClass BaseClass { get; } Property Value Type Description CsClass Constructors List of the constructors implemented in this class. Declaration IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Destructor The destructor implemented in this class. Declaration CsMethod Destructor { get; } Property Value Type Description CsMethod Fields List of the fields implemented in this class. Declaration IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> IsAbstract Flat that determines if this is an abstract class. Declaration bool IsAbstract { get; } Property Value Type Description bool IsSealed Flag that determines if this class has been sealed. Declaration bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this class is static. Declaration bool IsStatic { get; } Property Value Type Description bool Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsContainer.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsContainer.html",
    "title": "Interface ICsContainer | CodeFactory for Windows",
    "keywords": "Interface ICsContainer The base implementation all container type models must implement in C#. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsContainer : ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties ContainerType The type of container model that has been implemented. Declaration CsContainerType ContainerType { get; } Property Value Type Description CsContainerType Events Enumeration of the events assigned to this container. If HasEvents is false this will be null. Declaration IReadOnlyList<CsEvent> Events { get; } Property Value Type Description IReadOnlyList<CsEvent> InheritedInterfaces List of the interfaces that are inherited by this container. Declaration IReadOnlyList<CsInterface> InheritedInterfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> Members List of the members that are implemented in this container. Declaration IReadOnlyList<CsMember> Members { get; } Property Value Type Description IReadOnlyList<CsMember> Methods List of the methods that are implemented in this container. Declaration IReadOnlyList<CsMethod> Methods { get; } Property Value Type Description IReadOnlyList<CsMethod> Name The name of the container. Declaration string Name { get; } Property Value Type Description string Namespace The namespace the container objects belongs to. Declaration string Namespace { get; } Property Value Type Description string Properties List of the properties that are implemented in this container. Declaration IReadOnlyList<CsProperty> Properties { get; } Property Value Type Description IReadOnlyList<CsProperty> Security The security scope assigned to the container. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsContainerin the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsContainerin the target document. Declaration Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the container definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsContainerin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToBeginningAsync(string) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToBeginningAsync(string, string) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration Task<CsSource> AddToBeginningAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndAsync(string) Adds the source code inside of the container at the end of where members are defined in the container. Declaration Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndAsync(string, string) Adds the source code inside of the container at the end of where members are defined in the container. Declaration Task<CsSource> AddToEndAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. DeleteAsync() Deletes the definition of the container from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the container from the source document. Declaration Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the container is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetBodySourceLocationAsync() Gets the starting and ending locations of the body located in the container. Declaration Task<ISourceLocation> GetBodySourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetBodySourceLocationAsync(string) Gets the starting and ending locations of the body located in the container. Declaration Task<ISourceLocation> GetBodySourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task<ISourceLocation> The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetBodySyntaxAsync() The source code syntax that is stored in the body of the container model. This will be null if the container was not loaded from source code. Declaration Task<string> GetBodySyntaxAsync() Returns Type Description Task<string> GetSourceLocationAsync() Gets the starting and ending locations within the document where the container is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the container is located. Declaration Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task<ISourceLocation> The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current container with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current container with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsDelegate.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsDelegate.html",
    "title": "Interface ICsDelegate | CodeFactory for Windows",
    "keywords": "Interface ICsDelegate Model definition of a delegate in C#. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ICsAttributes.HasAttributes ICsAttributes.Attributes ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsDelegate : ICsModel, IModelStatus, ICsAttributes, ICsGeneric, IDocumentation, IParent, ILookup, ISourceFiles Properties BeginInvokeMethod The begin invoke method definition for this delegate. Declaration CsMethod BeginInvokeMethod { get; } Property Value Type Description CsMethod EndInvokeMethod The end invoke method definition for this delegate. Declaration CsMethod EndInvokeMethod { get; } Property Value Type Description CsMethod HasParameters Flag that determines if the method has parameters assigned to it. Declaration bool HasParameters { get; } Property Value Type Description bool InvokeMethod The invoke method definition for this delegate. Declaration CsMethod InvokeMethod { get; } Property Value Type Description CsMethod IsVoid Flag that determines if the delegate return is a void. Declaration bool IsVoid { get; } Property Value Type Description bool Name The name assigned to the this item. Declaration string Name { get; } Property Value Type Description string Namespace The namespace the delegate is assigned to. Declaration string Namespace { get; } Property Value Type Description string Parameters List of the parameters that have been assigned to the delegate. If HasParameters property is set to false this will be an empty list. Declaration IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsParameter> ReturnType The type information about the return type assigned to the method. Declaration CsType ReturnType { get; } Property Value Type Description CsType Security The security scope that has been assigned to this item. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsDelegatein the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsDelegatein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the delegate definition not before the documentation or attributes that are assigned. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsDelegatein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the delegate from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the delegate from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the delegate is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current delegate with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current delegate with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsEnum.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsEnum.html",
    "title": "Interface ICsEnum | CodeFactory for Windows",
    "keywords": "Interface ICsEnum Data model that provides information on an enumeration. Inherited Members ICsNestedModel.NestedType ICsNestedModel.IsNested ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsEnum : ICsNestedModel, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties Name The name of the enumeration. Declaration string Name { get; } Property Value Type Description string Namespace The namespace the enumeration belongs to. Declaration string Namespace { get; } Property Value Type Description string Security The security scope assigned to the enumeration. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Values List of the enumeration values implemented in this enumeration. Declaration IReadOnlyList<CsEnumValue> Values { get; } Property Value Type Description IReadOnlyList<CsEnumValue> Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsEnumin the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsEnumin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the enum definition not before the documentation or attributes that are assigned. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsEnumin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToBeginningAsync(string) Adds the source code inside of the enumeration at the beginning of where members are defined in the enumeration. Declaration Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. AddToEndAsync(string) Adds the source code inside of the enumeration at the end of where members are defined in the enumeration. Declaration Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. DeleteAsync() Deletes the definition of the enumeration from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the enumeration has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the enumeration from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the enumeration is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the enumeration has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetBodySourceLocationAsync() Gets the starting and ending locations of the body located in the enum. Declaration Task<ISourceLocation> GetBodySourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location in the enum. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the enumeration is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the enumeration. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the enumeration is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the enumeration defined in. Returns Type Description Task<ISourceLocation> The source location for the enumeration. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current enumeration with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current enumeration with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsEnumValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsEnumValue.html",
    "title": "Interface ICsEnumValue | CodeFactory for Windows",
    "keywords": "Interface ICsEnumValue Data model that provides information to a specific enumeration value implemented in an enumeration. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsEnumValue : ICsModel, IModelStatus, ICsAttributes, IDocumentation, IParent, ILookup, ISourceFiles Properties Name The name of the enumeration value. Declaration string Name { get; } Property Value Type Description string Security The security scope assigned to the enumeration value. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Value The value that has been assigned to the enumeration value. Declaration string Value { get; } Property Value Type Description string Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsEnumValuein the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsEnumValuein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the member definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsEnumValuein the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the delegate from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the delegate from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the delegate is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task<ISourceLocation> The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current delegate with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current delegate with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsEvent.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsEvent.html",
    "title": "Interface ICsEvent | CodeFactory for Windows",
    "keywords": "Interface ICsEvent Model definition of a event in c#. Inherited Members ICsMember.AddBeforeAsync(string, string) ICsMember.AddBeforeAsync(string) ICsMember.AddBeforeAsync(string, bool) ICsMember.AddAfterAsync(string, string) ICsMember.AddAfterAsync(string) ICsMember.DeleteAsync(string) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(string) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(string, string) ICsMember.ReplaceAsync(string) ICsMember.CommentOutSyntaxAsync(string) ICsMember.GetMemberSyntaxAsync() ICsMember.Name ICsMember.Security ICsMember.MemberType ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsEvent : ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties AddMethod The method that adds a subscription to the event. Declaration CsMethod AddMethod { get; } Property Value Type Description CsMethod EventHandlerDelegate The event handler delegate used by the event. Declaration CsDelegate EventHandlerDelegate { get; } Property Value Type Description CsDelegate EventType The event handler type that is assigned to the event. Declaration CsType EventType { get; } Property Value Type Description CsType IsAbstract Flag that determines if the event has been implemented as an abstract event. Declaration bool IsAbstract { get; } Property Value Type Description bool IsOverride Flag that determines if the event has been overridden. Declaration bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the event has been sealed. Declaration bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if the event is static. Declaration bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the event is implemented as virtual. Declaration bool IsVirtual { get; } Property Value Type Description bool RaiseMethod The method definition to raise the event. Declaration CsMethod RaiseMethod { get; } Property Value Type Description CsMethod RemoveMethod The method that removes a subscription to the event. Declaration CsMethod RemoveMethod { get; } Property Value Type Description CsMethod Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsField.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsField.html",
    "title": "Interface ICsField | CodeFactory for Windows",
    "keywords": "Interface ICsField Model definition of a Field in .net. Inherited Members ICsMember.AddBeforeAsync(string, string) ICsMember.AddBeforeAsync(string) ICsMember.AddBeforeAsync(string, bool) ICsMember.AddAfterAsync(string, string) ICsMember.AddAfterAsync(string) ICsMember.DeleteAsync(string) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(string) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(string, string) ICsMember.ReplaceAsync(string) ICsMember.CommentOutSyntaxAsync(string) ICsMember.GetMemberSyntaxAsync() ICsMember.Name ICsMember.Security ICsMember.MemberType ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsField : ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties ConstantValue The value that was assigned to the constant. Will return as the string representation of the value. Declaration string ConstantValue { get; } Property Value Type Description string DataType The data type assigned to the field. Declaration CsType DataType { get; } Property Value Type Description CsType IsConstant Flag that determines if the field is a constant. Declaration bool IsConstant { get; } Property Value Type Description bool IsReadOnly Flag that determines if this field is set to readonly. Declaration bool IsReadOnly { get; } Property Value Type Description bool IsStatic Flag that determines if the field is set to be static. Declaration bool IsStatic { get; } Property Value Type Description bool Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsGeneric.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsGeneric.html",
    "title": "Interface ICsGeneric | CodeFactory for Windows",
    "keywords": "Interface ICsGeneric Definition that determines if the c# model implements generics. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsGeneric Properties GenericParameters List of the generic parameters assigned. Declaration IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList<CsGenericParameter> GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration bool HasStrongTypesInGenerics { get; } Property Value Type Description bool IsGeneric Flag the determines if this item supports generics Declaration bool IsGeneric { get; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsGenericParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsGenericParameter.html",
    "title": "Interface ICsGenericParameter | CodeFactory for Windows",
    "keywords": "Interface ICsGenericParameter Model contract for information about a parameter used in a generic definition. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsGenericParameter : ICsModel, IModelStatus Properties ConstrainingTypes The constraining types the generic parameter must ad hear to. If there are no constraining types an empty list will be returned. Declaration IReadOnlyList<CsType> ConstrainingTypes { get; } Property Value Type Description IReadOnlyList<CsType> HasClassConstraint Flag that determines if the generic parameter has a constraint that it must implement from a class. Declaration bool HasClassConstraint { get; } Property Value Type Description bool HasConstraintTypes Flag that determines if the generic parameter has constraining types the parameter must ad hear to. Declaration bool HasConstraintTypes { get; } Property Value Type Description bool HasNewConstraint Flag that determines if the generic parameter has a constraint that is must support construction of a new type. Declaration bool HasNewConstraint { get; } Property Value Type Description bool HasOutKeyword Flag that determines if the generic parameter uses the out keyword. Declaration bool HasOutKeyword { get; } Property Value Type Description bool HasStructConstraint Flag that determines if the generic parameter has a constraint that is must implement from a structure. Declaration bool HasStructConstraint { get; } Property Value Type Description bool Type The type definition of the generic parameter. Declaration CsType Type { get; } Property Value Type Description CsType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsInterface.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsInterface.html",
    "title": "Interface ICsInterface | CodeFactory for Windows",
    "keywords": "Interface ICsInterface Model implementation of an interface in C#. Inherited Members ICsNestedContainers.NestedModels ICsNestedContainers.NestedClasses ICsNestedContainers.NestedInterfaces ICsNestedContainers.NestedStructures ICsNestedContainers.NestedEnums ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsInterface : ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsMember.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsMember.html",
    "title": "Interface ICsMember | CodeFactory for Windows",
    "keywords": "Interface ICsMember Base definition for all c# member models. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsMember : ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties MemberType The type of member the model is. Declaration CsMemberType MemberType { get; } Property Value Type Description CsMemberType Name The name assigned to the member. Declaration string Name { get; } Property Value Type Description string Security The security scope that has been assigned to the member. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsMemberin the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsMemberin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, bool) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode, bool ignoreLeadingModelsAndDocs) Parameters Type Name Description string sourceCode The source code that is to be added to the document. bool ignoreLeadingModelsAndDocs Changes the before entry point to the start of the member definition not before the documentation or attributes that are assigned to the member. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsMemberin the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CommentOutSyntaxAsync(string) Comments out the member hosting syntax. Declaration Task<CsSource> CommentOutSyntaxAsync(string commentSyntax = \"//\") Parameters Type Name Description string commentSyntax Optional parameter that sets the syntax used to comment out the member defaults to '//' Returns Type Description Task<CsSource> A newly loaded copy of the CsSource model after the member has been commented out. This will return the current instance if the model was not loaded from source. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the member from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the member from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the member is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetMemberSyntaxAsync() Gets the syntax that defined the member model. Declaration Task<string> GetMemberSyntaxAsync() Returns Type Description Task<string> The syntax that makes up the member or null if the syntax cannot be loaded. This will be null if the model was not loaded from source code. GetSourceLocationAsync() Gets the starting and ending locations within the document where the member is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the member is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the member defined in. Returns Type Description Task<ISourceLocation> The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current member with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current member with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsMethod.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsMethod.html",
    "title": "Interface ICsMethod | CodeFactory for Windows",
    "keywords": "Interface ICsMethod Model definition of a method in c#. Inherited Members ICsMember.AddBeforeAsync(string, string) ICsMember.AddBeforeAsync(string) ICsMember.AddBeforeAsync(string, bool) ICsMember.AddAfterAsync(string, string) ICsMember.AddAfterAsync(string) ICsMember.DeleteAsync(string) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(string) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(string, string) ICsMember.ReplaceAsync(string) ICsMember.CommentOutSyntaxAsync(string) ICsMember.GetMemberSyntaxAsync() ICsMember.Name ICsMember.Security ICsMember.MemberType ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsMethod : ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup, ICsGeneric Properties HasParameters Flag that determines if the method has parameters assigned to it. Declaration bool HasParameters { get; } Property Value Type Description bool IsAbstract Flag that determines if the method has been implemented as abstract. Declaration bool IsAbstract { get; } Property Value Type Description bool IsAsync Flag that determines if the method implements the Async keyword. Declaration bool IsAsync { get; } Property Value Type Description bool IsExtension Flag that determines if the method is an extension method. Declaration bool IsExtension { get; } Property Value Type Description bool IsOverride Flag that determines if the method has been overridden. Declaration bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the method has been sealed. Declaration bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this is a static method. Declaration bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the method has been implemented as virtual. Declaration bool IsVirtual { get; } Property Value Type Description bool IsVoid Flag that determines if the methods return type is void. Declaration bool IsVoid { get; } Property Value Type Description bool MethodType Determines the type of method that was loaded into this model. Declaration CsMethodType MethodType { get; } Property Value Type Description CsMethodType Parameters Enumeration of the parameters that have been assigned to the method. If HasParameters property is set to false this will be null. Declaration IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList<CsParameter> ReturnType The type information about the return type assigned to the method. if flag IsVoid is true then the return type will be set to null. Declaration CsType ReturnType { get; } Property Value Type Description CsType SyntaxContent Determines how the internal syntax for the method is stored. Declaration SyntaxType SyntaxContent { get; } Property Value Type Description SyntaxType Methods AddToBeginningBodySyntaxAsync(string) Adds the source code to the beginning of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration Task<CsSource> AddToBeginningBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToBeginningBodySyntaxAsync(string, string) Adds the source code to the beginning of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddToBeginningBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToEndBodySyntaxAsync(string) Adds the source code to the end of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration Task<CsSource> AddToEndBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. AddToEndBodySyntaxAsync(string, string) Adds the source code to the end of the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddToEndBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source document to be updated. string sourceCode The source code that is to be added to the method body. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. DeleteBodySyntaxAsync() Deletes the source syntax from the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration Task<CsSource> DeleteBodySyntaxAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. DeleteBodySyntaxAsync(string) Deletes the source syntax from the method body. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteBodySyntaxAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. GetBodySyntaxAsync() The source code syntax that is stored in the body of the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Body. Declaration Task<string> GetBodySyntaxAsync() Returns Type Description Task<string> GetBodySyntaxListAsync() The source code syntax that is stored in the body of the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Body. This will return each line of code that has a line feed or return as a separate string. Declaration Task<List<string>> GetBodySyntaxListAsync() Returns Type Description Task<List<string>> GetExpressionSyntaxAsync() Gets the expression that has been assigned to the method. This will be null if the method was not loaded from source code or the SyntaxContent is not set to Expression. Declaration Task<string> GetExpressionSyntaxAsync() Returns Type Description Task<string> ReplaceBodySyntaxAsync(string) Replaces the syntax in the body of the method. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration Task<CsSource> ReplaceBodySyntaxAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceBodySyntaxAsync(string, string) Replaces the syntax in the body of the method. The ContentSyntax must be set to Body or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceBodySyntaxAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the body of the method. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceExpressionAsync(string) Replaces the expression assigned to the method with the provided source code. The ContentSyntax must be set to Expression or else an exception will be thrown. Declaration Task<CsSource> ReplaceExpressionAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that will replace the original expression. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. ReplaceExpressionAsync(string, string) Replaces the expression assigned to the method with the provided source code. The ContentSyntax must be set to Expression or else an exception will be thrown. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceExpressionAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that will replace the original expression. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. CodeFactoryException Error is raised if the incorrect ContentSyntax is present. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsModel.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsModel.html",
    "title": "Interface ICsModel | CodeFactory for Windows",
    "keywords": "Interface ICsModel Base implementation all C# models must implement. Inherited Members IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsModel : IModelStatus Properties Language The target language this model was loaded from. Declaration SourceCodeType Language { get; } Property Value Type Description SourceCodeType LoadedFromSource Flag that determines if this model was loaded from source code or was loaded through reflects or symbol libraries. Declaration bool LoadedFromSource { get; } Property Value Type Description bool ModelType The type of c# model that is implemented. Declaration CsModelType ModelType { get; } Property Value Type Description CsModelType SourceDocument The fully qualified path to the document that was used to load the model from source. This will be populated if the model was loaded from source. Declaration string SourceDocument { get; } Property Value Type Description string Methods GetModel(string) Searchs for an existing C# model that has been loaded with the load of the source code. Declaration CsModel GetModel(string lookupPath) Parameters Type Name Description string lookupPath The lookup path that is assigned to a loaded model. Returns Type Description CsModel Returns the model as the base CsModel type. GetModel<T>(string) Searchs for an existing C# model that has been loaded with the load of the source code. Declaration T GetModel<T>(string lookupPath) where T : class, ICsModel Parameters Type Name Description string lookupPath The lookup path that is assigned to a loaded model. Returns Type Description T Returns the model as the identified type it will either return the instance or null if it is not found or not the correct type. Type Parameters Name Description T The target CsModel type to cast to before returning."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsNamespace.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsNamespace.html",
    "title": "Interface ICsNamespace | CodeFactory for Windows",
    "keywords": "Interface ICsNamespace Model definition for a namespace definition inside a code file in C#. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors IParent.Parent ILookup.LookupPath ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsNamespace : ICsModel, IModelStatus, IParent, ILookup, ISourceFiles Properties Name The name of the namespace. Declaration string Name { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsNestedContainers.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsNestedContainers.html",
    "title": "Interface ICsNestedContainers | CodeFactory for Windows",
    "keywords": "Interface ICsNestedContainers Definition of the container types that can be nested in other containers. Inherited Members ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsNestedContainers : ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties NestedClasses Classes that are nested in this container. Declaration IReadOnlyList<CsClass> NestedClasses { get; } Property Value Type Description IReadOnlyList<CsClass> NestedEnums Enums that are nested in this container. Declaration IReadOnlyList<CsEnum> NestedEnums { get; } Property Value Type Description IReadOnlyList<CsEnum> NestedInterfaces Interfaces that are nested in this container. Declaration IReadOnlyList<CsInterface> NestedInterfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> NestedModels Models that are nested in the implementation of this container. Declaration IReadOnlyList<ICsNestedModel> NestedModels { get; } Property Value Type Description IReadOnlyList<ICsNestedModel> NestedStructures Structures that are nested in this container. Declaration IReadOnlyList<CsStructure> NestedStructures { get; } Property Value Type Description IReadOnlyList<CsStructure> Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsNestedModel.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsNestedModel.html",
    "title": "Interface ICsNestedModel | CodeFactory for Windows",
    "keywords": "Interface ICsNestedModel Interface that identifies if the implementation of this model is nested within another model. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsNestedModel : ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties IsNested Flag that determines if this model is nested in a parent model. Declaration bool IsNested { get; } Property Value Type Description bool NestedType Identifies the type of model that has been nested. Declaration CsNestedType NestedType { get; } Property Value Type Description CsNestedType Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsParameter.html",
    "title": "Interface ICsParameter | CodeFactory for Windows",
    "keywords": "Interface ICsParameter The definition of a parameter used in C#. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ICsAttributes.HasAttributes ICsAttributes.Attributes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsParameter : ICsModel, IModelStatus, ICsAttributes, IParent, ILookup Properties DefaultValue The default value assigned to the parameter. This will be null if the HasDefaultValue property is set to false. Declaration CsParameterDefaultValue DefaultValue { get; } Property Value Type Description CsParameterDefaultValue HasDefaultValue Flag that determines if the parameter has a default value. Declaration bool HasDefaultValue { get; } Property Value Type Description bool IsGenericParameter Flag that determines if the parameter is a generic place holder. Declaration bool IsGenericParameter { get; } Property Value Type Description bool IsOptional Flag that determines if the parameter is optional. Declaration bool IsOptional { get; } Property Value Type Description bool IsOut Flag that determines if the parameter is assigned the out keyword. Declaration bool IsOut { get; } Property Value Type Description bool IsParams Flag that determines if the parameter is an parameter array. Declaration bool IsParams { get; } Property Value Type Description bool IsRef Flag that determines if the parameter is assigned the ref keyword. Declaration bool IsRef { get; } Property Value Type Description bool Name The name of the parameter. Declaration string Name { get; } Property Value Type Description string ParameterType The data type assigned to the parameter. Declaration CsType ParameterType { get; } Property Value Type Description CsType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsParameterDefaultValue.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsParameterDefaultValue.html",
    "title": "Interface ICsParameterDefaultValue | CodeFactory for Windows",
    "keywords": "Interface ICsParameterDefaultValue Model that represents a default value for a ICsParameter model. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsParameterDefaultValue : ICsModel, IModelStatus, IParent, ILookup Properties Value If the default value is a literal value the value will be set, otherwise it will be set to null. Declaration string Value { get; } Property Value Type Description string ValueType The type of default value assigned to the parameter. Declaration ParameterDefaultValueType ValueType { get; } Property Value Type Description ParameterDefaultValueType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsProperty.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsProperty.html",
    "title": "Interface ICsProperty | CodeFactory for Windows",
    "keywords": "Interface ICsProperty Model definition of a property in C#. Inherited Members ICsMember.AddBeforeAsync(string, string) ICsMember.AddBeforeAsync(string) ICsMember.AddBeforeAsync(string, bool) ICsMember.AddAfterAsync(string, string) ICsMember.AddAfterAsync(string) ICsMember.DeleteAsync(string) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(string) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(string, string) ICsMember.ReplaceAsync(string) ICsMember.CommentOutSyntaxAsync(string) ICsMember.GetMemberSyntaxAsync() ICsMember.Name ICsMember.Security ICsMember.MemberType ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsProperty : ICsMember, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, IParent, ILookup Properties GetMethod Provides access to the get method statement in the property. This will be null the property does not have a get statement. Declaration CsMethod GetMethod { get; } Property Value Type Description CsMethod GetSecurity The security scope that is assigned to the get accessor. Make sure you check the HasGet to determine if the property supports get operations. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the GetMethod property to access the get method details.\", false)] CsSecurity GetSecurity { get; } Property Value Type Description CsSecurity HasGet Flag that determines if this property supports get accessor. Declaration bool HasGet { get; } Property Value Type Description bool HasInit Flag that determines if this property supports init accessor. Declaration bool HasInit { get; } Property Value Type Description bool HasSet Flag that determines if this property supports set accessor. Declaration bool HasSet { get; } Property Value Type Description bool InitMethod Provides access to the init method statement in the property. This will be null the property does not have a init statement. Declaration CsMethod InitMethod { get; } Property Value Type Description CsMethod IsAbstract Flag that determines if the property is implemented as an abstract property. Declaration bool IsAbstract { get; } Property Value Type Description bool IsOverride Flag that determines if the property has been overridden. Declaration bool IsOverride { get; } Property Value Type Description bool IsSealed Flag that determines if the property has been sealed. Declaration bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if the property has been implemented as static. Declaration bool IsStatic { get; } Property Value Type Description bool IsVirtual Flag that determines if the property is implemented as virtual. Declaration bool IsVirtual { get; } Property Value Type Description bool PropertyType The source data type that is managed by this property. Declaration CsType PropertyType { get; } Property Value Type Description CsType SetMethod Provides access to the set method statement in the property. This will be null the property does not have a set statement. Declaration CsMethod SetMethod { get; } Property Value Type Description CsMethod SetSecurity The security scope that is assigned to the set accessor. Make sure you check the HasSet to determine if the property supports set operations. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the SetMethod property to access the set method details.\", false)] CsSecurity SetSecurity { get; } Property Value Type Description CsSecurity Methods LoadGetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the GetMethod property to access the get method details.\", false)] Task<string> LoadGetBodySyntaxAsync() Returns Type Description Task<string> LoadSetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration [Obsolete(\"This will be removed in later editions of the SDK. Use the SetMethod property to access the set method details.\", false)] Task<string> LoadSetBodySyntaxAsync() Returns Type Description Task<string> Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsRecord.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsRecord.html",
    "title": "Interface ICsRecord | CodeFactory for Windows",
    "keywords": "Interface ICsRecord Model definition for a class in C#. Inherited Members ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsRecord : ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties BaseRecord The base record assigned to this record. This will be null if HasBase is false. Declaration CsRecord BaseRecord { get; } Property Value Type Description CsRecord Constructors List of the constructors implemented in this class. Declaration IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Destructor The destructor implemented in this class. Declaration CsMethod Destructor { get; } Property Value Type Description CsMethod Fields List of the fields implemented in this class. Declaration IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> IsAbstract Flat that determines if this is an abstract record. Declaration bool IsAbstract { get; } Property Value Type Description bool IsSealed Flag that determines if this record has been sealed. Declaration bool IsSealed { get; } Property Value Type Description bool IsStatic Flag that determines if this record is static. Declaration bool IsStatic { get; } Property Value Type Description bool Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsRecordStructure.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsRecordStructure.html",
    "title": "Interface ICsRecordStructure | CodeFactory for Windows",
    "keywords": "Interface ICsRecordStructure Model definition for a record structure in C#. Inherited Members ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsRecordStructure : ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties Constructors List of the constructors for this record structure. Declaration IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Fields List of the fields for this record structure. Declaration IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsSource.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsSource.html",
    "title": "Interface ICsSource | CodeFactory for Windows",
    "keywords": "Interface ICsSource Source definition from a source that was written in C#. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsSource : ICsModel, IModelStatus, IParent, ILookup Properties Classes The classes that were defined in the source. Declaration IReadOnlyList<CsClass> Classes { get; } Property Value Type Description IReadOnlyList<CsClass> Delegates The delegates that were defined in the source. Declaration IReadOnlyList<CsDelegate> Delegates { get; } Property Value Type Description IReadOnlyList<CsDelegate> Enums The enumerations that were defined in the source. Declaration IReadOnlyList<CsEnum> Enums { get; } Property Value Type Description IReadOnlyList<CsEnum> HostedInProject Flag that determines if the source code was hosted in a project. Declaration bool HostedInProject { get; } Property Value Type Description bool Interfaces The interfaces that were defined in the source. Declaration IReadOnlyList<CsInterface> Interfaces { get; } Property Value Type Description IReadOnlyList<CsInterface> NamespaceReferences The namespaces that are used as references to access other libraries not hosted in the source document. Declaration IReadOnlyList<CsUsingStatement> NamespaceReferences { get; } Property Value Type Description IReadOnlyList<CsUsingStatement> Namespaces The namespaces that were defined in the source. Declaration IReadOnlyList<CsNamespace> Namespaces { get; } Property Value Type Description IReadOnlyList<CsNamespace> ProjectName The name of the project the source is hosted in. This will be null if this source is not hosted in a project. Declaration string ProjectName { get; } Property Value Type Description string RecordStructures The record structures that were defined in the source. Declaration IReadOnlyList<CsRecordStructure> RecordStructures { get; } Property Value Type Description IReadOnlyList<CsRecordStructure> Records The records that were defined in the source. Declaration IReadOnlyList<CsRecord> Records { get; } Property Value Type Description IReadOnlyList<CsRecord> Structures The structures that were defined in the source. Declaration IReadOnlyList<CsStructure> Structures { get; } Property Value Type Description IReadOnlyList<CsStructure> Methods AddToBeginningAsync(string) Adds the source code to the beginning of the ICsSource model. Declaration Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddToEndAsync(string) Adds the source code the end of the ICsSource model. Declaration Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the content from the ICsSource model. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string) Replaces the content of the ICsSource model. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsStructure.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsStructure.html",
    "title": "Interface ICsStructure | CodeFactory for Windows",
    "keywords": "Interface ICsStructure Model definition for a structure in C#. Inherited Members ICsNestedContainers.NestedModels ICsNestedContainers.NestedClasses ICsNestedContainers.NestedInterfaces ICsNestedContainers.NestedStructures ICsNestedContainers.NestedEnums ICsContainer.AddBeforeAsync(string, string) ICsContainer.AddBeforeAsync(string) ICsContainer.AddBeforeAsync(string, bool) ICsContainer.AddAfterAsync(string, string) ICsContainer.AddAfterAsync(string) ICsContainer.AddToBeginningAsync(string, string) ICsContainer.AddToBeginningAsync(string) ICsContainer.AddToEndAsync(string, string) ICsContainer.AddToEndAsync(string) ICsContainer.DeleteAsync(string) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(string) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(string) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(string, string) ICsContainer.ReplaceAsync(string) ICsContainer.GetBodySyntaxAsync() ICsContainer.ContainerType ICsContainer.Name ICsContainer.Namespace ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ISourceFiles.SourceFiles ISourceFiles.ModelSourceFile ICsAttributes.HasAttributes ICsAttributes.Attributes IDocumentation.AddBeforeDocsAsync(string) IDocumentation.AddAfterDocsAsync(string) IDocumentation.ReplaceDocsAsync(string) IDocumentation.DeleteDocsAsync() IDocumentation.HasDocumentation IDocumentation.Documentation ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsStructure : ICsNestedContainers, ICsContainer, ICsModel, IModelStatus, ISourceFiles, ICsAttributes, IDocumentation, ICsGeneric, IParent, ILookup Properties Constructors List of the constructors for this structure. Declaration IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList<CsMethod> Fields List of the fields for this structure. Declaration IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList<CsField> Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsTupleTypeParameter.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsTupleTypeParameter.html",
    "title": "Interface ICsTupleTypeParameter | CodeFactory for Windows",
    "keywords": "Interface ICsTupleTypeParameter The C# model definition for the TupleTypeParameter. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsTupleTypeParameter : ICsModel, IModelStatus Properties HasDefaultName Flag that determines if the named assigned to the tuple was system generated or defined in source. Declaration bool HasDefaultName { get; } Property Value Type Description bool Name The name assigned to the tuple parameter. Declaration string Name { get; } Property Value Type Description string TupleType The model with the type definition assigned to the tuple. Declaration CsType TupleType { get; } Property Value Type Description CsType"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsType.html",
    "title": "Interface ICsType | CodeFactory for Windows",
    "keywords": "Interface ICsType Model that defines a type used in a C# model definition. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors ICsGeneric.IsGeneric ICsGeneric.GenericParameters ICsGeneric.HasStrongTypesInGenerics ICsGeneric.GenericTypes Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsType : ICsModel, IModelStatus, ICsGeneric Properties ArrayDimensions Gets a list of the dimensions that are assigned to the array. This will contain more then one value if the array is a jagged array. This will be empty if the type is not an array. Declaration IReadOnlyList<int> ArrayDimensions { get; } Property Value Type Description IReadOnlyList<int> IsArray Flag that determines if the type is an array of the target type. Declaration bool IsArray { get; } Property Value Type Description bool IsClass Flag that determines if the type is a class. Declaration bool IsClass { get; } Property Value Type Description bool IsDelegate Flag that determines if the type is a delegate. Declaration bool IsDelegate { get; } Property Value Type Description bool IsEnum Flag that determines if the type is a enumeration. Declaration bool IsEnum { get; } Property Value Type Description bool IsGenericPlaceHolder Flag that determines if the type is a generic place holder definition. Declaration bool IsGenericPlaceHolder { get; } Property Value Type Description bool IsInterface Flag that determines if the type is an interface. Declaration bool IsInterface { get; } Property Value Type Description bool IsStructure Flag that determines if the type is a structure. Declaration bool IsStructure { get; } Property Value Type Description bool IsTuple Flag that determine if the type is a Tuple Declaration bool IsTuple { get; } Property Value Type Description bool IsValueType Flag that determines if the type is a value type. Declaration bool IsValueType { get; } Property Value Type Description bool IsWellKnownType Flag that determines if the type is one of the well know data types of the language. Declaration bool IsWellKnownType { get; } Property Value Type Description bool Name The name of the type. Declaration string Name { get; } Property Value Type Description string Namespace The namespace the type belongs to. Declaration string Namespace { get; } Property Value Type Description string SupportsDisposable Flag that determines if the type supports the interface IDisposable. Declaration bool SupportsDisposable { get; } Property Value Type Description bool TupleTypes List of the types that are implemented in the Tuple. This will an empty list if the type is not a tuple. Declaration IReadOnlyList<CsTupleTypeParameter> TupleTypes { get; } Property Value Type Description IReadOnlyList<CsTupleTypeParameter> ValueTypeDefaultValue The default value for well known value data types. This will be null if the value is not a well known value type. Declaration string ValueTypeDefaultValue { get; } Property Value Type Description string WellKnownType Enumeration of the target well known type this type represents. Declaration CsKnownLanguageType WellKnownType { get; } Property Value Type Description CsKnownLanguageType Methods GetClassModel() Loads the full ICsClass model from the type definition. Declaration CsClass GetClassModel() Returns Type Description CsClass Return the fully loaded model or an empty model if the type is not a class. GetDelegateModel() Loads the full ICsDelegate model from the type definition. Declaration CsDelegate GetDelegateModel() Returns Type Description CsDelegate Return the fully loaded model or an empty model if the type is not a delegate. GetEnumModel() Loads the full ICsEnum model from the type definition. Declaration CsEnum GetEnumModel() Returns Type Description CsEnum Return the fully loaded model or an empty model if the type is not an enumeration. GetInterfaceModel() Loads the full ICsInterface model from the type definition. Declaration CsInterface GetInterfaceModel() Returns Type Description CsInterface Return the fully loaded model or an empty model if the type is not an interface. GetStructureModel() Loads the full ICsStructure model from the type definition. Declaration CsStructure GetStructureModel() Returns Type Description CsStructure Return the fully loaded model or an empty model if the type is not a structure."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ICsUsingStatement.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ICsUsingStatement.html",
    "title": "Interface ICsUsingStatement | CodeFactory for Windows",
    "keywords": "Interface ICsUsingStatement Model that represents a using statement in a C# source model. Inherited Members ICsModel.GetModel<T>(string) ICsModel.GetModel(string) ICsModel.LoadedFromSource ICsModel.Language ICsModel.ModelType ICsModel.SourceDocument IModelStatus.GetErrors() IModelStatus.IsLoaded IModelStatus.HasErrors IParent.Parent ILookup.LookupPath IUsingStatementNamespace.ReferenceNamespace IUsingStatementNamespace.HasAlias IUsingStatementNamespace.Alias Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ICsUsingStatement : ICsModel, IModelStatus, IParent, ILookup, IUsingStatementNamespace Methods AddAfterAsync(string) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddAfterAsync(string, string) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. AddBeforeAsync(string, string) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be added to the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync() Deletes the definition of the using statement from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. DeleteAsync(string) Deletes the definition of the using statement from the source document. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The source document that the using statement is to be removed from. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. GetSourceLocationAsync() Gets the starting and ending locations within the document where the using statement is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task<ISourceLocation> The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. GetSourceLocationAsync(string) Gets the starting and ending locations within the document where the using statement is located. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description string sourceDocument The fully qualified path to the document that has the using statement defined in. Returns Type Description Task<ISourceLocation> The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. ReplaceAsync(string) Replaces the current using statement with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. ReplaceAsync(string, string) Replaces the current using statement with the provided source code. Declaration [Obsolete(\"No longer support will be removed in later edition, you no longer need to pass the source document.\", false)] Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description string sourceDocument The fully qualified path to the source code document to be updated. string sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task<CsSource> A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document."
  },
  "api/CodeFactory.WinVs.Models.CSharp.IDocumentation.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.IDocumentation.html",
    "title": "Interface IDocumentation | CodeFactory for Windows",
    "keywords": "Interface IDocumentation Interface that determines if a model has code level documentation. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface IDocumentation Properties Documentation Documentation that has been assigned to this model. Declaration string Documentation { get; } Property Value Type Description string HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration bool HasDocumentation { get; } Property Value Type Description bool Methods AddAfterDocsAsync(string) Adds the supplied source code directly after the documentation. Declaration Task<CsSource> AddAfterDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. AddBeforeDocsAsync(string) Adds the supplied source code directly before the documentation. Declaration Task<CsSource> AddBeforeDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. DeleteDocsAsync() Deletes the documentation from the target supporting code artifact. Declaration Task<CsSource> DeleteDocsAsync() Returns Type Description Task<CsSource> Updated CsSource model with the documentation removed. ReplaceDocsAsync(string) Replaces the supplied source code directly this the documentation. Declaration Task<CsSource> ReplaceDocsAsync(string sourceCode) Parameters Type Name Description string sourceCode The target syntax to be added to the document. Returns Type Description Task<CsSource> Updated CsSource model with the injected source code. Extension Methods GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentation(IDocumentation, int) GenerateCSharpDocumentationExtensions.GenerateCSharpXmlDocumentationEnumerator(IDocumentation)"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ILookup.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ILookup.html",
    "title": "Interface ILookup | CodeFactory for Windows",
    "keywords": "Interface ILookup Defines lookup information for a model that supports being searched for. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface ILookup Properties LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration string LookupPath { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.IParent.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.IParent.html",
    "title": "Interface IParent | CodeFactory for Windows",
    "keywords": "Interface IParent Defines information how to find the parent model for the model that implements this C# model. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface IParent Properties Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration CsModel Parent { get; } Property Value Type Description CsModel"
  },
  "api/CodeFactory.WinVs.Models.CSharp.IUsingStatementNamespace.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.IUsingStatementNamespace.html",
    "title": "Interface IUsingStatementNamespace | CodeFactory for Windows",
    "keywords": "Interface IUsingStatementNamespace Mapping of the alias and namespace used in C# source files. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public interface IUsingStatementNamespace Properties Alias The alias assigned to the namespace being imported. This will be null if the HasAlias is false. Declaration string Alias { get; } Property Value Type Description string HasAlias Flag that determines if the namespace reference has an alias. Declaration bool HasAlias { get; } Property Value Type Description bool ReferenceNamespace The target namespace that is being imported into the sources scope. Declaration string ReferenceNamespace { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.ManualUsingStatementNamespace.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ManualUsingStatementNamespace.html",
    "title": "Class ManualUsingStatementNamespace | CodeFactory for Windows",
    "keywords": "Class ManualUsingStatementNamespace Manual C# data model that supports the IUsingStatementNamespace interface. Inheritance object ManualUsingStatementNamespace Implements IUsingStatementNamespace Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public class ManualUsingStatementNamespace : IUsingStatementNamespace Constructors ManualUsingStatementNamespace(string, bool, string) Creates a new instance of the ManualUsingStatementNamespace Declaration public ManualUsingStatementNamespace(string referenceNamespace, bool hasAlias = false, string alias = null) Parameters Type Name Description string referenceNamespace The target C# namespace assoicated with a source code file using statement. bool hasAlias Optional parameter that determines if the namespadce has an alias, default is false. string alias Optional parameter that identifies the alias for the namespace, default is null. Properties Alias The alias assigned to the namespace being imported. This will be null if the HasAlias is false. Declaration public string Alias { get; } Property Value Type Description string HasAlias Flag that determines if the namespace reference has an alias. Declaration public bool HasAlias { get; } Property Value Type Description bool ReferenceNamespace The target namespace that is being imported into the sources scope. Declaration public string ReferenceNamespace { get; } Property Value Type Description string Implements IUsingStatementNamespace"
  },
  "api/CodeFactory.WinVs.Models.CSharp.MapNamespace.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.MapNamespace.html",
    "title": "Class MapNamespace | CodeFactory for Windows",
    "keywords": "Class MapNamespace Utility data class used to map a source namespace to a target namespace. Generally used for migration of source from one namespace to another.. Inheritance object MapNamespace Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public class MapNamespace Constructors MapNamespace() Declaration public MapNamespace() Properties Destination The target namespace to be mapped to. Declaration public string Destination { get; set; } Property Value Type Description string Source The source namespace that needs to be mapped. Declaration public string Source { get; set; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.MemberComparisonType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.MemberComparisonType.html",
    "title": "Enum MemberComparisonType | CodeFactory for Windows",
    "keywords": "Enum MemberComparisonType Enumeration of the types of member comparison Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum MemberComparisonType Fields Name Description Base Member is compared by the base signature only, no key words, instance scoping , or security added. Full Member is compared by the full signature including scoping and target keywords Security Member is compared by the base signature and the security assigned to the member."
  },
  "api/CodeFactory.WinVs.Models.CSharp.NamespaceManager.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.NamespaceManager.html",
    "title": "Class NamespaceManager | CodeFactory for Windows",
    "keywords": "Class NamespaceManager Utility class that allows you to load in a collection of using statements for target namespaces that will be used for source generation operations for the C# programming language. Inheritance object NamespaceManager Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public class NamespaceManager Constructors NamespaceManager(IEnumerable<IUsingStatementNamespace>, string) Creates an instance of the NamespaceManager Declaration public NamespaceManager(IEnumerable<IUsingStatementNamespace> usingStatements = null, string targetNamespace = null) Parameters Type Name Description IEnumerable<IUsingStatementNamespace> usingStatements Using statements to be used for formatting in code output. string targetNamespace Additional namespace to check for that will be the target namespace the content will be managed under. Methods AddNamespace(IUsingStatementNamespace) Adds additional namespace to the namespace manager. Declaration public NamespaceManager AddNamespace(IUsingStatementNamespace nameSpace) Parameters Type Name Description IUsingStatementNamespace nameSpace Using statement to add to the namespace manager. Returns Type Description NamespaceManager New instance of the namespace manager with the added using statements. AddNamespace(string, string) Adds an additional namespace to the namespace manager. Declaration public NamespaceManager AddNamespace(string nameSpace, string alias = null) Parameters Type Name Description string nameSpace Target namespace to be added to the manager. string alias Optional, the alias to assign to the target namespace. Returns Type Description NamespaceManager AddNamespaces(IEnumerable<ICsUsingStatement>) Adds additional namespaces to the namespace manager. Declaration public NamespaceManager AddNamespaces(IEnumerable<ICsUsingStatement> nameSpaces) Parameters Type Name Description IEnumerable<ICsUsingStatement> nameSpaces Using statements to add to the namespace manager. Returns Type Description NamespaceManager New instance of the namespace manager with the added using statements. AppendingNamespace(string) Defines the appending namespace that will be appended to types or other declares based on if the namespace is currently supported by using or namespace definitions. Declaration public string AppendingNamespace(string nameSpace) Parameters Type Name Description string nameSpace Namespace to format Returns Type Description string Null if the namespace is not needed or the formatted substring of the namespace used in declarations and other actions. ValidNameSpace(string) Determines if the provides namespace was found. Declaration public (bool namespaceFound, bool hasAlias, string alias) ValidNameSpace(string nameSpace) Parameters Type Name Description string nameSpace The namespace to search for in the namespace manager. Returns Type Description (bool namespaceFound, bool hasAlias, string alias) Returns a tuple that determine the namespace was found and if the found namespace had an alias."
  },
  "api/CodeFactory.WinVs.Models.CSharp.ParameterDefaultValueType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.ParameterDefaultValueType.html",
    "title": "Enum ParameterDefaultValueType | CodeFactory for Windows",
    "keywords": "Enum ParameterDefaultValueType Enumeration that determines the type of default value that is assigned to the value type. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum ParameterDefaultValueType Fields Name Description DefaultKeyWord The default keyword for the type should be used. None There is no default value or it is unknown NullKeyword The keyword that represents a null implementation of the type should be used. Value The provided literal value should be used for the default type."
  },
  "api/CodeFactory.WinVs.Models.CSharp.PathBuilderConstants.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.PathBuilderConstants.html",
    "title": "Class PathBuilderConstants | CodeFactory for Windows",
    "keywords": "Class PathBuilderConstants Data constants that are used when building the unique path for a dot net model. Inheritance object PathBuilderConstants Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public static class PathBuilderConstants Fields Attribute Definition of a attribute model in the path for a dot net model. Declaration public const string Attribute = \"/A:\" Field Value Type Description string Class Definition of a class model in the path for a dot net model. Declaration public const string Class = \"/C:\" Field Value Type Description string Delegate Definition of a delegate model in the path for a dot net model. Declaration public const string Delegate = \"/D:\" Field Value Type Description string Enum Definition of a enumeration model in the path for a dot net model. Declaration public const string Enum = \"/EN:\" Field Value Type Description string EnumValue Definition of a enumeration value model in the path for a dot net model. Declaration public const string EnumValue = \"/ENV:\" Field Value Type Description string Event Definition of a event model in the path for a dot net model. Declaration public const string Event = \"/E:\" Field Value Type Description string Field Definition of a field model in the path for a dot net model. Declaration public const string Field = \"/F:\" Field Value Type Description string Interface Definition of a interface model in the path for a dot net model. Declaration public const string Interface = \"/I:\" Field Value Type Description string Method Definition of a method model in the path for a dot net model. Declaration public const string Method = \"/M:\" Field Value Type Description string Namespace Definition of a namespace path for a dot net model. Declaration public const string Namespace = \"/NS:\" Field Value Type Description string NamespaceReference Reference to a namespace that is used in a dot net model. Declaration public const string NamespaceReference = \"/NSREF:\" Field Value Type Description string Parameter Definition of a parameter model in the path for a dot net model. Declaration public const string Parameter = \"/PARM:\" Field Value Type Description string ParameterDefaultValue Definition of a parameter model default value in the path for a dot net model. Declaration public const string ParameterDefaultValue = \"/PARMDV:\" Field Value Type Description string Property Definition of a property model in the path for a dot net model. Declaration public const string Property = \"/P:\" Field Value Type Description string Record Definition of a record model in the path of a dot net model. Declaration public const string Record = \"/R:\" Field Value Type Description string RecordStructure Definition of a record structure model in the path of a dot net model. Declaration public const string RecordStructure = \"/RS:\" Field Value Type Description string Source Definition of the source entry point that holds all dot net models. Declaration public const string Source = \"//SRC:\" Field Value Type Description string Structure Definition of a structure model in the path for a dot net model. Declaration public const string Structure = \"/S:\" Field Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.CSharp.SyntaxType.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.SyntaxType.html",
    "title": "Enum SyntaxType | CodeFactory for Windows",
    "keywords": "Enum SyntaxType Determines the type of syntax that is hosted in a Dot Net model. Namespace: CodeFactory.WinVs.Models.CSharp Assembly: CodeFactory.WinVs.dll Syntax public enum SyntaxType Fields Name Description Body The syntax is hosted in the body of the target model. Expression The syntax is hosted in a single expression using a => directive. Unknown No syntax definition has been identified or an unknown declaration was used."
  },
  "api/CodeFactory.WinVs.Models.CSharp.html": {
    "href": "api/CodeFactory.WinVs.Models.CSharp.html",
    "title": "Namespace CodeFactory.WinVs.Models.CSharp | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Models.CSharp Classes CsAttribute Data model that represents an attribute. CsAttributeParameter Data model that represents a attribute parameter. CsAttributeParameterValue Data class that represents an attributes parameter value. CsClass Data model that represents a class implementation. CsContainer Data model that implements the base implement for all models that support members. CsContainerExtensions Extension management class that manages models that implement CsContainer. CsContainerWithNestedContainers Data model that implements the base implement for all models that support members. CsDelegate Data model that represents the definition of a delegate. CsEnum Data model that represents an enumeration definition. CsEnumValue Data model that represents a defined value for an enumeration. CsEvent Data model that represents the definition of an event. CsEventExtensions Extension methods that support the CsEvent model. CsField Data model that represents a field definition. CsFieldExtensions Extension methods that support the CsField model. CsGenericParameter Data model that represents the a generic parameter definition. CsInterface Data model that represents in definition of an interface. CsMember Data model that builds the base class definition for all member types. CsMemberExtensions Extension methods that support model that implement the CsMember interface. CsMethod Data model that represents a method definition. CsMethodExtentions Extension methods that support the CsMethod model. CsModel Base class that all C# compiler based data models derive from. CsModelStore Model storage class used to store c# code factory models, to be used to pass data to factories. CsNamespace Data model that represents the definition of a namespace. CsParameter Data model that represents a parameter definition. CsParameterDefaultValue Data model that represents the default value for a parameter. CsProperty Data model that represents the definition of a property. CsPropertyExtensions Static class that holds extension methods that support the CsProperty model. CsRecord Data model that represents a record implementation. CsRecordStructure Data model that represents the definition of a record structure. CsSource Data model that represents source code. CsSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the CsSource model. CsSourceTransaction Represents a transaction that was performed on a C# source file. CsStructure Data model that represents the definition of a structure. CsTupleTypeParameter Data model that represents a tuple type parameter. CsType Data model that represents the definition of a type. CsTypeExtensions Extension methods that support the CsType model. CsUsingStatement Data model that represents a namespace reference in source code. GenerateCSharpAttributeExtensions Extension methods that support the generation of source in the C# language from the CsAttribute model. GenerateCSharpCsContainerExtensions Extension methods that support the generation of source in the C# language from the CsContainer model. GenerateCSharpCsEventExtensions Extension methods that support the generation of source in the C# language from the CsEvent model. GenerateCSharpCsFieldExtensions Extension methods that support the generation of source in the C# language from the CsField model. GenerateCSharpCsPropertyExtensions Extension methods that support the generation of source in the C# language from the CsProperty model. GenerateCSharpCsSecurityExtensions Extension methods that support the generation of source in the C# language from the CsSecurity model. GenerateCSharpDocumentationExtensions Extension method class that supports c# model generation for IDocumentation hosted models GenerateCSharpEnumExtensions Extension methods that support the generation of source in the C# language from the CsEnum model. GenerateCSharpGenericParameterExtensions Extension methods that support the generation of source in the C# language from the CsGenericParameter model. GenerateCSharpMethodExtensions Extension methods that support the generation of source in the C# language from the CsMethod model. GenerateCSharpParameterExtensions Extension methods that support the generation of source in the C# language from the CsParameter model. GenerateCSharpStringExtensions Extension methods that support the generation of source in the C# language from the name of target csharp models. GenereateCSharpTypeExtensions Extension methods that support the generation of source in the C# language from the CsType model. ManualUsingStatementNamespace Manual C# data model that supports the IUsingStatementNamespace interface. MapNamespace Utility data class used to map a source namespace to a target namespace. Generally used for migration of source from one namespace to another.. NamespaceManager Utility class that allows you to load in a collection of using statements for target namespaces that will be used for source generation operations for the C# programming language. PathBuilderConstants Data constants that are used when building the unique path for a dot net model. Interfaces ICsAttribute Model definition for an attribute in a c# implementation. ICsAttributeParameter The model information for a attribute used for a c# implementation. ICsAttributeParameterValue The model information for an attributes parameter value for c# implementation. ICsAttributes Interface that determines if a c# model has attributes assigned. ICsClass Model definition for a class in C#. ICsContainer The base implementation all container type models must implement in C#. ICsDelegate Model definition of a delegate in C#. ICsEnum Data model that provides information on an enumeration. ICsEnumValue Data model that provides information to a specific enumeration value implemented in an enumeration. ICsEvent Model definition of a event in c#. ICsField Model definition of a Field in .net. ICsGeneric Definition that determines if the c# model implements generics. ICsGenericParameter Model contract for information about a parameter used in a generic definition. ICsInterface Model implementation of an interface in C#. ICsMember Base definition for all c# member models. ICsMethod Model definition of a method in c#. ICsModel Base implementation all C# models must implement. ICsNamespace Model definition for a namespace definition inside a code file in C#. ICsNestedContainers Definition of the container types that can be nested in other containers. ICsNestedModel Interface that identifies if the implementation of this model is nested within another model. ICsParameter The definition of a parameter used in C#. ICsParameterDefaultValue Model that represents a default value for a ICsParameter model. ICsProperty Model definition of a property in C#. ICsRecord Model definition for a class in C#. ICsRecordStructure Model definition for a record structure in C#. ICsSource Source definition from a source that was written in C#. ICsStructure Model definition for a structure in C#. ICsTupleTypeParameter The C# model definition for the TupleTypeParameter. ICsType Model that defines a type used in a C# model definition. ICsUsingStatement Model that represents a using statement in a C# source model. IDocumentation Interface that determines if a model has code level documentation. ILookup Defines lookup information for a model that supports being searched for. IParent Defines information how to find the parent model for the model that implements this C# model. IUsingStatementNamespace Mapping of the alias and namespace used in C# source files. Enums AttributeParameterKind Enumeration that determines the type of attribute parameter data that is being returned. CsContainerType Definition of the different types of container based members are supported by the C# source code type. CsKnownLanguageType Enumeration that identifies well know types used by the C# language. CsMemberType Enumeration of the types of members that are supported in the c# source code type. CsMethodType Enumeration of the type of methods that are supported in C#. CsModelType The code factory model types that represent the C# source code type. CsNestedType Enumeration that identifies the target model type that is nested. CsSecurity Enumeration that determines the security scope of the C# model being represented. MemberComparisonType Enumeration of the types of member comparison ParameterDefaultValueType Enumeration that determines the type of default value that is assigned to the value type. SyntaxType Determines the type of syntax that is hosted in a Dot Net model."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IChildren.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IChildren.html",
    "title": "Interface IChildren | CodeFactory for Windows",
    "keywords": "Interface IChildren Defining if the visual studio object has child objects. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IChildren Properties HasChildren Flag that determines if this visual studio object has child objects. Declaration bool HasChildren { get; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IParent.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IParent.html",
    "title": "Interface IParent | CodeFactory for Windows",
    "keywords": "Interface IParent Interface to determine Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IParent Properties HasParent Flag that determines if the visual studio object has a parent. Declaration bool HasParent { get; } Property Value Type Description bool"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsCSharpSource.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsCSharpSource.html",
    "title": "Interface IVsCSharpSource | CodeFactory for Windows",
    "keywords": "Interface IVsCSharpSource Visual studio model that loads the source from a C# document. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsCSharpSource : IVsModel, IModel<VisualStudioModelType> Properties SourceCode The C# source in the document. Declaration CsSource SourceCode { get; } Property Value Type Description CsSource"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsDocument.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsDocument.html",
    "title": "Interface IVsDocument | CodeFactory for Windows",
    "keywords": "Interface IVsDocument Definition of a document associated with a project in visual studio. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsDocument : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Properties DocumentType The type of document that is loaded. Declaration VsDocumentType DocumentType { get; } Property Value Type Description VsDocumentType IsSourceCode Flag that determines if the project document contains source code that can be managed by code factory. Declaration bool IsSourceCode { get; } Property Value Type Description bool Path The fully qualified path to the project document. Declaration string Path { get; } Property Value Type Description string SourceType The target type of source code that is implemented in the project document. Declaration SourceCodeType SourceType { get; } Property Value Type Description SourceCodeType"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsDocumentActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsDocumentActions.html",
    "title": "Interface IVsDocumentActions | CodeFactory for Windows",
    "keywords": "Interface IVsDocumentActions Visual studio actions that support the IVsDocument model. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsDocumentActions Methods AddContentAsync(VsDocument, IDocumentLocation, string) Adds content to a target starting at an assigned Declaration Task AddContentAsync(VsDocument source, IDocumentLocation location, string content) Parameters Type Name Description VsDocument source Document to have content added to. IDocumentLocation location Location within the document to add content to. string content The content to be added to the document. Returns Type Description Task AddContentToBeginningAsync(VsDocument, string) Adds content to the beginning of a document. Declaration Task AddContentToBeginningAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source Document to add content to. string content The content to be added. Returns Type Description Task AddContentToBeginningTransactionAsync(VsDocument, string) Adds content to the beginning of a document. Declaration Task<TransactionDetail> AddContentToBeginningTransactionAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source Document to add content to. string content The content to be added. Returns Type Description Task<TransactionDetail> The details of document update or null if the update details could processed. AddContentToEndAsync(VsDocument, string) Adds content to the end of a document. Declaration Task AddContentToEndAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source Document to add content to. string content The content to be added. Returns Type Description Task AddContentToEndTransactionAsync(VsDocument, string) Adds content to the end of a document. Declaration Task<TransactionDetail> AddContentToEndTransactionAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source Document to add content to. string content The content to be added. Returns Type Description Task<TransactionDetail> The details of document update or null if the update details could processed. AddContentTransactionAsync(VsDocument, IDocumentLocation, string) Adds content to a target starting at an assigned Declaration Task<TransactionDetail> AddContentTransactionAsync(VsDocument source, IDocumentLocation location, string content) Parameters Type Name Description VsDocument source Document to have content added to. IDocumentLocation location Location within the document to add content to. string content The content to be added to the document. Returns Type Description Task<TransactionDetail> The details of document update or null if the update details could processed. DeleteAsync(VsDocument) Deletes the document. Declaration Task<bool> DeleteAsync(VsDocument source) Parameters Type Name Description VsDocument source document to be deleted. Returns Type Description Task<bool> Flag that notifies if the delete operation completed successfully. Remarks Currently does not support deleting solution documents. GetCSharpSourceModelAsync(VsDocument) If the document is implemented as a C# code model. Will return the C# source code model from the visual studio document. Declaration Task<CsSource> GetCSharpSourceModelAsync(VsDocument source) Parameters Type Name Description VsDocument source The source document to load the C# code model from. Returns Type Description Task<CsSource> The loaded model or null if the model could not be loaded. GetChildrenAsync(VsDocument, bool) Gets the direct children of the document. Declaration Task<IReadOnlyList<VsDocument>> GetChildrenAsync(VsDocument source, bool allChildren) Parameters Type Name Description VsDocument source The document to get children from. bool allChildren Flag that determines if all children from the document should be returned. Returns Type Description Task<IReadOnlyList<VsDocument>> Readonly list of all the project documents, if no children are found then an empty readonly list will be returned. GetDocumentContentAsContentAsync(VsDocument) Gets the content of the document. Declaration Task<IDocumentContent> GetDocumentContentAsContentAsync(VsDocument source) Parameters Type Name Description VsDocument source The document to get content from. Returns Type Description Task<IDocumentContent> Document content as GetDocumentContentAsStringAsync(VsDocument) Gets the content of the document. Declaration Task<string> GetDocumentContentAsStringAsync(VsDocument source) Parameters Type Name Description VsDocument source The document to get content from. Returns Type Description Task<string> The content of the document or null if there is no content in the document. GetDocumentContentAsStringAsync(VsDocument, IDocumentLocation, IDocumentLocation) Gets the content of the document. Declaration Task<string> GetDocumentContentAsStringAsync(VsDocument source, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description VsDocument source The document to get content from. IDocumentLocation startLocation The starting position within the document to get content from. IDocumentLocation endLocation The ending position within the document to get content form. Returns Type Description Task<string> The content of the document or null if there is no content in the document. GetParentAsync(VsDocument) Get the parent visual studio model of the document. Declaration Task<VsModel> GetParentAsync(VsDocument source) Parameters Type Name Description VsDocument source document to get the parent of. Returns Type Description Task<VsModel> Model of the parent of this document. The model will be returned unless there is no parent, otherwise null will be returned. RemoveAsync(VsDocument) Removes a document from visual studio but does not remove it from the file system. Declaration Task<bool> RemoveAsync(VsDocument source) Parameters Type Name Description VsDocument source document to be removed. Returns Type Description Task<bool> Flag that notifies if the remove operation completed successfully. Remarks Currently does not support removing solution documents. RemoveContentAsync(VsDocument) Removes all the content from a document. Declaration Task RemoveContentAsync(VsDocument source) Parameters Type Name Description VsDocument source Document to remove content from. Returns Type Description Task RemoveContentAsync(VsDocument, IDocumentLocation, IDocumentLocation) Removes a target set of content from the document. Declaration Task RemoveContentAsync(VsDocument source, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description VsDocument source Document to remove content from. IDocumentLocation startLocation The starting position within the document to remove content from. IDocumentLocation endLocation The ending position within the document to remove content form. Returns Type Description Task ReplaceContentAsync(VsDocument, string) Replaces all the content within the document. Declaration Task ReplaceContentAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source The target document to have content replaced. string content Content to replace the existing content in the document. Returns Type Description Task ReplaceContentAsync(VsDocument, string, IDocumentLocation, IDocumentLocation) Replaces all the content within the document. Declaration Task ReplaceContentAsync(VsDocument source, string content, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description VsDocument source The target document to have content replaced. string content Content to replace the existing content in the document. IDocumentLocation startLocation The starting position within the document to replace content. IDocumentLocation endLocation The ending location within the document to replace content. Returns Type Description Task ReplaceContentTransactionAsync(VsDocument, string) Replaces all the content within the document. Declaration Task<TransactionDetail> ReplaceContentTransactionAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source The target document to have content replaced. string content Content to replace the existing content in the document. Returns Type Description Task<TransactionDetail> The details of document update or null if the update details could processed. ReplaceContentTransactionAsync(VsDocument, string, IDocumentLocation, IDocumentLocation) Replaces all the content within the document. Declaration Task<TransactionDetail> ReplaceContentTransactionAsync(VsDocument source, string content, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description VsDocument source The target document to have content replaced. string content Content to replace the existing content in the document. IDocumentLocation startLocation The starting position within the document to replace content. IDocumentLocation endLocation The ending location within the document to replace content. Returns Type Description Task<TransactionDetail> The details of document update or null if the update details could processed."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsModel.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsModel.html",
    "title": "Interface IVsModel | CodeFactory for Windows",
    "keywords": "Interface IVsModel Base contract definition all Visual Studio Models are based on. Inherited Members IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsModel : IModel<VisualStudioModelType> Properties Name The name of the visual studio model. Declaration string Name { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProject.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProject.html",
    "title": "Interface IVsProject | CodeFactory for Windows",
    "keywords": "Interface IVsProject Definition of a visual studio project model information. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsProject : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Properties DefaultNamespace The default namespace for the project if it support .net framework or .net core. Otherwise this will be null. Declaration string DefaultNamespace { get; } Property Value Type Description string LegacyProjectModel Flag that determines if this visual studio project uses the legacy project model. If so then only basic capabilities and references will be available through code factory. Declaration bool LegacyProjectModel { get; } Property Value Type Description bool Path The fully qualified path to the project file name. Declaration string Path { get; } Property Value Type Description string ProjectLanguages The project languages that are supported in this project. Declaration IReadOnlyList<ProjectLanguage> ProjectLanguages { get; } Property Value Type Description IReadOnlyList<ProjectLanguage> TargetFrameworks The target frameworks this project supports as output. Declaration IReadOnlyList<VsProjectFramework> TargetFrameworks { get; } Property Value Type Description IReadOnlyList<VsProjectFramework>"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectActions.html",
    "title": "Interface IVsProjectActions | CodeFactory for Windows",
    "keywords": "Interface IVsProjectActions Visual studio actions that support the IVsProject model. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsProjectActions Methods AddDocumentAsync(VsProject, string, string) Adds a project document to the root of the project. Declaration Task<VsDocument> AddDocumentAsync(VsProject source, string fileName, string content = null) Parameters Type Name Description VsProject source The project to be added to. string fileName The file name of the document. This should be the name only with no file path. string content The content that will be initially added to the document. This is an optional parameter. Returns Type Description Task<VsDocument> The created project document. AddExistingDocumentAsync(VsProject, string) Adds an existing document to the project. Declaration Task<VsDocument> AddExistingDocumentAsync(VsProject source, string fileName) Parameters Type Name Description VsProject source The project to be added to. string fileName The file name for the document. This should be the file name only with extension. The file must already be in the projects folder. Returns Type Description Task<VsDocument> The model of the created project document. AddProjectFolderAsync(VsProject, string) Adds a project folder to the root of the project. Declaration Task<VsProjectFolder> AddProjectFolderAsync(VsProject source, string folderName) Parameters Type Name Description VsProject source The project to be added to. string folderName The name of the project folder. This should be the name only with no path. Returns Type Description Task<VsProjectFolder> The created project folder. GetChildrenAsync(VsProject, bool, bool) Get all the children that are direct children of the project. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsProject source, bool allChildren, bool loadSourceCode = false) Parameters Type Name Description VsProject source the project to get the children from. bool allChildren Flag that determines if it should return all children of the project and not just the top level children. bool loadSourceCode Flag that determines if code factory managed source code models should be loaded instead of the standard VsDocument model. Returns Type Description Task<IReadOnlyList<VsModel>> The children of the project, if no children are found and empty enumeration will be returned. GetParentAsync(VsProject) Gets the parent solution folder that holds the project. Declaration Task<VsSolutionFolder> GetParentAsync(VsProject source) Parameters Type Name Description VsProject source Project to get the parent for. Returns Type Description Task<VsSolutionFolder> Returns a solution folder if the project has a parent or null if the project has no parent. GetReferencedProjects(VsProject) Get the VsProject models for all projects that are referenced by this project. Declaration Task<IReadOnlyList<VsProject>> GetReferencedProjects(VsProject source) Parameters Type Name Description VsProject source Source project to get referenced projects from. Returns Type Description Task<IReadOnlyList<VsProject>> Readonly list of the referenced projects or an empty list if there is no referenced projects. GetReferencesAsync(VsProject) Gets the references assigned to this project. Declaration Task<IReadOnlyList<VsReference>> GetReferencesAsync(VsProject source) Parameters Type Name Description VsProject source The source project to get the references from. Returns Type Description Task<IReadOnlyList<VsReference>> Readonly list of the references."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFolder.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFolder.html",
    "title": "Interface IVsProjectFolder | CodeFactory for Windows",
    "keywords": "Interface IVsProjectFolder Definition of a visual studio project folder model information. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsProjectFolder : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Properties Path the fully qualified path to the project folder. Declaration string Path { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFolderActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFolderActions.html",
    "title": "Interface IVsProjectFolderActions | CodeFactory for Windows",
    "keywords": "Interface IVsProjectFolderActions Visual studio actions that support the IVsProjectFolder model. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsProjectFolderActions Methods AddDocumentAsync(VsProjectFolder, string, string) Adds a document to the project folder. Declaration Task<VsDocument> AddDocumentAsync(VsProjectFolder source, string fileName, string content = null) Parameters Type Name Description VsProjectFolder source The project folder to add the document to. string fileName The file name for the document. This should be the file name only with extension. string content The content to be added to the document once its added. Note, this is an optional parameter. Returns Type Description Task<VsDocument> The model of the created project document. AddExistingDocumentAsync(VsProjectFolder, string) Adds an existing document to the project folder. Declaration Task<VsDocument> AddExistingDocumentAsync(VsProjectFolder source, string fileName) Parameters Type Name Description VsProjectFolder source The project folder to add the document to. string fileName The file name for the document. This should be the file name only with extension. The file must already be in the project folder. Returns Type Description Task<VsDocument> The model of the created project document. AddProjectFolderAsync(VsProjectFolder, string) Adds a new project folder under the current project folder. Declaration Task<VsProjectFolder> AddProjectFolderAsync(VsProjectFolder source, string folderName) Parameters Type Name Description VsProjectFolder source The project folder to add to. string folderName The name of the project folder. The project folder name should be the name only no path. Returns Type Description Task<VsProjectFolder> The model for the created project folder. DeleteAsync(VsProjectFolder) Deletes the project folder. Declaration Task<bool> DeleteAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder to be deleted. Returns Type Description Task<bool> Flag determining if the folder was deleted, True for deleted and false if the folder could not be deleted. GetCSharpNamespaceAsync(VsProjectFolder) Gets the target namespace for a document that support c# language to be placed in this folder. Declaration Task<string> GetCSharpNamespaceAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder model to get the namespace for. Returns Type Description Task<string> The fully qualified namespace if the project is a c# project that supports this project folder. Otherwise null will be returned. GetChildrenAsync(VsProjectFolder, bool, bool) Gets the IVsModel of the items that are direct children of this project folder. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsProjectFolder source, bool allChildren, bool loadSourceCode = false) Parameters Type Name Description VsProjectFolder source The project folder to get children from. bool allChildren Flag that determines if all children not just the first level children of the project folder. bool loadSourceCode Flag that determines if code factory managed source code models should be loaded instead of the standard VsDocument model. Returns Type Description Task<IReadOnlyList<VsModel>> Readonly list of the children that belong to this project folder. If no children are found an empty readonly list will be returned. GetParentAsync(VsProjectFolder) Gets the parent visual studio model that is the parent of this Project folder. Declaration Task<VsModel> GetParentAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder to get the parent. Returns Type Description Task<VsModel> The visual studio model of the parent or null if the project folder does not have a parent. RemoveAsync(VsProjectFolder) Removes the project folder from visual studio, but does not delete it from the file system. Declaration Task<bool> RemoveAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder to be removed. Returns Type Description Task<bool> Flag determining if the folder was removed, True for removed and false if the folder could not be removed."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFramework.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsProjectFramework.html",
    "title": "Interface IVsProjectFramework | CodeFactory for Windows",
    "keywords": "Interface IVsProjectFramework Target framework in which the project will output to. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsProjectFramework Properties Framework The framework that the project is targeting. Declaration string Framework { get; } Property Value Type Description string Version The specified version the framework to be released to. Declaration string Version { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsReference.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsReference.html",
    "title": "Interface IVsReference | CodeFactory for Windows",
    "keywords": "Interface IVsReference Definition of a visual studio project reference model information. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsReference : IVsModel, IModel<VisualStudioModelType> Properties Aliases Readonly list of the aliases assigned to this reference. Declaration IReadOnlyList<string> Aliases { get; } Property Value Type Description IReadOnlyList<string> FilePath The fully qualified path to the source reference. Declaration string FilePath { get; } Property Value Type Description string HasAliases Flag that determines if the reference has aliases. Declaration bool HasAliases { get; } Property Value Type Description bool Type The type of the project reference. Declaration ProjectReferenceType Type { get; } Property Value Type Description ProjectReferenceType"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsReferenceActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsReferenceActions.html",
    "title": "Interface IVsReferenceActions | CodeFactory for Windows",
    "keywords": "Interface IVsReferenceActions Visual studio actions that support the IVsReference model. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsReferenceActions Methods GetReferencedProjectAsync(VsReference) Gets the VsProject model for the project that represents this reference. Declaration Task<VsProject> GetReferencedProjectAsync(VsReference source) Parameters Type Name Description VsReference source The project reference to load. Returns Type Description Task<VsProject> The loaded project model or null if the project reference does not support a project based reference."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolution.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolution.html",
    "title": "Interface IVsSolution | CodeFactory for Windows",
    "keywords": "Interface IVsSolution Model of the solution that is currently loaded in visual studio. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IChildren.HasChildren Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsSolution : IVsModel, IModel<VisualStudioModelType>, IChildren Properties Path The fully qualified path to the solution file name. Declaration string Path { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionActions.html",
    "title": "Interface IVsSolutionActions | CodeFactory for Windows",
    "keywords": "Interface IVsSolutionActions Actions that can be used with the a IVsSolution model. Inherited Members IVsActions.GetSolutionAsync() IVsActions.GetProjectFromSourceAsync(CsSource) IVsActions.GetCSharpProjectFileFromSourceAsync(CsSource) IVsActions.GetProjectFileFromSourceAsync(CsSource) IVsActions.GetCSharpSourceAsync(string) IVsActions.EnvironmentActions IVsActions.SolutionActions IVsActions.SolutionFolderActions IVsActions.ProjectActions IVsActions.ProjectReferenceActions IVsActions.ProjectFolderActions IVsActions.DocumentActions IVsActions.UserInterfaceActions IVsActions.SourceActions Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsSolutionActions : IVsActions Methods CreateSolutionFolderAsync(VsSolution, string) Creates a new solution folder for the target solution. Declaration Task<VsSolutionFolder> CreateSolutionFolderAsync(VsSolution source, string name) Parameters Type Name Description VsSolution source The solution to add the solution folder to. string name The name of the solution folder to be added. Returns Type Description Task<VsSolutionFolder> Returns the solution folder. GetChildrenAsync(VsSolution, bool) Gets the solution folders and projects that belong to the solution. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsSolution source, bool allChildren) Parameters Type Name Description VsSolution source The solution model to get the children from. bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsModel>> Returns a readonly list of the children to the solution. If there are no children an empty list will be returned. GetProjectsAsync(VsSolution, bool) Gets the projects for the solution. Declaration Task<IReadOnlyList<VsProject>> GetProjectsAsync(VsSolution source, bool allChildren) Parameters Type Name Description VsSolution source The solution model to get the projects from. bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsProject>> Returns all the projects that are part of the solution. Will return an empty list if no projects are found. GetSolutionFoldersAsync(VsSolution, bool) Gets the solution folders for the solution. Declaration Task<IReadOnlyList<VsSolutionFolder>> GetSolutionFoldersAsync(VsSolution source, bool allChildren) Parameters Type Name Description VsSolution source The solution model to get the solution folders from. bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsSolutionFolder>> Returns a readonly of the solutions folders that are part of the solution. If there are no solution folders an empty list will be returned. Extension Methods VsActionsExtensions.GetCSharpSourceAsync(IVsActions, CsContainer) VsActionsExtensions.GetCSharpSourceAsync(IVsActions, CsMember) VsActionsExtensions.GetProjectFolderFromConfigAsync(IVsActions, ConfigProject, string, bool) VsActionsExtensions.GetProjectFromConfigAsync(IVsActions, ConfigProject) VsActionsExtensions.GetTargetProjectAsync(IVsActions, string)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionFolder.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionFolder.html",
    "title": "Interface IVsSolutionFolder | CodeFactory for Windows",
    "keywords": "Interface IVsSolutionFolder Model of a solution folder that is currently loaded in visual studio. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsSolutionFolder : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionFolderActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSolutionFolderActions.html",
    "title": "Interface IVsSolutionFolderActions | CodeFactory for Windows",
    "keywords": "Interface IVsSolutionFolderActions Visual studio actions that support the IVsSolutionFolder model. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsSolutionFolderActions Methods AddDocumentAsync(VsSolutionFolder, string, string) Creates a document that is hosted in the solution folder. Declaration Task<VsDocument> AddDocumentAsync(VsSolutionFolder source, string fileName, string content = null) Parameters Type Name Description VsSolutionFolder source The solution folder to add the document to. string fileName The name of the document to create. string content The content to add to the document. Returns Type Description Task<VsDocument> Instance of the new document. AddExistingDocumentAsync(VsSolutionFolder, string) Adds an existing document to the solution folder. Declaration Task<VsDocument> AddExistingDocumentAsync(VsSolutionFolder source, string fileName) Parameters Type Name Description VsSolutionFolder source The solution folder to add the document to. string fileName The file name for the document. This should be the file name only with extension. The file must already be in the solution folder. Returns Type Description Task<VsDocument> The model of the created document. AddSolutionFolder(VsSolutionFolder, string) Create a new solution folder under the current solution folder. Declaration Task<VsSolutionFolder> AddSolutionFolder(VsSolutionFolder source, string folderName) Parameters Type Name Description VsSolutionFolder source The solution folder that the new solution folder will be added to. string folderName The name of the solution folder. Returns Type Description Task<VsSolutionFolder> Instance of the new solution folder. GetChildrenAsync(VsSolutionFolder, bool) Gets the children of the solution folder, this will return the files and projects that are part of the solution folder. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsSolutionFolder source, bool allChildren) Parameters Type Name Description VsSolutionFolder source The solution folder to get the children from. bool allChildren Flag that determines if all the direct children of the solution folder should also get there children. Returns Type Description Task<IReadOnlyList<VsModel>> Returns a readonly list of the children within this solution folder. Will return an empty list if there is no children. GetParentAsync(VsSolutionFolder) Gets the parent solution folder. Declaration Task<VsSolutionFolder> GetParentAsync(VsSolutionFolder source) Parameters Type Name Description VsSolutionFolder source The solution folder to find the parent for. Returns Type Description Task<VsSolutionFolder> The parent solution folder model or null if there is no parent for this solution folder. Remove(VsSolutionFolder) Removes the solution folder from the visual studio solution that is hosting the solution folder. Declaration Task<bool> Remove(VsSolutionFolder source) Parameters Type Name Description VsSolutionFolder source The solution folder that is to be removed from visual studio. Returns Type Description Task<bool> Boolean flag true - solution folder was been removed or false the folder is either already removed or could not be removed."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSourceActions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.IVsSourceActions.html",
    "title": "Interface IVsSourceActions | CodeFactory for Windows",
    "keywords": "Interface IVsSourceActions The visual studio actions that support source models. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public interface IVsSourceActions Methods LoadDocumentFromSourceAsync(ICsSource) Loads the IVsDocument model from the provided ICsSource model. Declaration Task<VsDocument> LoadDocumentFromSourceAsync(ICsSource source) Parameters Type Name Description ICsSource source Model to load the document from. Returns Type Description Task<VsDocument> Loaded document model. Exceptions Type Condition DocumentException Exception that occurs while loading the document."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectLanguage.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectLanguage.html",
    "title": "Enum ProjectLanguage | CodeFactory for Windows",
    "keywords": "Enum ProjectLanguage Definition of the a language has compiler support within a target project. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public enum ProjectLanguage Fields Name Description CSharp The project supports the compile of the C# programming language. FSharp The project supports the compile of the F# programming language JavaScript The project supports the compile of the java script programming language. TypeScript The project supports the compile of the type script programming language. Unknown Code factory could not determine the programming language. VisualBasic The project supports the compile of the visual basic programming language."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectReferenceType.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectReferenceType.html",
    "title": "Enum ProjectReferenceType | CodeFactory for Windows",
    "keywords": "Enum ProjectReferenceType Enumeration Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public enum ProjectReferenceType Fields Name Description Assembly Reference is a direct assembly file that is referenced by the project. Com Reference is a com library. NuGet Reference comes from a direct external nuget feed. Project Reference is an existing project within the solution. Unknown The reference is of an unknown type."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectSystemException.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.ProjectSystemException.html",
    "title": "Class ProjectSystemException | CodeFactory for Windows",
    "keywords": "Class ProjectSystemException Code factory exception that occurs when accessing visual studios project system. Inheritance object Exception CodeFactoryException VisualStudioException ProjectSystemException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public class ProjectSystemException : VisualStudioException, ISerializable Constructors ProjectSystemException() Creates a visual studio project system code factory exception. Declaration public ProjectSystemException() ProjectSystemException(string) Creates a visual studio project system code factory exception. Declaration public ProjectSystemException(string message) Parameters Type Name Description string message The error message to be captured by the exception ProjectSystemException(string, Exception) Creates a visual studio project system code factory exception. Declaration public ProjectSystemException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.SolutionExplorerException.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.SolutionExplorerException.html",
    "title": "Class SolutionExplorerException | CodeFactory for Windows",
    "keywords": "Class SolutionExplorerException Exception that is raised when there are problem accessing needed resources from visual studio's solution explorer. Inheritance object Exception CodeFactoryException VisualStudioException SolutionExplorerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public class SolutionExplorerException : VisualStudioException, ISerializable Constructors SolutionExplorerException() Creates a solution explorer code factory exception. Declaration public SolutionExplorerException() SolutionExplorerException(string) Creates a solution explorer code factory exception. Declaration public SolutionExplorerException(string message) Parameters Type Name Description string message The error message to be captured by the exception SolutionExplorerException(string, Exception) Creates a solution explorer code factory exception. Declaration public SolutionExplorerException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VisualStudioModelType.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VisualStudioModelType.html",
    "title": "Enum VisualStudioModelType | CodeFactory for Windows",
    "keywords": "Enum VisualStudioModelType Enumeration of the different type of code factory models that support visual studio integration. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public enum VisualStudioModelType Fields Name Description CSharpSource Target model represents visual studio source contained in a document. Document Target model represents a visual studio document. Project Target model represents a visual studio project. ProjectFolder Target model represents a visual studio project folder. ProjectFramework The target framework output for a project. Reference Target model for a reference used by a project Solution The target model represents a visual studio solution. SolutionFolder The target model represents a visual studio solution folder. Unknown Target model is unknown"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsCSharpSource.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsCSharpSource.html",
    "title": "Class VsCSharpSource | CodeFactory for Windows",
    "keywords": "Class VsCSharpSource Data model that represents C# source code. Inheritance object VsModel VsCSharpSource Implements IVsCSharpSource IVsModel IModel<VisualStudioModelType> Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsCSharpSource : VsModel, IVsCSharpSource, IVsModel, IModel<VisualStudioModelType> Constructors VsCSharpSource(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, CsSource) Constructor for the base class VsCSharpSource Declaration protected VsCSharpSource(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, CsSource sourceCode) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. CsSource sourceCode The loaded C# model data. Properties SourceCode The C# source in the document. Declaration public CsSource SourceCode { get; } Property Value Type Description CsSource Methods LoadDocumentModelAsync() Loads the visual studio document model from the current loaded source model. Declaration public abstract Task<VsDocument> LoadDocumentModelAsync() Returns Type Description Task<VsDocument> The loaded document model. Implements IVsCSharpSource IVsModel IModel<TModelTypes> Extension Methods VsCSharpSourceExtensions.GetProjectFolderStructureAsync(VsCSharpSource) VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsCSharpSourceExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsCSharpSourceExtensions.html",
    "title": "Class VsCSharpSourceExtensions | CodeFactory for Windows",
    "keywords": "Class VsCSharpSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the VsCSharpSource model. Inheritance object VsCSharpSourceExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public static class VsCSharpSourceExtensions Methods GetProjectFolderStructureAsync(VsCSharpSource) Get the full project folder structure that hosts the source code/ Declaration public static Task<IReadOnlyList<string>> GetProjectFolderStructureAsync(this VsCSharpSource source) Parameters Type Name Description VsCSharpSource source The source C# source code to get the directory structure for. Returns Type Description Task<IReadOnlyList<string>> Read only list in folder order hosted under the target project."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsDocument.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsDocument.html",
    "title": "Class VsDocument | CodeFactory for Windows",
    "keywords": "Class VsDocument Data model that represents a document that is hosted in visual studio. Inheritance object VsModel VsDocument Implements IVsDocument IVsModel IModel<VisualStudioModelType> IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsDocument : VsModel, IVsDocument, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors VsDocument(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, bool, bool, string, VsDocumentType, bool, SourceCodeType) Constructor for the base class VsDocument Declaration protected VsDocument(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren, string path, VsDocumentType documentType, bool isSourceCode, SourceCodeType sourceType) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. bool hasParent Flag that determines if this model has a parent model. bool hasChildren Flag that determines if this model has child models. string path The fully qualified path to the document. VsDocumentType documentType The type of visual studio document. bool isSourceCode Is a source code file loadable by code factory. SourceCodeType sourceType The type of source code found in the document. Properties DocumentType The type of document that is loaded. Declaration public VsDocumentType DocumentType { get; } Property Value Type Description VsDocumentType HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description bool HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description bool IsSourceCode Flag that determines if the project document contains source code that can be managed by code factory. Declaration public bool IsSourceCode { get; } Property Value Type Description bool Path The fully qualified path to the project document. Declaration public string Path { get; } Property Value Type Description string SourceType The target type of source code that is implemented in the project document. Declaration public SourceCodeType SourceType { get; } Property Value Type Description SourceCodeType Methods AddContentAsync(IDocumentLocation, string) Adds content to a target starting at an assigned Declaration public abstract Task AddContentAsync(IDocumentLocation location, string content) Parameters Type Name Description IDocumentLocation location Location within the document to add content to. string content The content to be added to the document. Returns Type Description Task AddContentToBeginningAsync(string) Adds content to the beginning of a document. Declaration public abstract Task AddContentToBeginningAsync(string content) Parameters Type Name Description string content The content to be added. Returns Type Description Task AddContentToEndAsync(string) Adds content to the end of a document. Declaration public abstract Task AddContentToEndAsync(string content) Parameters Type Name Description string content The content to be added. Returns Type Description Task DeleteAsync() Deletes the document. Declaration public abstract Task<bool> DeleteAsync() Returns Type Description Task<bool> Flag that notifies if the delete operation completed successfully. Remarks Currently does not support deleting solution documents. GetCSharpSourceModelAsync() If the document is implemented as a C# code model. Will return the C# source code model from the visual studio document. Declaration public abstract Task<CsSource> GetCSharpSourceModelAsync() Returns Type Description Task<CsSource> The loaded model or null if the model could not be loaded. GetChildrenAsync(bool) Gets the direct children of the document. Declaration public abstract Task<IReadOnlyList<VsDocument>> GetChildrenAsync(bool allChildren) Parameters Type Name Description bool allChildren Flag that determines if all children from the document should be returned. Returns Type Description Task<IReadOnlyList<VsDocument>> Readonly list of all the project documents, if no children are found then an empty readonly list will be returned. GetDocumentContentAsContentAsync() Gets the content of the document. Declaration public abstract Task<IDocumentContent> GetDocumentContentAsContentAsync() Returns Type Description Task<IDocumentContent> Document content as GetDocumentContentAsStringAsync() Gets the content of the document. Declaration public abstract Task<string> GetDocumentContentAsStringAsync() Returns Type Description Task<string> The content of the document or null if there is no content in the document. GetDocumentContentAsStringAsync(IDocumentLocation, IDocumentLocation) Gets the content of the document. Declaration public abstract Task<string> GetDocumentContentAsStringAsync(IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description IDocumentLocation startLocation The starting position within the document to get content from. IDocumentLocation endLocation The ending position within the document to get content form. Returns Type Description Task<string> The content of the document or null if there is no content in the document. GetParentAsync() Get the parent visual studio model of the document. Declaration public abstract Task<VsModel> GetParentAsync() Returns Type Description Task<VsModel> Model of the parent of this document. The model will be returned unless there is no parent, otherwise null will be returned. RemoveAsync() Removes a document from visual studio but does not remove it from the file system. Declaration public abstract Task<bool> RemoveAsync() Returns Type Description Task<bool> Flag that notifies if the remove operation completed successfully. Remarks Currently does not support removing solution documents. RemoveContentAsync() Removes all the content from a document. Declaration public abstract Task RemoveContentAsync() Returns Type Description Task RemoveContentAsync(IDocumentLocation, IDocumentLocation) Removes a target set of content from the document. Declaration public abstract Task RemoveContentAsync(IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description IDocumentLocation startLocation The starting position within the document to remove content from. IDocumentLocation endLocation The ending position within the document to remove content form. Returns Type Description Task ReplaceContentAsync(string) Replaces all the content within the document. Declaration public abstract Task ReplaceContentAsync(string content) Parameters Type Name Description string content Content to replace the existing content in the document. Returns Type Description Task ReplaceContentAsync(string, IDocumentLocation, IDocumentLocation) Replaces all the content within the document. Declaration public abstract Task ReplaceContentAsync(string content, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description string content Content to replace the existing content in the document. IDocumentLocation startLocation The starting position within the document to replace content. IDocumentLocation endLocation The ending location within the document to replace content. Returns Type Description Task Implements IVsDocument IVsModel IModel<TModelTypes> IParent IChildren Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsDocumentType.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsDocumentType.html",
    "title": "Enum VsDocumentType | CodeFactory for Windows",
    "keywords": "Enum VsDocumentType Enumeration that determines the type of visual studio document that has been loaded. Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public enum VsDocumentType Fields Name Description Project Is a document is a project. Solution Is a document at the solution level. Unknown The document type is unknown."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsModel.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsModel.html",
    "title": "Class VsModel | CodeFactory for Windows",
    "keywords": "Class VsModel Base class used by all visual studio models. Inheritance object VsModel VsCSharpSource VsDocument VsProject VsProjectFolder VsProjectFramework VsReference VsSolution VsSolutionFolder Implements IVsModel IModel<VisualStudioModelType> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsModel : IVsModel, IModel<VisualStudioModelType> Constructors VsModel(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, VisualStudioModelType, string) Constructor for the base class VsModel Declaration protected VsModel(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, VisualStudioModelType modelType, string name) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. VisualStudioModelType modelType The type of visual studio model that is loaded. string name The name of the model. Properties HasErrors Flag that determines if this model has errors. Declaration public bool HasErrors { get; } Property Value Type Description bool IsLoaded Flag that determines if this model was able to load. Declaration public bool IsLoaded { get; } Property Value Type Description bool ModelErrors List of all errors that occurred in this model. Declaration public IReadOnlyList<ModelException<VisualStudioModelType>> ModelErrors { get; } Property Value Type Description IReadOnlyList<ModelException<VisualStudioModelType>> ModelType Determines the type of model that has been loaded. Declaration public VisualStudioModelType ModelType { get; } Property Value Type Description VisualStudioModelType Name The name of the visual studio model. Declaration public string Name { get; } Property Value Type Description string Implements IVsModel IModel<TModelTypes> Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsModelExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsModelExtensions.html",
    "title": "Class VsModelExtensions | CodeFactory for Windows",
    "keywords": "Class VsModelExtensions Extensions method class to support VsModel Inheritance object VsModelExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public static class VsModelExtensions Methods GetHostingProjectAsync(VsModel) Gets the hosting project from the provided VsModel Declaration public static Task<VsProject> GetHostingProjectAsync(this VsModel source) Parameters Type Name Description VsModel source The visual studio model to search the project. Returns Type Description Task<VsProject> The VsProject model that hosts the current model or null if the project is not found. Exceptions Type Condition ArgumentNullException Raised when the model is null. CodeFactoryException Raised if the source code functionality cannot load the project file. GetParentProjectFolderAsync(VsModel) Gets the hosting project folder. Declaration public static Task<VsProjectFolder> GetParentProjectFolderAsync(this VsModel source) Parameters Type Name Description VsModel source Model to get the parent project folder. Returns Type Description Task<VsProjectFolder> Returns the parent project folder or null if their is no parent project folder."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsProject.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsProject.html",
    "title": "Class VsProject | CodeFactory for Windows",
    "keywords": "Class VsProject Data model that presents a visual studio project that has been loaded. Inheritance object VsModel VsProject Implements IVsProject IVsModel IModel<VisualStudioModelType> IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsProject : VsModel, IVsProject, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors VsProject(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, bool, bool, string, bool, IReadOnlyList<ProjectLanguage>, string, IReadOnlyList<VsProjectFramework>) Constructor for the base class VsProject Declaration protected VsProject(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren, string path, bool legacyProjectModel, IReadOnlyList<ProjectLanguage> projectLanguages, string defaultNamespace, IReadOnlyList<VsProjectFramework> targetFrameworks) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. bool hasParent Flag that determines if there is a parent model for this model. bool hasChildren Flag that determines if this model has child models. string path The fully qualified path of the project. bool legacyProjectModel Flag that determines if this project uses the legacy project system for visual studio. IReadOnlyList<ProjectLanguage> projectLanguages The programming languages this project supports. string defaultNamespace The default namespace for the project if it support .net framework or .net core. Otherwise this will be null. IReadOnlyList<VsProjectFramework> targetFrameworks List of the target frameworks this project sends output to on compile. Properties DefaultNamespace The default namespace for the project if it support .net framework or .net core. Otherwise this will be null. Declaration public string DefaultNamespace { get; } Property Value Type Description string HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description bool HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description bool LegacyProjectModel Flag that determines if this visual studio project uses the legacy project model. If so then only basic capabilities and references will be available through code factory. Declaration public bool LegacyProjectModel { get; } Property Value Type Description bool Path The fully qualified path to the project file name. Declaration public string Path { get; } Property Value Type Description string ProjectLanguages The project languages that are supported in this project. Declaration public IReadOnlyList<ProjectLanguage> ProjectLanguages { get; } Property Value Type Description IReadOnlyList<ProjectLanguage> TargetFrameworks The target frameworks this project supports as output. Declaration public IReadOnlyList<VsProjectFramework> TargetFrameworks { get; } Property Value Type Description IReadOnlyList<VsProjectFramework> Methods AddDocumentAsync(string, string) Adds a project document to the root of the project. Declaration public abstract Task<VsDocument> AddDocumentAsync(string fileName, string content = null) Parameters Type Name Description string fileName The file name of the document. This should be the name only with no file path. string content The content that will be initially added to the document. This is an optional parameter. Returns Type Description Task<VsDocument> The created project document. AddExistingDocumentAsync(string) Adds an existing document to the project. Declaration public abstract Task<VsDocument> AddExistingDocumentAsync(string fileName) Parameters Type Name Description string fileName The file name for the document. This should be the file name only with extension. The file must already be in the projects folder. Returns Type Description Task<VsDocument> The model of the created project document. AddProjectFolderAsync(string) Adds a project folder to the root of the project. Declaration public abstract Task<VsProjectFolder> AddProjectFolderAsync(string folderName) Parameters Type Name Description string folderName The name of the project folder. This should be the name only with no path. Returns Type Description Task<VsProjectFolder> The created project folder. GetChildrenAsync(bool, bool) Get all the children that are direct children of the project. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren, bool loadSourceCode = false) Parameters Type Name Description bool allChildren Flag that determines if it should return all children of the project and not just the top level children. bool loadSourceCode Flag to determine if code files that support code factory source code will be loaded by default. If enabled this could be memory intensive. Returns Type Description Task<IReadOnlyList<VsModel>> The children of the project, if no children are found and empty enumeration will be returned. GetParentAsync() Gets the parent solution folder that holds the project. Declaration public abstract Task<VsSolutionFolder> GetParentAsync() Returns Type Description Task<VsSolutionFolder> Returns a solution folder if the project has a parent or null if the project has no parent. GetProjectReferencesAsync() Gets the references assigned to this project. Declaration public abstract Task<IReadOnlyList<VsReference>> GetProjectReferencesAsync() Returns Type Description Task<IReadOnlyList<VsReference>> Readonly list of the references. GetReferencedProjects() Get the VsProject models for all projects that are referenced by this project. Declaration public Task<IReadOnlyList<VsProject>> GetReferencedProjects() Returns Type Description Task<IReadOnlyList<VsProject>> Readonly list of the referenced projects or an empty list if there is no referenced projects. Implements IVsProject IVsModel IModel<TModelTypes> IParent IChildren Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel) VsProjectExtensions.FindCSharpSourceByClassNameAsync(VsProject, string, bool) VsProjectExtensions.FindCSharpSourceByFileNameAsync(VsProject, string, bool) VsProjectExtensions.FindCSharpSourceByInterfaceNameAsync(VsProject, string, bool) VsProjectExtensions.FindSourceAsync(VsProject, CsClass, bool)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectExtensions.html",
    "title": "Class VsProjectExtensions | CodeFactory for Windows",
    "keywords": "Class VsProjectExtensions Extensions methods class that supports the model VsProject. Inheritance object VsProjectExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public static class VsProjectExtensions Methods FindCSharpSourceByClassNameAsync(VsProject, string, bool) Locates a target VsCSharpSource model in a project by the name of the class itself. Declaration public static Task<VsCSharpSource> FindCSharpSourceByClassNameAsync(this VsProject source, string className, bool searchAllFolders = true) Parameters Type Name Description VsProject source The project to search in. string className The name of the class that is managed in the source code file. bool searchAllFolders optional flag that determines if all folders under the project should be searched. Returns Type Description Task<VsCSharpSource> The source code model the target class was found in. FindCSharpSourceByFileNameAsync(VsProject, string, bool) Locates a target VsCSharpSource model by the filename of the source code file. Declaration public static Task<VsCSharpSource> FindCSharpSourceByFileNameAsync(this VsProject source, string fileName, bool searchAllFolders = true) Parameters Type Name Description VsProject source The project to search the model for. string fileName The name of the source code file. bool searchAllFolders optional flag that determines if all folders under the project should be searched. Returns Type Description Task<VsCSharpSource> The source code model for the target code file found. FindCSharpSourceByInterfaceNameAsync(VsProject, string, bool) Locates a target VsCSharpSource model in a project by the name of the interface itself. Declaration public static Task<VsCSharpSource> FindCSharpSourceByInterfaceNameAsync(this VsProject source, string name, bool searchAllFolders = true) Parameters Type Name Description VsProject source The project to search. string name The name of the interface that is managed in the source control file. bool searchAllFolders optional flag that determines if all folders under the project should be searched. Returns Type Description Task<VsCSharpSource> The source code model the target interface was found in. FindSourceAsync(VsProject, CsClass, bool) Finds the source code for a target class in a project. This will be based on the source document the class was built from. Declaration public static Task<VsCSharpSource> FindSourceAsync(this VsProject source, CsClass sourceClass, bool searchAllFolders = true) Parameters Type Name Description VsProject source The project to search. CsClass sourceClass The class model to find the source file for. bool searchAllFolders optional flag that determines if all folders under the project should be searched. Returns Type Description Task<VsCSharpSource> The source code file the target model was found in."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFolder.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFolder.html",
    "title": "Class VsProjectFolder | CodeFactory for Windows",
    "keywords": "Class VsProjectFolder Data model that represents a folder in a project hosted in visual studio. Inheritance object VsModel VsProjectFolder Implements IVsProjectFolder IVsModel IModel<VisualStudioModelType> IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsProjectFolder : VsModel, IVsProjectFolder, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors VsProjectFolder(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, bool, bool, string) Constructor for the base class VsProjectFolder Declaration protected VsProjectFolder(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren, string path) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. bool hasParent Flag that determines if the model has a parent model. bool hasChildren Flag that determines if the model has child models. string path The fully qualified path to the project folder. Properties HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description bool HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description bool Path the fully qualified path to the project folder. Declaration public string Path { get; } Property Value Type Description string Methods AddDocumentAsync(string, string) Adds a document to the project folder. Declaration public abstract Task<VsDocument> AddDocumentAsync(string fileName, string content = null) Parameters Type Name Description string fileName The file name for the document. This should be the file name only with extension. string content The content to be added to the document once its added. Note, this is an optional parameter. Returns Type Description Task<VsDocument> The model of the created project document. AddExistingDocumentAsync(string) Adds an existing document to the project folder. Declaration public abstract Task<VsDocument> AddExistingDocumentAsync(string fileName) Parameters Type Name Description string fileName The file name for the document. This should be the file name only with extension. The file must already be in the project folder. Returns Type Description Task<VsDocument> The model of the created project document. AddProjectFolderAsync(string) Adds a new project folder under the current project folder. Declaration public abstract Task<VsProjectFolder> AddProjectFolderAsync(string folderName) Parameters Type Name Description string folderName The name of the project folder. The project folder name should be the name only no path. Returns Type Description Task<VsProjectFolder> The model for the created project folder. DeleteAsync() Deletes the project folder. Declaration public abstract Task<bool> DeleteAsync() Returns Type Description Task<bool> Flag determining if the folder was deleted, True for deleted and false if the folder could not be deleted. GetCSharpNamespaceAsync() Gets the target namespace for a document that support c# language to be placed in this folder. Declaration public abstract Task<string> GetCSharpNamespaceAsync() Returns Type Description Task<string> The fully qualified namespace if the project is a c# project that supports this project folder. Otherwise null will be returned. GetChildrenAsync(bool, bool) Gets the IVsModel of the items that are direct children of this project folder. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren, bool loadSourceCode = false) Parameters Type Name Description bool allChildren Flag that determines if all children not just the first level children of the project folder. bool loadSourceCode Flag to determine if code files that support code factory source code will be loaded by default. If enabled this could be memory intensive. Returns Type Description Task<IReadOnlyList<VsModel>> Readonly list of the children that belong to this project folder. If no children are found an empty readonly list will be returned. GetParentAsync() Gets the parent visual studio model that is the parent of this Project folder. Declaration public abstract Task<VsModel> GetParentAsync() Returns Type Description Task<VsModel> The visual studio model of the parent or null if the project folder does not have a parent. RemoveAsync() Removes the project folder from visual studio, but does not delete it from the file system. Declaration public abstract Task<bool> RemoveAsync() Returns Type Description Task<bool> Flag determining if the folder was removed, True for removed and false if the folder could not be removed. Implements IVsProjectFolder IVsModel IModel<TModelTypes> IParent IChildren Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel) VsProjectFolderExtensions.FindCSharpSourceByClassNameAsync(VsProjectFolder, string, bool) VsProjectFolderExtensions.FindCSharpSourceByInterfaceNameAsync(VsProjectFolder, string, bool)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFolderExtensions.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFolderExtensions.html",
    "title": "Class VsProjectFolderExtensions | CodeFactory for Windows",
    "keywords": "Class VsProjectFolderExtensions Extensions methods class that support the VsProjectFolder model. Inheritance object VsProjectFolderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public static class VsProjectFolderExtensions Methods FindCSharpSourceByClassNameAsync(VsProjectFolder, string, bool) Locates a target VsCSharpSource model in a code file hosted in the project folder. Declaration public static Task<VsCSharpSource> FindCSharpSourceByClassNameAsync(this VsProjectFolder source, string className, bool searchSubFolders = true) Parameters Type Name Description VsProjectFolder source The project folder to start to search. string className The name of the class that is managed in the source control file. bool searchSubFolders Optional parameter that determines if sub folders should also be searched. By default this is set to true. Returns Type Description Task<VsCSharpSource> The source code model the target class was found in. FindCSharpSourceByInterfaceNameAsync(VsProjectFolder, string, bool) Locates a target VsCSharpSource model in a code file hosted in the project folder. Declaration public static Task<VsCSharpSource> FindCSharpSourceByInterfaceNameAsync(this VsProjectFolder source, string name, bool searchSubFolders = true) Parameters Type Name Description VsProjectFolder source The project folder to search. string name The name of the interface that is managed in the source control file. bool searchSubFolders Optional parameter that determines if sub folders should also be searched. By default this is set to true. Returns Type Description Task<VsCSharpSource> The source code model the target interface was found in."
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFramework.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsProjectFramework.html",
    "title": "Class VsProjectFramework | CodeFactory for Windows",
    "keywords": "Class VsProjectFramework Data class that implements IVsProjectFramework Inheritance object VsModel VsProjectFramework Implements IVsModel IModel<VisualStudioModelType> IVsProjectFramework Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsProjectFramework : VsModel, IVsModel, IModel<VisualStudioModelType>, IVsProjectFramework Constructors VsProjectFramework(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, string) Creates a new instances of the VsProjectFramework model. Declaration protected VsProjectFramework(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string framework, string version) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string framework The name of the framework being deployed to. string version The target version of the framework. Properties Framework The framework that the project is targeting. Declaration public string Framework { get; } Property Value Type Description string Version The specified version the framework to be released to. Declaration public string Version { get; } Property Value Type Description string Implements IVsModel IModel<TModelTypes> IVsProjectFramework Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsReference.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsReference.html",
    "title": "Class VsReference | CodeFactory for Windows",
    "keywords": "Class VsReference Data model that presents a visual studio reference that has been loaded. Inheritance object VsModel VsReference Implements IVsReference IVsModel IModel<VisualStudioModelType> Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsReference : VsModel, IVsReference, IVsModel, IModel<VisualStudioModelType> Constructors VsReference(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, string, ProjectReferenceType, IReadOnlyList<string>) Constructor for the base class VsModel Declaration protected VsReference(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, string filePath, ProjectReferenceType type, IReadOnlyList<string> aliases) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. string filePath The fully qualified file path to the reference ProjectReferenceType type The type of reference that is set for the project. IReadOnlyList<string> aliases Readonly list of the aliases assigned to this reference. Properties Aliases Readonly list of the aliases assigned to this reference. Declaration public IReadOnlyList<string> Aliases { get; } Property Value Type Description IReadOnlyList<string> FilePath The fully qualified path to the source reference. Declaration public string FilePath { get; } Property Value Type Description string HasAliases Flag that determines if the reference has aliases. Declaration public bool HasAliases { get; } Property Value Type Description bool Type The type of the project reference. Declaration public ProjectReferenceType Type { get; } Property Value Type Description ProjectReferenceType Methods GetReferencedProjectAsync() Gets the VsProject model for the project that represents this reference. Declaration public abstract Task<VsProject> GetReferencedProjectAsync() Returns Type Description Task<VsProject> The loaded project model or null if the reference does not support a project based reference. Implements IVsReference IVsModel IModel<TModelTypes> Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsSolution.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsSolution.html",
    "title": "Class VsSolution | CodeFactory for Windows",
    "keywords": "Class VsSolution Data model that represents the loaded solution in visual studio. Inheritance object VsModel VsSolution Implements IVsSolution IVsModel IModel<VisualStudioModelType> IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsSolution : VsModel, IVsSolution, IVsModel, IModel<VisualStudioModelType>, IChildren Constructors VsSolution(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, bool, string) Constructor for the base class VsSolution Declaration protected VsSolution(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasChildren, string path) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. bool hasChildren Flag that determines if the solution has any children. string path The fully qualified path of the solution. Properties HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description bool Path The fully qualified path to the solution file name. Declaration public string Path { get; } Property Value Type Description string Methods CreateSolutionFolderAsync(string) Creates a new solution folder for the target solution. Declaration public abstract Task<VsSolutionFolder> CreateSolutionFolderAsync(string name) Parameters Type Name Description string name The name of the solution folder to be added. Returns Type Description Task<VsSolutionFolder> Returns the solution folder. GetChildrenAsync(bool) Gets the solution folders and projects that belong to the solution. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren) Parameters Type Name Description bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsModel>> Returns a readonly list of the children to the solution. If there are no children an empty list will be returned. GetProjectsAsync(bool) Gets the projects for the solution. Declaration public abstract Task<IReadOnlyList<VsProject>> GetProjectsAsync(bool allChildren) Parameters Type Name Description bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsProject>> Returns all the projects that are part of the solution. Will return an empty list if no projects are found. GetSolutionFoldersAsync(bool) Gets the solution folders for the solution. Declaration public abstract Task<IReadOnlyList<VsSolutionFolder>> GetSolutionFoldersAsync(bool allChildren) Parameters Type Name Description bool allChildren Get all children not just the first children of the solution. Returns Type Description Task<IReadOnlyList<VsSolutionFolder>> Returns a readonly of the solutions folders that are part of the solution. If there are no solution folders an empty list will be returned. Implements IVsSolution IVsModel IModel<TModelTypes> IChildren Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.VsSolutionFolder.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.VsSolutionFolder.html",
    "title": "Class VsSolutionFolder | CodeFactory for Windows",
    "keywords": "Class VsSolutionFolder Data model that represents a solution folder in a loaded solution. Inheritance object VsModel VsSolutionFolder Implements IVsSolutionFolder IVsModel IModel<VisualStudioModelType> IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Models.ProjectSystem Assembly: CodeFactory.WinVs.dll Syntax public abstract class VsSolutionFolder : VsModel, IVsSolutionFolder, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors VsSolutionFolder(bool, bool, IReadOnlyList<ModelException<VisualStudioModelType>>, string, bool, bool) Constructor for the base class VsSolutionFolder Declaration protected VsSolutionFolder(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren) Parameters Type Name Description bool isLoaded Flag that determines if the model is loaded. bool hasErrors Flag that determines if errors occurred while loading the model. IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors The list of errors that occurred if any. string name The name of the model. bool hasParent Flag that determines if this solution folder has a parent model. bool hasChildren Flag that determines has any child models. Properties HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description bool HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description bool Methods AddDocumentAsync(string, string) Creates a document that is hosted in the solution folder. Declaration public abstract Task<VsDocument> AddDocumentAsync(string fileName, string content = null) Parameters Type Name Description string fileName The name of the document to create. string content The content to add to the document. Returns Type Description Task<VsDocument> Instance of the new document. AddExistingDocumentAsync(string) Adds an existing document to the solution folder. Declaration public abstract Task<VsDocument> AddExistingDocumentAsync(string fileName) Parameters Type Name Description string fileName The file name for the document. This should be the file name only with extension. The file must already be in the solution folder. Returns Type Description Task<VsDocument> The model of the created document. AddSolutionFolder(string) Create a new solution folder under the current solution folder. Declaration public abstract Task<VsSolutionFolder> AddSolutionFolder(string folderName) Parameters Type Name Description string folderName The name of the solution folder. Returns Type Description Task<VsSolutionFolder> Instance of the new solution folder. GetChildrenAsync(bool) Gets the children of the solution folder, this will return the files and projects that are part of the solution folder. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren) Parameters Type Name Description bool allChildren Flag that determines if all the direct children of the solution folder should also get there children. Returns Type Description Task<IReadOnlyList<VsModel>> Returns a readonly list of the children within this solution folder. Will return an empty list if there is no children. GetParentAsync() Gets the parent solution folder. Declaration public abstract Task<VsSolutionFolder> GetParentAsync() Returns Type Description Task<VsSolutionFolder> The parent solution folder model or null if there is no parent for this solution folder. Remove() Removes the solution folder from the visual studio solution that is hosting the solution folder. Declaration public abstract Task<bool> Remove() Returns Type Description Task<bool> Boolean flag true - solution folder was been removed or false the folder is either already removed or could not be removed. Implements IVsSolutionFolder IVsModel IModel<TModelTypes> IParent IChildren Extension Methods VsModelExtensions.GetHostingProjectAsync(VsModel) VsModelExtensions.GetParentProjectFolderAsync(VsModel)"
  },
  "api/CodeFactory.WinVs.Models.ProjectSystem.html": {
    "href": "api/CodeFactory.WinVs.Models.ProjectSystem.html",
    "title": "Namespace CodeFactory.WinVs.Models.ProjectSystem | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Models.ProjectSystem Classes ProjectSystemException Code factory exception that occurs when accessing visual studios project system. SolutionExplorerException Exception that is raised when there are problem accessing needed resources from visual studio's solution explorer. VsCSharpSource Data model that represents C# source code. VsCSharpSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the VsCSharpSource model. VsDocument Data model that represents a document that is hosted in visual studio. VsModel Base class used by all visual studio models. VsModelExtensions Extensions method class to support VsModel VsProject Data model that presents a visual studio project that has been loaded. VsProjectExtensions Extensions methods class that supports the model VsProject. VsProjectFolder Data model that represents a folder in a project hosted in visual studio. VsProjectFolderExtensions Extensions methods class that support the VsProjectFolder model. VsProjectFramework Data class that implements IVsProjectFramework VsReference Data model that presents a visual studio reference that has been loaded. VsSolution Data model that represents the loaded solution in visual studio. VsSolutionFolder Data model that represents a solution folder in a loaded solution. Interfaces IChildren Defining if the visual studio object has child objects. IParent Interface to determine IVsCSharpSource Visual studio model that loads the source from a C# document. IVsDocument Definition of a document associated with a project in visual studio. IVsDocumentActions Visual studio actions that support the IVsDocument model. IVsModel Base contract definition all Visual Studio Models are based on. IVsProject Definition of a visual studio project model information. IVsProjectActions Visual studio actions that support the IVsProject model. IVsProjectFolder Definition of a visual studio project folder model information. IVsProjectFolderActions Visual studio actions that support the IVsProjectFolder model. IVsProjectFramework Target framework in which the project will output to. IVsReference Definition of a visual studio project reference model information. IVsReferenceActions Visual studio actions that support the IVsReference model. IVsSolution Model of the solution that is currently loaded in visual studio. IVsSolutionActions Actions that can be used with the a IVsSolution model. IVsSolutionFolder Model of a solution folder that is currently loaded in visual studio. IVsSolutionFolderActions Visual studio actions that support the IVsSolutionFolder model. IVsSourceActions The visual studio actions that support source models. Enums ProjectLanguage Definition of the a language has compiler support within a target project. ProjectReferenceType Enumeration VisualStudioModelType Enumeration of the different type of code factory models that support visual studio integration. VsDocumentType Enumeration that determines the type of visual studio document that has been loaded."
  },
  "api/CodeFactory.WinVs.PathHelper.html": {
    "href": "api/CodeFactory.WinVs.PathHelper.html",
    "title": "Class PathHelper | CodeFactory for Windows",
    "keywords": "Class PathHelper Static helper class that contains functions to support path management with visual studio. Inheritance object PathHelper Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public static class PathHelper Properties InvalidPathNameCharacters The invalid characters not allowed in a path name. Declaration public static string InvalidPathNameCharacters { get; } Property Value Type Description string Methods ContainsInvalidPathNameCharacter(string) Provided file name is checked to determine if it has Declaration public static bool ContainsInvalidPathNameCharacter(string path) Parameters Type Name Description string path The path to be evaluated. Returns Type Description bool True if invalid characters exists or false if the file does not have invalid characters."
  },
  "api/CodeFactory.WinVs.Stats.FileTransactionsSummary.html": {
    "href": "api/CodeFactory.WinVs.Stats.FileTransactionsSummary.html",
    "title": "Class FileTransactionsSummary | CodeFactory for Windows",
    "keywords": "Class FileTransactionsSummary Inheritance object FileTransactionsSummary Implements ITransactionFile Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Stats Assembly: CodeFactory.WinVs.dll Syntax public class FileTransactionsSummary : ITransactionFile Constructors FileTransactionsSummary() Declaration public FileTransactionsSummary() Properties CharacterCountTotal The number of characters that were added or replaced in the transaction. Note: This is the total number of characters minus white spaces. Declaration public ulong CharacterCountTotal { get; set; } Property Value Type Description ulong FileId The unique identifier for the file that was modified. Declaration public Guid FileId { get; set; } Property Value Type Description Guid FileName The name of the file that was modified. Declaration public string FileName { get; set; } Property Value Type Description string FilePath The full path to the file that was modified. Declaration public string FilePath { get; set; } Property Value Type Description string LineCountTotal The number of lines that were added or replaced in the transaction.Note: This is the total number of lines that had any content in the line. Declaration public uint LineCountTotal { get; set; } Property Value Type Description uint ProjectName The name of the project that the file belongs to.This can be null if the target file is hosted at the solution level. Declaration public string ProjectName { get; set; } Property Value Type Description string SolutionName The name of the solution that the file belongs to. Declaration public string SolutionName { get; set; } Property Value Type Description string Transactions The transactions that were performed on the file. Declaration public ImmutableList<Transaction> Transactions { get; set; } Property Value Type Description ImmutableList<Transaction> Implements ITransactionFile"
  },
  "api/CodeFactory.WinVs.Stats.ITransaction.html": {
    "href": "api/CodeFactory.WinVs.Stats.ITransaction.html",
    "title": "Interface ITransaction | CodeFactory for Windows",
    "keywords": "Interface ITransaction Contract that represents a transaction that was performed on a file. Namespace: CodeFactory.WinVs.Stats Assembly: CodeFactory.WinVs.dll Syntax public interface ITransaction Properties CharacterCount The number of characters that were added or replaced in the transaction. Note: This is the total number of characters minus white spaces. Declaration int CharacterCount { get; set; } Property Value Type Description int FileId The unique identifier for the file that was modified. Declaration Guid FileId { get; set; } Property Value Type Description Guid LineCount The number of lines that were added or replaced in the transaction.Note: This is the total number of lines that had any content in the line. Declaration int LineCount { get; set; } Property Value Type Description int TransactionDate The date and time the transaction was performed. Declaration DateTime TransactionDate { get; set; } Property Value Type Description DateTime TransactionId The unique identifier for the transaction. Declaration Guid TransactionId { get; set; } Property Value Type Description Guid TransactionType The type of transaction that was performed. Declaration TransactionType TransactionType { get; set; } Property Value Type Description TransactionType"
  },
  "api/CodeFactory.WinVs.Stats.ITransactionFile.html": {
    "href": "api/CodeFactory.WinVs.Stats.ITransactionFile.html",
    "title": "Interface ITransactionFile | CodeFactory for Windows",
    "keywords": "Interface ITransactionFile Contract that represents the base information for a transaction file. Namespace: CodeFactory.WinVs.Stats Assembly: CodeFactory.WinVs.dll Syntax public interface ITransactionFile Properties FileId The unique identifier for the file that was modified. Declaration Guid FileId { get; set; } Property Value Type Description Guid FileName The name of the file that was modified. Declaration string FileName { get; set; } Property Value Type Description string FilePath The full path to the file that was modified. Declaration string FilePath { get; set; } Property Value Type Description string ProjectName The name of the project that the file belongs to.This can be null if the target file is hosted at the solution level. Declaration string ProjectName { get; set; } Property Value Type Description string SolutionName The name of the solution that the file belongs to. Declaration string SolutionName { get; set; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.Stats.ProjectTransactionsSummary.html": {
    "href": "api/CodeFactory.WinVs.Stats.ProjectTransactionsSummary.html",
    "title": "Class ProjectTransactionsSummary | CodeFactory for Windows",
    "keywords": "Class ProjectTransactionsSummary The summary of the CodeFactory transactions that were performed on files in the project. Inheritance object ProjectTransactionsSummary Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Stats Assembly: CodeFactory.WinVs.dll Syntax public class ProjectTransactionsSummary Constructors ProjectTransactionsSummary() Declaration public ProjectTransactionsSummary() Properties FileTransactions The summary of each file that was updated in the project. Declaration public ImmutableList<FileTransactionsSummary> FileTransactions { get; set; } Property Value Type Description ImmutableList<FileTransactionsSummary> ProjectName The name of the project that the file belongs to. Declaration public string ProjectName { get; set; } Property Value Type Description string TotalCharacterCount The total number of characters that were added or replaced in the projects files. Declaration public ulong TotalCharacterCount { get; set; } Property Value Type Description ulong TotalLineCount The total number of lines that were added or replaced in the projects files. Declaration public ulong TotalLineCount { get; set; } Property Value Type Description ulong UpdatedFileCount the number of files in the project that were updated with CodeFactory automation. Declaration public uint UpdatedFileCount { get; set; } Property Value Type Description uint"
  },
  "api/CodeFactory.WinVs.Stats.Transaction.html": {
    "href": "api/CodeFactory.WinVs.Stats.Transaction.html",
    "title": "Class Transaction | CodeFactory for Windows",
    "keywords": "Class Transaction Represents the details of a transaction that was performed on a file. Inheritance object Transaction Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Stats Assembly: CodeFactory.WinVs.dll Syntax public class Transaction Constructors Transaction() Declaration public Transaction() Properties CharacterCount The number of characters that were added or replaced in the transaction. Note: This is the total number of characters minus white spaces. Declaration public int CharacterCount { get; set; } Property Value Type Description int FileId The unique identifier for the file that was modified. Declaration public Guid FileId { get; set; } Property Value Type Description Guid LineCount The number of lines that were added or replaced in the transaction.Note: This is the total number of lines that had any content in the line. Declaration public int LineCount { get; set; } Property Value Type Description int TransactionDate The date and time the transaction was performed. Declaration public DateTime TransactionDate { get; set; } Property Value Type Description DateTime TransactionId The unique identifier for the transaction. Declaration public Guid TransactionId { get; set; } Property Value Type Description Guid TransactionType The type of transaction that was performed. Declaration public TransactionType TransactionType { get; set; } Property Value Type Description TransactionType"
  },
  "api/CodeFactory.WinVs.Stats.TransactionDetail.html": {
    "href": "api/CodeFactory.WinVs.Stats.TransactionDetail.html",
    "title": "Class TransactionDetail | CodeFactory for Windows",
    "keywords": "Class TransactionDetail Represents the details of a transaction that was performed on a file. Inheritance object TransactionDetail Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Stats Assembly: CodeFactory.WinVs.dll Syntax public class TransactionDetail Constructors TransactionDetail() Declaration public TransactionDetail() Properties File The detailed information about the file that was modified. Declaration public TransactionFile File { get; set; } Property Value Type Description TransactionFile Transaction The detailed information about the transaction that was performed. Declaration public Transaction Transaction { get; set; } Property Value Type Description Transaction"
  },
  "api/CodeFactory.WinVs.Stats.TransactionFile.html": {
    "href": "api/CodeFactory.WinVs.Stats.TransactionFile.html",
    "title": "Class TransactionFile | CodeFactory for Windows",
    "keywords": "Class TransactionFile Represents a transaction that was performed on a file. Inheritance object TransactionFile Implements ITransactionFile Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs.Stats Assembly: CodeFactory.WinVs.dll Syntax public class TransactionFile : ITransactionFile Constructors TransactionFile() Declaration public TransactionFile() Properties FileId The unique identifier for the file that was modified. Declaration public Guid FileId { get; set; } Property Value Type Description Guid FileName The name of the file that was modified. Declaration public string FileName { get; set; } Property Value Type Description string FilePath The full path to the file that was modified. Declaration public string FilePath { get; set; } Property Value Type Description string ProjectName The name of the project that the file belongs to.This can be null if the target file is hosted at the solution level. Declaration public string ProjectName { get; set; } Property Value Type Description string SolutionName The name of the solution that the file belongs to. Declaration public string SolutionName { get; set; } Property Value Type Description string Implements ITransactionFile"
  },
  "api/CodeFactory.WinVs.Stats.TransactionType.html": {
    "href": "api/CodeFactory.WinVs.Stats.TransactionType.html",
    "title": "Enum TransactionType | CodeFactory for Windows",
    "keywords": "Enum TransactionType Enumerates the types of transactions that can be performed. Namespace: CodeFactory.WinVs.Stats Assembly: CodeFactory.WinVs.dll Syntax public enum TransactionType Fields Name Description Insert Inserting CodeFactory generated code. Replace Replacing existing code in the code file with CodeFactory generated code."
  },
  "api/CodeFactory.WinVs.Stats.html": {
    "href": "api/CodeFactory.WinVs.Stats.html",
    "title": "Namespace CodeFactory.WinVs.Stats | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Stats Classes FileTransactionsSummary ProjectTransactionsSummary The summary of the CodeFactory transactions that were performed on files in the project. Transaction Represents the details of a transaction that was performed on a file. TransactionDetail Represents the details of a transaction that was performed on a file. TransactionFile Represents a transaction that was performed on a file. Interfaces ITransaction Contract that represents a transaction that was performed on a file. ITransactionFile Contract that represents the base information for a transaction file. Enums TransactionType Enumerates the types of transactions that can be performed."
  },
  "api/CodeFactory.WinVs.UI.IView.html": {
    "href": "api/CodeFactory.WinVs.UI.IView.html",
    "title": "Interface IView | CodeFactory for Windows",
    "keywords": "Interface IView Contract to be implemented by all view based user interface controls. Namespace: CodeFactory.WinVs.UI Assembly: CodeFactory.WinVs.dll Syntax public interface IView Properties Title The title to be assigned to the hosting Visual Studio control that hosts the view. Declaration string Title { get; set; } Property Value Type Description string Events CloseHost Event that is raised when the view informs the hosting Visual studio control to close. Declaration event EventHandler CloseHost Event Type Type Description EventHandler"
  },
  "api/CodeFactory.WinVs.UI.IVsUIActions.html": {
    "href": "api/CodeFactory.WinVs.UI.IVsUIActions.html",
    "title": "Interface IVsUIActions | CodeFactory for Windows",
    "keywords": "Interface IVsUIActions Definition of the user interface actions that are supported in visual studio. Namespace: CodeFactory.WinVs.UI Assembly: CodeFactory.WinVs.dll Syntax public interface IVsUIActions Methods CreateViewAsync<T>() Creates a new instance of a view that is supported in visual studio by code factory. This will load the IVsActions into the view as well as the logger that supports the view. Declaration Task<T> CreateViewAsync<T>() where T : class, IView Returns Type Description Task<T> New instance of the target user control. Type Parameters Name Description T The type of visual studio user control to create. Exceptions Type Condition VisualStudioException Raises a visual studio error if there was a problem creating the user control. Review the internal exception for the source of the error. ShowDialogWindowAsync(IView) Displays a dialog window in visual studio that hosts a view. This makes sure the dialog window is thread safe to be used with visual studio. Declaration Task<bool?> ShowDialogWindowAsync(IView view) Parameters Type Name Description IView view The view to be loaded into the dialog window. Returns Type Description Task<bool?> Returns the result for the window which returns a true if a close event occurred, a false when a cancel event occurred, or null if neither were triggered. ShowDocumentPanelAsync(IView) Displays a document panel with the target view imbedded in the document panel. Declaration Task ShowDocumentPanelAsync(IView view) Parameters Type Name Description IView view The view to be loaded into the document panel. Returns Type Description Task"
  },
  "api/CodeFactory.WinVs.UI.html": {
    "href": "api/CodeFactory.WinVs.UI.html",
    "title": "Namespace CodeFactory.WinVs.UI | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.UI Interfaces IView Contract to be implemented by all view based user interface controls. IVsUIActions Definition of the user interface actions that are supported in visual studio."
  },
  "api/CodeFactory.WinVs.VisualStudioException.html": {
    "href": "api/CodeFactory.WinVs.VisualStudioException.html",
    "title": "Class VisualStudioException | CodeFactory for Windows",
    "keywords": "Class VisualStudioException Base exception class for all visual studio specific exceptions that occur in code factory. Inheritance object Exception CodeFactoryException VisualStudioException ProjectSystemException SolutionExplorerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public class VisualStudioException : CodeFactoryException, ISerializable Constructors VisualStudioException() Creates a visual studio code factory exception. Declaration public VisualStudioException() VisualStudioException(string) Creates a visual studio code factory exception. Declaration public VisualStudioException(string message) Parameters Type Name Description string message The error message to be captured by the exception VisualStudioException(string, Exception) Creates a visual studio code factory exception. Declaration public VisualStudioException(string message, Exception innerException) Parameters Type Name Description string message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements ISerializable"
  },
  "api/CodeFactory.WinVs.VisualStudioMessages.html": {
    "href": "api/CodeFactory.WinVs.VisualStudioMessages.html",
    "title": "Class VisualStudioMessages | CodeFactory for Windows",
    "keywords": "Class VisualStudioMessages A strongly-typed resource class, for looking up localized strings, etc. Inheritance object VisualStudioMessages Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public class VisualStudioMessages Properties CodeFactoryCouldNotLoad Looks up a localized string similar to Code factory could not complete the load process. Code factory will not be avaliable at this time. . Declaration public static string CodeFactoryCouldNotLoad { get; } Property Value Type Description string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description CultureInfo GetDocumentContentUnhandledError Looks up a localized string similar to An internal visual studio error occurred, cannot load the document content.. Declaration public static string GetDocumentContentUnhandledError { get; } Property Value Type Description string GetParentErrorProjectWithProjectNameReplacement Looks up a localized string similar to An internal error occurred locating the parent for project '{0}'. The parent lookup operating cannot complete.. Declaration public static string GetParentErrorProjectWithProjectNameReplacement { get; } Property Value Type Description string GetParentForSolutionFolderUnhandledErrorWithProjectFolderTitle Looks up a localized string similar to An internal error occurred while loading the parent of the solution folder '{0}', cannot complete the load parent operation.. Declaration public static string GetParentForSolutionFolderUnhandledErrorWithProjectFolderTitle { get; } Property Value Type Description string GetParentUnhandledErrorForProjectDocumentWithName Looks up a localized string similar to An internal error occurred while trying to get the parent for the document '{0}', cannot get the parent model.. Declaration public static string GetParentUnhandledErrorForProjectDocumentWithName { get; } Property Value Type Description string GetParentUnhandledErrorForProjectFolderWithName Looks up a localized string similar to An internal error occurred while loading the parent for the project folder '{0}', the parent model cannot be loaded.. Declaration public static string GetParentUnhandledErrorForProjectFolderWithName { get; } Property Value Type Description string InternalErrorAddDocumentContent Looks up a localized string similar to An internal error occurred while adding content to the document, operation did not complete.. Declaration public static string InternalErrorAddDocumentContent { get; } Property Value Type Description string InternalErrorOccuredCheckLogs Looks up a localized string similar to An internal error occurred the operation could not complete. Review logs for further details.. Declaration public static string InternalErrorOccuredCheckLogs { get; } Property Value Type Description string LoadDocumentFromSourceUnhandledError Looks up a localized string similar to An internal error occurred while loading the visual studio document, the operation could not be completed.. Declaration public static string LoadDocumentFromSourceUnhandledError { get; } Property Value Type Description string ProjectSystemGeneralError Looks up a localized string similar to An error occurred while accessing visual studio's project system, code factory had to cancel the operation. Please try again.. Declaration public static string ProjectSystemGeneralError { get; } Property Value Type Description string RemoveContentUnhandledError Looks up a localized string similar to An internal error occurred will not be able to remove the content from the document.. Declaration public static string RemoveContentUnhandledError { get; } Property Value Type Description string ReplaceContentUnhandledError Looks up a localized string similar to An internal error occurred will not be able to replace the content in the document.. Declaration public static string ReplaceContentUnhandledError { get; } Property Value Type Description string ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager SolutionExplorerGeneralError Looks up a localized string similar to An error occurred while access the selected item in solution explorer, code factory had to cancel the operation. Please try again.. Declaration public static string SolutionExplorerGeneralError { get; } Property Value Type Description string SolutionFolderChildLoadUnhandledExceptionWithFolderName Looks up a localized string similar to An internal error occurred while loading the child models for the solution folder '{0}'. The load action could not be completed.. Declaration public static string SolutionFolderChildLoadUnhandledExceptionWithFolderName { get; } Property Value Type Description string UnhandledErrorReadingContent Looks up a localized string similar to An internal error occurred while loading the IDocumentContent, operation could not complete.. Declaration public static string UnhandledErrorReadingContent { get; } Property Value Type Description string VisualStudioCompilerSystemLoadError Looks up a localized string similar to Code factory has encountered an internal error and cannot load the compiler functionality used by code factory to access .net objects.. Declaration public static string VisualStudioCompilerSystemLoadError { get; } Property Value Type Description string VisualStudioDocumentWriterLoadError Looks up a localized string similar to Code factory has encountered an internal error and cannot load the document writer functionality used by code factory to manage code changes.. Declaration public static string VisualStudioDocumentWriterLoadError { get; } Property Value Type Description string VisualStudioGeneralError Looks up a localized string similar to Code factory has encountered an internal error accessing visual studio. The current operation could not be completed. Please try again.. Declaration public static string VisualStudioGeneralError { get; } Property Value Type Description string VisualStudioModelLoadError Looks up a localized string similar to The visual studio model could not be loaded. The source model data could not be accessed.. Declaration public static string VisualStudioModelLoadError { get; } Property Value Type Description string VisualStudioProjectSystemLoadError Looks up a localized string similar to Code factory has encountered an internal error and cannot load the project system functionality used by code factory to access the project system.. Declaration public static string VisualStudioProjectSystemLoadError { get; } Property Value Type Description string"
  },
  "api/CodeFactory.WinVs.VsActionsExtensions.html": {
    "href": "api/CodeFactory.WinVs.VsActionsExtensions.html",
    "title": "Class VsActionsExtensions | CodeFactory for Windows",
    "keywords": "Class VsActionsExtensions Extension methods that support IVSActions Inheritance object VsActionsExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: CodeFactory.WinVs Assembly: CodeFactory.WinVs.dll Syntax public static class VsActionsExtensions Methods GetCSharpSourceAsync(IVsActions, CsContainer) Loads the most current instance of the source for the provided container. Declaration public static Task<CsSource> GetCSharpSourceAsync(this IVsActions source, CsContainer container) Parameters Type Name Description IVsActions source CodeFactory automation for Visual Studio Windows CsContainer container Target C# container to get the source for. Returns Type Description Task<CsSource> The target C# source or null if the source could not be found. GetCSharpSourceAsync(IVsActions, CsMember) Loads the most current instance of the source for the provided member. Declaration public static Task<CsSource> GetCSharpSourceAsync(this IVsActions source, CsMember member) Parameters Type Name Description IVsActions source CodeFactory automation for Visual Studio Windows CsMember member The target c# member model to load the source from. Returns Type Description Task<CsSource> The target C# source or null if the source could not be found. GetProjectFolderFromConfigAsync(IVsActions, ConfigProject, string, bool) Gets the project folder based on the source directory name. That is defined in the configuration project. Declaration public static Task<VsProjectFolder> GetProjectFolderFromConfigAsync(this IVsActions source, ConfigProject projectSource, string sourceDirectoryName, bool addMissingFolder = false) Parameters Type Name Description IVsActions source The Visual Studio extensions for CodeFactory. ConfigProject projectSource The configuration data for the project source. string sourceDirectoryName The source directories name to load. bool addMissingFolder Optional flag that determines if the project folder should be created if it does not exist. The default is false. Returns Type Description Task<VsProjectFolder> The CodeFactory project folder model or null if the project folder could not be found. GetProjectFromConfigAsync(IVsActions, ConfigProject) Extension method that gets the CodeFactory project model for this configuration project. Declaration public static Task<VsProject> GetProjectFromConfigAsync(this IVsActions source, ConfigProject projectSource) Parameters Type Name Description IVsActions source The Visual Studio extensions for CodeFactory. ConfigProject projectSource The configuration data for the project source. Returns Type Description Task<VsProject> New instance of the project model or null if it could not be loaded. GetTargetProjectAsync(IVsActions, string) Gets the target project from the solution by name of the project. Declaration public static Task<VsProject> GetTargetProjectAsync(this IVsActions source, string projectName) Parameters Type Name Description IVsActions source Visual studio actions to get the project from. string projectName The name of the project to load from. Returns Type Description Task<VsProject> The target project or null if the project cannot be found."
  },
  "api/CodeFactory.WinVs.Wpf.ViewUserControl.html": {
    "href": "api/CodeFactory.WinVs.Wpf.ViewUserControl.html",
    "title": "Class ViewUserControl | CodeFactory for Windows",
    "keywords": "Class ViewUserControl The base implementation of a WPF ViewUserControl that has been extended to provide direct access to visual studio for code factory integration. Inheritance object DispatcherObject DependencyObject Visual UIElement FrameworkElement Control ContentControl UserControl ViewUserControl Implements IAnimatable IFrameworkInputElement IInputElement ISupportInitialize IQueryAmbient IAddChild IView Inherited Members UserControl.OnCreateAutomationPeer() ContentControl.ContentProperty ContentControl.HasContentProperty ContentControl.ContentTemplateProperty ContentControl.ContentTemplateSelectorProperty ContentControl.ContentStringFormatProperty ContentControl.AddChild(object) ContentControl.AddText(string) ContentControl.OnContentChanged(object, object) ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate) ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector) ContentControl.OnContentStringFormatChanged(string, string) ContentControl.LogicalChildren ContentControl.Content ContentControl.HasContent ContentControl.ContentTemplate ContentControl.ContentTemplateSelector ContentControl.ContentStringFormat Control.BorderBrushProperty Control.BorderThicknessProperty Control.BackgroundProperty Control.ForegroundProperty Control.FontFamilyProperty Control.FontSizeProperty Control.FontStretchProperty Control.FontStyleProperty Control.FontWeightProperty Control.HorizontalContentAlignmentProperty Control.VerticalContentAlignmentProperty Control.TabIndexProperty Control.IsTabStopProperty Control.PaddingProperty Control.TemplateProperty Control.PreviewMouseDoubleClickEvent Control.MouseDoubleClickEvent Control.OnTemplateChanged(ControlTemplate, ControlTemplate) Control.ToString() Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs) Control.OnMouseDoubleClick(MouseButtonEventArgs) Control.MeasureOverride(Size) Control.ArrangeOverride(Size) Control.BorderBrush Control.BorderThickness Control.Background Control.Foreground Control.FontFamily Control.FontSize Control.FontStretch Control.FontStyle Control.FontWeight Control.HorizontalContentAlignment Control.VerticalContentAlignment Control.TabIndex Control.IsTabStop Control.Padding Control.Template Control.HandlesScrolling Control.PreviewMouseDoubleClick Control.MouseDoubleClick FrameworkElement.StyleProperty FrameworkElement.OverridesDefaultStyleProperty FrameworkElement.UseLayoutRoundingProperty FrameworkElement.DefaultStyleKeyProperty FrameworkElement.DataContextProperty FrameworkElement.BindingGroupProperty FrameworkElement.LanguageProperty FrameworkElement.NameProperty FrameworkElement.TagProperty FrameworkElement.InputScopeProperty FrameworkElement.RequestBringIntoViewEvent FrameworkElement.SizeChangedEvent FrameworkElement.ActualWidthProperty FrameworkElement.ActualHeightProperty FrameworkElement.LayoutTransformProperty FrameworkElement.WidthProperty FrameworkElement.MinWidthProperty FrameworkElement.MaxWidthProperty FrameworkElement.HeightProperty FrameworkElement.MinHeightProperty FrameworkElement.MaxHeightProperty FrameworkElement.FlowDirectionProperty FrameworkElement.MarginProperty FrameworkElement.HorizontalAlignmentProperty FrameworkElement.VerticalAlignmentProperty FrameworkElement.FocusVisualStyleProperty FrameworkElement.CursorProperty FrameworkElement.ForceCursorProperty FrameworkElement.LoadedEvent FrameworkElement.UnloadedEvent FrameworkElement.ToolTipProperty FrameworkElement.ContextMenuProperty FrameworkElement.ToolTipOpeningEvent FrameworkElement.ToolTipClosingEvent FrameworkElement.ContextMenuOpeningEvent FrameworkElement.ContextMenuClosingEvent FrameworkElement.OnStyleChanged(Style, Style) FrameworkElement.ParentLayoutInvalidated(UIElement) FrameworkElement.ApplyTemplate() FrameworkElement.OnApplyTemplate() FrameworkElement.BeginStoryboard(Storyboard) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, bool) FrameworkElement.GetVisualChild(int) FrameworkElement.GetTemplateChild(string) FrameworkElement.FindResource(object) FrameworkElement.TryFindResource(object) FrameworkElement.SetResourceReference(DependencyProperty, object) FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs) FrameworkElement.OnVisualParentChanged(DependencyObject) FrameworkElement.GetBindingExpression(DependencyProperty) FrameworkElement.SetBinding(DependencyProperty, BindingBase) FrameworkElement.SetBinding(DependencyProperty, string) FrameworkElement.GetUIParentCore() FrameworkElement.BringIntoView() FrameworkElement.BringIntoView(Rect) FrameworkElement.GetFlowDirection(DependencyObject) FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection) FrameworkElement.MeasureCore(Size) FrameworkElement.ArrangeCore(Rect) FrameworkElement.OnRenderSizeChanged(SizeChangedInfo) FrameworkElement.GetLayoutClip(Size) FrameworkElement.MoveFocus(TraversalRequest) FrameworkElement.PredictFocus(FocusNavigationDirection) FrameworkElement.OnGotFocus(RoutedEventArgs) FrameworkElement.BeginInit() FrameworkElement.EndInit() FrameworkElement.OnInitialized(EventArgs) FrameworkElement.OnToolTipOpening(ToolTipEventArgs) FrameworkElement.OnToolTipClosing(ToolTipEventArgs) FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs) FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs) FrameworkElement.RegisterName(string, object) FrameworkElement.UnregisterName(string) FrameworkElement.FindName(string) FrameworkElement.UpdateDefaultStyle() FrameworkElement.AddLogicalChild(object) FrameworkElement.RemoveLogicalChild(object) FrameworkElement.Style FrameworkElement.OverridesDefaultStyle FrameworkElement.UseLayoutRounding FrameworkElement.DefaultStyleKey FrameworkElement.Triggers FrameworkElement.TemplatedParent FrameworkElement.VisualChildrenCount FrameworkElement.Resources FrameworkElement.InheritanceBehavior FrameworkElement.DataContext FrameworkElement.BindingGroup FrameworkElement.Language FrameworkElement.Name FrameworkElement.Tag FrameworkElement.InputScope FrameworkElement.ActualWidth FrameworkElement.ActualHeight FrameworkElement.LayoutTransform FrameworkElement.Width FrameworkElement.MinWidth FrameworkElement.MaxWidth FrameworkElement.Height FrameworkElement.MinHeight FrameworkElement.MaxHeight FrameworkElement.FlowDirection FrameworkElement.Margin FrameworkElement.HorizontalAlignment FrameworkElement.VerticalAlignment FrameworkElement.FocusVisualStyle FrameworkElement.Cursor FrameworkElement.ForceCursor FrameworkElement.IsInitialized FrameworkElement.IsLoaded FrameworkElement.ToolTip FrameworkElement.ContextMenu FrameworkElement.Parent FrameworkElement.TargetUpdated FrameworkElement.SourceUpdated FrameworkElement.DataContextChanged FrameworkElement.RequestBringIntoView FrameworkElement.SizeChanged FrameworkElement.Initialized FrameworkElement.Loaded FrameworkElement.Unloaded FrameworkElement.ToolTipOpening FrameworkElement.ToolTipClosing FrameworkElement.ContextMenuOpening FrameworkElement.ContextMenuClosing UIElement.PreviewMouseDownEvent UIElement.MouseDownEvent UIElement.PreviewMouseUpEvent UIElement.MouseUpEvent UIElement.PreviewMouseLeftButtonDownEvent UIElement.MouseLeftButtonDownEvent UIElement.PreviewMouseLeftButtonUpEvent UIElement.MouseLeftButtonUpEvent UIElement.PreviewMouseRightButtonDownEvent UIElement.MouseRightButtonDownEvent UIElement.PreviewMouseRightButtonUpEvent UIElement.MouseRightButtonUpEvent UIElement.PreviewMouseMoveEvent UIElement.MouseMoveEvent UIElement.PreviewMouseWheelEvent UIElement.MouseWheelEvent UIElement.MouseEnterEvent UIElement.MouseLeaveEvent UIElement.GotMouseCaptureEvent UIElement.LostMouseCaptureEvent UIElement.QueryCursorEvent UIElement.PreviewStylusDownEvent UIElement.StylusDownEvent UIElement.PreviewStylusUpEvent UIElement.StylusUpEvent UIElement.PreviewStylusMoveEvent UIElement.StylusMoveEvent UIElement.PreviewStylusInAirMoveEvent UIElement.StylusInAirMoveEvent UIElement.StylusEnterEvent UIElement.StylusLeaveEvent UIElement.PreviewStylusInRangeEvent UIElement.StylusInRangeEvent UIElement.PreviewStylusOutOfRangeEvent UIElement.StylusOutOfRangeEvent UIElement.PreviewStylusSystemGestureEvent UIElement.StylusSystemGestureEvent UIElement.GotStylusCaptureEvent UIElement.LostStylusCaptureEvent UIElement.StylusButtonDownEvent UIElement.StylusButtonUpEvent UIElement.PreviewStylusButtonDownEvent UIElement.PreviewStylusButtonUpEvent UIElement.PreviewKeyDownEvent UIElement.KeyDownEvent UIElement.PreviewKeyUpEvent UIElement.KeyUpEvent UIElement.PreviewGotKeyboardFocusEvent UIElement.GotKeyboardFocusEvent UIElement.PreviewLostKeyboardFocusEvent UIElement.LostKeyboardFocusEvent UIElement.PreviewTextInputEvent UIElement.TextInputEvent UIElement.PreviewQueryContinueDragEvent UIElement.QueryContinueDragEvent UIElement.PreviewGiveFeedbackEvent UIElement.GiveFeedbackEvent UIElement.PreviewDragEnterEvent UIElement.DragEnterEvent UIElement.PreviewDragOverEvent UIElement.DragOverEvent UIElement.PreviewDragLeaveEvent UIElement.DragLeaveEvent UIElement.PreviewDropEvent UIElement.DropEvent UIElement.PreviewTouchDownEvent UIElement.TouchDownEvent UIElement.PreviewTouchMoveEvent UIElement.TouchMoveEvent UIElement.PreviewTouchUpEvent UIElement.TouchUpEvent UIElement.GotTouchCaptureEvent UIElement.LostTouchCaptureEvent UIElement.TouchEnterEvent UIElement.TouchLeaveEvent UIElement.IsMouseDirectlyOverProperty UIElement.IsMouseOverProperty UIElement.IsStylusOverProperty UIElement.IsKeyboardFocusWithinProperty UIElement.IsMouseCapturedProperty UIElement.IsMouseCaptureWithinProperty UIElement.IsStylusDirectlyOverProperty UIElement.IsStylusCapturedProperty UIElement.IsStylusCaptureWithinProperty UIElement.IsKeyboardFocusedProperty UIElement.AreAnyTouchesDirectlyOverProperty UIElement.AreAnyTouchesOverProperty UIElement.AreAnyTouchesCapturedProperty UIElement.AreAnyTouchesCapturedWithinProperty UIElement.AllowDropProperty UIElement.RenderTransformProperty UIElement.RenderTransformOriginProperty UIElement.OpacityProperty UIElement.OpacityMaskProperty UIElement.BitmapEffectProperty UIElement.EffectProperty UIElement.BitmapEffectInputProperty UIElement.CacheModeProperty UIElement.UidProperty UIElement.VisibilityProperty UIElement.ClipToBoundsProperty UIElement.ClipProperty UIElement.SnapsToDevicePixelsProperty UIElement.GotFocusEvent UIElement.LostFocusEvent UIElement.IsFocusedProperty UIElement.IsEnabledProperty UIElement.IsHitTestVisibleProperty UIElement.IsVisibleProperty UIElement.FocusableProperty UIElement.IsManipulationEnabledProperty UIElement.ManipulationStartingEvent UIElement.ManipulationStartedEvent UIElement.ManipulationDeltaEvent UIElement.ManipulationInertiaStartingEvent UIElement.ManipulationBoundaryFeedbackEvent UIElement.ManipulationCompletedEvent UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior) UIElement.GetAnimationBaseValue(DependencyProperty) UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddHandler(RoutedEvent, Delegate) UIElement.AddHandler(RoutedEvent, Delegate, bool) UIElement.RemoveHandler(RoutedEvent, Delegate) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.OnPreviewMouseDown(MouseButtonEventArgs) UIElement.OnMouseDown(MouseButtonEventArgs) UIElement.OnPreviewMouseUp(MouseButtonEventArgs) UIElement.OnMouseUp(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseMove(MouseEventArgs) UIElement.OnMouseMove(MouseEventArgs) UIElement.OnPreviewMouseWheel(MouseWheelEventArgs) UIElement.OnMouseWheel(MouseWheelEventArgs) UIElement.OnMouseEnter(MouseEventArgs) UIElement.OnMouseLeave(MouseEventArgs) UIElement.OnGotMouseCapture(MouseEventArgs) UIElement.OnLostMouseCapture(MouseEventArgs) UIElement.OnQueryCursor(QueryCursorEventArgs) UIElement.OnPreviewStylusDown(StylusDownEventArgs) UIElement.OnStylusDown(StylusDownEventArgs) UIElement.OnPreviewStylusUp(StylusEventArgs) UIElement.OnStylusUp(StylusEventArgs) UIElement.OnPreviewStylusMove(StylusEventArgs) UIElement.OnStylusMove(StylusEventArgs) UIElement.OnPreviewStylusInAirMove(StylusEventArgs) UIElement.OnStylusInAirMove(StylusEventArgs) UIElement.OnStylusEnter(StylusEventArgs) UIElement.OnStylusLeave(StylusEventArgs) UIElement.OnPreviewStylusInRange(StylusEventArgs) UIElement.OnStylusInRange(StylusEventArgs) UIElement.OnPreviewStylusOutOfRange(StylusEventArgs) UIElement.OnStylusOutOfRange(StylusEventArgs) UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnGotStylusCapture(StylusEventArgs) UIElement.OnLostStylusCapture(StylusEventArgs) UIElement.OnStylusButtonDown(StylusButtonEventArgs) UIElement.OnStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewKeyDown(KeyEventArgs) UIElement.OnKeyDown(KeyEventArgs) UIElement.OnPreviewKeyUp(KeyEventArgs) UIElement.OnKeyUp(KeyEventArgs) UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewTextInput(TextCompositionEventArgs) UIElement.OnTextInput(TextCompositionEventArgs) UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs) UIElement.OnGiveFeedback(GiveFeedbackEventArgs) UIElement.OnPreviewDragEnter(DragEventArgs) UIElement.OnDragEnter(DragEventArgs) UIElement.OnPreviewDragOver(DragEventArgs) UIElement.OnDragOver(DragEventArgs) UIElement.OnPreviewDragLeave(DragEventArgs) UIElement.OnDragLeave(DragEventArgs) UIElement.OnPreviewDrop(DragEventArgs) UIElement.OnDrop(DragEventArgs) UIElement.OnPreviewTouchDown(TouchEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnPreviewTouchMove(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnPreviewTouchUp(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnGotTouchCapture(TouchEventArgs) UIElement.OnLostTouchCapture(TouchEventArgs) UIElement.OnTouchEnter(TouchEventArgs) UIElement.OnTouchLeave(TouchEventArgs) UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.InvalidateVisual() UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Measure(Size) UIElement.Arrange(Rect) UIElement.OnRender(DrawingContext) UIElement.UpdateLayout() UIElement.TranslatePoint(Point, UIElement) UIElement.InputHitTest(Point) UIElement.CaptureMouse() UIElement.ReleaseMouseCapture() UIElement.CaptureStylus() UIElement.ReleaseStylusCapture() UIElement.Focus() UIElement.OnAccessKey(AccessKeyEventArgs) UIElement.HitTestCore(PointHitTestParameters) UIElement.HitTestCore(GeometryHitTestParameters) UIElement.OnLostFocus(RoutedEventArgs) UIElement.OnManipulationStarting(ManipulationStartingEventArgs) UIElement.OnManipulationStarted(ManipulationStartedEventArgs) UIElement.OnManipulationDelta(ManipulationDeltaEventArgs) UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs) UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs) UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs) UIElement.CaptureTouch(TouchDevice) UIElement.ReleaseTouchCapture(TouchDevice) UIElement.ReleaseAllTouchCaptures() UIElement.HasAnimatedProperties UIElement.InputBindings UIElement.CommandBindings UIElement.AllowDrop UIElement.StylusPlugIns UIElement.DesiredSize UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.RenderSize UIElement.RenderTransform UIElement.RenderTransformOrigin UIElement.IsMouseDirectlyOver UIElement.IsMouseOver UIElement.IsStylusOver UIElement.IsKeyboardFocusWithin UIElement.IsMouseCaptured UIElement.IsMouseCaptureWithin UIElement.IsStylusDirectlyOver UIElement.IsStylusCaptured UIElement.IsStylusCaptureWithin UIElement.IsKeyboardFocused UIElement.IsInputMethodEnabled UIElement.Opacity UIElement.OpacityMask UIElement.BitmapEffect UIElement.Effect UIElement.BitmapEffectInput UIElement.CacheMode UIElement.Uid UIElement.Visibility UIElement.ClipToBounds UIElement.Clip UIElement.SnapsToDevicePixels UIElement.HasEffectiveKeyboardFocus UIElement.IsFocused UIElement.IsEnabled UIElement.IsEnabledCore UIElement.IsHitTestVisible UIElement.IsVisible UIElement.Focusable UIElement.PersistId UIElement.IsManipulationEnabled UIElement.AreAnyTouchesOver UIElement.AreAnyTouchesDirectlyOver UIElement.AreAnyTouchesCapturedWithin UIElement.AreAnyTouchesCaptured UIElement.TouchesCaptured UIElement.TouchesCapturedWithin UIElement.TouchesOver UIElement.TouchesDirectlyOver UIElement.PreviewMouseDown UIElement.MouseDown UIElement.PreviewMouseUp UIElement.MouseUp UIElement.PreviewMouseLeftButtonDown UIElement.MouseLeftButtonDown UIElement.PreviewMouseLeftButtonUp UIElement.MouseLeftButtonUp UIElement.PreviewMouseRightButtonDown UIElement.MouseRightButtonDown UIElement.PreviewMouseRightButtonUp UIElement.MouseRightButtonUp UIElement.PreviewMouseMove UIElement.MouseMove UIElement.PreviewMouseWheel UIElement.MouseWheel UIElement.MouseEnter UIElement.MouseLeave UIElement.GotMouseCapture UIElement.LostMouseCapture UIElement.QueryCursor UIElement.PreviewStylusDown UIElement.StylusDown UIElement.PreviewStylusUp UIElement.StylusUp UIElement.PreviewStylusMove UIElement.StylusMove UIElement.PreviewStylusInAirMove UIElement.StylusInAirMove UIElement.StylusEnter UIElement.StylusLeave UIElement.PreviewStylusInRange UIElement.StylusInRange UIElement.PreviewStylusOutOfRange UIElement.StylusOutOfRange UIElement.PreviewStylusSystemGesture UIElement.StylusSystemGesture UIElement.GotStylusCapture UIElement.LostStylusCapture UIElement.StylusButtonDown UIElement.StylusButtonUp UIElement.PreviewStylusButtonDown UIElement.PreviewStylusButtonUp UIElement.PreviewKeyDown UIElement.KeyDown UIElement.PreviewKeyUp UIElement.KeyUp UIElement.PreviewGotKeyboardFocus UIElement.GotKeyboardFocus UIElement.PreviewLostKeyboardFocus UIElement.LostKeyboardFocus UIElement.PreviewTextInput UIElement.TextInput UIElement.PreviewQueryContinueDrag UIElement.QueryContinueDrag UIElement.PreviewGiveFeedback UIElement.GiveFeedback UIElement.PreviewDragEnter UIElement.DragEnter UIElement.PreviewDragOver UIElement.DragOver UIElement.PreviewDragLeave UIElement.DragLeave UIElement.PreviewDrop UIElement.Drop UIElement.PreviewTouchDown UIElement.TouchDown UIElement.PreviewTouchMove UIElement.TouchMove UIElement.PreviewTouchUp UIElement.TouchUp UIElement.GotTouchCapture UIElement.LostTouchCapture UIElement.TouchEnter UIElement.TouchLeave UIElement.IsMouseDirectlyOverChanged UIElement.IsKeyboardFocusWithinChanged UIElement.IsMouseCapturedChanged UIElement.IsMouseCaptureWithinChanged UIElement.IsStylusDirectlyOverChanged UIElement.IsStylusCapturedChanged UIElement.IsStylusCaptureWithinChanged UIElement.IsKeyboardFocusedChanged UIElement.LayoutUpdated UIElement.GotFocus UIElement.LostFocus UIElement.IsEnabledChanged UIElement.IsHitTestVisibleChanged UIElement.IsVisibleChanged UIElement.FocusableChanged UIElement.ManipulationStarting UIElement.ManipulationStarted UIElement.ManipulationDelta UIElement.ManipulationInertiaStarting UIElement.ManipulationBoundaryFeedback UIElement.ManipulationCompleted Visual.AddVisualChild(Visual) Visual.RemoveVisualChild(Visual) Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject) Visual.OnDpiChanged(DpiScale, DpiScale) Visual.IsAncestorOf(DependencyObject) Visual.IsDescendantOf(DependencyObject) Visual.FindCommonVisualAncestor(DependencyObject) Visual.TransformToAncestor(Visual) Visual.TransformToAncestor(Visual3D) Visual.TransformToDescendant(Visual) Visual.TransformToVisual(Visual) Visual.PointToScreen(Point) Visual.PointFromScreen(Point) Visual.VisualParent Visual.VisualTransform Visual.VisualEffect Visual.VisualBitmapEffect Visual.VisualBitmapEffectInput Visual.VisualCacheMode Visual.VisualScrollableAreaClip Visual.VisualClip Visual.VisualOffset Visual.VisualOpacity Visual.VisualEdgeMode Visual.VisualBitmapScalingMode Visual.VisualClearTypeHint Visual.VisualTextRenderingMode Visual.VisualTextHintingMode Visual.VisualOpacityMask Visual.VisualXSnappingGuidelines Visual.VisualYSnappingGuidelines DependencyObject.Equals(object) DependencyObject.GetHashCode() DependencyObject.GetValue(DependencyProperty) DependencyObject.SetValue(DependencyProperty, object) DependencyObject.SetCurrentValue(DependencyProperty, object) DependencyObject.SetValue(DependencyPropertyKey, object) DependencyObject.ClearValue(DependencyProperty) DependencyObject.ClearValue(DependencyPropertyKey) DependencyObject.CoerceValue(DependencyProperty) DependencyObject.InvalidateProperty(DependencyProperty) DependencyObject.ShouldSerializeProperty(DependencyProperty) DependencyObject.ReadLocalValue(DependencyProperty) DependencyObject.GetLocalValueEnumerator() DependencyObject.DependencyObjectType DependencyObject.IsSealed DispatcherObject.Dispatcher object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: CodeFactory.WinVs.Wpf Assembly: CodeFactory.WinVs.Wpf.dll Syntax public class ViewUserControl : UserControl, IAnimatable, IFrameworkInputElement, IInputElement, ISupportInitialize, IQueryAmbient, IAddChild, IView Constructors ViewUserControl() Default constructor only to be used for compatibility with the visual editor. Declaration public ViewUserControl() ViewUserControl(IVsActions, ILogger) Initializes the base implementation of a ViewUserControl user control. Declaration public ViewUserControl(IVsActions actions, ILogger logger) Parameters Type Name Description IVsActions actions The visual studio actions accessible in this user control. ILogger logger The logger for interaction inside this user control. Fields TitleProperty Backing store for the dependance property Title Declaration public static readonly DependencyProperty TitleProperty Field Value Type Description DependencyProperty _logger Logger class that is assigned to this user control. Declaration protected readonly ILogger _logger Field Value Type Description ILogger _visualStudioActions The visual studio actions provided by code factory for use with visual studio. Declaration protected readonly IVsActions _visualStudioActions Field Value Type Description IVsActions Properties Title The title that will be assigned to windows that host this user control. Declaration public string Title { get; set; } Property Value Type Description string Methods Close() Triggers the CloseHost event that will inform the host of this user control to close. Declaration protected void Close() ReleaseSubscriptionToHostWindow(Window) Used by the code factory to release subscriptions to the host windows events. This is for internal code factory use only. Declaration public void ReleaseSubscriptionToHostWindow(Window host) Parameters Type Name Description Window host The hosting window to release subscriptions. SubscribeToHostWindow(Window) Used by the code factory to subscribe to the hosts windows events to be made available to this user control. This is for internal code factory use only. Declaration public void SubscribeToHostWindow(Window host) Parameters Type Name Description Window host The hosting window that will display this user control implementation. WindowActivated(object, EventArgs) Event handler when the Activated is raised to this user control. Declaration public virtual void WindowActivated(object sender, EventArgs e) Parameters Type Name Description object sender Source window that has been activated. EventArgs e Args from the window. WindowClosing(object, CancelEventArgs) Event handler when the Closing is raised to this user control. Declaration public virtual void WindowClosing(object sender, CancelEventArgs e) Parameters Type Name Description object sender CancelEventArgs e Events CloseHost Event that is raised when the user control informs the hosting window or control in visual studio to close. Declaration public event EventHandler CloseHost Event Type Type Description EventHandler Implements IAnimatable IFrameworkInputElement IInputElement ISupportInitialize IQueryAmbient IAddChild IView"
  },
  "api/CodeFactory.WinVs.Wpf.html": {
    "href": "api/CodeFactory.WinVs.Wpf.html",
    "title": "Namespace CodeFactory.WinVs.Wpf | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs.Wpf Classes ViewUserControl The base implementation of a WPF ViewUserControl that has been extended to provide direct access to visual studio for code factory integration."
  },
  "api/CodeFactory.WinVs.html": {
    "href": "api/CodeFactory.WinVs.html",
    "title": "Namespace CodeFactory.WinVs | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory.WinVs Classes AssemblyCFEnvironment Assembly attribute that tracks the CodeFactory environment that this library runs in. AssemblyCFSdkVersion Assembly attribute that tracks the CodeFactory SDK that was used to build this assembly. CommandNotificationMessage Immutable command notification message. CommandNotifications Central notification manager for all CodeFactory notifications for executing commands. FileHelper Static helper class that contains functions to support file management with visual studio. PathHelper Static helper class that contains functions to support path management with visual studio. VisualStudioException Base exception class for all visual studio specific exceptions that occur in code factory. VisualStudioMessages A strongly-typed resource class, for looking up localized strings, etc. VsActionsExtensions Extension methods that support IVSActions Interfaces IVsActions Code factory commands that are globally used in Visual Studio. IVsEnvironmentActions Visual Studio actions handle interaction with Visual Studio itself. Enums CommandNotificationStatus Enumeration on the current status of a command notification message."
  },
  "api/CodeFactory.html": {
    "href": "api/CodeFactory.html",
    "title": "Namespace CodeFactory | CodeFactory for Windows",
    "keywords": "Namespace CodeFactory Classes ActionException Exception that is raised when an error occurred that kept a code factory command from finishing execution. CodeFactoryException Base exception class all code factory generated exceptions are based on. CodeFactoryMessages A strongly-typed resource class, for looking up localized strings, etc. ModelException<TModelTypes> Exception class that is designed to capture exception information during the creation of a model. ModelLoadException Exception class that captures information about errors during the creation of a code factory model. ModelStore<T> Stores code factory models so they can be extracted when needed. SourceFormatter Base implementation of source code formatting. This allows for control of formatted output from CodeFactory. UnsupportedSdkLibraryException Exception class that tracks when a CodeFactory library is using an unsupported version of the SDK. Interfaces ICommandBase<TModel> Minimum implementation for all code factory commands. ICommand<TModel> Base implementation for all code factory commands. IModelStatus Status information about a code factory model that has been created. IModel<TModelTypes> Base implementation of a code factory model. All models will be derived from this base model definition. ISourceFormatter Base implementation all source formatters that support CodeFactory must implement."
  },
  "api/MessagePack.ExtensionHeader.html": {
    "href": "api/MessagePack.ExtensionHeader.html",
    "title": "Struct ExtensionHeader | CodeFactory for Windows",
    "keywords": "Struct ExtensionHeader Implements IEquatable<ExtensionHeader> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.dll Syntax public struct ExtensionHeader : IEquatable<ExtensionHeader> Constructors ExtensionHeader(sbyte, int) Declaration public ExtensionHeader(sbyte typeCode, int length) Parameters Type Name Description sbyte typeCode int length ExtensionHeader(sbyte, uint) Declaration public ExtensionHeader(sbyte typeCode, uint length) Parameters Type Name Description sbyte typeCode uint length Properties Length Declaration public readonly uint Length { get; } Property Value Type Description uint TypeCode Declaration public readonly sbyte TypeCode { get; } Property Value Type Description sbyte Methods Equals(ExtensionHeader) Declaration public bool Equals(ExtensionHeader other) Parameters Type Name Description ExtensionHeader other Returns Type Description bool Implements IEquatable<T>"
  },
  "api/MessagePack.ExtensionResult.html": {
    "href": "api/MessagePack.ExtensionResult.html",
    "title": "Struct ExtensionResult | CodeFactory for Windows",
    "keywords": "Struct ExtensionResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.dll Syntax public struct ExtensionResult Constructors ExtensionResult(sbyte, ReadOnlySequence<byte>) Declaration public ExtensionResult(sbyte typeCode, ReadOnlySequence<byte> data) Parameters Type Name Description sbyte typeCode ReadOnlySequence<byte> data ExtensionResult(sbyte, Memory<byte>) Declaration public ExtensionResult(sbyte typeCode, Memory<byte> data) Parameters Type Name Description sbyte typeCode Memory<byte> data Properties Data Declaration public readonly ReadOnlySequence<byte> Data { get; } Property Value Type Description ReadOnlySequence<byte> Header Declaration public ExtensionHeader Header { get; } Property Value Type Description ExtensionHeader TypeCode Declaration public readonly sbyte TypeCode { get; } Property Value Type Description sbyte"
  },
  "api/MessagePack.FormatterNotRegisteredException.html": {
    "href": "api/MessagePack.FormatterNotRegisteredException.html",
    "title": "Class FormatterNotRegisteredException | CodeFactory for Windows",
    "keywords": "Class FormatterNotRegisteredException Inheritance object Exception MessagePackSerializationException FormatterNotRegisteredException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public class FormatterNotRegisteredException : MessagePackSerializationException, ISerializable Constructors FormatterNotRegisteredException(SerializationInfo, StreamingContext) Declaration protected FormatterNotRegisteredException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context FormatterNotRegisteredException(string?) Declaration public FormatterNotRegisteredException(string? message) Parameters Type Name Description string message Implements ISerializable"
  },
  "api/MessagePack.FormatterResolverExtensions.html": {
    "href": "api/MessagePack.FormatterResolverExtensions.html",
    "title": "Class FormatterResolverExtensions | CodeFactory for Windows",
    "keywords": "Class FormatterResolverExtensions Inheritance object FormatterResolverExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public static class FormatterResolverExtensions Methods GetFormatterDynamic(IFormatterResolver, Type) Declaration public static object? GetFormatterDynamic(this IFormatterResolver resolver, Type type) Parameters Type Name Description IFormatterResolver resolver Type type Returns Type Description object GetFormatterWithVerify<T>(IFormatterResolver) Declaration public static IMessagePackFormatter<T> GetFormatterWithVerify<T>(this IFormatterResolver resolver) Parameters Type Name Description IFormatterResolver resolver Returns Type Description IMessagePackFormatter<T> Type Parameters Name Description T"
  },
  "api/MessagePack.Formatters.ArrayFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ArrayFormatter-1.html",
    "title": "Class ArrayFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ArrayFormatter<T> Inheritance object ArrayFormatter<T> Implements IMessagePackFormatter<T[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ArrayFormatter<T> : IMessagePackFormatter<T[]?> Type Parameters Name Description T Constructors ArrayFormatter() Declaration public ArrayFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T[] The deserialized value. Serialize(ref MessagePackWriter, T[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ArraySegmentFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ArraySegmentFormatter-1.html",
    "title": "Class ArraySegmentFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ArraySegmentFormatter<T> Inheritance object ArraySegmentFormatter<T> Implements IMessagePackFormatter<ArraySegment<T>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ArraySegmentFormatter<T> : IMessagePackFormatter<ArraySegment<T>> Type Parameters Name Description T Constructors ArraySegmentFormatter() Declaration public ArraySegmentFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ArraySegment<T> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.ArraySegment{`0}. Returns Type Description ArraySegment<T> The deserialized value. Serialize(ref MessagePackWriter, ArraySegment<T>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ArraySegment<T> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ArraySegment<T> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.ArraySegment{`0}. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.BigIntegerFormatter.html": {
    "href": "api/MessagePack.Formatters.BigIntegerFormatter.html",
    "title": "Class BigIntegerFormatter | CodeFactory for Windows",
    "keywords": "Class BigIntegerFormatter Inheritance object BigIntegerFormatter Implements IMessagePackFormatter<BigInteger> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class BigIntegerFormatter : IMessagePackFormatter<BigInteger> Fields Instance Declaration public static readonly IMessagePackFormatter<BigInteger> Instance Field Value Type Description IMessagePackFormatter<BigInteger> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public BigInteger Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type BigInteger. Returns Type Description BigInteger The deserialized value. Serialize(ref MessagePackWriter, BigInteger, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, BigInteger value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. BigInteger value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type BigInteger. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.BitArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.BitArrayFormatter.html",
    "title": "Class BitArrayFormatter | CodeFactory for Windows",
    "keywords": "Class BitArrayFormatter Inheritance object BitArrayFormatter Implements IMessagePackFormatter<BitArray> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class BitArrayFormatter : IMessagePackFormatter<BitArray?> Fields Instance Declaration public static readonly IMessagePackFormatter<BitArray?> Instance Field Value Type Description IMessagePackFormatter<BitArray> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public BitArray? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type BitArray. Returns Type Description BitArray The deserialized value. Serialize(ref MessagePackWriter, BitArray?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, BitArray? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. BitArray value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type BitArray. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.BooleanArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.BooleanArrayFormatter.html",
    "title": "Class BooleanArrayFormatter | CodeFactory for Windows",
    "keywords": "Class BooleanArrayFormatter Inheritance object BooleanArrayFormatter Implements IMessagePackFormatter<bool[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class BooleanArrayFormatter : IMessagePackFormatter<bool[]?> Fields Instance Declaration public static readonly BooleanArrayFormatter Instance Field Value Type Description BooleanArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public bool[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description bool[] The deserialized value. Serialize(ref MessagePackWriter, bool[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, bool[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. bool[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.BooleanFormatter.html": {
    "href": "api/MessagePack.Formatters.BooleanFormatter.html",
    "title": "Class BooleanFormatter | CodeFactory for Windows",
    "keywords": "Class BooleanFormatter Inheritance object BooleanFormatter Implements IMessagePackFormatter<bool> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class BooleanFormatter : IMessagePackFormatter<bool> Fields Instance Declaration public static readonly BooleanFormatter Instance Field Value Type Description BooleanFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public bool Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type bool. Returns Type Description bool The deserialized value. Serialize(ref MessagePackWriter, bool, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, bool value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. bool value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type bool. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ByteArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteArrayFormatter.html",
    "title": "Class ByteArrayFormatter | CodeFactory for Windows",
    "keywords": "Class ByteArrayFormatter Serializes a byte array as a bin type. Deserializes a bin type or an array of byte-sized integers into a byte array. Inheritance object ByteArrayFormatter Implements IMessagePackFormatter<byte[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ByteArrayFormatter : IMessagePackFormatter<byte[]?> Fields Instance Declaration public static readonly ByteArrayFormatter Instance Field Value Type Description ByteArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public byte[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description byte[] The deserialized value. Serialize(ref MessagePackWriter, byte[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, byte[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. byte[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ByteArraySegmentFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteArraySegmentFormatter.html",
    "title": "Class ByteArraySegmentFormatter | CodeFactory for Windows",
    "keywords": "Class ByteArraySegmentFormatter Inheritance object ByteArraySegmentFormatter Implements IMessagePackFormatter<ArraySegment<byte>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ByteArraySegmentFormatter : IMessagePackFormatter<ArraySegment<byte>> Fields Instance Declaration public static readonly ByteArraySegmentFormatter Instance Field Value Type Description ByteArraySegmentFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ArraySegment<byte> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ArraySegment<byte>. Returns Type Description ArraySegment<byte> The deserialized value. Serialize(ref MessagePackWriter, ArraySegment<byte>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ArraySegment<byte> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ArraySegment<byte> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ArraySegment<byte>. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ByteFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteFormatter.html",
    "title": "Class ByteFormatter | CodeFactory for Windows",
    "keywords": "Class ByteFormatter Inheritance object ByteFormatter Implements IMessagePackFormatter<byte> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ByteFormatter : IMessagePackFormatter<byte> Fields Instance Declaration public static readonly ByteFormatter Instance Field Value Type Description ByteFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public byte Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type byte. Returns Type Description byte The deserialized value. Serialize(ref MessagePackWriter, byte, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, byte value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. byte value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type byte. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ByteMemoryFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteMemoryFormatter.html",
    "title": "Class ByteMemoryFormatter | CodeFactory for Windows",
    "keywords": "Class ByteMemoryFormatter Inheritance object ByteMemoryFormatter Implements IMessagePackFormatter<Memory<byte>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ByteMemoryFormatter : IMessagePackFormatter<Memory<byte>> Fields Instance Declaration public static readonly ByteMemoryFormatter Instance Field Value Type Description ByteMemoryFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Memory<byte> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Memory<byte>. Returns Type Description Memory<byte> The deserialized value. Serialize(ref MessagePackWriter, Memory<byte>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Memory<byte> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Memory<byte> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Memory<byte>. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ByteReadOnlyMemoryFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteReadOnlyMemoryFormatter.html",
    "title": "Class ByteReadOnlyMemoryFormatter | CodeFactory for Windows",
    "keywords": "Class ByteReadOnlyMemoryFormatter Inheritance object ByteReadOnlyMemoryFormatter Implements IMessagePackFormatter<ReadOnlyMemory<byte>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ByteReadOnlyMemoryFormatter : IMessagePackFormatter<ReadOnlyMemory<byte>> Fields Instance Declaration public static readonly ByteReadOnlyMemoryFormatter Instance Field Value Type Description ByteReadOnlyMemoryFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ReadOnlyMemory<byte> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ReadOnlyMemory<byte>. Returns Type Description ReadOnlyMemory<byte> The deserialized value. Serialize(ref MessagePackWriter, ReadOnlyMemory<byte>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ReadOnlyMemory<byte> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ReadOnlyMemory<byte> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ReadOnlyMemory<byte>. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ByteReadOnlySequenceFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteReadOnlySequenceFormatter.html",
    "title": "Class ByteReadOnlySequenceFormatter | CodeFactory for Windows",
    "keywords": "Class ByteReadOnlySequenceFormatter Inheritance object ByteReadOnlySequenceFormatter Implements IMessagePackFormatter<ReadOnlySequence<byte>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ByteReadOnlySequenceFormatter : IMessagePackFormatter<ReadOnlySequence<byte>> Fields Instance Declaration public static readonly ByteReadOnlySequenceFormatter Instance Field Value Type Description ByteReadOnlySequenceFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ReadOnlySequence<byte> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ReadOnlySequence<byte>. Returns Type Description ReadOnlySequence<byte> The deserialized value. Serialize(ref MessagePackWriter, ReadOnlySequence<byte>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ReadOnlySequence<byte> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ReadOnlySequence<byte> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ReadOnlySequence<byte>. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.CharArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.CharArrayFormatter.html",
    "title": "Class CharArrayFormatter | CodeFactory for Windows",
    "keywords": "Class CharArrayFormatter Inheritance object CharArrayFormatter Implements IMessagePackFormatter<char[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class CharArrayFormatter : IMessagePackFormatter<char[]?> Fields Instance Declaration public static readonly CharArrayFormatter Instance Field Value Type Description CharArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public char[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description char[] The deserialized value. Serialize(ref MessagePackWriter, char[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, char[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. char[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.CharFormatter.html": {
    "href": "api/MessagePack.Formatters.CharFormatter.html",
    "title": "Class CharFormatter | CodeFactory for Windows",
    "keywords": "Class CharFormatter Inheritance object CharFormatter Implements IMessagePackFormatter<char> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class CharFormatter : IMessagePackFormatter<char> Fields Instance Declaration public static readonly CharFormatter Instance Field Value Type Description CharFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public char Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type char. Returns Type Description char The deserialized value. Serialize(ref MessagePackWriter, char, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, char value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. char value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type char. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.CollectionFormatterBase-2.html": {
    "href": "api/MessagePack.Formatters.CollectionFormatterBase-2.html",
    "title": "Class CollectionFormatterBase<TElement, TCollection> | CodeFactory for Windows",
    "keywords": "Class CollectionFormatterBase<TElement, TCollection> Inheritance object CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection> CollectionFormatterBase<TElement, TCollection, TCollection> CollectionFormatterBase<TElement, TCollection> ConcurrentBagFormatter<T> ConcurrentQueueFormatter<T> GenericCollectionFormatter<TElement, TCollection> ObservableCollectionFormatter<T> Implements IMessagePackFormatter<TCollection> Inherited Members CollectionFormatterBase<TElement, TCollection, TCollection>.GetSourceEnumerator(TCollection) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Serialize(ref MessagePackWriter, TCollection, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.GetCount(TCollection) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.GetSourceEnumerator(TCollection) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Add(TCollection, int, TElement, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Complete(TCollection) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public abstract class CollectionFormatterBase<TElement, TCollection> : CollectionFormatterBase<TElement, TCollection, TCollection>, IMessagePackFormatter<TCollection?> where TCollection : IEnumerable<TElement> Type Parameters Name Description TElement TCollection Constructors CollectionFormatterBase() Declaration protected CollectionFormatterBase() Methods Complete(TCollection) Declaration protected override sealed TCollection Complete(TCollection intermediateCollection) Parameters Type Name Description TCollection intermediateCollection Returns Type Description TCollection Overrides CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Complete(TCollection) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.CollectionFormatterBase-3.html": {
    "href": "api/MessagePack.Formatters.CollectionFormatterBase-3.html",
    "title": "Class CollectionFormatterBase<TElement, TIntermediate, TCollection> | CodeFactory for Windows",
    "keywords": "Class CollectionFormatterBase<TElement, TIntermediate, TCollection> Inheritance object CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection> CollectionFormatterBase<TElement, TIntermediate, TCollection> CollectionFormatterBase<TElement, TCollection> ConcurrentStackFormatter<T> GenericEnumerableFormatter<TElement, TCollection> InterfaceCollectionFormatter2<T> InterfaceCollectionFormatter<T> InterfaceEnumerableFormatter<T> InterfaceListFormatter2<T> InterfaceListFormatter<T> InterfaceLookupFormatter<TKey, TElement> InterfaceReadOnlyCollectionFormatter<T> InterfaceReadOnlyListFormatter<T> InterfaceSetFormatter<T> ReadOnlyCollectionFormatter<T> ReadOnlyObservableCollectionFormatter<T> ImmutableQueueFormatter<T> ImmutableStackFormatter<T> InterfaceImmutableListFormatter<T> InterfaceImmutableQueueFormatter<T> InterfaceImmutableSetFormatter<T> InterfaceImmutableStackFormatter<T> Implements IMessagePackFormatter<TCollection> Inherited Members CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.Serialize(ref MessagePackWriter, TCollection, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.GetCount(TCollection) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.GetSourceEnumerator(TCollection) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.Add(TIntermediate, int, TElement, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.Complete(TIntermediate) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public abstract class CollectionFormatterBase<TElement, TIntermediate, TCollection> : CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>, IMessagePackFormatter<TCollection?> where TCollection : IEnumerable<TElement> Type Parameters Name Description TElement TIntermediate TCollection Constructors CollectionFormatterBase() Declaration protected CollectionFormatterBase() Methods GetSourceEnumerator(TCollection) Declaration protected override IEnumerator<TElement> GetSourceEnumerator(TCollection source) Parameters Type Name Description TCollection source Returns Type Description IEnumerator<TElement> Overrides CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.GetSourceEnumerator(TCollection) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.CollectionFormatterBase-4.html": {
    "href": "api/MessagePack.Formatters.CollectionFormatterBase-4.html",
    "title": "Class CollectionFormatterBase<TElement, TIntermediate, TEnumerator, TCollection> | CodeFactory for Windows",
    "keywords": "Class CollectionFormatterBase<TElement, TIntermediate, TEnumerator, TCollection> Inheritance object CollectionFormatterBase<TElement, TIntermediate, TEnumerator, TCollection> CollectionFormatterBase<TElement, TIntermediate, TCollection> HashSetFormatter<T> LinkedListFormatter<T> QueueFormatter<T> StackFormatter<T> ImmutableHashSetFormatter<T> ImmutableListFormatter<T> ImmutableSortedSetFormatter<T> Implements IMessagePackFormatter<TCollection> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public abstract class CollectionFormatterBase<TElement, TIntermediate, TEnumerator, TCollection> : IMessagePackFormatter<TCollection?> where TEnumerator : IEnumerator<TElement> where TCollection : IEnumerable<TElement> Type Parameters Name Description TElement TIntermediate TEnumerator TCollection Constructors CollectionFormatterBase() Declaration protected CollectionFormatterBase() Methods Add(TIntermediate, int, TElement, MessagePackSerializerOptions) Declaration protected abstract void Add(TIntermediate collection, int index, TElement value, MessagePackSerializerOptions options) Parameters Type Name Description TIntermediate collection int index TElement value MessagePackSerializerOptions options Complete(TIntermediate) Declaration protected abstract TCollection Complete(TIntermediate intermediateCollection) Parameters Type Name Description TIntermediate intermediateCollection Returns Type Description TCollection Create(int, MessagePackSerializerOptions) Declaration protected abstract TIntermediate Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description TIntermediate Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public TCollection? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description TCollection The deserialized value. GetCount(TCollection) Declaration protected virtual int? GetCount(TCollection sequence) Parameters Type Name Description TCollection sequence Returns Type Description int? GetSourceEnumerator(TCollection) Declaration protected abstract TEnumerator GetSourceEnumerator(TCollection source) Parameters Type Name Description TCollection source Returns Type Description TEnumerator Serialize(ref MessagePackWriter, TCollection?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, TCollection? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. TCollection value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ComplexFormatter.html": {
    "href": "api/MessagePack.Formatters.ComplexFormatter.html",
    "title": "Class ComplexFormatter | CodeFactory for Windows",
    "keywords": "Class ComplexFormatter Inheritance object ComplexFormatter Implements IMessagePackFormatter<Complex> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ComplexFormatter : IMessagePackFormatter<Complex> Fields Instance Declaration public static readonly IMessagePackFormatter<Complex> Instance Field Value Type Description IMessagePackFormatter<Complex> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Complex Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Complex. Returns Type Description Complex The deserialized value. Serialize(ref MessagePackWriter, Complex, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Complex value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Complex value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Complex. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ConcurrentBagFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ConcurrentBagFormatter-1.html",
    "title": "Class ConcurrentBagFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ConcurrentBagFormatter<T> Inheritance object CollectionFormatterBase<T, ConcurrentBag<T>, IEnumerator<T>, ConcurrentBag<T>> CollectionFormatterBase<T, ConcurrentBag<T>, ConcurrentBag<T>> CollectionFormatterBase<T, ConcurrentBag<T>> ConcurrentBagFormatter<T> Implements IMessagePackFormatter<ConcurrentBag<T>> Inherited Members CollectionFormatterBase<T, ConcurrentBag<T>, IEnumerator<T>, ConcurrentBag<T>>.Serialize(ref MessagePackWriter, ConcurrentBag<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ConcurrentBag<T>, IEnumerator<T>, ConcurrentBag<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ConcurrentBagFormatter<T> : CollectionFormatterBase<T, ConcurrentBag<T>>, IMessagePackFormatter<ConcurrentBag<T>?> Type Parameters Name Description T Constructors ConcurrentBagFormatter() Declaration public ConcurrentBagFormatter() Methods Add(ConcurrentBag<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ConcurrentBag<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ConcurrentBag<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ConcurrentBag<T>, IEnumerator<T>, ConcurrentBag<T>>.Add(ConcurrentBag<T>, int, T, MessagePackSerializerOptions) Create(int, MessagePackSerializerOptions) Declaration protected override ConcurrentBag<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ConcurrentBag<T> Overrides CollectionFormatterBase<T, ConcurrentBag<T>, IEnumerator<T>, ConcurrentBag<T>>.Create(int, MessagePackSerializerOptions) GetCount(ConcurrentBag<T>) Declaration protected override int? GetCount(ConcurrentBag<T> sequence) Parameters Type Name Description ConcurrentBag<T> sequence Returns Type Description int? Overrides CollectionFormatterBase<T, ConcurrentBag<T>, IEnumerator<T>, ConcurrentBag<T>>.GetCount(ConcurrentBag<T>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ConcurrentDictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.ConcurrentDictionaryFormatter-2.html",
    "title": "Class ConcurrentDictionaryFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class ConcurrentDictionaryFormatter<TKey, TValue> Inheritance object DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ConcurrentDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>, ConcurrentDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>> ConcurrentDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<ConcurrentDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ConcurrentDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, ConcurrentDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ConcurrentDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ConcurrentDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>>, IMessagePackFormatter<ConcurrentDictionary<TKey, TValue>?> where TKey : notnull Type Parameters Name Description TKey TValue Constructors ConcurrentDictionaryFormatter() Declaration public ConcurrentDictionaryFormatter() Methods Add(ConcurrentDictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(ConcurrentDictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description ConcurrentDictionary<TKey, TValue> collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ConcurrentDictionary<TKey, TValue>>.Add(ConcurrentDictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Create(int, MessagePackSerializerOptions) Declaration protected override ConcurrentDictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ConcurrentDictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ConcurrentDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ConcurrentQueueFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ConcurrentQueueFormatter-1.html",
    "title": "Class ConcurrentQueueFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ConcurrentQueueFormatter<T> Inheritance object CollectionFormatterBase<T, ConcurrentQueue<T>, IEnumerator<T>, ConcurrentQueue<T>> CollectionFormatterBase<T, ConcurrentQueue<T>, ConcurrentQueue<T>> CollectionFormatterBase<T, ConcurrentQueue<T>> ConcurrentQueueFormatter<T> Implements IMessagePackFormatter<ConcurrentQueue<T>> Inherited Members CollectionFormatterBase<T, ConcurrentQueue<T>, IEnumerator<T>, ConcurrentQueue<T>>.Serialize(ref MessagePackWriter, ConcurrentQueue<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ConcurrentQueue<T>, IEnumerator<T>, ConcurrentQueue<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ConcurrentQueueFormatter<T> : CollectionFormatterBase<T, ConcurrentQueue<T>>, IMessagePackFormatter<ConcurrentQueue<T>?> Type Parameters Name Description T Constructors ConcurrentQueueFormatter() Declaration public ConcurrentQueueFormatter() Methods Add(ConcurrentQueue<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ConcurrentQueue<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ConcurrentQueue<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ConcurrentQueue<T>, IEnumerator<T>, ConcurrentQueue<T>>.Add(ConcurrentQueue<T>, int, T, MessagePackSerializerOptions) Create(int, MessagePackSerializerOptions) Declaration protected override ConcurrentQueue<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ConcurrentQueue<T> Overrides CollectionFormatterBase<T, ConcurrentQueue<T>, IEnumerator<T>, ConcurrentQueue<T>>.Create(int, MessagePackSerializerOptions) GetCount(ConcurrentQueue<T>) Declaration protected override int? GetCount(ConcurrentQueue<T> sequence) Parameters Type Name Description ConcurrentQueue<T> sequence Returns Type Description int? Overrides CollectionFormatterBase<T, ConcurrentQueue<T>, IEnumerator<T>, ConcurrentQueue<T>>.GetCount(ConcurrentQueue<T>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ConcurrentStackFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ConcurrentStackFormatter-1.html",
    "title": "Class ConcurrentStackFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ConcurrentStackFormatter<T> Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, ConcurrentStack<T>> CollectionFormatterBase<T, T[], ConcurrentStack<T>> ConcurrentStackFormatter<T> Implements IMessagePackFormatter<ConcurrentStack<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, ConcurrentStack<T>>.Serialize(ref MessagePackWriter, ConcurrentStack<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, ConcurrentStack<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ConcurrentStackFormatter<T> : CollectionFormatterBase<T, T[], ConcurrentStack<T>>, IMessagePackFormatter<ConcurrentStack<T>?> Type Parameters Name Description T Constructors ConcurrentStackFormatter() Declaration public ConcurrentStackFormatter() Methods Add(T[], int, T, MessagePackSerializerOptions) Declaration protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description T[] collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ConcurrentStack<T>>.Add(T[], int, T, MessagePackSerializerOptions) Complete(T[]) Declaration protected override ConcurrentStack<T> Complete(T[] intermediateCollection) Parameters Type Name Description T[] intermediateCollection Returns Type Description ConcurrentStack<T> Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ConcurrentStack<T>>.Complete(T[]) Create(int, MessagePackSerializerOptions) Declaration protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description T[] Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ConcurrentStack<T>>.Create(int, MessagePackSerializerOptions) GetCount(ConcurrentStack<T>) Declaration protected override int? GetCount(ConcurrentStack<T> sequence) Parameters Type Name Description ConcurrentStack<T> sequence Returns Type Description int? Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ConcurrentStack<T>>.GetCount(ConcurrentStack<T>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DateTimeArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.DateTimeArrayFormatter.html",
    "title": "Class DateTimeArrayFormatter | CodeFactory for Windows",
    "keywords": "Class DateTimeArrayFormatter Inheritance object DateTimeArrayFormatter Implements IMessagePackFormatter<DateTime[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class DateTimeArrayFormatter : IMessagePackFormatter<DateTime[]?> Fields Instance Declaration public static readonly DateTimeArrayFormatter Instance Field Value Type Description DateTimeArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public DateTime[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description DateTime[] The deserialized value. Serialize(ref MessagePackWriter, DateTime[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, DateTime[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. DateTime[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DateTimeFormatter.html": {
    "href": "api/MessagePack.Formatters.DateTimeFormatter.html",
    "title": "Class DateTimeFormatter | CodeFactory for Windows",
    "keywords": "Class DateTimeFormatter Inheritance object DateTimeFormatter Implements IMessagePackFormatter<DateTime> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class DateTimeFormatter : IMessagePackFormatter<DateTime> Fields Instance Declaration public static readonly DateTimeFormatter Instance Field Value Type Description DateTimeFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public DateTime Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTime. Returns Type Description DateTime The deserialized value. Serialize(ref MessagePackWriter, DateTime, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, DateTime value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. DateTime value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTime. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DateTimeOffsetFormatter.html": {
    "href": "api/MessagePack.Formatters.DateTimeOffsetFormatter.html",
    "title": "Class DateTimeOffsetFormatter | CodeFactory for Windows",
    "keywords": "Class DateTimeOffsetFormatter Inheritance object DateTimeOffsetFormatter Implements IMessagePackFormatter<DateTimeOffset> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class DateTimeOffsetFormatter : IMessagePackFormatter<DateTimeOffset> Fields Instance Declaration public static readonly IMessagePackFormatter<DateTimeOffset> Instance Field Value Type Description IMessagePackFormatter<DateTimeOffset> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public DateTimeOffset Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTimeOffset. Returns Type Description DateTimeOffset The deserialized value. Serialize(ref MessagePackWriter, DateTimeOffset, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, DateTimeOffset value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. DateTimeOffset value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTimeOffset. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DecimalFormatter.html": {
    "href": "api/MessagePack.Formatters.DecimalFormatter.html",
    "title": "Class DecimalFormatter | CodeFactory for Windows",
    "keywords": "Class DecimalFormatter Inheritance object DecimalFormatter Implements IMessagePackFormatter<decimal> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class DecimalFormatter : IMessagePackFormatter<decimal> Fields Instance Declaration public static readonly DecimalFormatter Instance Field Value Type Description DecimalFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public decimal Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type decimal. Returns Type Description decimal The deserialized value. Serialize(ref MessagePackWriter, decimal, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, decimal value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. decimal value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type decimal. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.DictionaryFormatter-2.html",
    "title": "Class DictionaryFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class DictionaryFormatter<TKey, TValue> Inheritance object DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>> DictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<Dictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, Dictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class DictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>>, IMessagePackFormatter<Dictionary<TKey, TValue>?> where TKey : notnull Type Parameters Name Description TKey TValue Constructors DictionaryFormatter() Declaration public DictionaryFormatter() Methods Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(Dictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description Dictionary<TKey, TValue> collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>>.Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Complete(Dictionary<TKey, TValue>) Declaration protected override Dictionary<TKey, TValue> Complete(Dictionary<TKey, TValue> intermediateCollection) Parameters Type Name Description Dictionary<TKey, TValue> intermediateCollection Returns Type Description Dictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>>.Complete(Dictionary<TKey, TValue>) Create(int, MessagePackSerializerOptions) Declaration protected override Dictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description Dictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) GetSourceEnumerator(Dictionary<TKey, TValue>) Declaration protected override Dictionary<TKey, TValue>.Enumerator GetSourceEnumerator(Dictionary<TKey, TValue> source) Parameters Type Name Description Dictionary<TKey, TValue> source Returns Type Description Dictionary<TKey, TValue>.Enumerator Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>>.GetSourceEnumerator(Dictionary<TKey, TValue>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DictionaryFormatterBase-3.html": {
    "href": "api/MessagePack.Formatters.DictionaryFormatterBase-3.html",
    "title": "Class DictionaryFormatterBase<TKey, TValue, TDictionary> | CodeFactory for Windows",
    "keywords": "Class DictionaryFormatterBase<TKey, TValue, TDictionary> Inheritance object DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary> DictionaryFormatterBase<TKey, TValue, TDictionary, TDictionary> DictionaryFormatterBase<TKey, TValue, TDictionary> ConcurrentDictionaryFormatter<TKey, TValue> GenericDictionaryFormatter<TKey, TValue, TDictionary> SortedListFormatter<TKey, TValue> Implements IMessagePackFormatter<TDictionary> Inherited Members DictionaryFormatterBase<TKey, TValue, TDictionary, TDictionary>.GetSourceEnumerator(TDictionary) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Serialize(ref MessagePackWriter, TDictionary, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.GetSourceEnumerator(TDictionary) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Create(int, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Add(TDictionary, int, TKey, TValue, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Complete(TDictionary) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public abstract class DictionaryFormatterBase<TKey, TValue, TDictionary> : DictionaryFormatterBase<TKey, TValue, TDictionary, TDictionary>, IMessagePackFormatter<TDictionary?> where TKey : notnull where TDictionary : class?, IDictionary<TKey, TValue> Type Parameters Name Description TKey TValue TDictionary Constructors DictionaryFormatterBase() Declaration protected DictionaryFormatterBase() Methods Complete(TDictionary) Declaration protected override TDictionary Complete(TDictionary intermediateCollection) Parameters Type Name Description TDictionary intermediateCollection Returns Type Description TDictionary Overrides DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Complete(TDictionary) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DictionaryFormatterBase-4.html": {
    "href": "api/MessagePack.Formatters.DictionaryFormatterBase-4.html",
    "title": "Class DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> | CodeFactory for Windows",
    "keywords": "Class DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> Inheritance object DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary> DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> DictionaryFormatterBase<TKey, TValue, TDictionary> GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> InterfaceDictionaryFormatter<TKey, TValue> InterfaceReadOnlyDictionaryFormatter<TKey, TValue> ReadOnlyDictionaryFormatter<TKey, TValue> InterfaceImmutableDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<TDictionary> Inherited Members DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Serialize(ref MessagePackWriter, TDictionary, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.GetSourceEnumerator(TDictionary) DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Create(int, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Add(TIntermediate, int, TKey, TValue, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Complete(TIntermediate) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public abstract class DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> : DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>, IMessagePackFormatter<TDictionary?> where TDictionary : class?, IEnumerable<KeyValuePair<TKey, TValue>> Type Parameters Name Description TKey TValue TIntermediate TDictionary Constructors DictionaryFormatterBase() Declaration protected DictionaryFormatterBase() Methods GetSourceEnumerator(TDictionary) Declaration protected override IEnumerator<KeyValuePair<TKey, TValue>> GetSourceEnumerator(TDictionary source) Parameters Type Name Description TDictionary source Returns Type Description IEnumerator<KeyValuePair<TKey, TValue>> Overrides DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.GetSourceEnumerator(TDictionary) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DictionaryFormatterBase-5.html": {
    "href": "api/MessagePack.Formatters.DictionaryFormatterBase-5.html",
    "title": "Class DictionaryFormatterBase<TKey, TValue, TIntermediate, TEnumerator, TDictionary> | CodeFactory for Windows",
    "keywords": "Class DictionaryFormatterBase<TKey, TValue, TIntermediate, TEnumerator, TDictionary> Inheritance object DictionaryFormatterBase<TKey, TValue, TIntermediate, TEnumerator, TDictionary> DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> DictionaryFormatter<TKey, TValue> SortedDictionaryFormatter<TKey, TValue> ImmutableDictionaryFormatter<TKey, TValue> ImmutableSortedDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<TDictionary> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public abstract class DictionaryFormatterBase<TKey, TValue, TIntermediate, TEnumerator, TDictionary> : IMessagePackFormatter<TDictionary?> where TEnumerator : IEnumerator<KeyValuePair<TKey, TValue>> where TDictionary : class?, IEnumerable<KeyValuePair<TKey, TValue>> Type Parameters Name Description TKey TValue TIntermediate TEnumerator TDictionary Constructors DictionaryFormatterBase() Declaration protected DictionaryFormatterBase() Methods Add(TIntermediate, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected abstract void Add(TIntermediate collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description TIntermediate collection int index TKey key TValue value MessagePackSerializerOptions options Complete(TIntermediate) Declaration protected abstract TDictionary Complete(TIntermediate intermediateCollection) Parameters Type Name Description TIntermediate intermediateCollection Returns Type Description TDictionary Create(int, MessagePackSerializerOptions) Declaration protected abstract TIntermediate Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description TIntermediate Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public TDictionary? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description TDictionary The deserialized value. GetSourceEnumerator(TDictionary) Declaration protected abstract TEnumerator GetSourceEnumerator(TDictionary source) Parameters Type Name Description TDictionary source Returns Type Description TEnumerator Serialize(ref MessagePackWriter, TDictionary?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, TDictionary? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. TDictionary value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DoubleArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.DoubleArrayFormatter.html",
    "title": "Class DoubleArrayFormatter | CodeFactory for Windows",
    "keywords": "Class DoubleArrayFormatter Inheritance object DoubleArrayFormatter Implements IMessagePackFormatter<double[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class DoubleArrayFormatter : IMessagePackFormatter<double[]?> Fields Instance Declaration public static readonly DoubleArrayFormatter Instance Field Value Type Description DoubleArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public double[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description double[] The deserialized value. Serialize(ref MessagePackWriter, double[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, double[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. double[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DoubleFormatter.html": {
    "href": "api/MessagePack.Formatters.DoubleFormatter.html",
    "title": "Class DoubleFormatter | CodeFactory for Windows",
    "keywords": "Class DoubleFormatter Inheritance object DoubleFormatter Implements IMessagePackFormatter<double> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class DoubleFormatter : IMessagePackFormatter<double> Fields Instance Declaration public static readonly DoubleFormatter Instance Field Value Type Description DoubleFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public double Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type double. Returns Type Description double The deserialized value. Serialize(ref MessagePackWriter, double, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, double value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. double value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type double. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.DynamicObjectTypeFallbackFormatter.html": {
    "href": "api/MessagePack.Formatters.DynamicObjectTypeFallbackFormatter.html",
    "title": "Class DynamicObjectTypeFallbackFormatter | CodeFactory for Windows",
    "keywords": "Class DynamicObjectTypeFallbackFormatter This formatter can serialize any value whose static type is object for which another resolver can provide a formatter for the runtime type. Its deserialization is limited to forwarding all calls to the PrimitiveObjectFormatter. Inheritance object DynamicObjectTypeFallbackFormatter Implements IMessagePackFormatter<object> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class DynamicObjectTypeFallbackFormatter : IMessagePackFormatter<object?> Fields Instance Declaration public static readonly IMessagePackFormatter<object?> Instance Field Value Type Description IMessagePackFormatter<object> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public object? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object. Returns Type Description object The deserialized value. Serialize(ref MessagePackWriter, object?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, object? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. object value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.EnumAsStringFormatter-1.html": {
    "href": "api/MessagePack.Formatters.EnumAsStringFormatter-1.html",
    "title": "Class EnumAsStringFormatter<T> | CodeFactory for Windows",
    "keywords": "Class EnumAsStringFormatter<T> Inheritance object EnumAsStringFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class EnumAsStringFormatter<T> : IMessagePackFormatter<T> where T : struct, Enum Type Parameters Name Description T Constructors EnumAsStringFormatter() Declaration public EnumAsStringFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T The deserialized value. Serialize(ref MessagePackWriter, T, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ExpandoObjectFormatter.html": {
    "href": "api/MessagePack.Formatters.ExpandoObjectFormatter.html",
    "title": "Class ExpandoObjectFormatter | CodeFactory for Windows",
    "keywords": "Class ExpandoObjectFormatter Inheritance object ExpandoObjectFormatter Implements IMessagePackFormatter<ExpandoObject> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public class ExpandoObjectFormatter : IMessagePackFormatter<ExpandoObject?> Fields Instance Declaration public static readonly IMessagePackFormatter<ExpandoObject?> Instance Field Value Type Description IMessagePackFormatter<ExpandoObject> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ExpandoObject? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ExpandoObject. Returns Type Description ExpandoObject The deserialized value. Serialize(ref MessagePackWriter, ExpandoObject?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ExpandoObject? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ExpandoObject value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ExpandoObject. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceByteBlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceByteBlockFormatter.html",
    "title": "Class ForceByteBlockFormatter | CodeFactory for Windows",
    "keywords": "Class ForceByteBlockFormatter Inheritance object ForceByteBlockFormatter Implements IMessagePackFormatter<byte> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceByteBlockFormatter : IMessagePackFormatter<byte> Fields Instance Declaration public static readonly ForceByteBlockFormatter Instance Field Value Type Description ForceByteBlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public byte Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type byte. Returns Type Description byte The deserialized value. Serialize(ref MessagePackWriter, byte, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, byte value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. byte value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type byte. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceInt16BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt16BlockArrayFormatter.html",
    "title": "Class ForceInt16BlockArrayFormatter | CodeFactory for Windows",
    "keywords": "Class ForceInt16BlockArrayFormatter Inheritance object ForceInt16BlockArrayFormatter Implements IMessagePackFormatter<short[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceInt16BlockArrayFormatter : IMessagePackFormatter<short[]?> Fields Instance Declaration public static readonly ForceInt16BlockArrayFormatter Instance Field Value Type Description ForceInt16BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public short[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description short[] The deserialized value. Serialize(ref MessagePackWriter, short[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, short[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. short[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceInt16BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt16BlockFormatter.html",
    "title": "Class ForceInt16BlockFormatter | CodeFactory for Windows",
    "keywords": "Class ForceInt16BlockFormatter Inheritance object ForceInt16BlockFormatter Implements IMessagePackFormatter<short> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceInt16BlockFormatter : IMessagePackFormatter<short> Fields Instance Declaration public static readonly ForceInt16BlockFormatter Instance Field Value Type Description ForceInt16BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public short Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type short. Returns Type Description short The deserialized value. Serialize(ref MessagePackWriter, short, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, short value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. short value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type short. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceInt32BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt32BlockArrayFormatter.html",
    "title": "Class ForceInt32BlockArrayFormatter | CodeFactory for Windows",
    "keywords": "Class ForceInt32BlockArrayFormatter Inheritance object ForceInt32BlockArrayFormatter Implements IMessagePackFormatter<int[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceInt32BlockArrayFormatter : IMessagePackFormatter<int[]?> Fields Instance Declaration public static readonly ForceInt32BlockArrayFormatter Instance Field Value Type Description ForceInt32BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public int[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description int[] The deserialized value. Serialize(ref MessagePackWriter, int[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, int[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. int[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceInt32BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt32BlockFormatter.html",
    "title": "Class ForceInt32BlockFormatter | CodeFactory for Windows",
    "keywords": "Class ForceInt32BlockFormatter Inheritance object ForceInt32BlockFormatter Implements IMessagePackFormatter<int> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceInt32BlockFormatter : IMessagePackFormatter<int> Fields Instance Declaration public static readonly ForceInt32BlockFormatter Instance Field Value Type Description ForceInt32BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public int Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int. Returns Type Description int The deserialized value. Serialize(ref MessagePackWriter, int, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, int value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. int value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceInt64BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt64BlockArrayFormatter.html",
    "title": "Class ForceInt64BlockArrayFormatter | CodeFactory for Windows",
    "keywords": "Class ForceInt64BlockArrayFormatter Inheritance object ForceInt64BlockArrayFormatter Implements IMessagePackFormatter<long[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceInt64BlockArrayFormatter : IMessagePackFormatter<long[]?> Fields Instance Declaration public static readonly ForceInt64BlockArrayFormatter Instance Field Value Type Description ForceInt64BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public long[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description long[] The deserialized value. Serialize(ref MessagePackWriter, long[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, long[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. long[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceInt64BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt64BlockFormatter.html",
    "title": "Class ForceInt64BlockFormatter | CodeFactory for Windows",
    "keywords": "Class ForceInt64BlockFormatter Inheritance object ForceInt64BlockFormatter Implements IMessagePackFormatter<long> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceInt64BlockFormatter : IMessagePackFormatter<long> Fields Instance Declaration public static readonly ForceInt64BlockFormatter Instance Field Value Type Description ForceInt64BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public long Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type long. Returns Type Description long The deserialized value. Serialize(ref MessagePackWriter, long, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, long value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. long value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type long. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceSByteBlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceSByteBlockArrayFormatter.html",
    "title": "Class ForceSByteBlockArrayFormatter | CodeFactory for Windows",
    "keywords": "Class ForceSByteBlockArrayFormatter Inheritance object ForceSByteBlockArrayFormatter Implements IMessagePackFormatter<sbyte[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceSByteBlockArrayFormatter : IMessagePackFormatter<sbyte[]?> Fields Instance Declaration public static readonly ForceSByteBlockArrayFormatter Instance Field Value Type Description ForceSByteBlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public sbyte[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description sbyte[] The deserialized value. Serialize(ref MessagePackWriter, sbyte[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, sbyte[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. sbyte[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceSByteBlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceSByteBlockFormatter.html",
    "title": "Class ForceSByteBlockFormatter | CodeFactory for Windows",
    "keywords": "Class ForceSByteBlockFormatter Inheritance object ForceSByteBlockFormatter Implements IMessagePackFormatter<sbyte> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceSByteBlockFormatter : IMessagePackFormatter<sbyte> Fields Instance Declaration public static readonly ForceSByteBlockFormatter Instance Field Value Type Description ForceSByteBlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public sbyte Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type sbyte. Returns Type Description sbyte The deserialized value. Serialize(ref MessagePackWriter, sbyte, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, sbyte value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. sbyte value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type sbyte. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceTypelessFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ForceTypelessFormatter-1.html",
    "title": "Class ForceTypelessFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ForceTypelessFormatter<T> Force serialize object as typeless. Inheritance object ForceTypelessFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceTypelessFormatter<T> : IMessagePackFormatter<T?> Type Parameters Name Description T Constructors ForceTypelessFormatter() Declaration public ForceTypelessFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceUInt16BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt16BlockArrayFormatter.html",
    "title": "Class ForceUInt16BlockArrayFormatter | CodeFactory for Windows",
    "keywords": "Class ForceUInt16BlockArrayFormatter Inheritance object ForceUInt16BlockArrayFormatter Implements IMessagePackFormatter<ushort[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceUInt16BlockArrayFormatter : IMessagePackFormatter<ushort[]?> Fields Instance Declaration public static readonly ForceUInt16BlockArrayFormatter Instance Field Value Type Description ForceUInt16BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ushort[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description ushort[] The deserialized value. Serialize(ref MessagePackWriter, ushort[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ushort[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ushort[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceUInt16BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt16BlockFormatter.html",
    "title": "Class ForceUInt16BlockFormatter | CodeFactory for Windows",
    "keywords": "Class ForceUInt16BlockFormatter Inheritance object ForceUInt16BlockFormatter Implements IMessagePackFormatter<ushort> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceUInt16BlockFormatter : IMessagePackFormatter<ushort> Fields Instance Declaration public static readonly ForceUInt16BlockFormatter Instance Field Value Type Description ForceUInt16BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ushort Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ushort. Returns Type Description ushort The deserialized value. Serialize(ref MessagePackWriter, ushort, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ushort value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ushort value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ushort. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceUInt32BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt32BlockArrayFormatter.html",
    "title": "Class ForceUInt32BlockArrayFormatter | CodeFactory for Windows",
    "keywords": "Class ForceUInt32BlockArrayFormatter Inheritance object ForceUInt32BlockArrayFormatter Implements IMessagePackFormatter<uint[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceUInt32BlockArrayFormatter : IMessagePackFormatter<uint[]?> Fields Instance Declaration public static readonly ForceUInt32BlockArrayFormatter Instance Field Value Type Description ForceUInt32BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public uint[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description uint[] The deserialized value. Serialize(ref MessagePackWriter, uint[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, uint[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. uint[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceUInt32BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt32BlockFormatter.html",
    "title": "Class ForceUInt32BlockFormatter | CodeFactory for Windows",
    "keywords": "Class ForceUInt32BlockFormatter Inheritance object ForceUInt32BlockFormatter Implements IMessagePackFormatter<uint> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceUInt32BlockFormatter : IMessagePackFormatter<uint> Fields Instance Declaration public static readonly ForceUInt32BlockFormatter Instance Field Value Type Description ForceUInt32BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public uint Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type uint. Returns Type Description uint The deserialized value. Serialize(ref MessagePackWriter, uint, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, uint value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. uint value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type uint. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceUInt64BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt64BlockArrayFormatter.html",
    "title": "Class ForceUInt64BlockArrayFormatter | CodeFactory for Windows",
    "keywords": "Class ForceUInt64BlockArrayFormatter Inheritance object ForceUInt64BlockArrayFormatter Implements IMessagePackFormatter<ulong[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceUInt64BlockArrayFormatter : IMessagePackFormatter<ulong[]?> Fields Instance Declaration public static readonly ForceUInt64BlockArrayFormatter Instance Field Value Type Description ForceUInt64BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ulong[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description ulong[] The deserialized value. Serialize(ref MessagePackWriter, ulong[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ulong[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ulong[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ForceUInt64BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt64BlockFormatter.html",
    "title": "Class ForceUInt64BlockFormatter | CodeFactory for Windows",
    "keywords": "Class ForceUInt64BlockFormatter Inheritance object ForceUInt64BlockFormatter Implements IMessagePackFormatter<ulong> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ForceUInt64BlockFormatter : IMessagePackFormatter<ulong> Fields Instance Declaration public static readonly ForceUInt64BlockFormatter Instance Field Value Type Description ForceUInt64BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ulong Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ulong. Returns Type Description ulong The deserialized value. Serialize(ref MessagePackWriter, ulong, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ulong value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ulong value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ulong. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.FourDimensionalArrayFormatter-1.html": {
    "href": "api/MessagePack.Formatters.FourDimensionalArrayFormatter-1.html",
    "title": "Class FourDimensionalArrayFormatter<T> | CodeFactory for Windows",
    "keywords": "Class FourDimensionalArrayFormatter<T> Inheritance object FourDimensionalArrayFormatter<T> Implements IMessagePackFormatter<T[,,,]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class FourDimensionalArrayFormatter<T> : IMessagePackFormatter<T[,,,]?> Type Parameters Name Description T Constructors FourDimensionalArrayFormatter() Declaration public FourDimensionalArrayFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T[,,,]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T[,,,] The deserialized value. Serialize(ref MessagePackWriter, T[,,,]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T[,,,]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T[,,,] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.GenericCollectionFormatter-2.html": {
    "href": "api/MessagePack.Formatters.GenericCollectionFormatter-2.html",
    "title": "Class GenericCollectionFormatter<TElement, TCollection> | CodeFactory for Windows",
    "keywords": "Class GenericCollectionFormatter<TElement, TCollection> Inheritance object CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection> CollectionFormatterBase<TElement, TCollection, TCollection> CollectionFormatterBase<TElement, TCollection> GenericCollectionFormatter<TElement, TCollection> Implements IMessagePackFormatter<TCollection> Inherited Members CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Serialize(ref MessagePackWriter, TCollection, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class GenericCollectionFormatter<TElement, TCollection> : CollectionFormatterBase<TElement, TCollection>, IMessagePackFormatter<TCollection?> where TCollection : ICollection<TElement>, new() Type Parameters Name Description TElement TCollection Constructors GenericCollectionFormatter() Declaration public GenericCollectionFormatter() Methods Add(TCollection, int, TElement, MessagePackSerializerOptions) Declaration protected override void Add(TCollection collection, int index, TElement value, MessagePackSerializerOptions options) Parameters Type Name Description TCollection collection int index TElement value MessagePackSerializerOptions options Overrides CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Add(TCollection, int, TElement, MessagePackSerializerOptions) Create(int, MessagePackSerializerOptions) Declaration protected override TCollection Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description TCollection Overrides CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.GenericDictionaryFormatter-3.html": {
    "href": "api/MessagePack.Formatters.GenericDictionaryFormatter-3.html",
    "title": "Class GenericDictionaryFormatter<TKey, TValue, TDictionary> | CodeFactory for Windows",
    "keywords": "Class GenericDictionaryFormatter<TKey, TValue, TDictionary> Inheritance object DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary> DictionaryFormatterBase<TKey, TValue, TDictionary, TDictionary> DictionaryFormatterBase<TKey, TValue, TDictionary> GenericDictionaryFormatter<TKey, TValue, TDictionary> Implements IMessagePackFormatter<TDictionary> Inherited Members DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Serialize(ref MessagePackWriter, TDictionary, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class GenericDictionaryFormatter<TKey, TValue, TDictionary> : DictionaryFormatterBase<TKey, TValue, TDictionary>, IMessagePackFormatter<TDictionary?> where TKey : notnull where TDictionary : class?, IDictionary<TKey, TValue>, new() Type Parameters Name Description TKey TValue TDictionary Constructors GenericDictionaryFormatter() Declaration public GenericDictionaryFormatter() Methods Add(TDictionary, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(TDictionary collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description TDictionary collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Add(TDictionary, int, TKey, TValue, MessagePackSerializerOptions) Create(int, MessagePackSerializerOptions) Declaration protected override TDictionary Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description TDictionary Overrides DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.GenericEnumFormatter-1.html": {
    "href": "api/MessagePack.Formatters.GenericEnumFormatter-1.html",
    "title": "Class GenericEnumFormatter<T> | CodeFactory for Windows",
    "keywords": "Class GenericEnumFormatter<T> Inheritance object GenericEnumFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class GenericEnumFormatter<T> : IMessagePackFormatter<T> where T : struct, Enum Type Parameters Name Description T Constructors GenericEnumFormatter() Declaration public GenericEnumFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T The deserialized value. Serialize(ref MessagePackWriter, T, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.GenericEnumerableFormatter-2.html": {
    "href": "api/MessagePack.Formatters.GenericEnumerableFormatter-2.html",
    "title": "Class GenericEnumerableFormatter<TElement, TCollection> | CodeFactory for Windows",
    "keywords": "Class GenericEnumerableFormatter<TElement, TCollection> Inheritance object CollectionFormatterBase<TElement, TElement[], IEnumerator<TElement>, TCollection> CollectionFormatterBase<TElement, TElement[], TCollection> GenericEnumerableFormatter<TElement, TCollection> Implements IMessagePackFormatter<TCollection> Inherited Members CollectionFormatterBase<TElement, TElement[], IEnumerator<TElement>, TCollection>.Serialize(ref MessagePackWriter, TCollection, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TElement[], IEnumerator<TElement>, TCollection>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class GenericEnumerableFormatter<TElement, TCollection> : CollectionFormatterBase<TElement, TElement[], TCollection>, IMessagePackFormatter<TCollection?> where TCollection : IEnumerable<TElement> Type Parameters Name Description TElement TCollection Constructors GenericEnumerableFormatter() Declaration public GenericEnumerableFormatter() Methods Add(TElement[], int, TElement, MessagePackSerializerOptions) Declaration protected override void Add(TElement[] collection, int index, TElement value, MessagePackSerializerOptions options) Parameters Type Name Description TElement[] collection int index TElement value MessagePackSerializerOptions options Overrides CollectionFormatterBase<TElement, TElement[], IEnumerator<TElement>, TCollection>.Add(TElement[], int, TElement, MessagePackSerializerOptions) Complete(TElement[]) Declaration protected override TCollection Complete(TElement[] intermediateCollection) Parameters Type Name Description TElement[] intermediateCollection Returns Type Description TCollection Overrides CollectionFormatterBase<TElement, TElement[], IEnumerator<TElement>, TCollection>.Complete(TElement[]) Create(int, MessagePackSerializerOptions) Declaration protected override TElement[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description TElement[] Overrides CollectionFormatterBase<TElement, TElement[], IEnumerator<TElement>, TCollection>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.GenericReadOnlyDictionaryFormatter-3.html": {
    "href": "api/MessagePack.Formatters.GenericReadOnlyDictionaryFormatter-3.html",
    "title": "Class GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> | CodeFactory for Windows",
    "keywords": "Class GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> Inheritance object DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary> DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, TDictionary> GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> Implements IMessagePackFormatter<TDictionary> Inherited Members DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Serialize(ref MessagePackWriter, TDictionary, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> : DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, TDictionary>, IMessagePackFormatter<TDictionary?> where TKey : notnull where TDictionary : class?, IReadOnlyDictionary<TKey, TValue> Type Parameters Name Description TKey TValue TDictionary Constructors GenericReadOnlyDictionaryFormatter() Declaration public GenericReadOnlyDictionaryFormatter() Methods Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(Dictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description Dictionary<TKey, TValue> collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Complete(Dictionary<TKey, TValue>) Declaration protected override TDictionary Complete(Dictionary<TKey, TValue> intermediateCollection) Parameters Type Name Description Dictionary<TKey, TValue> intermediateCollection Returns Type Description TDictionary Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Complete(Dictionary<TKey, TValue>) Create(int, MessagePackSerializerOptions) Declaration protected override Dictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description Dictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.GuidFormatter.html": {
    "href": "api/MessagePack.Formatters.GuidFormatter.html",
    "title": "Class GuidFormatter | CodeFactory for Windows",
    "keywords": "Class GuidFormatter Inheritance object GuidFormatter Implements IMessagePackFormatter<Guid> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class GuidFormatter : IMessagePackFormatter<Guid> Fields Instance Declaration public static readonly IMessagePackFormatter<Guid> Instance Field Value Type Description IMessagePackFormatter<Guid> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Guid Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Guid. Returns Type Description Guid The deserialized value. Serialize(ref MessagePackWriter, Guid, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Guid value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Guid value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Guid. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.HashSetFormatter-1.html": {
    "href": "api/MessagePack.Formatters.HashSetFormatter-1.html",
    "title": "Class HashSetFormatter<T> | CodeFactory for Windows",
    "keywords": "Class HashSetFormatter<T> Inheritance object CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>> HashSetFormatter<T> Implements IMessagePackFormatter<HashSet<T>> Inherited Members CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>.Serialize(ref MessagePackWriter, HashSet<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class HashSetFormatter<T> : CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>, IMessagePackFormatter<HashSet<T>?> Type Parameters Name Description T Constructors HashSetFormatter() Declaration public HashSetFormatter() Methods Add(HashSet<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(HashSet<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description HashSet<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>.Add(HashSet<T>, int, T, MessagePackSerializerOptions) Complete(HashSet<T>) Declaration protected override HashSet<T> Complete(HashSet<T> intermediateCollection) Parameters Type Name Description HashSet<T> intermediateCollection Returns Type Description HashSet<T> Overrides CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>.Complete(HashSet<T>) Create(int, MessagePackSerializerOptions) Declaration protected override HashSet<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description HashSet<T> Overrides CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>.Create(int, MessagePackSerializerOptions) GetCount(HashSet<T>) Declaration protected override int? GetCount(HashSet<T> sequence) Parameters Type Name Description HashSet<T> sequence Returns Type Description int? Overrides CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>.GetCount(HashSet<T>) GetSourceEnumerator(HashSet<T>) Declaration protected override HashSet<T>.Enumerator GetSourceEnumerator(HashSet<T> source) Parameters Type Name Description HashSet<T> source Returns Type Description HashSet<T>.Enumerator Overrides CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>.GetSourceEnumerator(HashSet<T>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.IMessagePackFormatter-1.html": {
    "href": "api/MessagePack.Formatters.IMessagePackFormatter-1.html",
    "title": "Interface IMessagePackFormatter<T> | CodeFactory for Windows",
    "keywords": "Interface IMessagePackFormatter<T> The contract for serialization of some specific type. Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public interface IMessagePackFormatter<T> Type Parameters Name Description T The type to be serialized or deserialized. Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration T Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T The deserialized value. Serialize(ref MessagePackWriter, T, MessagePackSerializerOptions) Serializes a value. Declaration void Serialize(ref MessagePackWriter writer, T value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.IgnoreFormatter-1.html": {
    "href": "api/MessagePack.Formatters.IgnoreFormatter-1.html",
    "title": "Class IgnoreFormatter<T> | CodeFactory for Windows",
    "keywords": "Class IgnoreFormatter<T> Inheritance object IgnoreFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class IgnoreFormatter<T> : IMessagePackFormatter<T?> Type Parameters Name Description T Constructors IgnoreFormatter() Declaration public IgnoreFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.Int16ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.Int16ArrayFormatter.html",
    "title": "Class Int16ArrayFormatter | CodeFactory for Windows",
    "keywords": "Class Int16ArrayFormatter Inheritance object Int16ArrayFormatter Implements IMessagePackFormatter<short[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class Int16ArrayFormatter : IMessagePackFormatter<short[]?> Fields Instance Declaration public static readonly Int16ArrayFormatter Instance Field Value Type Description Int16ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public short[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description short[] The deserialized value. Serialize(ref MessagePackWriter, short[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, short[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. short[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.Int16Formatter.html": {
    "href": "api/MessagePack.Formatters.Int16Formatter.html",
    "title": "Class Int16Formatter | CodeFactory for Windows",
    "keywords": "Class Int16Formatter Inheritance object Int16Formatter Implements IMessagePackFormatter<short> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class Int16Formatter : IMessagePackFormatter<short> Fields Instance Declaration public static readonly Int16Formatter Instance Field Value Type Description Int16Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public short Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type short. Returns Type Description short The deserialized value. Serialize(ref MessagePackWriter, short, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, short value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. short value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type short. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.Int32ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.Int32ArrayFormatter.html",
    "title": "Class Int32ArrayFormatter | CodeFactory for Windows",
    "keywords": "Class Int32ArrayFormatter Inheritance object Int32ArrayFormatter Implements IMessagePackFormatter<int[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class Int32ArrayFormatter : IMessagePackFormatter<int[]?> Fields Instance Declaration public static readonly Int32ArrayFormatter Instance Field Value Type Description Int32ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public int[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description int[] The deserialized value. Serialize(ref MessagePackWriter, int[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, int[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. int[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.Int32Formatter.html": {
    "href": "api/MessagePack.Formatters.Int32Formatter.html",
    "title": "Class Int32Formatter | CodeFactory for Windows",
    "keywords": "Class Int32Formatter Inheritance object Int32Formatter Implements IMessagePackFormatter<int> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class Int32Formatter : IMessagePackFormatter<int> Fields Instance Declaration public static readonly Int32Formatter Instance Field Value Type Description Int32Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public int Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int. Returns Type Description int The deserialized value. Serialize(ref MessagePackWriter, int, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, int value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. int value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.Int64ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.Int64ArrayFormatter.html",
    "title": "Class Int64ArrayFormatter | CodeFactory for Windows",
    "keywords": "Class Int64ArrayFormatter Inheritance object Int64ArrayFormatter Implements IMessagePackFormatter<long[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class Int64ArrayFormatter : IMessagePackFormatter<long[]?> Fields Instance Declaration public static readonly Int64ArrayFormatter Instance Field Value Type Description Int64ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public long[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description long[] The deserialized value. Serialize(ref MessagePackWriter, long[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, long[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. long[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.Int64Formatter.html": {
    "href": "api/MessagePack.Formatters.Int64Formatter.html",
    "title": "Class Int64Formatter | CodeFactory for Windows",
    "keywords": "Class Int64Formatter Inheritance object Int64Formatter Implements IMessagePackFormatter<long> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class Int64Formatter : IMessagePackFormatter<long> Fields Instance Declaration public static readonly Int64Formatter Instance Field Value Type Description Int64Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public long Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type long. Returns Type Description long The deserialized value. Serialize(ref MessagePackWriter, long, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, long value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. long value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type long. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceCollectionFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceCollectionFormatter-1.html",
    "title": "Class InterfaceCollectionFormatter<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceCollectionFormatter<T> Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, ICollection<T>> CollectionFormatterBase<T, T[], ICollection<T>> InterfaceCollectionFormatter<T> Implements IMessagePackFormatter<ICollection<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, ICollection<T>>.Serialize(ref MessagePackWriter, ICollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, ICollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax [Obsolete(\"Use InterfaceCollectionFormatter2 instead.\")] public sealed class InterfaceCollectionFormatter<T> : CollectionFormatterBase<T, T[], ICollection<T>>, IMessagePackFormatter<ICollection<T>?> Type Parameters Name Description T Constructors InterfaceCollectionFormatter() Declaration public InterfaceCollectionFormatter() Methods Add(T[], int, T, MessagePackSerializerOptions) Declaration protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description T[] collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ICollection<T>>.Add(T[], int, T, MessagePackSerializerOptions) Complete(T[]) Declaration protected override ICollection<T> Complete(T[] intermediateCollection) Parameters Type Name Description T[] intermediateCollection Returns Type Description ICollection<T> Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ICollection<T>>.Complete(T[]) Create(int, MessagePackSerializerOptions) Declaration protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description T[] Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ICollection<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceCollectionFormatter2-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceCollectionFormatter2-1.html",
    "title": "Class InterfaceCollectionFormatter2<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceCollectionFormatter2<T> Inheritance object CollectionFormatterBase<T, List<T>, IEnumerator<T>, ICollection<T>> CollectionFormatterBase<T, List<T>, ICollection<T>> InterfaceCollectionFormatter2<T> Implements IMessagePackFormatter<ICollection<T>> Inherited Members CollectionFormatterBase<T, List<T>, IEnumerator<T>, ICollection<T>>.Serialize(ref MessagePackWriter, ICollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, List<T>, IEnumerator<T>, ICollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class InterfaceCollectionFormatter2<T> : CollectionFormatterBase<T, List<T>, ICollection<T>>, IMessagePackFormatter<ICollection<T>?> Type Parameters Name Description T Constructors InterfaceCollectionFormatter2() Declaration public InterfaceCollectionFormatter2() Methods Add(List<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(List<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description List<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, List<T>, IEnumerator<T>, ICollection<T>>.Add(List<T>, int, T, MessagePackSerializerOptions) Complete(List<T>) Declaration protected override ICollection<T> Complete(List<T> intermediateCollection) Parameters Type Name Description List<T> intermediateCollection Returns Type Description ICollection<T> Overrides CollectionFormatterBase<T, List<T>, IEnumerator<T>, ICollection<T>>.Complete(List<T>) Create(int, MessagePackSerializerOptions) Declaration protected override List<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description List<T> Overrides CollectionFormatterBase<T, List<T>, IEnumerator<T>, ICollection<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceDictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.InterfaceDictionaryFormatter-2.html",
    "title": "Class InterfaceDictionaryFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class InterfaceDictionaryFormatter<TKey, TValue> Inheritance object DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IDictionary<TKey, TValue>> InterfaceDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<IDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, IDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class InterfaceDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IDictionary<TKey, TValue>>, IMessagePackFormatter<IDictionary<TKey, TValue>?> where TKey : notnull Type Parameters Name Description TKey TValue Constructors InterfaceDictionaryFormatter() Declaration public InterfaceDictionaryFormatter() Methods Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(Dictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description Dictionary<TKey, TValue> collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>>.Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Complete(Dictionary<TKey, TValue>) Declaration protected override IDictionary<TKey, TValue> Complete(Dictionary<TKey, TValue> intermediateCollection) Parameters Type Name Description Dictionary<TKey, TValue> intermediateCollection Returns Type Description IDictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>>.Complete(Dictionary<TKey, TValue>) Create(int, MessagePackSerializerOptions) Declaration protected override Dictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description Dictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceEnumerableFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceEnumerableFormatter-1.html",
    "title": "Class InterfaceEnumerableFormatter<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceEnumerableFormatter<T> Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, IEnumerable<T>> CollectionFormatterBase<T, T[], IEnumerable<T>> InterfaceEnumerableFormatter<T> Implements IMessagePackFormatter<IEnumerable<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, IEnumerable<T>>.Serialize(ref MessagePackWriter, IEnumerable<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IEnumerable<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class InterfaceEnumerableFormatter<T> : CollectionFormatterBase<T, T[], IEnumerable<T>>, IMessagePackFormatter<IEnumerable<T>?> Type Parameters Name Description T Constructors InterfaceEnumerableFormatter() Declaration public InterfaceEnumerableFormatter() Methods Add(T[], int, T, MessagePackSerializerOptions) Declaration protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description T[] collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IEnumerable<T>>.Add(T[], int, T, MessagePackSerializerOptions) Complete(T[]) Declaration protected override IEnumerable<T> Complete(T[] intermediateCollection) Parameters Type Name Description T[] intermediateCollection Returns Type Description IEnumerable<T> Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IEnumerable<T>>.Complete(T[]) Create(int, MessagePackSerializerOptions) Declaration protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description T[] Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IEnumerable<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceGroupingFormatter-2.html": {
    "href": "api/MessagePack.Formatters.InterfaceGroupingFormatter-2.html",
    "title": "Class InterfaceGroupingFormatter<TKey, TElement> | CodeFactory for Windows",
    "keywords": "Class InterfaceGroupingFormatter<TKey, TElement> Inheritance object InterfaceGroupingFormatter<TKey, TElement> Implements IMessagePackFormatter<IGrouping<TKey, TElement>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class InterfaceGroupingFormatter<TKey, TElement> : IMessagePackFormatter<IGrouping<TKey, TElement>?> Type Parameters Name Description TKey TElement Constructors InterfaceGroupingFormatter() Declaration public InterfaceGroupingFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public IGrouping<TKey, TElement>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Linq.IGrouping{`0,`1}. Returns Type Description IGrouping<TKey, TElement> The deserialized value. Serialize(ref MessagePackWriter, IGrouping<TKey, TElement>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, IGrouping<TKey, TElement>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. IGrouping<TKey, TElement> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Linq.IGrouping{`0,`1}. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceListFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceListFormatter-1.html",
    "title": "Class InterfaceListFormatter<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceListFormatter<T> Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, IList<T>> CollectionFormatterBase<T, T[], IList<T>> InterfaceListFormatter<T> Implements IMessagePackFormatter<IList<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, IList<T>>.Serialize(ref MessagePackWriter, IList<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IList<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax [Obsolete(\"Use InterfaceListFormatter2 instead.\")] public sealed class InterfaceListFormatter<T> : CollectionFormatterBase<T, T[], IList<T>>, IMessagePackFormatter<IList<T>?> Type Parameters Name Description T Constructors InterfaceListFormatter() Declaration public InterfaceListFormatter() Methods Add(T[], int, T, MessagePackSerializerOptions) Declaration protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description T[] collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IList<T>>.Add(T[], int, T, MessagePackSerializerOptions) Complete(T[]) Declaration protected override IList<T> Complete(T[] intermediateCollection) Parameters Type Name Description T[] intermediateCollection Returns Type Description IList<T> Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IList<T>>.Complete(T[]) Create(int, MessagePackSerializerOptions) Declaration protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description T[] Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IList<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceListFormatter2-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceListFormatter2-1.html",
    "title": "Class InterfaceListFormatter2<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceListFormatter2<T> Inheritance object CollectionFormatterBase<T, List<T>, IEnumerator<T>, IList<T>> CollectionFormatterBase<T, List<T>, IList<T>> InterfaceListFormatter2<T> Implements IMessagePackFormatter<IList<T>> Inherited Members CollectionFormatterBase<T, List<T>, IEnumerator<T>, IList<T>>.Serialize(ref MessagePackWriter, IList<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, List<T>, IEnumerator<T>, IList<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class InterfaceListFormatter2<T> : CollectionFormatterBase<T, List<T>, IList<T>>, IMessagePackFormatter<IList<T>?> Type Parameters Name Description T Constructors InterfaceListFormatter2() Declaration public InterfaceListFormatter2() Methods Add(List<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(List<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description List<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, List<T>, IEnumerator<T>, IList<T>>.Add(List<T>, int, T, MessagePackSerializerOptions) Complete(List<T>) Declaration protected override IList<T> Complete(List<T> intermediateCollection) Parameters Type Name Description List<T> intermediateCollection Returns Type Description IList<T> Overrides CollectionFormatterBase<T, List<T>, IEnumerator<T>, IList<T>>.Complete(List<T>) Create(int, MessagePackSerializerOptions) Declaration protected override List<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description List<T> Overrides CollectionFormatterBase<T, List<T>, IEnumerator<T>, IList<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceLookupFormatter-2.html": {
    "href": "api/MessagePack.Formatters.InterfaceLookupFormatter-2.html",
    "title": "Class InterfaceLookupFormatter<TKey, TElement> | CodeFactory for Windows",
    "keywords": "Class InterfaceLookupFormatter<TKey, TElement> Inheritance object CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, IEnumerator<IGrouping<TKey, TElement>>, ILookup<TKey, TElement>> CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, ILookup<TKey, TElement>> InterfaceLookupFormatter<TKey, TElement> Implements IMessagePackFormatter<ILookup<TKey, TElement>> Inherited Members CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, IEnumerator<IGrouping<TKey, TElement>>, ILookup<TKey, TElement>>.Serialize(ref MessagePackWriter, ILookup<TKey, TElement>, MessagePackSerializerOptions) CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, IEnumerator<IGrouping<TKey, TElement>>, ILookup<TKey, TElement>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class InterfaceLookupFormatter<TKey, TElement> : CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, ILookup<TKey, TElement>>, IMessagePackFormatter<ILookup<TKey, TElement>?> where TKey : notnull Type Parameters Name Description TKey TElement Constructors InterfaceLookupFormatter() Declaration public InterfaceLookupFormatter() Methods Add(Dictionary<TKey, IGrouping<TKey, TElement>>, int, IGrouping<TKey, TElement>, MessagePackSerializerOptions) Declaration protected override void Add(Dictionary<TKey, IGrouping<TKey, TElement>> collection, int index, IGrouping<TKey, TElement> value, MessagePackSerializerOptions options) Parameters Type Name Description Dictionary<TKey, IGrouping<TKey, TElement>> collection int index IGrouping<TKey, TElement> value MessagePackSerializerOptions options Overrides CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, IEnumerator<IGrouping<TKey, TElement>>, ILookup<TKey, TElement>>.Add(Dictionary<TKey, IGrouping<TKey, TElement>>, int, IGrouping<TKey, TElement>, MessagePackSerializerOptions) Complete(Dictionary<TKey, IGrouping<TKey, TElement>>) Declaration protected override ILookup<TKey, TElement> Complete(Dictionary<TKey, IGrouping<TKey, TElement>> intermediateCollection) Parameters Type Name Description Dictionary<TKey, IGrouping<TKey, TElement>> intermediateCollection Returns Type Description ILookup<TKey, TElement> Overrides CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, IEnumerator<IGrouping<TKey, TElement>>, ILookup<TKey, TElement>>.Complete(Dictionary<TKey, IGrouping<TKey, TElement>>) Create(int, MessagePackSerializerOptions) Declaration protected override Dictionary<TKey, IGrouping<TKey, TElement>> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description Dictionary<TKey, IGrouping<TKey, TElement>> Overrides CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, IEnumerator<IGrouping<TKey, TElement>>, ILookup<TKey, TElement>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceReadOnlyCollectionFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceReadOnlyCollectionFormatter-1.html",
    "title": "Class InterfaceReadOnlyCollectionFormatter<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceReadOnlyCollectionFormatter<T> Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyCollection<T>> CollectionFormatterBase<T, T[], IReadOnlyCollection<T>> InterfaceReadOnlyCollectionFormatter<T> Implements IMessagePackFormatter<IReadOnlyCollection<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyCollection<T>>.Serialize(ref MessagePackWriter, IReadOnlyCollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyCollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class InterfaceReadOnlyCollectionFormatter<T> : CollectionFormatterBase<T, T[], IReadOnlyCollection<T>>, IMessagePackFormatter<IReadOnlyCollection<T>?> Type Parameters Name Description T Constructors InterfaceReadOnlyCollectionFormatter() Declaration public InterfaceReadOnlyCollectionFormatter() Methods Add(T[], int, T, MessagePackSerializerOptions) Declaration protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description T[] collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyCollection<T>>.Add(T[], int, T, MessagePackSerializerOptions) Complete(T[]) Declaration protected override IReadOnlyCollection<T> Complete(T[] intermediateCollection) Parameters Type Name Description T[] intermediateCollection Returns Type Description IReadOnlyCollection<T> Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyCollection<T>>.Complete(T[]) Create(int, MessagePackSerializerOptions) Declaration protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description T[] Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyCollection<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceReadOnlyDictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.InterfaceReadOnlyDictionaryFormatter-2.html",
    "title": "Class InterfaceReadOnlyDictionaryFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class InterfaceReadOnlyDictionaryFormatter<TKey, TValue> Inheritance object DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>> InterfaceReadOnlyDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<IReadOnlyDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, IReadOnlyDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class InterfaceReadOnlyDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>>, IMessagePackFormatter<IReadOnlyDictionary<TKey, TValue>?> where TKey : notnull Type Parameters Name Description TKey TValue Constructors InterfaceReadOnlyDictionaryFormatter() Declaration public InterfaceReadOnlyDictionaryFormatter() Methods Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(Dictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description Dictionary<TKey, TValue> collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>>.Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Complete(Dictionary<TKey, TValue>) Declaration protected override IReadOnlyDictionary<TKey, TValue> Complete(Dictionary<TKey, TValue> intermediateCollection) Parameters Type Name Description Dictionary<TKey, TValue> intermediateCollection Returns Type Description IReadOnlyDictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>>.Complete(Dictionary<TKey, TValue>) Create(int, MessagePackSerializerOptions) Declaration protected override Dictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description Dictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceReadOnlyListFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceReadOnlyListFormatter-1.html",
    "title": "Class InterfaceReadOnlyListFormatter<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceReadOnlyListFormatter<T> Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyList<T>> CollectionFormatterBase<T, T[], IReadOnlyList<T>> InterfaceReadOnlyListFormatter<T> Implements IMessagePackFormatter<IReadOnlyList<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyList<T>>.Serialize(ref MessagePackWriter, IReadOnlyList<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyList<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class InterfaceReadOnlyListFormatter<T> : CollectionFormatterBase<T, T[], IReadOnlyList<T>>, IMessagePackFormatter<IReadOnlyList<T>?> Type Parameters Name Description T Constructors InterfaceReadOnlyListFormatter() Declaration public InterfaceReadOnlyListFormatter() Methods Add(T[], int, T, MessagePackSerializerOptions) Declaration protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description T[] collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyList<T>>.Add(T[], int, T, MessagePackSerializerOptions) Complete(T[]) Declaration protected override IReadOnlyList<T> Complete(T[] intermediateCollection) Parameters Type Name Description T[] intermediateCollection Returns Type Description IReadOnlyList<T> Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyList<T>>.Complete(T[]) Create(int, MessagePackSerializerOptions) Declaration protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description T[] Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyList<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.InterfaceSetFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceSetFormatter-1.html",
    "title": "Class InterfaceSetFormatter<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceSetFormatter<T> Inheritance object CollectionFormatterBase<T, HashSet<T>, IEnumerator<T>, ISet<T>> CollectionFormatterBase<T, HashSet<T>, ISet<T>> InterfaceSetFormatter<T> Implements IMessagePackFormatter<ISet<T>> Inherited Members CollectionFormatterBase<T, HashSet<T>, IEnumerator<T>, ISet<T>>.Serialize(ref MessagePackWriter, ISet<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, HashSet<T>, IEnumerator<T>, ISet<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class InterfaceSetFormatter<T> : CollectionFormatterBase<T, HashSet<T>, ISet<T>>, IMessagePackFormatter<ISet<T>?> Type Parameters Name Description T Constructors InterfaceSetFormatter() Declaration public InterfaceSetFormatter() Methods Add(HashSet<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(HashSet<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description HashSet<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, HashSet<T>, IEnumerator<T>, ISet<T>>.Add(HashSet<T>, int, T, MessagePackSerializerOptions) Complete(HashSet<T>) Declaration protected override ISet<T> Complete(HashSet<T> intermediateCollection) Parameters Type Name Description HashSet<T> intermediateCollection Returns Type Description ISet<T> Overrides CollectionFormatterBase<T, HashSet<T>, IEnumerator<T>, ISet<T>>.Complete(HashSet<T>) Create(int, MessagePackSerializerOptions) Declaration protected override HashSet<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description HashSet<T> Overrides CollectionFormatterBase<T, HashSet<T>, IEnumerator<T>, ISet<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.KeyValuePairFormatter-2.html": {
    "href": "api/MessagePack.Formatters.KeyValuePairFormatter-2.html",
    "title": "Class KeyValuePairFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class KeyValuePairFormatter<TKey, TValue> Inheritance object KeyValuePairFormatter<TKey, TValue> Implements IMessagePackFormatter<KeyValuePair<TKey, TValue>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class KeyValuePairFormatter<TKey, TValue> : IMessagePackFormatter<KeyValuePair<TKey, TValue>> Type Parameters Name Description TKey TValue Constructors KeyValuePairFormatter() Declaration public KeyValuePairFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public KeyValuePair<TKey, TValue> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type KeyValuePair. Returns Type Description KeyValuePair<TKey, TValue> The deserialized value. Serialize(ref MessagePackWriter, KeyValuePair<TKey, TValue>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, KeyValuePair<TKey, TValue> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. KeyValuePair<TKey, TValue> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type KeyValuePair. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.LazyFormatter-1.html": {
    "href": "api/MessagePack.Formatters.LazyFormatter-1.html",
    "title": "Class LazyFormatter<T> | CodeFactory for Windows",
    "keywords": "Class LazyFormatter<T> Inheritance object LazyFormatter<T> Implements IMessagePackFormatter<Lazy<T>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class LazyFormatter<T> : IMessagePackFormatter<Lazy<T>?> Type Parameters Name Description T Constructors LazyFormatter() Declaration public LazyFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Lazy<T>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Lazy{`0}. Returns Type Description Lazy<T> The deserialized value. Serialize(ref MessagePackWriter, Lazy<T>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Lazy<T>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Lazy<T> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Lazy{`0}. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.LinkedListFormatter-1.html": {
    "href": "api/MessagePack.Formatters.LinkedListFormatter-1.html",
    "title": "Class LinkedListFormatter<T> | CodeFactory for Windows",
    "keywords": "Class LinkedListFormatter<T> Inheritance object CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>> LinkedListFormatter<T> Implements IMessagePackFormatter<LinkedList<T>> Inherited Members CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>>.Serialize(ref MessagePackWriter, LinkedList<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class LinkedListFormatter<T> : CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>>, IMessagePackFormatter<LinkedList<T>?> Type Parameters Name Description T Constructors LinkedListFormatter() Declaration public LinkedListFormatter() Methods Add(LinkedList<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(LinkedList<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description LinkedList<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>>.Add(LinkedList<T>, int, T, MessagePackSerializerOptions) Complete(LinkedList<T>) Declaration protected override LinkedList<T> Complete(LinkedList<T> intermediateCollection) Parameters Type Name Description LinkedList<T> intermediateCollection Returns Type Description LinkedList<T> Overrides CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>>.Complete(LinkedList<T>) Create(int, MessagePackSerializerOptions) Declaration protected override LinkedList<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description LinkedList<T> Overrides CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>>.Create(int, MessagePackSerializerOptions) GetSourceEnumerator(LinkedList<T>) Declaration protected override LinkedList<T>.Enumerator GetSourceEnumerator(LinkedList<T> source) Parameters Type Name Description LinkedList<T> source Returns Type Description LinkedList<T>.Enumerator Overrides CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>>.GetSourceEnumerator(LinkedList<T>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ListFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ListFormatter-1.html",
    "title": "Class ListFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ListFormatter<T> Inheritance object ListFormatter<T> Implements IMessagePackFormatter<List<T>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ListFormatter<T> : IMessagePackFormatter<List<T>?> Type Parameters Name Description T Constructors ListFormatter() Declaration public ListFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public List<T>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Collections.Generic.List{`0}. Returns Type Description List<T> The deserialized value. Serialize(ref MessagePackWriter, List<T>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, List<T>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. List<T> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Collections.Generic.List{`0}. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.MemoryFormatter-1.html": {
    "href": "api/MessagePack.Formatters.MemoryFormatter-1.html",
    "title": "Class MemoryFormatter<T> | CodeFactory for Windows",
    "keywords": "Class MemoryFormatter<T> Inheritance object MemoryFormatter<T> Implements IMessagePackFormatter<Memory<T>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class MemoryFormatter<T> : IMessagePackFormatter<Memory<T>> Type Parameters Name Description T Constructors MemoryFormatter() Declaration public MemoryFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Memory<T> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Memory{`0}. Returns Type Description Memory<T> The deserialized value. Serialize(ref MessagePackWriter, Memory<T>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Memory<T> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Memory<T> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Memory{`0}. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NativeDateTimeArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.NativeDateTimeArrayFormatter.html",
    "title": "Class NativeDateTimeArrayFormatter | CodeFactory for Windows",
    "keywords": "Class NativeDateTimeArrayFormatter Inheritance object NativeDateTimeArrayFormatter Implements IMessagePackFormatter<DateTime[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NativeDateTimeArrayFormatter : IMessagePackFormatter<DateTime[]?> Constructors NativeDateTimeArrayFormatter() Declaration public NativeDateTimeArrayFormatter() Fields Instance Declaration public static readonly NativeDateTimeArrayFormatter Instance Field Value Type Description NativeDateTimeArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public DateTime[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description DateTime[] The deserialized value. Serialize(ref MessagePackWriter, DateTime[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, DateTime[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. DateTime[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NativeDateTimeFormatter.html": {
    "href": "api/MessagePack.Formatters.NativeDateTimeFormatter.html",
    "title": "Class NativeDateTimeFormatter | CodeFactory for Windows",
    "keywords": "Class NativeDateTimeFormatter Serialize by .NET native DateTime binary format. Inheritance object NativeDateTimeFormatter Implements IMessagePackFormatter<DateTime> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NativeDateTimeFormatter : IMessagePackFormatter<DateTime> Constructors NativeDateTimeFormatter() Declaration public NativeDateTimeFormatter() Fields Instance Declaration public static readonly NativeDateTimeFormatter Instance Field Value Type Description NativeDateTimeFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public DateTime Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTime. Returns Type Description DateTime The deserialized value. Serialize(ref MessagePackWriter, DateTime, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, DateTime value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. DateTime value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTime. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NativeDecimalFormatter.html": {
    "href": "api/MessagePack.Formatters.NativeDecimalFormatter.html",
    "title": "Class NativeDecimalFormatter | CodeFactory for Windows",
    "keywords": "Class NativeDecimalFormatter Inheritance object NativeDecimalFormatter Implements IMessagePackFormatter<decimal> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NativeDecimalFormatter : IMessagePackFormatter<decimal> Fields Instance Unsafe binary Decimal formatter. this is only allows on LittleEndian environment. Declaration public static readonly IMessagePackFormatter<decimal> Instance Field Value Type Description IMessagePackFormatter<decimal> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public decimal Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type decimal. Returns Type Description decimal The deserialized value. Serialize(ref MessagePackWriter, decimal, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, decimal value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. decimal value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type decimal. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NativeGuidFormatter.html": {
    "href": "api/MessagePack.Formatters.NativeGuidFormatter.html",
    "title": "Class NativeGuidFormatter | CodeFactory for Windows",
    "keywords": "Class NativeGuidFormatter Inheritance object NativeGuidFormatter Implements IMessagePackFormatter<Guid> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NativeGuidFormatter : IMessagePackFormatter<Guid> Fields Instance Unsafe binary Guid formatter. this is only allowed on LittleEndian environment. Declaration public static readonly IMessagePackFormatter<Guid> Instance Field Value Type Description IMessagePackFormatter<Guid> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Guid Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Guid. Returns Type Description Guid The deserialized value. Serialize(ref MessagePackWriter, Guid, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Guid value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Guid value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Guid. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NilFormatter.html": {
    "href": "api/MessagePack.Formatters.NilFormatter.html",
    "title": "Class NilFormatter | CodeFactory for Windows",
    "keywords": "Class NilFormatter Inheritance object NilFormatter Implements IMessagePackFormatter<Nil> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public class NilFormatter : IMessagePackFormatter<Nil> Fields Instance Declaration public static readonly IMessagePackFormatter<Nil> Instance Field Value Type Description IMessagePackFormatter<Nil> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Nil Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nil. Returns Type Description Nil The deserialized value. Serialize(ref MessagePackWriter, Nil, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Nil value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nil value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nil. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NonGenericDictionaryFormatter-1.html": {
    "href": "api/MessagePack.Formatters.NonGenericDictionaryFormatter-1.html",
    "title": "Class NonGenericDictionaryFormatter<T> | CodeFactory for Windows",
    "keywords": "Class NonGenericDictionaryFormatter<T> Inheritance object NonGenericDictionaryFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NonGenericDictionaryFormatter<T> : IMessagePackFormatter<T?> where T : class, IDictionary, new() Type Parameters Name Description T Constructors NonGenericDictionaryFormatter() Declaration public NonGenericDictionaryFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NonGenericInterfaceCollectionFormatter.html": {
    "href": "api/MessagePack.Formatters.NonGenericInterfaceCollectionFormatter.html",
    "title": "Class NonGenericInterfaceCollectionFormatter | CodeFactory for Windows",
    "keywords": "Class NonGenericInterfaceCollectionFormatter Inheritance object NonGenericInterfaceCollectionFormatter Implements IMessagePackFormatter<ICollection> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NonGenericInterfaceCollectionFormatter : IMessagePackFormatter<ICollection?> Fields Instance Declaration public static readonly IMessagePackFormatter<ICollection?> Instance Field Value Type Description IMessagePackFormatter<ICollection> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ICollection? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ICollection. Returns Type Description ICollection The deserialized value. Serialize(ref MessagePackWriter, ICollection?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ICollection? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ICollection value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ICollection. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NonGenericInterfaceDictionaryFormatter.html": {
    "href": "api/MessagePack.Formatters.NonGenericInterfaceDictionaryFormatter.html",
    "title": "Class NonGenericInterfaceDictionaryFormatter | CodeFactory for Windows",
    "keywords": "Class NonGenericInterfaceDictionaryFormatter Inheritance object NonGenericInterfaceDictionaryFormatter Implements IMessagePackFormatter<IDictionary> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NonGenericInterfaceDictionaryFormatter : IMessagePackFormatter<IDictionary?> Fields Instance Declaration public static readonly IMessagePackFormatter<IDictionary?> Instance Field Value Type Description IMessagePackFormatter<IDictionary> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public IDictionary? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IDictionary. Returns Type Description IDictionary The deserialized value. Serialize(ref MessagePackWriter, IDictionary?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, IDictionary? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. IDictionary value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IDictionary. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NonGenericInterfaceEnumerableFormatter.html": {
    "href": "api/MessagePack.Formatters.NonGenericInterfaceEnumerableFormatter.html",
    "title": "Class NonGenericInterfaceEnumerableFormatter | CodeFactory for Windows",
    "keywords": "Class NonGenericInterfaceEnumerableFormatter Inheritance object NonGenericInterfaceEnumerableFormatter Implements IMessagePackFormatter<IEnumerable> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NonGenericInterfaceEnumerableFormatter : IMessagePackFormatter<IEnumerable?> Fields Instance Declaration public static readonly IMessagePackFormatter<IEnumerable?> Instance Field Value Type Description IMessagePackFormatter<IEnumerable> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public IEnumerable? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IEnumerable. Returns Type Description IEnumerable The deserialized value. Serialize(ref MessagePackWriter, IEnumerable?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, IEnumerable? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. IEnumerable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IEnumerable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NonGenericInterfaceListFormatter.html": {
    "href": "api/MessagePack.Formatters.NonGenericInterfaceListFormatter.html",
    "title": "Class NonGenericInterfaceListFormatter | CodeFactory for Windows",
    "keywords": "Class NonGenericInterfaceListFormatter Inheritance object NonGenericInterfaceListFormatter Implements IMessagePackFormatter<IList> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NonGenericInterfaceListFormatter : IMessagePackFormatter<IList?> Fields Instance Declaration public static readonly IMessagePackFormatter<IList?> Instance Field Value Type Description IMessagePackFormatter<IList> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public IList? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IList. Returns Type Description IList The deserialized value. Serialize(ref MessagePackWriter, IList?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, IList? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. IList value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IList. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NonGenericListFormatter-1.html": {
    "href": "api/MessagePack.Formatters.NonGenericListFormatter-1.html",
    "title": "Class NonGenericListFormatter<T> | CodeFactory for Windows",
    "keywords": "Class NonGenericListFormatter<T> Inheritance object NonGenericListFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NonGenericListFormatter<T> : IMessagePackFormatter<T?> where T : class, IList, new() Type Parameters Name Description T Constructors NonGenericListFormatter() Declaration public NonGenericListFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableBooleanFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableBooleanFormatter.html",
    "title": "Class NullableBooleanFormatter | CodeFactory for Windows",
    "keywords": "Class NullableBooleanFormatter Inheritance object NullableBooleanFormatter Implements IMessagePackFormatter<bool?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableBooleanFormatter : IMessagePackFormatter<bool?> Fields Instance Declaration public static readonly NullableBooleanFormatter Instance Field Value Type Description NullableBooleanFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public bool? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type bool?. Returns Type Description bool? The deserialized value. Serialize(ref MessagePackWriter, bool?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, bool? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. bool? value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type bool?. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableByteFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableByteFormatter.html",
    "title": "Class NullableByteFormatter | CodeFactory for Windows",
    "keywords": "Class NullableByteFormatter Inheritance object NullableByteFormatter Implements IMessagePackFormatter<byte?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableByteFormatter : IMessagePackFormatter<byte?> Fields Instance Declaration public static readonly NullableByteFormatter Instance Field Value Type Description NullableByteFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public byte? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, byte?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, byte? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableCharFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableCharFormatter.html",
    "title": "Class NullableCharFormatter | CodeFactory for Windows",
    "keywords": "Class NullableCharFormatter Inheritance object NullableCharFormatter Implements IMessagePackFormatter<char?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableCharFormatter : IMessagePackFormatter<char?> Fields Instance Declaration public static readonly NullableCharFormatter Instance Field Value Type Description NullableCharFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public char? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, char?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, char? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableDateTimeFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableDateTimeFormatter.html",
    "title": "Class NullableDateTimeFormatter | CodeFactory for Windows",
    "keywords": "Class NullableDateTimeFormatter Inheritance object NullableDateTimeFormatter Implements IMessagePackFormatter<DateTime?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableDateTimeFormatter : IMessagePackFormatter<DateTime?> Fields Instance Declaration public static readonly NullableDateTimeFormatter Instance Field Value Type Description NullableDateTimeFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public DateTime? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, DateTime?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, DateTime? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableDoubleFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableDoubleFormatter.html",
    "title": "Class NullableDoubleFormatter | CodeFactory for Windows",
    "keywords": "Class NullableDoubleFormatter Inheritance object NullableDoubleFormatter Implements IMessagePackFormatter<double?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableDoubleFormatter : IMessagePackFormatter<double?> Fields Instance Declaration public static readonly NullableDoubleFormatter Instance Field Value Type Description NullableDoubleFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public double? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, double?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, double? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableForceByteBlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceByteBlockFormatter.html",
    "title": "Class NullableForceByteBlockFormatter | CodeFactory for Windows",
    "keywords": "Class NullableForceByteBlockFormatter Inheritance object NullableForceByteBlockFormatter Implements IMessagePackFormatter<byte?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableForceByteBlockFormatter : IMessagePackFormatter<byte?> Fields Instance Declaration public static readonly NullableForceByteBlockFormatter Instance Field Value Type Description NullableForceByteBlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public byte? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, byte?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, byte? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableForceInt16BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceInt16BlockFormatter.html",
    "title": "Class NullableForceInt16BlockFormatter | CodeFactory for Windows",
    "keywords": "Class NullableForceInt16BlockFormatter Inheritance object NullableForceInt16BlockFormatter Implements IMessagePackFormatter<short?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableForceInt16BlockFormatter : IMessagePackFormatter<short?> Fields Instance Declaration public static readonly NullableForceInt16BlockFormatter Instance Field Value Type Description NullableForceInt16BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public short? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, short?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, short? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableForceInt32BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceInt32BlockFormatter.html",
    "title": "Class NullableForceInt32BlockFormatter | CodeFactory for Windows",
    "keywords": "Class NullableForceInt32BlockFormatter Inheritance object NullableForceInt32BlockFormatter Implements IMessagePackFormatter<int?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableForceInt32BlockFormatter : IMessagePackFormatter<int?> Fields Instance Declaration public static readonly NullableForceInt32BlockFormatter Instance Field Value Type Description NullableForceInt32BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public int? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int?. Returns Type Description int? The deserialized value. Serialize(ref MessagePackWriter, int?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, int? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. int? value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int?. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableForceInt64BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceInt64BlockFormatter.html",
    "title": "Class NullableForceInt64BlockFormatter | CodeFactory for Windows",
    "keywords": "Class NullableForceInt64BlockFormatter Inheritance object NullableForceInt64BlockFormatter Implements IMessagePackFormatter<long?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableForceInt64BlockFormatter : IMessagePackFormatter<long?> Fields Instance Declaration public static readonly NullableForceInt64BlockFormatter Instance Field Value Type Description NullableForceInt64BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public long? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, long?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, long? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableForceSByteBlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceSByteBlockFormatter.html",
    "title": "Class NullableForceSByteBlockFormatter | CodeFactory for Windows",
    "keywords": "Class NullableForceSByteBlockFormatter Inheritance object NullableForceSByteBlockFormatter Implements IMessagePackFormatter<sbyte?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableForceSByteBlockFormatter : IMessagePackFormatter<sbyte?> Fields Instance Declaration public static readonly NullableForceSByteBlockFormatter Instance Field Value Type Description NullableForceSByteBlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public sbyte? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, sbyte?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, sbyte? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableForceUInt16BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceUInt16BlockFormatter.html",
    "title": "Class NullableForceUInt16BlockFormatter | CodeFactory for Windows",
    "keywords": "Class NullableForceUInt16BlockFormatter Inheritance object NullableForceUInt16BlockFormatter Implements IMessagePackFormatter<ushort?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableForceUInt16BlockFormatter : IMessagePackFormatter<ushort?> Fields Instance Declaration public static readonly NullableForceUInt16BlockFormatter Instance Field Value Type Description NullableForceUInt16BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ushort? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, ushort?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ushort? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableForceUInt32BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceUInt32BlockFormatter.html",
    "title": "Class NullableForceUInt32BlockFormatter | CodeFactory for Windows",
    "keywords": "Class NullableForceUInt32BlockFormatter Inheritance object NullableForceUInt32BlockFormatter Implements IMessagePackFormatter<uint?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableForceUInt32BlockFormatter : IMessagePackFormatter<uint?> Fields Instance Declaration public static readonly NullableForceUInt32BlockFormatter Instance Field Value Type Description NullableForceUInt32BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public uint? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, uint?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, uint? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableForceUInt64BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceUInt64BlockFormatter.html",
    "title": "Class NullableForceUInt64BlockFormatter | CodeFactory for Windows",
    "keywords": "Class NullableForceUInt64BlockFormatter Inheritance object NullableForceUInt64BlockFormatter Implements IMessagePackFormatter<ulong?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableForceUInt64BlockFormatter : IMessagePackFormatter<ulong?> Fields Instance Declaration public static readonly NullableForceUInt64BlockFormatter Instance Field Value Type Description NullableForceUInt64BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ulong? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, ulong?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ulong? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableFormatter-1.html": {
    "href": "api/MessagePack.Formatters.NullableFormatter-1.html",
    "title": "Class NullableFormatter<T> | CodeFactory for Windows",
    "keywords": "Class NullableFormatter<T> Inheritance object NullableFormatter<T> Implements IMessagePackFormatter<T?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableFormatter<T> : IMessagePackFormatter<T?> where T : struct Type Parameters Name Description T Constructors NullableFormatter() Declaration public NullableFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description T? The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T? value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableInt16Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableInt16Formatter.html",
    "title": "Class NullableInt16Formatter | CodeFactory for Windows",
    "keywords": "Class NullableInt16Formatter Inheritance object NullableInt16Formatter Implements IMessagePackFormatter<short?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableInt16Formatter : IMessagePackFormatter<short?> Fields Instance Declaration public static readonly NullableInt16Formatter Instance Field Value Type Description NullableInt16Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public short? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, short?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, short? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableInt32Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableInt32Formatter.html",
    "title": "Class NullableInt32Formatter | CodeFactory for Windows",
    "keywords": "Class NullableInt32Formatter Inheritance object NullableInt32Formatter Implements IMessagePackFormatter<int?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableInt32Formatter : IMessagePackFormatter<int?> Fields Instance Declaration public static readonly NullableInt32Formatter Instance Field Value Type Description NullableInt32Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public int? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int?. Returns Type Description int? The deserialized value. Serialize(ref MessagePackWriter, int?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, int? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. int? value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int?. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableInt64Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableInt64Formatter.html",
    "title": "Class NullableInt64Formatter | CodeFactory for Windows",
    "keywords": "Class NullableInt64Formatter Inheritance object NullableInt64Formatter Implements IMessagePackFormatter<long?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableInt64Formatter : IMessagePackFormatter<long?> Fields Instance Declaration public static readonly NullableInt64Formatter Instance Field Value Type Description NullableInt64Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public long? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, long?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, long? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableNilFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableNilFormatter.html",
    "title": "Class NullableNilFormatter | CodeFactory for Windows",
    "keywords": "Class NullableNilFormatter Inheritance object NullableNilFormatter Implements IMessagePackFormatter<Nil?> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public class NullableNilFormatter : IMessagePackFormatter<Nil?> Fields Instance Declaration public static readonly IMessagePackFormatter<Nil?> Instance Field Value Type Description IMessagePackFormatter<Nil?> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Nil? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, Nil?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Nil? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableSByteFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableSByteFormatter.html",
    "title": "Class NullableSByteFormatter | CodeFactory for Windows",
    "keywords": "Class NullableSByteFormatter Inheritance object NullableSByteFormatter Implements IMessagePackFormatter<sbyte?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableSByteFormatter : IMessagePackFormatter<sbyte?> Fields Instance Declaration public static readonly NullableSByteFormatter Instance Field Value Type Description NullableSByteFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public sbyte? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, sbyte?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, sbyte? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableSingleFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableSingleFormatter.html",
    "title": "Class NullableSingleFormatter | CodeFactory for Windows",
    "keywords": "Class NullableSingleFormatter Inheritance object NullableSingleFormatter Implements IMessagePackFormatter<float?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableSingleFormatter : IMessagePackFormatter<float?> Fields Instance Declaration public static readonly NullableSingleFormatter Instance Field Value Type Description NullableSingleFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public float? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, float?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, float? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableStringArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableStringArrayFormatter.html",
    "title": "Class NullableStringArrayFormatter | CodeFactory for Windows",
    "keywords": "Class NullableStringArrayFormatter Inheritance object NullableStringArrayFormatter Implements IMessagePackFormatter<string[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableStringArrayFormatter : IMessagePackFormatter<string?[]?> Fields Instance Declaration public static readonly NullableStringArrayFormatter Instance Field Value Type Description NullableStringArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public string?[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description string[] The deserialized value. Serialize(ref MessagePackWriter, string?[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, string?[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. string[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableStringFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableStringFormatter.html",
    "title": "Class NullableStringFormatter | CodeFactory for Windows",
    "keywords": "Class NullableStringFormatter Inheritance object NullableStringFormatter Implements IMessagePackFormatter<string> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableStringFormatter : IMessagePackFormatter<string?> Fields Instance Declaration public static readonly NullableStringFormatter Instance Field Value Type Description NullableStringFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public string? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type string. Returns Type Description string The deserialized value. Serialize(ref MessagePackWriter, string?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, string? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. string value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type string. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableUInt16Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableUInt16Formatter.html",
    "title": "Class NullableUInt16Formatter | CodeFactory for Windows",
    "keywords": "Class NullableUInt16Formatter Inheritance object NullableUInt16Formatter Implements IMessagePackFormatter<ushort?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableUInt16Formatter : IMessagePackFormatter<ushort?> Fields Instance Declaration public static readonly NullableUInt16Formatter Instance Field Value Type Description NullableUInt16Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ushort? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, ushort?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ushort? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableUInt32Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableUInt32Formatter.html",
    "title": "Class NullableUInt32Formatter | CodeFactory for Windows",
    "keywords": "Class NullableUInt32Formatter Inheritance object NullableUInt32Formatter Implements IMessagePackFormatter<uint?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableUInt32Formatter : IMessagePackFormatter<uint?> Fields Instance Declaration public static readonly NullableUInt32Formatter Instance Field Value Type Description NullableUInt32Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public uint? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, uint?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, uint? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.NullableUInt64Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableUInt64Formatter.html",
    "title": "Class NullableUInt64Formatter | CodeFactory for Windows",
    "keywords": "Class NullableUInt64Formatter Inheritance object NullableUInt64Formatter Implements IMessagePackFormatter<ulong?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class NullableUInt64Formatter : IMessagePackFormatter<ulong?> Fields Instance Declaration public static readonly NullableUInt64Formatter Instance Field Value Type Description NullableUInt64Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ulong? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description Nullable The deserialized value. Serialize(ref MessagePackWriter, ulong?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ulong? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Nullable value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ObservableCollectionFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ObservableCollectionFormatter-1.html",
    "title": "Class ObservableCollectionFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ObservableCollectionFormatter<T> Inheritance object CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ObservableCollection<T>> CollectionFormatterBase<T, ObservableCollection<T>, ObservableCollection<T>> CollectionFormatterBase<T, ObservableCollection<T>> ObservableCollectionFormatter<T> Implements IMessagePackFormatter<ObservableCollection<T>> Inherited Members CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ObservableCollection<T>>.Serialize(ref MessagePackWriter, ObservableCollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ObservableCollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ObservableCollectionFormatter<T> : CollectionFormatterBase<T, ObservableCollection<T>>, IMessagePackFormatter<ObservableCollection<T>?> Type Parameters Name Description T Constructors ObservableCollectionFormatter() Declaration public ObservableCollectionFormatter() Methods Add(ObservableCollection<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ObservableCollection<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ObservableCollection<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ObservableCollection<T>>.Add(ObservableCollection<T>, int, T, MessagePackSerializerOptions) Create(int, MessagePackSerializerOptions) Declaration protected override ObservableCollection<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ObservableCollection<T> Overrides CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ObservableCollection<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.PrimitiveObjectFormatter.html": {
    "href": "api/MessagePack.Formatters.PrimitiveObjectFormatter.html",
    "title": "Class PrimitiveObjectFormatter | CodeFactory for Windows",
    "keywords": "Class PrimitiveObjectFormatter Inheritance object PrimitiveObjectFormatter Implements IMessagePackFormatter<object> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public class PrimitiveObjectFormatter : IMessagePackFormatter<object?> Constructors PrimitiveObjectFormatter() Declaration protected PrimitiveObjectFormatter() Fields Instance Declaration public static readonly IMessagePackFormatter<object?> Instance Field Value Type Description IMessagePackFormatter<object> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public object? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object. Returns Type Description object The deserialized value. DeserializeMap(ref MessagePackReader, int, MessagePackSerializerOptions) Declaration protected virtual object DeserializeMap(ref MessagePackReader reader, int length, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader int length MessagePackSerializerOptions options Returns Type Description object IsSupportedType(Type, TypeInfo, object) Declaration public static bool IsSupportedType(Type type, TypeInfo typeInfo, object value) Parameters Type Name Description Type type TypeInfo typeInfo object value Returns Type Description bool Serialize(ref MessagePackWriter, object?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, object? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. object value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.QueueFormatter-1.html": {
    "href": "api/MessagePack.Formatters.QueueFormatter-1.html",
    "title": "Class QueueFormatter<T> | CodeFactory for Windows",
    "keywords": "Class QueueFormatter<T> Inheritance object CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>> QueueFormatter<T> Implements IMessagePackFormatter<Queue<T>> Inherited Members CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>.Serialize(ref MessagePackWriter, Queue<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class QueueFormatter<T> : CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>, IMessagePackFormatter<Queue<T>?> Type Parameters Name Description T Constructors QueueFormatter() Declaration public QueueFormatter() Methods Add(Queue<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(Queue<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description Queue<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>.Add(Queue<T>, int, T, MessagePackSerializerOptions) Complete(Queue<T>) Declaration protected override Queue<T> Complete(Queue<T> intermediateCollection) Parameters Type Name Description Queue<T> intermediateCollection Returns Type Description Queue<T> Overrides CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>.Complete(Queue<T>) Create(int, MessagePackSerializerOptions) Declaration protected override Queue<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description Queue<T> Overrides CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>.Create(int, MessagePackSerializerOptions) GetCount(Queue<T>) Declaration protected override int? GetCount(Queue<T> sequence) Parameters Type Name Description Queue<T> sequence Returns Type Description int? Overrides CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>.GetCount(Queue<T>) GetSourceEnumerator(Queue<T>) Declaration protected override Queue<T>.Enumerator GetSourceEnumerator(Queue<T> source) Parameters Type Name Description Queue<T> source Returns Type Description Queue<T>.Enumerator Overrides CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>.GetSourceEnumerator(Queue<T>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ReadOnlyCollectionFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ReadOnlyCollectionFormatter-1.html",
    "title": "Class ReadOnlyCollectionFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ReadOnlyCollectionFormatter<T> Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, ReadOnlyCollection<T>> CollectionFormatterBase<T, T[], ReadOnlyCollection<T>> ReadOnlyCollectionFormatter<T> Implements IMessagePackFormatter<ReadOnlyCollection<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, ReadOnlyCollection<T>>.Serialize(ref MessagePackWriter, ReadOnlyCollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, ReadOnlyCollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ReadOnlyCollectionFormatter<T> : CollectionFormatterBase<T, T[], ReadOnlyCollection<T>>, IMessagePackFormatter<ReadOnlyCollection<T>?> Type Parameters Name Description T Constructors ReadOnlyCollectionFormatter() Declaration public ReadOnlyCollectionFormatter() Methods Add(T[], int, T, MessagePackSerializerOptions) Declaration protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description T[] collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ReadOnlyCollection<T>>.Add(T[], int, T, MessagePackSerializerOptions) Complete(T[]) Declaration protected override ReadOnlyCollection<T> Complete(T[] intermediateCollection) Parameters Type Name Description T[] intermediateCollection Returns Type Description ReadOnlyCollection<T> Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ReadOnlyCollection<T>>.Complete(T[]) Create(int, MessagePackSerializerOptions) Declaration protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description T[] Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ReadOnlyCollection<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ReadOnlyDictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.ReadOnlyDictionaryFormatter-2.html",
    "title": "Class ReadOnlyDictionaryFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class ReadOnlyDictionaryFormatter<TKey, TValue> Inheritance object DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ReadOnlyDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, ReadOnlyDictionary<TKey, TValue>> ReadOnlyDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<ReadOnlyDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ReadOnlyDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, ReadOnlyDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ReadOnlyDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ReadOnlyDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, ReadOnlyDictionary<TKey, TValue>>, IMessagePackFormatter<ReadOnlyDictionary<TKey, TValue>?> where TKey : notnull Type Parameters Name Description TKey TValue Constructors ReadOnlyDictionaryFormatter() Declaration public ReadOnlyDictionaryFormatter() Methods Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(Dictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description Dictionary<TKey, TValue> collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ReadOnlyDictionary<TKey, TValue>>.Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Complete(Dictionary<TKey, TValue>) Declaration protected override ReadOnlyDictionary<TKey, TValue> Complete(Dictionary<TKey, TValue> intermediateCollection) Parameters Type Name Description Dictionary<TKey, TValue> intermediateCollection Returns Type Description ReadOnlyDictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ReadOnlyDictionary<TKey, TValue>>.Complete(Dictionary<TKey, TValue>) Create(int, MessagePackSerializerOptions) Declaration protected override Dictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description Dictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ReadOnlyDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ReadOnlyMemoryFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ReadOnlyMemoryFormatter-1.html",
    "title": "Class ReadOnlyMemoryFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ReadOnlyMemoryFormatter<T> Inheritance object ReadOnlyMemoryFormatter<T> Implements IMessagePackFormatter<ReadOnlyMemory<T>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ReadOnlyMemoryFormatter<T> : IMessagePackFormatter<ReadOnlyMemory<T>> Type Parameters Name Description T Constructors ReadOnlyMemoryFormatter() Declaration public ReadOnlyMemoryFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ReadOnlyMemory<T> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.ReadOnlyMemory{`0}. Returns Type Description ReadOnlyMemory<T> The deserialized value. Serialize(ref MessagePackWriter, ReadOnlyMemory<T>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ReadOnlyMemory<T> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ReadOnlyMemory<T> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.ReadOnlyMemory{`0}. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ReadOnlyObservableCollectionFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ReadOnlyObservableCollectionFormatter-1.html",
    "title": "Class ReadOnlyObservableCollectionFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ReadOnlyObservableCollectionFormatter<T> Inheritance object CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ReadOnlyObservableCollection<T>> CollectionFormatterBase<T, ObservableCollection<T>, ReadOnlyObservableCollection<T>> ReadOnlyObservableCollectionFormatter<T> Implements IMessagePackFormatter<ReadOnlyObservableCollection<T>> Inherited Members CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ReadOnlyObservableCollection<T>>.Serialize(ref MessagePackWriter, ReadOnlyObservableCollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ReadOnlyObservableCollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ReadOnlyObservableCollectionFormatter<T> : CollectionFormatterBase<T, ObservableCollection<T>, ReadOnlyObservableCollection<T>>, IMessagePackFormatter<ReadOnlyObservableCollection<T>?> Type Parameters Name Description T Constructors ReadOnlyObservableCollectionFormatter() Declaration public ReadOnlyObservableCollectionFormatter() Methods Add(ObservableCollection<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ObservableCollection<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ObservableCollection<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ReadOnlyObservableCollection<T>>.Add(ObservableCollection<T>, int, T, MessagePackSerializerOptions) Complete(ObservableCollection<T>) Declaration protected override ReadOnlyObservableCollection<T> Complete(ObservableCollection<T> intermediateCollection) Parameters Type Name Description ObservableCollection<T> intermediateCollection Returns Type Description ReadOnlyObservableCollection<T> Overrides CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ReadOnlyObservableCollection<T>>.Complete(ObservableCollection<T>) Create(int, MessagePackSerializerOptions) Declaration protected override ObservableCollection<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ObservableCollection<T> Overrides CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ReadOnlyObservableCollection<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ReadOnlySequenceFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ReadOnlySequenceFormatter-1.html",
    "title": "Class ReadOnlySequenceFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ReadOnlySequenceFormatter<T> Inheritance object ReadOnlySequenceFormatter<T> Implements IMessagePackFormatter<ReadOnlySequence<T>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ReadOnlySequenceFormatter<T> : IMessagePackFormatter<ReadOnlySequence<T>> Type Parameters Name Description T Constructors ReadOnlySequenceFormatter() Declaration public ReadOnlySequenceFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ReadOnlySequence<T> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Buffers.ReadOnlySequence. Returns Type Description ReadOnlySequence<T> The deserialized value. Serialize(ref MessagePackWriter, ReadOnlySequence<T>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ReadOnlySequence<T> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ReadOnlySequence<T> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Buffers.ReadOnlySequence. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.SByteArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.SByteArrayFormatter.html",
    "title": "Class SByteArrayFormatter | CodeFactory for Windows",
    "keywords": "Class SByteArrayFormatter Inheritance object SByteArrayFormatter Implements IMessagePackFormatter<sbyte[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class SByteArrayFormatter : IMessagePackFormatter<sbyte[]?> Fields Instance Declaration public static readonly SByteArrayFormatter Instance Field Value Type Description SByteArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public sbyte[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description sbyte[] The deserialized value. Serialize(ref MessagePackWriter, sbyte[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, sbyte[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. sbyte[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.SByteFormatter.html": {
    "href": "api/MessagePack.Formatters.SByteFormatter.html",
    "title": "Class SByteFormatter | CodeFactory for Windows",
    "keywords": "Class SByteFormatter Inheritance object SByteFormatter Implements IMessagePackFormatter<sbyte> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class SByteFormatter : IMessagePackFormatter<sbyte> Fields Instance Declaration public static readonly SByteFormatter Instance Field Value Type Description SByteFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public sbyte Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type sbyte. Returns Type Description sbyte The deserialized value. Serialize(ref MessagePackWriter, sbyte, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, sbyte value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. sbyte value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type sbyte. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.SingleArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.SingleArrayFormatter.html",
    "title": "Class SingleArrayFormatter | CodeFactory for Windows",
    "keywords": "Class SingleArrayFormatter Inheritance object SingleArrayFormatter Implements IMessagePackFormatter<float[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class SingleArrayFormatter : IMessagePackFormatter<float[]?> Fields Instance Declaration public static readonly SingleArrayFormatter Instance Field Value Type Description SingleArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public float[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description float[] The deserialized value. Serialize(ref MessagePackWriter, float[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, float[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. float[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.SingleFormatter.html": {
    "href": "api/MessagePack.Formatters.SingleFormatter.html",
    "title": "Class SingleFormatter | CodeFactory for Windows",
    "keywords": "Class SingleFormatter Inheritance object SingleFormatter Implements IMessagePackFormatter<float> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class SingleFormatter : IMessagePackFormatter<float> Fields Instance Declaration public static readonly SingleFormatter Instance Field Value Type Description SingleFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public float Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type float. Returns Type Description float The deserialized value. Serialize(ref MessagePackWriter, float, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, float value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. float value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type float. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.SortedDictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.SortedDictionaryFormatter-2.html",
    "title": "Class SortedDictionaryFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class SortedDictionaryFormatter<TKey, TValue> Inheritance object DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>> SortedDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<SortedDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, SortedDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class SortedDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>>, IMessagePackFormatter<SortedDictionary<TKey, TValue>?> where TKey : notnull Type Parameters Name Description TKey TValue Constructors SortedDictionaryFormatter() Declaration public SortedDictionaryFormatter() Methods Add(SortedDictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(SortedDictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description SortedDictionary<TKey, TValue> collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>>.Add(SortedDictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Complete(SortedDictionary<TKey, TValue>) Declaration protected override SortedDictionary<TKey, TValue> Complete(SortedDictionary<TKey, TValue> intermediateCollection) Parameters Type Name Description SortedDictionary<TKey, TValue> intermediateCollection Returns Type Description SortedDictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>>.Complete(SortedDictionary<TKey, TValue>) Create(int, MessagePackSerializerOptions) Declaration protected override SortedDictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description SortedDictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) GetSourceEnumerator(SortedDictionary<TKey, TValue>) Declaration protected override SortedDictionary<TKey, TValue>.Enumerator GetSourceEnumerator(SortedDictionary<TKey, TValue> source) Parameters Type Name Description SortedDictionary<TKey, TValue> source Returns Type Description SortedDictionary<TKey, TValue>.Enumerator Overrides DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>>.GetSourceEnumerator(SortedDictionary<TKey, TValue>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.SortedListFormatter-2.html": {
    "href": "api/MessagePack.Formatters.SortedListFormatter-2.html",
    "title": "Class SortedListFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class SortedListFormatter<TKey, TValue> Inheritance object DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, SortedList<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>, SortedList<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>> SortedListFormatter<TKey, TValue> Implements IMessagePackFormatter<SortedList<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, SortedList<TKey, TValue>>.Serialize(ref MessagePackWriter, SortedList<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, SortedList<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class SortedListFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>>, IMessagePackFormatter<SortedList<TKey, TValue>?> where TKey : notnull Type Parameters Name Description TKey TValue Constructors SortedListFormatter() Declaration public SortedListFormatter() Methods Add(SortedList<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(SortedList<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description SortedList<TKey, TValue> collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, SortedList<TKey, TValue>>.Add(SortedList<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) Create(int, MessagePackSerializerOptions) Declaration protected override SortedList<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description SortedList<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, SortedList<TKey, TValue>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.StackFormatter-1.html": {
    "href": "api/MessagePack.Formatters.StackFormatter-1.html",
    "title": "Class StackFormatter<T> | CodeFactory for Windows",
    "keywords": "Class StackFormatter<T> Inheritance object CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>> StackFormatter<T> Implements IMessagePackFormatter<Stack<T>> Inherited Members CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>.Serialize(ref MessagePackWriter, Stack<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class StackFormatter<T> : CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>, IMessagePackFormatter<Stack<T>?> Type Parameters Name Description T Constructors StackFormatter() Declaration public StackFormatter() Methods Add(T[], int, T, MessagePackSerializerOptions) Declaration protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description T[] collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>.Add(T[], int, T, MessagePackSerializerOptions) Complete(T[]) Declaration protected override Stack<T> Complete(T[] intermediateCollection) Parameters Type Name Description T[] intermediateCollection Returns Type Description Stack<T> Overrides CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>.Complete(T[]) Create(int, MessagePackSerializerOptions) Declaration protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description T[] Overrides CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>.Create(int, MessagePackSerializerOptions) GetCount(Stack<T>) Declaration protected override int? GetCount(Stack<T> sequence) Parameters Type Name Description Stack<T> sequence Returns Type Description int? Overrides CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>.GetCount(Stack<T>) GetSourceEnumerator(Stack<T>) Declaration protected override Stack<T>.Enumerator GetSourceEnumerator(Stack<T> source) Parameters Type Name Description Stack<T> source Returns Type Description Stack<T>.Enumerator Overrides CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>.GetSourceEnumerator(Stack<T>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.StaticNullableFormatter-1.html": {
    "href": "api/MessagePack.Formatters.StaticNullableFormatter-1.html",
    "title": "Class StaticNullableFormatter<T> | CodeFactory for Windows",
    "keywords": "Class StaticNullableFormatter<T> Inheritance object StaticNullableFormatter<T> Implements IMessagePackFormatter<T?> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class StaticNullableFormatter<T> : IMessagePackFormatter<T?> where T : struct Type Parameters Name Description T Constructors StaticNullableFormatter(IMessagePackFormatter<T>) Declaration public StaticNullableFormatter(IMessagePackFormatter<T> underlyingFormatter) Parameters Type Name Description IMessagePackFormatter<T> underlyingFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Type Description T? The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T? value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.StringBuilderFormatter.html": {
    "href": "api/MessagePack.Formatters.StringBuilderFormatter.html",
    "title": "Class StringBuilderFormatter | CodeFactory for Windows",
    "keywords": "Class StringBuilderFormatter Inheritance object StringBuilderFormatter Implements IMessagePackFormatter<StringBuilder> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class StringBuilderFormatter : IMessagePackFormatter<StringBuilder?> Fields Instance Declaration public static readonly IMessagePackFormatter<StringBuilder?> Instance Field Value Type Description IMessagePackFormatter<StringBuilder> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public StringBuilder? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type StringBuilder. Returns Type Description StringBuilder The deserialized value. Serialize(ref MessagePackWriter, StringBuilder?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, StringBuilder? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. StringBuilder value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type StringBuilder. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.StringInterningFormatter.html": {
    "href": "api/MessagePack.Formatters.StringInterningFormatter.html",
    "title": "Class StringInterningFormatter | CodeFactory for Windows",
    "keywords": "Class StringInterningFormatter A string formatter that interns strings on deserialization. Inheritance object StringInterningFormatter Implements IMessagePackFormatter<string> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class StringInterningFormatter : IMessagePackFormatter<string?> Constructors StringInterningFormatter() Declaration public StringInterningFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public string? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type string. Returns Type Description string The deserialized value. Serialize(ref MessagePackWriter, string?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, string? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. string value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type string. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ThreeDimensionalArrayFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ThreeDimensionalArrayFormatter-1.html",
    "title": "Class ThreeDimensionalArrayFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ThreeDimensionalArrayFormatter<T> Inheritance object ThreeDimensionalArrayFormatter<T> Implements IMessagePackFormatter<T[,,]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ThreeDimensionalArrayFormatter<T> : IMessagePackFormatter<T[,,]?> Type Parameters Name Description T Constructors ThreeDimensionalArrayFormatter() Declaration public ThreeDimensionalArrayFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T[,,]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T[,,] The deserialized value. Serialize(ref MessagePackWriter, T[,,]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T[,,]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T[,,] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TimeSpanFormatter.html": {
    "href": "api/MessagePack.Formatters.TimeSpanFormatter.html",
    "title": "Class TimeSpanFormatter | CodeFactory for Windows",
    "keywords": "Class TimeSpanFormatter Inheritance object TimeSpanFormatter Implements IMessagePackFormatter<TimeSpan> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TimeSpanFormatter : IMessagePackFormatter<TimeSpan> Fields Instance Declaration public static readonly IMessagePackFormatter<TimeSpan> Instance Field Value Type Description IMessagePackFormatter<TimeSpan> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public TimeSpan Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type TimeSpan. Returns Type Description TimeSpan The deserialized value. Serialize(ref MessagePackWriter, TimeSpan, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, TimeSpan value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. TimeSpan value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type TimeSpan. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TupleFormatter-1.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-1.html",
    "title": "Class TupleFormatter<T1> | CodeFactory for Windows",
    "keywords": "Class TupleFormatter<T1> Inheritance object TupleFormatter<T1> Implements IMessagePackFormatter<Tuple<T1>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TupleFormatter<T1> : IMessagePackFormatter<Tuple<T1>?> Type Parameters Name Description T1 Constructors TupleFormatter() Declaration public TupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Tuple<T1>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Type Description Tuple<T1> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Tuple<T1>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Tuple<T1> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TupleFormatter-2.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-2.html",
    "title": "Class TupleFormatter<T1, T2> | CodeFactory for Windows",
    "keywords": "Class TupleFormatter<T1, T2> Inheritance object TupleFormatter<T1, T2> Implements IMessagePackFormatter<Tuple<T1, T2>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TupleFormatter<T1, T2> : IMessagePackFormatter<Tuple<T1, T2>?> Type Parameters Name Description T1 T2 Constructors TupleFormatter() Declaration public TupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Tuple<T1, T2>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Type Description Tuple<T1, T2> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Tuple<T1, T2> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TupleFormatter-3.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-3.html",
    "title": "Class TupleFormatter<T1, T2, T3> | CodeFactory for Windows",
    "keywords": "Class TupleFormatter<T1, T2, T3> Inheritance object TupleFormatter<T1, T2, T3> Implements IMessagePackFormatter<Tuple<T1, T2, T3>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TupleFormatter<T1, T2, T3> : IMessagePackFormatter<Tuple<T1, T2, T3>?> Type Parameters Name Description T1 T2 T3 Constructors TupleFormatter() Declaration public TupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Tuple<T1, T2, T3>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Type Description Tuple<T1, T2, T3> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Tuple<T1, T2, T3> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TupleFormatter-4.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-4.html",
    "title": "Class TupleFormatter<T1, T2, T3, T4> | CodeFactory for Windows",
    "keywords": "Class TupleFormatter<T1, T2, T3, T4> Inheritance object TupleFormatter<T1, T2, T3, T4> Implements IMessagePackFormatter<Tuple<T1, T2, T3, T4>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TupleFormatter<T1, T2, T3, T4> : IMessagePackFormatter<Tuple<T1, T2, T3, T4>?> Type Parameters Name Description T1 T2 T3 T4 Constructors TupleFormatter() Declaration public TupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Tuple<T1, T2, T3, T4>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Type Description Tuple<T1, T2, T3, T4> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3, T4>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3, T4>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Tuple<T1, T2, T3, T4> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TupleFormatter-5.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-5.html",
    "title": "Class TupleFormatter<T1, T2, T3, T4, T5> | CodeFactory for Windows",
    "keywords": "Class TupleFormatter<T1, T2, T3, T4, T5> Inheritance object TupleFormatter<T1, T2, T3, T4, T5> Implements IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TupleFormatter<T1, T2, T3, T4, T5> : IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5>?> Type Parameters Name Description T1 T2 T3 T4 T5 Constructors TupleFormatter() Declaration public TupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Tuple<T1, T2, T3, T4, T5>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Type Description Tuple<T1, T2, T3, T4, T5> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3, T4, T5>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3, T4, T5>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Tuple<T1, T2, T3, T4, T5> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TupleFormatter-6.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-6.html",
    "title": "Class TupleFormatter<T1, T2, T3, T4, T5, T6> | CodeFactory for Windows",
    "keywords": "Class TupleFormatter<T1, T2, T3, T4, T5, T6> Inheritance object TupleFormatter<T1, T2, T3, T4, T5, T6> Implements IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TupleFormatter<T1, T2, T3, T4, T5, T6> : IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6>?> Type Parameters Name Description T1 T2 T3 T4 T5 T6 Constructors TupleFormatter() Declaration public TupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Tuple<T1, T2, T3, T4, T5, T6>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Type Description Tuple<T1, T2, T3, T4, T5, T6> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3, T4, T5, T6>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3, T4, T5, T6>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Tuple<T1, T2, T3, T4, T5, T6> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TupleFormatter-7.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-7.html",
    "title": "Class TupleFormatter<T1, T2, T3, T4, T5, T6, T7> | CodeFactory for Windows",
    "keywords": "Class TupleFormatter<T1, T2, T3, T4, T5, T6, T7> Inheritance object TupleFormatter<T1, T2, T3, T4, T5, T6, T7> Implements IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6, T7>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TupleFormatter<T1, T2, T3, T4, T5, T6, T7> : IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6, T7>?> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 Constructors TupleFormatter() Declaration public TupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Tuple<T1, T2, T3, T4, T5, T6, T7>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Type Description Tuple<T1, T2, T3, T4, T5, T6, T7> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3, T4, T5, T6, T7>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3, T4, T5, T6, T7>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Tuple<T1, T2, T3, T4, T5, T6, T7> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TupleFormatter-8.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-8.html",
    "title": "Class TupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> | CodeFactory for Windows",
    "keywords": "Class TupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> Inheritance object TupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> Implements IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> : IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>?> where TRest : notnull Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 TRest Constructors TupleFormatter() Declaration public TupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Type Description Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TwoDimensionalArrayFormatter-1.html": {
    "href": "api/MessagePack.Formatters.TwoDimensionalArrayFormatter-1.html",
    "title": "Class TwoDimensionalArrayFormatter<T> | CodeFactory for Windows",
    "keywords": "Class TwoDimensionalArrayFormatter<T> Inheritance object TwoDimensionalArrayFormatter<T> Implements IMessagePackFormatter<T[,]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TwoDimensionalArrayFormatter<T> : IMessagePackFormatter<T[,]?> Type Parameters Name Description T Constructors TwoDimensionalArrayFormatter() Declaration public TwoDimensionalArrayFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T[,]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T[,] The deserialized value. Serialize(ref MessagePackWriter, T[,]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T[,]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T[,] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TypeFormatter-1.html": {
    "href": "api/MessagePack.Formatters.TypeFormatter-1.html",
    "title": "Class TypeFormatter<T> | CodeFactory for Windows",
    "keywords": "Class TypeFormatter<T> Serializes any instance of Type by its AssemblyQualifiedName value. Inheritance object TypeFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TypeFormatter<T> : IMessagePackFormatter<T?> where T : Type Type Parameters Name Description T The Type class itself or a derived type. Fields Instance Declaration public static readonly IMessagePackFormatter<T?> Instance Field Value Type Description IMessagePackFormatter<T> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description T The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. T value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.TypelessFormatter.html": {
    "href": "api/MessagePack.Formatters.TypelessFormatter.html",
    "title": "Class TypelessFormatter | CodeFactory for Windows",
    "keywords": "Class TypelessFormatter For object field that holds derived from object value, ex: var arr = new object[] { 1, \"a\", new Model() };. Inheritance object TypelessFormatter Implements IMessagePackFormatter<object> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class TypelessFormatter : IMessagePackFormatter<object?> Constructors TypelessFormatter() Declaration public TypelessFormatter() Fields Instance The singleton instance that can be used. Declaration public static readonly IMessagePackFormatter<object?> Instance Field Value Type Description IMessagePackFormatter<object> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public object? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object. Returns Type Description object The deserialized value. Serialize(ref MessagePackWriter, object?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, object? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. object value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.UInt16ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.UInt16ArrayFormatter.html",
    "title": "Class UInt16ArrayFormatter | CodeFactory for Windows",
    "keywords": "Class UInt16ArrayFormatter Inheritance object UInt16ArrayFormatter Implements IMessagePackFormatter<ushort[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class UInt16ArrayFormatter : IMessagePackFormatter<ushort[]?> Fields Instance Declaration public static readonly UInt16ArrayFormatter Instance Field Value Type Description UInt16ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ushort[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description ushort[] The deserialized value. Serialize(ref MessagePackWriter, ushort[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ushort[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ushort[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.UInt16Formatter.html": {
    "href": "api/MessagePack.Formatters.UInt16Formatter.html",
    "title": "Class UInt16Formatter | CodeFactory for Windows",
    "keywords": "Class UInt16Formatter Inheritance object UInt16Formatter Implements IMessagePackFormatter<ushort> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class UInt16Formatter : IMessagePackFormatter<ushort> Fields Instance Declaration public static readonly UInt16Formatter Instance Field Value Type Description UInt16Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ushort Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ushort. Returns Type Description ushort The deserialized value. Serialize(ref MessagePackWriter, ushort, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ushort value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ushort value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ushort. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.UInt32ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.UInt32ArrayFormatter.html",
    "title": "Class UInt32ArrayFormatter | CodeFactory for Windows",
    "keywords": "Class UInt32ArrayFormatter Inheritance object UInt32ArrayFormatter Implements IMessagePackFormatter<uint[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class UInt32ArrayFormatter : IMessagePackFormatter<uint[]?> Fields Instance Declaration public static readonly UInt32ArrayFormatter Instance Field Value Type Description UInt32ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public uint[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description uint[] The deserialized value. Serialize(ref MessagePackWriter, uint[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, uint[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. uint[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.UInt32Formatter.html": {
    "href": "api/MessagePack.Formatters.UInt32Formatter.html",
    "title": "Class UInt32Formatter | CodeFactory for Windows",
    "keywords": "Class UInt32Formatter Inheritance object UInt32Formatter Implements IMessagePackFormatter<uint> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class UInt32Formatter : IMessagePackFormatter<uint> Fields Instance Declaration public static readonly UInt32Formatter Instance Field Value Type Description UInt32Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public uint Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type uint. Returns Type Description uint The deserialized value. Serialize(ref MessagePackWriter, uint, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, uint value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. uint value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type uint. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.UInt64ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.UInt64ArrayFormatter.html",
    "title": "Class UInt64ArrayFormatter | CodeFactory for Windows",
    "keywords": "Class UInt64ArrayFormatter Inheritance object UInt64ArrayFormatter Implements IMessagePackFormatter<ulong[]> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class UInt64ArrayFormatter : IMessagePackFormatter<ulong[]?> Fields Instance Declaration public static readonly UInt64ArrayFormatter Instance Field Value Type Description UInt64ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ulong[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns Type Description ulong[] The deserialized value. Serialize(ref MessagePackWriter, ulong[]?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ulong[]? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ulong[] value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.UInt64Formatter.html": {
    "href": "api/MessagePack.Formatters.UInt64Formatter.html",
    "title": "Class UInt64Formatter | CodeFactory for Windows",
    "keywords": "Class UInt64Formatter Inheritance object UInt64Formatter Implements IMessagePackFormatter<ulong> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class UInt64Formatter : IMessagePackFormatter<ulong> Fields Instance Declaration public static readonly UInt64Formatter Instance Field Value Type Description UInt64Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ulong Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ulong. Returns Type Description ulong The deserialized value. Serialize(ref MessagePackWriter, ulong, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ulong value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ulong value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ulong. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.UriFormatter.html": {
    "href": "api/MessagePack.Formatters.UriFormatter.html",
    "title": "Class UriFormatter | CodeFactory for Windows",
    "keywords": "Class UriFormatter Inheritance object UriFormatter Implements IMessagePackFormatter<Uri> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class UriFormatter : IMessagePackFormatter<Uri?> Fields Instance Declaration public static readonly IMessagePackFormatter<Uri?> Instance Field Value Type Description IMessagePackFormatter<Uri> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Uri? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Uri. Returns Type Description Uri The deserialized value. Serialize(ref MessagePackWriter, Uri?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Uri? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Uri value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Uri. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-1.html",
    "title": "Class ValueTupleFormatter<T1> | CodeFactory for Windows",
    "keywords": "Class ValueTupleFormatter<T1> Inheritance object ValueTupleFormatter<T1> Implements IMessagePackFormatter<ValueTuple<T1>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ValueTupleFormatter<T1> : IMessagePackFormatter<ValueTuple<T1>> Type Parameters Name Description T1 Constructors ValueTupleFormatter() Declaration public ValueTupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ValueTuple<T1> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns Type Description ValueTuple<T1> The deserialized value. Serialize(ref MessagePackWriter, ValueTuple<T1>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ValueTuple<T1> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ValueTuple<T1> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-2.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-2.html",
    "title": "Class ValueTupleFormatter<T1, T2> | CodeFactory for Windows",
    "keywords": "Class ValueTupleFormatter<T1, T2> Inheritance object ValueTupleFormatter<T1, T2> Implements IMessagePackFormatter<(T1, T2)> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ValueTupleFormatter<T1, T2> : IMessagePackFormatter<(T1, T2)> Type Parameters Name Description T1 T2 Constructors ValueTupleFormatter() Declaration public ValueTupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public (T1, T2) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns Type Description (T1, T2) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2), MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, (T1, T2) value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. (T1, T2) value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-3.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-3.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3> | CodeFactory for Windows",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3> Inheritance object ValueTupleFormatter<T1, T2, T3> Implements IMessagePackFormatter<(T1, T2, T3)> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ValueTupleFormatter<T1, T2, T3> : IMessagePackFormatter<(T1, T2, T3)> Type Parameters Name Description T1 T2 T3 Constructors ValueTupleFormatter() Declaration public ValueTupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public (T1, T2, T3) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns Type Description (T1, T2, T3) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2, T3), MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, (T1, T2, T3) value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. (T1, T2, T3) value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-4.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-4.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3, T4> | CodeFactory for Windows",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3, T4> Inheritance object ValueTupleFormatter<T1, T2, T3, T4> Implements IMessagePackFormatter<(T1, T2, T3, T4)> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ValueTupleFormatter<T1, T2, T3, T4> : IMessagePackFormatter<(T1, T2, T3, T4)> Type Parameters Name Description T1 T2 T3 T4 Constructors ValueTupleFormatter() Declaration public ValueTupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public (T1, T2, T3, T4) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns Type Description (T1, T2, T3, T4) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2, T3, T4), MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, (T1, T2, T3, T4) value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. (T1, T2, T3, T4) value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-5.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-5.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3, T4, T5> | CodeFactory for Windows",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3, T4, T5> Inheritance object ValueTupleFormatter<T1, T2, T3, T4, T5> Implements IMessagePackFormatter<(T1, T2, T3, T4, T5)> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ValueTupleFormatter<T1, T2, T3, T4, T5> : IMessagePackFormatter<(T1, T2, T3, T4, T5)> Type Parameters Name Description T1 T2 T3 T4 T5 Constructors ValueTupleFormatter() Declaration public ValueTupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public (T1, T2, T3, T4, T5) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns Type Description (T1, T2, T3, T4, T5) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2, T3, T4, T5), MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, (T1, T2, T3, T4, T5) value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. (T1, T2, T3, T4, T5) value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-6.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-6.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6> | CodeFactory for Windows",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6> Inheritance object ValueTupleFormatter<T1, T2, T3, T4, T5, T6> Implements IMessagePackFormatter<(T1, T2, T3, T4, T5, T6)> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ValueTupleFormatter<T1, T2, T3, T4, T5, T6> : IMessagePackFormatter<(T1, T2, T3, T4, T5, T6)> Type Parameters Name Description T1 T2 T3 T4 T5 T6 Constructors ValueTupleFormatter() Declaration public ValueTupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public (T1, T2, T3, T4, T5, T6) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns Type Description (T1, T2, T3, T4, T5, T6) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2, T3, T4, T5, T6), MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, (T1, T2, T3, T4, T5, T6) value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. (T1, T2, T3, T4, T5, T6) value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-7.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-7.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7> | CodeFactory for Windows",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7> Inheritance object ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7> Implements IMessagePackFormatter<(T1, T2, T3, T4, T5, T6, T7)> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7> : IMessagePackFormatter<(T1, T2, T3, T4, T5, T6, T7)> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 Constructors ValueTupleFormatter() Declaration public ValueTupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public (T1, T2, T3, T4, T5, T6, T7) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns Type Description (T1, T2, T3, T4, T5, T6, T7) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2, T3, T4, T5, T6, T7), MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, (T1, T2, T3, T4, T5, T6, T7) value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. (T1, T2, T3, T4, T5, T6, T7) value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-8.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-8.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> | CodeFactory for Windows",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> Inheritance object ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> Implements IMessagePackFormatter<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> : IMessagePackFormatter<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>> where TRest : struct Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 TRest Constructors ValueTupleFormatter() Declaration public ValueTupleFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns Type Description ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> The deserialized value. Serialize(ref MessagePackWriter, ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.VersionFormatter.html": {
    "href": "api/MessagePack.Formatters.VersionFormatter.html",
    "title": "Class VersionFormatter | CodeFactory for Windows",
    "keywords": "Class VersionFormatter Inheritance object VersionFormatter Implements IMessagePackFormatter<Version> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Formatters Assembly: MessagePack.dll Syntax public sealed class VersionFormatter : IMessagePackFormatter<Version?> Fields Instance Declaration public static readonly IMessagePackFormatter<Version?> Instance Field Value Type Description IMessagePackFormatter<Version> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public Version? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Version. Returns Type Description Version The deserialized value. Serialize(ref MessagePackWriter, Version?, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, Version? value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. Version value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Version. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.Formatters.html": {
    "href": "api/MessagePack.Formatters.html",
    "title": "Namespace MessagePack.Formatters | CodeFactory for Windows",
    "keywords": "Namespace MessagePack.Formatters Classes ArrayFormatter<T> ArraySegmentFormatter<T> BigIntegerFormatter BitArrayFormatter BooleanArrayFormatter BooleanFormatter ByteArrayFormatter Serializes a byte array as a bin type. Deserializes a bin type or an array of byte-sized integers into a byte array. ByteArraySegmentFormatter ByteFormatter ByteMemoryFormatter ByteReadOnlyMemoryFormatter ByteReadOnlySequenceFormatter CharArrayFormatter CharFormatter CollectionFormatterBase<TElement, TCollection> CollectionFormatterBase<TElement, TIntermediate, TCollection> CollectionFormatterBase<TElement, TIntermediate, TEnumerator, TCollection> ComplexFormatter ConcurrentBagFormatter<T> ConcurrentDictionaryFormatter<TKey, TValue> ConcurrentQueueFormatter<T> ConcurrentStackFormatter<T> DateTimeArrayFormatter DateTimeFormatter DateTimeOffsetFormatter DecimalFormatter DictionaryFormatterBase<TKey, TValue, TDictionary> DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> DictionaryFormatterBase<TKey, TValue, TIntermediate, TEnumerator, TDictionary> DictionaryFormatter<TKey, TValue> DoubleArrayFormatter DoubleFormatter DynamicObjectTypeFallbackFormatter This formatter can serialize any value whose static type is object for which another resolver can provide a formatter for the runtime type. Its deserialization is limited to forwarding all calls to the PrimitiveObjectFormatter. EnumAsStringFormatter<T> ExpandoObjectFormatter ForceByteBlockFormatter ForceInt16BlockArrayFormatter ForceInt16BlockFormatter ForceInt32BlockArrayFormatter ForceInt32BlockFormatter ForceInt64BlockArrayFormatter ForceInt64BlockFormatter ForceSByteBlockArrayFormatter ForceSByteBlockFormatter ForceTypelessFormatter<T> Force serialize object as typeless. ForceUInt16BlockArrayFormatter ForceUInt16BlockFormatter ForceUInt32BlockArrayFormatter ForceUInt32BlockFormatter ForceUInt64BlockArrayFormatter ForceUInt64BlockFormatter FourDimensionalArrayFormatter<T> GenericCollectionFormatter<TElement, TCollection> GenericDictionaryFormatter<TKey, TValue, TDictionary> GenericEnumFormatter<T> GenericEnumerableFormatter<TElement, TCollection> GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> GuidFormatter HashSetFormatter<T> IgnoreFormatter<T> Int16ArrayFormatter Int16Formatter Int32ArrayFormatter Int32Formatter Int64ArrayFormatter Int64Formatter InterfaceCollectionFormatter2<T> InterfaceCollectionFormatter<T> InterfaceDictionaryFormatter<TKey, TValue> InterfaceEnumerableFormatter<T> InterfaceGroupingFormatter<TKey, TElement> InterfaceListFormatter2<T> InterfaceListFormatter<T> InterfaceLookupFormatter<TKey, TElement> InterfaceReadOnlyCollectionFormatter<T> InterfaceReadOnlyDictionaryFormatter<TKey, TValue> InterfaceReadOnlyListFormatter<T> InterfaceSetFormatter<T> KeyValuePairFormatter<TKey, TValue> LazyFormatter<T> LinkedListFormatter<T> ListFormatter<T> MemoryFormatter<T> NativeDateTimeArrayFormatter NativeDateTimeFormatter Serialize by .NET native DateTime binary format. NativeDecimalFormatter NativeGuidFormatter NilFormatter NonGenericDictionaryFormatter<T> NonGenericInterfaceCollectionFormatter NonGenericInterfaceDictionaryFormatter NonGenericInterfaceEnumerableFormatter NonGenericInterfaceListFormatter NonGenericListFormatter<T> NullableBooleanFormatter NullableByteFormatter NullableCharFormatter NullableDateTimeFormatter NullableDoubleFormatter NullableForceByteBlockFormatter NullableForceInt16BlockFormatter NullableForceInt32BlockFormatter NullableForceInt64BlockFormatter NullableForceSByteBlockFormatter NullableForceUInt16BlockFormatter NullableForceUInt32BlockFormatter NullableForceUInt64BlockFormatter NullableFormatter<T> NullableInt16Formatter NullableInt32Formatter NullableInt64Formatter NullableNilFormatter NullableSByteFormatter NullableSingleFormatter NullableStringArrayFormatter NullableStringFormatter NullableUInt16Formatter NullableUInt32Formatter NullableUInt64Formatter ObservableCollectionFormatter<T> PrimitiveObjectFormatter QueueFormatter<T> ReadOnlyCollectionFormatter<T> ReadOnlyDictionaryFormatter<TKey, TValue> ReadOnlyMemoryFormatter<T> ReadOnlyObservableCollectionFormatter<T> ReadOnlySequenceFormatter<T> SByteArrayFormatter SByteFormatter SingleArrayFormatter SingleFormatter SortedDictionaryFormatter<TKey, TValue> SortedListFormatter<TKey, TValue> StackFormatter<T> StaticNullableFormatter<T> StringBuilderFormatter StringInterningFormatter A string formatter that interns strings on deserialization. ThreeDimensionalArrayFormatter<T> TimeSpanFormatter TupleFormatter<T1> TupleFormatter<T1, T2> TupleFormatter<T1, T2, T3> TupleFormatter<T1, T2, T3, T4> TupleFormatter<T1, T2, T3, T4, T5> TupleFormatter<T1, T2, T3, T4, T5, T6> TupleFormatter<T1, T2, T3, T4, T5, T6, T7> TupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> TwoDimensionalArrayFormatter<T> TypeFormatter<T> Serializes any instance of Type by its AssemblyQualifiedName value. TypelessFormatter For object field that holds derived from object value, ex: var arr = new object[] { 1, \"a\", new Model() };. UInt16ArrayFormatter UInt16Formatter UInt32ArrayFormatter UInt32Formatter UInt64ArrayFormatter UInt64Formatter UriFormatter ValueTupleFormatter<T1> ValueTupleFormatter<T1, T2> ValueTupleFormatter<T1, T2, T3> ValueTupleFormatter<T1, T2, T3, T4> ValueTupleFormatter<T1, T2, T3, T4, T5> ValueTupleFormatter<T1, T2, T3, T4, T5, T6> ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7> ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> VersionFormatter Interfaces IMessagePackFormatter<T> The contract for serialization of some specific type."
  },
  "api/MessagePack.IFormatterResolver.html": {
    "href": "api/MessagePack.IFormatterResolver.html",
    "title": "Interface IFormatterResolver | CodeFactory for Windows",
    "keywords": "Interface IFormatterResolver Allows querying for a formatter for serializing or deserializing a particular Type. Namespace: MessagePack Assembly: MessagePack.dll Syntax public interface IFormatterResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.IMessagePackSerializationCallbackReceiver.html": {
    "href": "api/MessagePack.IMessagePackSerializationCallbackReceiver.html",
    "title": "Interface IMessagePackSerializationCallbackReceiver | CodeFactory for Windows",
    "keywords": "Interface IMessagePackSerializationCallbackReceiver Namespace: MessagePack Assembly: MessagePack.Annotations.dll Syntax public interface IMessagePackSerializationCallbackReceiver Methods OnAfterDeserialize() Declaration void OnAfterDeserialize() OnBeforeSerialize() Declaration void OnBeforeSerialize()"
  },
  "api/MessagePack.IgnoreMemberAttribute.html": {
    "href": "api/MessagePack.IgnoreMemberAttribute.html",
    "title": "Class IgnoreMemberAttribute | CodeFactory for Windows",
    "keywords": "Class IgnoreMemberAttribute Inheritance object Attribute IgnoreMemberAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.Annotations.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public class IgnoreMemberAttribute : Attribute Constructors IgnoreMemberAttribute() Declaration public IgnoreMemberAttribute()"
  },
  "api/MessagePack.ImmutableCollection.ImmutableArrayFormatter-1.html": {
    "href": "api/MessagePack.ImmutableCollection.ImmutableArrayFormatter-1.html",
    "title": "Class ImmutableArrayFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableArrayFormatter<T> Inheritance object ImmutableArrayFormatter<T> Implements IMessagePackFormatter<ImmutableArray<T>> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class ImmutableArrayFormatter<T> : IMessagePackFormatter<ImmutableArray<T>> Type Parameters Name Description T Constructors ImmutableArrayFormatter() Declaration public ImmutableArrayFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. Declaration public ImmutableArray<T> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ImmutableArray. Returns Type Description ImmutableArray<T> The deserialized value. Serialize(ref MessagePackWriter, ImmutableArray<T>, MessagePackSerializerOptions) Serializes a value. Declaration public void Serialize(ref MessagePackWriter writer, ImmutableArray<T> value, MessagePackSerializerOptions options) Parameters Type Name Description MessagePackWriter writer The writer to use when serializing the value. ImmutableArray<T> value The value to be serialized. MessagePackSerializerOptions options The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ImmutableArray. Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.ImmutableCollectionResolver.html": {
    "href": "api/MessagePack.ImmutableCollection.ImmutableCollectionResolver.html",
    "title": "Class ImmutableCollectionResolver | CodeFactory for Windows",
    "keywords": "Class ImmutableCollectionResolver Inheritance object ImmutableCollectionResolver Implements IFormatterResolver Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class ImmutableCollectionResolver : IFormatterResolver Fields Instance Declaration public static readonly ImmutableCollectionResolver Instance Field Value Type Description ImmutableCollectionResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.ImmutableCollection.ImmutableDictionaryFormatter-2.html": {
    "href": "api/MessagePack.ImmutableCollection.ImmutableDictionaryFormatter-2.html",
    "title": "Class ImmutableDictionaryFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class ImmutableDictionaryFormatter<TKey, TValue> Inheritance object DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>> ImmutableDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<ImmutableDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, ImmutableDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>.GetSourceEnumerator(ImmutableDictionary<TKey, TValue>) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>.Add(ImmutableDictionary<TKey, TValue>.Builder, int, TKey, TValue, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>.Complete(ImmutableDictionary<TKey, TValue>.Builder) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class ImmutableDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>, IMessagePackFormatter<ImmutableDictionary<TKey, TValue>?> Type Parameters Name Description TKey TValue Constructors ImmutableDictionaryFormatter() Declaration public ImmutableDictionaryFormatter() Methods Add(Builder, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(ImmutableDictionary<TKey, TValue>.Builder collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description ImmutableDictionary<TKey, TValue>.Builder collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>.Add(ImmutableDictionary<TKey, TValue>.Builder, int, TKey, TValue, MessagePackSerializerOptions) Complete(Builder) Declaration protected override ImmutableDictionary<TKey, TValue> Complete(ImmutableDictionary<TKey, TValue>.Builder intermediateCollection) Parameters Type Name Description ImmutableDictionary<TKey, TValue>.Builder intermediateCollection Returns Type Description ImmutableDictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>.Complete(ImmutableDictionary<TKey, TValue>.Builder) Create(int, MessagePackSerializerOptions) Declaration protected override ImmutableDictionary<TKey, TValue>.Builder Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ImmutableDictionary<TKey, TValue>.Builder Overrides DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) GetSourceEnumerator(ImmutableDictionary<TKey, TValue>) Declaration protected override ImmutableDictionary<TKey, TValue>.Enumerator GetSourceEnumerator(ImmutableDictionary<TKey, TValue> source) Parameters Type Name Description ImmutableDictionary<TKey, TValue> source Returns Type Description ImmutableDictionary<TKey, TValue>.Enumerator Overrides DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, ImmutableDictionary<TKey, TValue>.Enumerator, ImmutableDictionary<TKey, TValue>>.GetSourceEnumerator(ImmutableDictionary<TKey, TValue>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.ImmutableHashSetFormatter-1.html": {
    "href": "api/MessagePack.ImmutableCollection.ImmutableHashSetFormatter-1.html",
    "title": "Class ImmutableHashSetFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableHashSetFormatter<T> Inheritance object CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>> ImmutableHashSetFormatter<T> Implements IMessagePackFormatter<ImmutableHashSet<T>> Inherited Members CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.Serialize(ref MessagePackWriter, ImmutableHashSet<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.GetCount(ImmutableHashSet<T>) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.GetSourceEnumerator(ImmutableHashSet<T>) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.Add(ImmutableHashSet<T>.Builder, int, T, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.Complete(ImmutableHashSet<T>.Builder) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class ImmutableHashSetFormatter<T> : CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>, IMessagePackFormatter<ImmutableHashSet<T>?> Type Parameters Name Description T Constructors ImmutableHashSetFormatter() Declaration public ImmutableHashSetFormatter() Methods Add(Builder, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ImmutableHashSet<T>.Builder collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ImmutableHashSet<T>.Builder collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.Add(ImmutableHashSet<T>.Builder, int, T, MessagePackSerializerOptions) Complete(Builder) Declaration protected override ImmutableHashSet<T> Complete(ImmutableHashSet<T>.Builder intermediateCollection) Parameters Type Name Description ImmutableHashSet<T>.Builder intermediateCollection Returns Type Description ImmutableHashSet<T> Overrides CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.Complete(ImmutableHashSet<T>.Builder) Create(int, MessagePackSerializerOptions) Declaration protected override ImmutableHashSet<T>.Builder Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ImmutableHashSet<T>.Builder Overrides CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.Create(int, MessagePackSerializerOptions) GetSourceEnumerator(ImmutableHashSet<T>) Declaration protected override ImmutableHashSet<T>.Enumerator GetSourceEnumerator(ImmutableHashSet<T> source) Parameters Type Name Description ImmutableHashSet<T> source Returns Type Description ImmutableHashSet<T>.Enumerator Overrides CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, ImmutableHashSet<T>.Enumerator, ImmutableHashSet<T>>.GetSourceEnumerator(ImmutableHashSet<T>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.ImmutableListFormatter-1.html": {
    "href": "api/MessagePack.ImmutableCollection.ImmutableListFormatter-1.html",
    "title": "Class ImmutableListFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableListFormatter<T> Inheritance object CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>> ImmutableListFormatter<T> Implements IMessagePackFormatter<ImmutableList<T>> Inherited Members CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.Serialize(ref MessagePackWriter, ImmutableList<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.GetCount(ImmutableList<T>) CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.GetSourceEnumerator(ImmutableList<T>) CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.Add(ImmutableList<T>.Builder, int, T, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.Complete(ImmutableList<T>.Builder) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class ImmutableListFormatter<T> : CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>, IMessagePackFormatter<ImmutableList<T>?> Type Parameters Name Description T Constructors ImmutableListFormatter() Declaration public ImmutableListFormatter() Methods Add(Builder, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ImmutableList<T>.Builder collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ImmutableList<T>.Builder collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.Add(ImmutableList<T>.Builder, int, T, MessagePackSerializerOptions) Complete(Builder) Declaration protected override ImmutableList<T> Complete(ImmutableList<T>.Builder intermediateCollection) Parameters Type Name Description ImmutableList<T>.Builder intermediateCollection Returns Type Description ImmutableList<T> Overrides CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.Complete(ImmutableList<T>.Builder) Create(int, MessagePackSerializerOptions) Declaration protected override ImmutableList<T>.Builder Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ImmutableList<T>.Builder Overrides CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.Create(int, MessagePackSerializerOptions) GetSourceEnumerator(ImmutableList<T>) Declaration protected override ImmutableList<T>.Enumerator GetSourceEnumerator(ImmutableList<T> source) Parameters Type Name Description ImmutableList<T> source Returns Type Description ImmutableList<T>.Enumerator Overrides CollectionFormatterBase<T, ImmutableList<T>.Builder, ImmutableList<T>.Enumerator, ImmutableList<T>>.GetSourceEnumerator(ImmutableList<T>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.ImmutableQueueBuilder-1.html": {
    "href": "api/MessagePack.ImmutableCollection.ImmutableQueueBuilder-1.html",
    "title": "Class ImmutableQueueBuilder<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableQueueBuilder<T> Inheritance object ImmutableQueueBuilder<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class ImmutableQueueBuilder<T> Type Parameters Name Description T Constructors ImmutableQueueBuilder() Declaration public ImmutableQueueBuilder() Properties Q Declaration public ImmutableQueue<T> Q { get; set; } Property Value Type Description ImmutableQueue<T> Methods Add(T) Declaration public void Add(T value) Parameters Type Name Description T value"
  },
  "api/MessagePack.ImmutableCollection.ImmutableQueueFormatter-1.html": {
    "href": "api/MessagePack.ImmutableCollection.ImmutableQueueFormatter-1.html",
    "title": "Class ImmutableQueueFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableQueueFormatter<T> Inheritance object CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>> CollectionFormatterBase<T, ImmutableQueueBuilder<T>, ImmutableQueue<T>> ImmutableQueueFormatter<T> Implements IMessagePackFormatter<ImmutableQueue<T>> Inherited Members CollectionFormatterBase<T, ImmutableQueueBuilder<T>, ImmutableQueue<T>>.GetSourceEnumerator(ImmutableQueue<T>) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>>.Serialize(ref MessagePackWriter, ImmutableQueue<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>>.GetCount(ImmutableQueue<T>) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>>.GetSourceEnumerator(ImmutableQueue<T>) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>>.Add(ImmutableQueueBuilder<T>, int, T, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>>.Complete(ImmutableQueueBuilder<T>) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class ImmutableQueueFormatter<T> : CollectionFormatterBase<T, ImmutableQueueBuilder<T>, ImmutableQueue<T>>, IMessagePackFormatter<ImmutableQueue<T>?> Type Parameters Name Description T Constructors ImmutableQueueFormatter() Declaration public ImmutableQueueFormatter() Methods Add(ImmutableQueueBuilder<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ImmutableQueueBuilder<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ImmutableQueueBuilder<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>>.Add(ImmutableQueueBuilder<T>, int, T, MessagePackSerializerOptions) Complete(ImmutableQueueBuilder<T>) Declaration protected override ImmutableQueue<T> Complete(ImmutableQueueBuilder<T> intermediateCollection) Parameters Type Name Description ImmutableQueueBuilder<T> intermediateCollection Returns Type Description ImmutableQueue<T> Overrides CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>>.Complete(ImmutableQueueBuilder<T>) Create(int, MessagePackSerializerOptions) Declaration protected override ImmutableQueueBuilder<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ImmutableQueueBuilder<T> Overrides CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, ImmutableQueue<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.ImmutableSortedDictionaryFormatter-2.html": {
    "href": "api/MessagePack.ImmutableCollection.ImmutableSortedDictionaryFormatter-2.html",
    "title": "Class ImmutableSortedDictionaryFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class ImmutableSortedDictionaryFormatter<TKey, TValue> Inheritance object DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>> ImmutableSortedDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<ImmutableSortedDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, ImmutableSortedDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>.GetSourceEnumerator(ImmutableSortedDictionary<TKey, TValue>) DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>.Add(ImmutableSortedDictionary<TKey, TValue>.Builder, int, TKey, TValue, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>.Complete(ImmutableSortedDictionary<TKey, TValue>.Builder) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class ImmutableSortedDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>, IMessagePackFormatter<ImmutableSortedDictionary<TKey, TValue>?> Type Parameters Name Description TKey TValue Constructors ImmutableSortedDictionaryFormatter() Declaration public ImmutableSortedDictionaryFormatter() Methods Add(Builder, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(ImmutableSortedDictionary<TKey, TValue>.Builder collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description ImmutableSortedDictionary<TKey, TValue>.Builder collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>.Add(ImmutableSortedDictionary<TKey, TValue>.Builder, int, TKey, TValue, MessagePackSerializerOptions) Complete(Builder) Declaration protected override ImmutableSortedDictionary<TKey, TValue> Complete(ImmutableSortedDictionary<TKey, TValue>.Builder intermediateCollection) Parameters Type Name Description ImmutableSortedDictionary<TKey, TValue>.Builder intermediateCollection Returns Type Description ImmutableSortedDictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>.Complete(ImmutableSortedDictionary<TKey, TValue>.Builder) Create(int, MessagePackSerializerOptions) Declaration protected override ImmutableSortedDictionary<TKey, TValue>.Builder Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ImmutableSortedDictionary<TKey, TValue>.Builder Overrides DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) GetSourceEnumerator(ImmutableSortedDictionary<TKey, TValue>) Declaration protected override ImmutableSortedDictionary<TKey, TValue>.Enumerator GetSourceEnumerator(ImmutableSortedDictionary<TKey, TValue> source) Parameters Type Name Description ImmutableSortedDictionary<TKey, TValue> source Returns Type Description ImmutableSortedDictionary<TKey, TValue>.Enumerator Overrides DictionaryFormatterBase<TKey, TValue, ImmutableSortedDictionary<TKey, TValue>.Builder, ImmutableSortedDictionary<TKey, TValue>.Enumerator, ImmutableSortedDictionary<TKey, TValue>>.GetSourceEnumerator(ImmutableSortedDictionary<TKey, TValue>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.ImmutableSortedSetFormatter-1.html": {
    "href": "api/MessagePack.ImmutableCollection.ImmutableSortedSetFormatter-1.html",
    "title": "Class ImmutableSortedSetFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableSortedSetFormatter<T> Inheritance object CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>> ImmutableSortedSetFormatter<T> Implements IMessagePackFormatter<ImmutableSortedSet<T>> Inherited Members CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.Serialize(ref MessagePackWriter, ImmutableSortedSet<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.GetCount(ImmutableSortedSet<T>) CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.GetSourceEnumerator(ImmutableSortedSet<T>) CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.Add(ImmutableSortedSet<T>.Builder, int, T, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.Complete(ImmutableSortedSet<T>.Builder) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class ImmutableSortedSetFormatter<T> : CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>, IMessagePackFormatter<ImmutableSortedSet<T>?> Type Parameters Name Description T Constructors ImmutableSortedSetFormatter() Declaration public ImmutableSortedSetFormatter() Methods Add(Builder, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ImmutableSortedSet<T>.Builder collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ImmutableSortedSet<T>.Builder collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.Add(ImmutableSortedSet<T>.Builder, int, T, MessagePackSerializerOptions) Complete(Builder) Declaration protected override ImmutableSortedSet<T> Complete(ImmutableSortedSet<T>.Builder intermediateCollection) Parameters Type Name Description ImmutableSortedSet<T>.Builder intermediateCollection Returns Type Description ImmutableSortedSet<T> Overrides CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.Complete(ImmutableSortedSet<T>.Builder) Create(int, MessagePackSerializerOptions) Declaration protected override ImmutableSortedSet<T>.Builder Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ImmutableSortedSet<T>.Builder Overrides CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.Create(int, MessagePackSerializerOptions) GetSourceEnumerator(ImmutableSortedSet<T>) Declaration protected override ImmutableSortedSet<T>.Enumerator GetSourceEnumerator(ImmutableSortedSet<T> source) Parameters Type Name Description ImmutableSortedSet<T> source Returns Type Description ImmutableSortedSet<T>.Enumerator Overrides CollectionFormatterBase<T, ImmutableSortedSet<T>.Builder, ImmutableSortedSet<T>.Enumerator, ImmutableSortedSet<T>>.GetSourceEnumerator(ImmutableSortedSet<T>) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.ImmutableStackFormatter-1.html": {
    "href": "api/MessagePack.ImmutableCollection.ImmutableStackFormatter-1.html",
    "title": "Class ImmutableStackFormatter<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableStackFormatter<T> Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>> CollectionFormatterBase<T, T[], ImmutableStack<T>> ImmutableStackFormatter<T> Implements IMessagePackFormatter<ImmutableStack<T>> Inherited Members CollectionFormatterBase<T, T[], ImmutableStack<T>>.GetSourceEnumerator(ImmutableStack<T>) CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>>.Serialize(ref MessagePackWriter, ImmutableStack<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>>.GetCount(ImmutableStack<T>) CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>>.GetSourceEnumerator(ImmutableStack<T>) CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>>.Add(T[], int, T, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>>.Complete(T[]) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class ImmutableStackFormatter<T> : CollectionFormatterBase<T, T[], ImmutableStack<T>>, IMessagePackFormatter<ImmutableStack<T>?> Type Parameters Name Description T Constructors ImmutableStackFormatter() Declaration public ImmutableStackFormatter() Methods Add(T[], int, T, MessagePackSerializerOptions) Declaration protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description T[] collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>>.Add(T[], int, T, MessagePackSerializerOptions) Complete(T[]) Declaration protected override ImmutableStack<T> Complete(T[] intermediateCollection) Parameters Type Name Description T[] intermediateCollection Returns Type Description ImmutableStack<T> Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>>.Complete(T[]) Create(int, MessagePackSerializerOptions) Declaration protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description T[] Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, ImmutableStack<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.InterfaceImmutableDictionaryFormatter-2.html": {
    "href": "api/MessagePack.ImmutableCollection.InterfaceImmutableDictionaryFormatter-2.html",
    "title": "Class InterfaceImmutableDictionaryFormatter<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class InterfaceImmutableDictionaryFormatter<TKey, TValue> Inheritance object DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IEnumerator<KeyValuePair<TKey, TValue>>, IImmutableDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IImmutableDictionary<TKey, TValue>> InterfaceImmutableDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<IImmutableDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IImmutableDictionary<TKey, TValue>>.GetSourceEnumerator(IImmutableDictionary<TKey, TValue>) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IEnumerator<KeyValuePair<TKey, TValue>>, IImmutableDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, IImmutableDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IEnumerator<KeyValuePair<TKey, TValue>>, IImmutableDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IEnumerator<KeyValuePair<TKey, TValue>>, IImmutableDictionary<TKey, TValue>>.GetSourceEnumerator(IImmutableDictionary<TKey, TValue>) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IEnumerator<KeyValuePair<TKey, TValue>>, IImmutableDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IEnumerator<KeyValuePair<TKey, TValue>>, IImmutableDictionary<TKey, TValue>>.Add(ImmutableDictionary<TKey, TValue>.Builder, int, TKey, TValue, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IEnumerator<KeyValuePair<TKey, TValue>>, IImmutableDictionary<TKey, TValue>>.Complete(ImmutableDictionary<TKey, TValue>.Builder) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class InterfaceImmutableDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IImmutableDictionary<TKey, TValue>>, IMessagePackFormatter<IImmutableDictionary<TKey, TValue>?> Type Parameters Name Description TKey TValue Constructors InterfaceImmutableDictionaryFormatter() Declaration public InterfaceImmutableDictionaryFormatter() Methods Add(Builder, int, TKey, TValue, MessagePackSerializerOptions) Declaration protected override void Add(ImmutableDictionary<TKey, TValue>.Builder collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters Type Name Description ImmutableDictionary<TKey, TValue>.Builder collection int index TKey key TValue value MessagePackSerializerOptions options Overrides DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IEnumerator<KeyValuePair<TKey, TValue>>, IImmutableDictionary<TKey, TValue>>.Add(ImmutableDictionary<TKey, TValue>.Builder, int, TKey, TValue, MessagePackSerializerOptions) Complete(Builder) Declaration protected override IImmutableDictionary<TKey, TValue> Complete(ImmutableDictionary<TKey, TValue>.Builder intermediateCollection) Parameters Type Name Description ImmutableDictionary<TKey, TValue>.Builder intermediateCollection Returns Type Description IImmutableDictionary<TKey, TValue> Overrides DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IEnumerator<KeyValuePair<TKey, TValue>>, IImmutableDictionary<TKey, TValue>>.Complete(ImmutableDictionary<TKey, TValue>.Builder) Create(int, MessagePackSerializerOptions) Declaration protected override ImmutableDictionary<TKey, TValue>.Builder Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ImmutableDictionary<TKey, TValue>.Builder Overrides DictionaryFormatterBase<TKey, TValue, ImmutableDictionary<TKey, TValue>.Builder, IEnumerator<KeyValuePair<TKey, TValue>>, IImmutableDictionary<TKey, TValue>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.InterfaceImmutableListFormatter-1.html": {
    "href": "api/MessagePack.ImmutableCollection.InterfaceImmutableListFormatter-1.html",
    "title": "Class InterfaceImmutableListFormatter<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceImmutableListFormatter<T> Inheritance object CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>> CollectionFormatterBase<T, ImmutableList<T>.Builder, IImmutableList<T>> InterfaceImmutableListFormatter<T> Implements IMessagePackFormatter<IImmutableList<T>> Inherited Members CollectionFormatterBase<T, ImmutableList<T>.Builder, IImmutableList<T>>.GetSourceEnumerator(IImmutableList<T>) CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>>.Serialize(ref MessagePackWriter, IImmutableList<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>>.GetCount(IImmutableList<T>) CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>>.GetSourceEnumerator(IImmutableList<T>) CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>>.Add(ImmutableList<T>.Builder, int, T, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>>.Complete(ImmutableList<T>.Builder) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class InterfaceImmutableListFormatter<T> : CollectionFormatterBase<T, ImmutableList<T>.Builder, IImmutableList<T>>, IMessagePackFormatter<IImmutableList<T>?> Type Parameters Name Description T Constructors InterfaceImmutableListFormatter() Declaration public InterfaceImmutableListFormatter() Methods Add(Builder, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ImmutableList<T>.Builder collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ImmutableList<T>.Builder collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>>.Add(ImmutableList<T>.Builder, int, T, MessagePackSerializerOptions) Complete(Builder) Declaration protected override IImmutableList<T> Complete(ImmutableList<T>.Builder intermediateCollection) Parameters Type Name Description ImmutableList<T>.Builder intermediateCollection Returns Type Description IImmutableList<T> Overrides CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>>.Complete(ImmutableList<T>.Builder) Create(int, MessagePackSerializerOptions) Declaration protected override ImmutableList<T>.Builder Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ImmutableList<T>.Builder Overrides CollectionFormatterBase<T, ImmutableList<T>.Builder, IEnumerator<T>, IImmutableList<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.InterfaceImmutableQueueFormatter-1.html": {
    "href": "api/MessagePack.ImmutableCollection.InterfaceImmutableQueueFormatter-1.html",
    "title": "Class InterfaceImmutableQueueFormatter<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceImmutableQueueFormatter<T> Inheritance object CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>> CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IImmutableQueue<T>> InterfaceImmutableQueueFormatter<T> Implements IMessagePackFormatter<IImmutableQueue<T>> Inherited Members CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IImmutableQueue<T>>.GetSourceEnumerator(IImmutableQueue<T>) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>>.Serialize(ref MessagePackWriter, IImmutableQueue<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>>.GetCount(IImmutableQueue<T>) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>>.GetSourceEnumerator(IImmutableQueue<T>) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>>.Add(ImmutableQueueBuilder<T>, int, T, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>>.Complete(ImmutableQueueBuilder<T>) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class InterfaceImmutableQueueFormatter<T> : CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IImmutableQueue<T>>, IMessagePackFormatter<IImmutableQueue<T>?> Type Parameters Name Description T Constructors InterfaceImmutableQueueFormatter() Declaration public InterfaceImmutableQueueFormatter() Methods Add(ImmutableQueueBuilder<T>, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ImmutableQueueBuilder<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ImmutableQueueBuilder<T> collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>>.Add(ImmutableQueueBuilder<T>, int, T, MessagePackSerializerOptions) Complete(ImmutableQueueBuilder<T>) Declaration protected override IImmutableQueue<T> Complete(ImmutableQueueBuilder<T> intermediateCollection) Parameters Type Name Description ImmutableQueueBuilder<T> intermediateCollection Returns Type Description IImmutableQueue<T> Overrides CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>>.Complete(ImmutableQueueBuilder<T>) Create(int, MessagePackSerializerOptions) Declaration protected override ImmutableQueueBuilder<T> Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ImmutableQueueBuilder<T> Overrides CollectionFormatterBase<T, ImmutableQueueBuilder<T>, IEnumerator<T>, IImmutableQueue<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.InterfaceImmutableSetFormatter-1.html": {
    "href": "api/MessagePack.ImmutableCollection.InterfaceImmutableSetFormatter-1.html",
    "title": "Class InterfaceImmutableSetFormatter<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceImmutableSetFormatter<T> Inheritance object CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>> CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IImmutableSet<T>> InterfaceImmutableSetFormatter<T> Implements IMessagePackFormatter<IImmutableSet<T>> Inherited Members CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IImmutableSet<T>>.GetSourceEnumerator(IImmutableSet<T>) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>>.Serialize(ref MessagePackWriter, IImmutableSet<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>>.GetCount(IImmutableSet<T>) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>>.GetSourceEnumerator(IImmutableSet<T>) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>>.Add(ImmutableHashSet<T>.Builder, int, T, MessagePackSerializerOptions) CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>>.Complete(ImmutableHashSet<T>.Builder) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class InterfaceImmutableSetFormatter<T> : CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IImmutableSet<T>>, IMessagePackFormatter<IImmutableSet<T>?> Type Parameters Name Description T Constructors InterfaceImmutableSetFormatter() Declaration public InterfaceImmutableSetFormatter() Methods Add(Builder, int, T, MessagePackSerializerOptions) Declaration protected override void Add(ImmutableHashSet<T>.Builder collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description ImmutableHashSet<T>.Builder collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>>.Add(ImmutableHashSet<T>.Builder, int, T, MessagePackSerializerOptions) Complete(Builder) Declaration protected override IImmutableSet<T> Complete(ImmutableHashSet<T>.Builder intermediateCollection) Parameters Type Name Description ImmutableHashSet<T>.Builder intermediateCollection Returns Type Description IImmutableSet<T> Overrides CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>>.Complete(ImmutableHashSet<T>.Builder) Create(int, MessagePackSerializerOptions) Declaration protected override ImmutableHashSet<T>.Builder Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description ImmutableHashSet<T>.Builder Overrides CollectionFormatterBase<T, ImmutableHashSet<T>.Builder, IEnumerator<T>, IImmutableSet<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.InterfaceImmutableStackFormatter-1.html": {
    "href": "api/MessagePack.ImmutableCollection.InterfaceImmutableStackFormatter-1.html",
    "title": "Class InterfaceImmutableStackFormatter<T> | CodeFactory for Windows",
    "keywords": "Class InterfaceImmutableStackFormatter<T> Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>> CollectionFormatterBase<T, T[], IImmutableStack<T>> InterfaceImmutableStackFormatter<T> Implements IMessagePackFormatter<IImmutableStack<T>> Inherited Members CollectionFormatterBase<T, T[], IImmutableStack<T>>.GetSourceEnumerator(IImmutableStack<T>) CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>>.Serialize(ref MessagePackWriter, IImmutableStack<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>>.GetCount(IImmutableStack<T>) CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>>.GetSourceEnumerator(IImmutableStack<T>) CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>>.Add(T[], int, T, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>>.Complete(T[]) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.ImmutableCollection Assembly: MessagePack.dll Syntax public class InterfaceImmutableStackFormatter<T> : CollectionFormatterBase<T, T[], IImmutableStack<T>>, IMessagePackFormatter<IImmutableStack<T>?> Type Parameters Name Description T Constructors InterfaceImmutableStackFormatter() Declaration public InterfaceImmutableStackFormatter() Methods Add(T[], int, T, MessagePackSerializerOptions) Declaration protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters Type Name Description T[] collection int index T value MessagePackSerializerOptions options Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>>.Add(T[], int, T, MessagePackSerializerOptions) Complete(T[]) Declaration protected override IImmutableStack<T> Complete(T[] intermediateCollection) Parameters Type Name Description T[] intermediateCollection Returns Type Description IImmutableStack<T> Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>>.Complete(T[]) Create(int, MessagePackSerializerOptions) Declaration protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters Type Name Description int count MessagePackSerializerOptions options Returns Type Description T[] Overrides CollectionFormatterBase<T, T[], IEnumerator<T>, IImmutableStack<T>>.Create(int, MessagePackSerializerOptions) Implements IMessagePackFormatter<T>"
  },
  "api/MessagePack.ImmutableCollection.html": {
    "href": "api/MessagePack.ImmutableCollection.html",
    "title": "Namespace MessagePack.ImmutableCollection | CodeFactory for Windows",
    "keywords": "Namespace MessagePack.ImmutableCollection Classes ImmutableArrayFormatter<T> ImmutableCollectionResolver ImmutableDictionaryFormatter<TKey, TValue> ImmutableHashSetFormatter<T> ImmutableListFormatter<T> ImmutableQueueBuilder<T> ImmutableQueueFormatter<T> ImmutableSortedDictionaryFormatter<TKey, TValue> ImmutableSortedSetFormatter<T> ImmutableStackFormatter<T> InterfaceImmutableDictionaryFormatter<TKey, TValue> InterfaceImmutableListFormatter<T> InterfaceImmutableQueueFormatter<T> InterfaceImmutableSetFormatter<T> InterfaceImmutableStackFormatter<T>"
  },
  "api/MessagePack.Internal.AutomataDictionary.html": {
    "href": "api/MessagePack.Internal.AutomataDictionary.html",
    "title": "Class AutomataDictionary | CodeFactory for Windows",
    "keywords": "Class AutomataDictionary Inheritance object AutomataDictionary Implements IEnumerable<KeyValuePair<string, int>> IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Internal Assembly: MessagePack.dll Syntax public class AutomataDictionary : IEnumerable<KeyValuePair<string?, int>>, IEnumerable Remarks This code is used by dynamically generated code as well as AOT generated code, and thus must be public for the \"C# generated and compiled into saved assembly\" scenario. Constructors AutomataDictionary() Declaration public AutomataDictionary() Methods Add(string, int) Declaration public void Add(string str, int value) Parameters Type Name Description string str int value EmitMatch(ILGenerator, LocalBuilder, LocalBuilder, Action<KeyValuePair<string?, int>>, Action) Declaration public void EmitMatch(ILGenerator il, LocalBuilder bytesSpan, LocalBuilder key, Action<KeyValuePair<string?, int>> onFound, Action onNotFound) Parameters Type Name Description ILGenerator il LocalBuilder bytesSpan LocalBuilder key Action<KeyValuePair<string, int>> onFound Action onNotFound GetEnumerator() Declaration public IEnumerator<KeyValuePair<string?, int>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<string, int>> ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() TryGetValue(in ReadOnlySequence<byte>, out int) Declaration public bool TryGetValue(in ReadOnlySequence<byte> bytes, out int value) Parameters Type Name Description ReadOnlySequence<byte> bytes int value Returns Type Description bool TryGetValue(ReadOnlySpan<byte>, out int) Declaration public bool TryGetValue(ReadOnlySpan<byte> bytes, out int value) Parameters Type Name Description ReadOnlySpan<byte> bytes int value Returns Type Description bool Implements IEnumerable<T> IEnumerable"
  },
  "api/MessagePack.Internal.AutomataKeyGen.html": {
    "href": "api/MessagePack.Internal.AutomataKeyGen.html",
    "title": "Class AutomataKeyGen | CodeFactory for Windows",
    "keywords": "Class AutomataKeyGen Inheritance object AutomataKeyGen Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Internal Assembly: MessagePack.dll Syntax public static class AutomataKeyGen Remarks This is used by dynamically generated code. It can be made internal after we enable our dynamic assemblies to access internals. But that trick may require net46, so maybe we should leave this as public. Fields GetKeyMethod Declaration public static readonly MethodInfo GetKeyMethod Field Value Type Description MethodInfo Methods GetKey(ref ReadOnlySpan<byte>) Declaration public static ulong GetKey(ref ReadOnlySpan<byte> span) Parameters Type Name Description ReadOnlySpan<byte> span Returns Type Description ulong"
  },
  "api/MessagePack.Internal.ByteArrayStringHashTable.html": {
    "href": "api/MessagePack.Internal.ByteArrayStringHashTable.html",
    "title": "Class ByteArrayStringHashTable | CodeFactory for Windows",
    "keywords": "Class ByteArrayStringHashTable Inheritance object ByteArrayStringHashTable Implements IEnumerable<KeyValuePair<string, int>> IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Internal Assembly: MessagePack.dll Syntax public class ByteArrayStringHashTable : IEnumerable<KeyValuePair<string, int>>, IEnumerable Constructors ByteArrayStringHashTable(int) Declaration public ByteArrayStringHashTable(int capacity) Parameters Type Name Description int capacity ByteArrayStringHashTable(int, float) Declaration public ByteArrayStringHashTable(int capacity, float loadFactor) Parameters Type Name Description int capacity float loadFactor Methods Add(byte[], int) Declaration public void Add(byte[] key, int value) Parameters Type Name Description byte[] key int value Add(string, int) Declaration public void Add(string key, int value) Parameters Type Name Description string key int value GetEnumerator() Declaration public IEnumerator<KeyValuePair<string, int>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<string, int>> TryGetValue(in ReadOnlySequence<byte>, out int) Declaration public bool TryGetValue(in ReadOnlySequence<byte> key, out int value) Parameters Type Name Description ReadOnlySequence<byte> key int value Returns Type Description bool TryGetValue(ReadOnlySpan<byte>, out int) Declaration public bool TryGetValue(ReadOnlySpan<byte> key, out int value) Parameters Type Name Description ReadOnlySpan<byte> key int value Returns Type Description bool Implements IEnumerable<T> IEnumerable"
  },
  "api/MessagePack.Internal.RuntimeTypeHandleEqualityComparer.html": {
    "href": "api/MessagePack.Internal.RuntimeTypeHandleEqualityComparer.html",
    "title": "Class RuntimeTypeHandleEqualityComparer | CodeFactory for Windows",
    "keywords": "Class RuntimeTypeHandleEqualityComparer Inheritance object RuntimeTypeHandleEqualityComparer Implements IEqualityComparer<RuntimeTypeHandle> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Internal Assembly: MessagePack.dll Syntax public class RuntimeTypeHandleEqualityComparer : IEqualityComparer<RuntimeTypeHandle> Fields Default Declaration public static readonly IEqualityComparer<RuntimeTypeHandle> Default Field Value Type Description IEqualityComparer<RuntimeTypeHandle> Methods Equals(RuntimeTypeHandle, RuntimeTypeHandle) Declaration public bool Equals(RuntimeTypeHandle x, RuntimeTypeHandle y) Parameters Type Name Description RuntimeTypeHandle x RuntimeTypeHandle y Returns Type Description bool GetHashCode(RuntimeTypeHandle) Declaration public int GetHashCode(RuntimeTypeHandle obj) Parameters Type Name Description RuntimeTypeHandle obj Returns Type Description int Implements IEqualityComparer<T>"
  },
  "api/MessagePack.Internal.UnsafeMemory.html": {
    "href": "api/MessagePack.Internal.UnsafeMemory.html",
    "title": "Class UnsafeMemory | CodeFactory for Windows",
    "keywords": "Class UnsafeMemory Inheritance object UnsafeMemory Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Internal Assembly: MessagePack.dll Syntax public static class UnsafeMemory Fields Is32Bit Declaration public static readonly bool Is32Bit Field Value Type Description bool"
  },
  "api/MessagePack.Internal.UnsafeMemory32.html": {
    "href": "api/MessagePack.Internal.UnsafeMemory32.html",
    "title": "Class UnsafeMemory32 | CodeFactory for Windows",
    "keywords": "Class UnsafeMemory32 Inheritance object UnsafeMemory32 Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Internal Assembly: MessagePack.dll Syntax public static class UnsafeMemory32 Methods WriteRaw1(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw1(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw10(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw10(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw11(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw11(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw12(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw12(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw13(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw13(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw14(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw14(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw15(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw15(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw16(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw16(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw17(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw17(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw18(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw18(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw19(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw19(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw2(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw2(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw20(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw20(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw21(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw21(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw22(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw22(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw23(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw23(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw24(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw24(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw25(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw25(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw26(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw26(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw27(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw27(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw28(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw28(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw29(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw29(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw3(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw3(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw30(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw30(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw31(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw31(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw4(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw4(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw5(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw5(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw6(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw6(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw7(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw7(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw8(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw8(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw9(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw9(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src"
  },
  "api/MessagePack.Internal.UnsafeMemory64.html": {
    "href": "api/MessagePack.Internal.UnsafeMemory64.html",
    "title": "Class UnsafeMemory64 | CodeFactory for Windows",
    "keywords": "Class UnsafeMemory64 Inheritance object UnsafeMemory64 Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Internal Assembly: MessagePack.dll Syntax public static class UnsafeMemory64 Methods WriteRaw1(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw1(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw10(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw10(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw11(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw11(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw12(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw12(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw13(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw13(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw14(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw14(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw15(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw15(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw16(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw16(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw17(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw17(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw18(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw18(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw19(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw19(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw2(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw2(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw20(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw20(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw21(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw21(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw22(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw22(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw23(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw23(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw24(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw24(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw25(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw25(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw26(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw26(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw27(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw27(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw28(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw28(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw29(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw29(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw3(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw3(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw30(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw30(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw31(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw31(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw4(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw4(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw5(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw5(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw6(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw6(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw7(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw7(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw8(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw8(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src WriteRaw9(ref MessagePackWriter, ReadOnlySpan<byte>) Declaration public static void WriteRaw9(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters Type Name Description MessagePackWriter writer ReadOnlySpan<byte> src"
  },
  "api/MessagePack.Internal.html": {
    "href": "api/MessagePack.Internal.html",
    "title": "Namespace MessagePack.Internal | CodeFactory for Windows",
    "keywords": "Namespace MessagePack.Internal Classes AutomataDictionary AutomataKeyGen ByteArrayStringHashTable RuntimeTypeHandleEqualityComparer UnsafeMemory UnsafeMemory32 UnsafeMemory64"
  },
  "api/MessagePack.KeyAttribute.html": {
    "href": "api/MessagePack.KeyAttribute.html",
    "title": "Class KeyAttribute | CodeFactory for Windows",
    "keywords": "Class KeyAttribute Inheritance object Attribute KeyAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.Annotations.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public class KeyAttribute : Attribute Constructors KeyAttribute(int) Declaration public KeyAttribute(int x) Parameters Type Name Description int x KeyAttribute(string) Declaration public KeyAttribute(string x) Parameters Type Name Description string x Properties IntKey Declaration public int? IntKey { get; } Property Value Type Description int? StringKey Declaration public string? StringKey { get; } Property Value Type Description string"
  },
  "api/MessagePack.MessagePackCode.html": {
    "href": "api/MessagePack.MessagePackCode.html",
    "title": "Class MessagePackCode | CodeFactory for Windows",
    "keywords": "Class MessagePackCode The core type codes as defined by msgpack. Inheritance object MessagePackCode Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public static class MessagePackCode Fields Array16 Declaration public const byte Array16 = 220 Field Value Type Description byte Array32 Declaration public const byte Array32 = 221 Field Value Type Description byte Bin16 Declaration public const byte Bin16 = 197 Field Value Type Description byte Bin32 Declaration public const byte Bin32 = 198 Field Value Type Description byte Bin8 Declaration public const byte Bin8 = 196 Field Value Type Description byte Ext16 Declaration public const byte Ext16 = 200 Field Value Type Description byte Ext32 Declaration public const byte Ext32 = 201 Field Value Type Description byte Ext8 Declaration public const byte Ext8 = 199 Field Value Type Description byte False Declaration public const byte False = 194 Field Value Type Description byte FixExt1 Declaration public const byte FixExt1 = 212 Field Value Type Description byte FixExt16 Declaration public const byte FixExt16 = 216 Field Value Type Description byte FixExt2 Declaration public const byte FixExt2 = 213 Field Value Type Description byte FixExt4 Declaration public const byte FixExt4 = 214 Field Value Type Description byte FixExt8 Declaration public const byte FixExt8 = 215 Field Value Type Description byte Float32 Declaration public const byte Float32 = 202 Field Value Type Description byte Float64 Declaration public const byte Float64 = 203 Field Value Type Description byte Int16 Declaration public const byte Int16 = 209 Field Value Type Description byte Int32 Declaration public const byte Int32 = 210 Field Value Type Description byte Int64 Declaration public const byte Int64 = 211 Field Value Type Description byte Int8 Declaration public const byte Int8 = 208 Field Value Type Description byte Map16 Declaration public const byte Map16 = 222 Field Value Type Description byte Map32 Declaration public const byte Map32 = 223 Field Value Type Description byte MaxFixArray Declaration public const byte MaxFixArray = 159 Field Value Type Description byte MaxFixInt Declaration public const byte MaxFixInt = 127 Field Value Type Description byte MaxFixMap Declaration public const byte MaxFixMap = 143 Field Value Type Description byte MaxFixStr Declaration public const byte MaxFixStr = 191 Field Value Type Description byte MaxNegativeFixInt Declaration public const byte MaxNegativeFixInt = 255 Field Value Type Description byte MinFixArray Declaration public const byte MinFixArray = 144 Field Value Type Description byte MinFixInt Declaration public const byte MinFixInt = 0 Field Value Type Description byte MinFixMap Declaration public const byte MinFixMap = 128 Field Value Type Description byte MinFixStr Declaration public const byte MinFixStr = 160 Field Value Type Description byte MinNegativeFixInt Declaration public const byte MinNegativeFixInt = 224 Field Value Type Description byte NeverUsed Declaration public const byte NeverUsed = 193 Field Value Type Description byte Nil Declaration public const byte Nil = 192 Field Value Type Description byte Str16 Declaration public const byte Str16 = 218 Field Value Type Description byte Str32 Declaration public const byte Str32 = 219 Field Value Type Description byte Str8 Declaration public const byte Str8 = 217 Field Value Type Description byte True Declaration public const byte True = 195 Field Value Type Description byte UInt16 Declaration public const byte UInt16 = 205 Field Value Type Description byte UInt32 Declaration public const byte UInt32 = 206 Field Value Type Description byte UInt64 Declaration public const byte UInt64 = 207 Field Value Type Description byte UInt8 Declaration public const byte UInt8 = 204 Field Value Type Description byte Methods ToFormatName(byte) Declaration public static string ToFormatName(byte code) Parameters Type Name Description byte code Returns Type Description string ToMessagePackType(byte) Declaration public static MessagePackType ToMessagePackType(byte code) Parameters Type Name Description byte code Returns Type Description MessagePackType See Also https://github.com/msgpack/msgpack/blob/master/spec.md#overview"
  },
  "api/MessagePack.MessagePackCompression.html": {
    "href": "api/MessagePack.MessagePackCompression.html",
    "title": "Enum MessagePackCompression | CodeFactory for Windows",
    "keywords": "Enum MessagePackCompression Identifies the various compression schemes which might be applied at the msgpack level. Namespace: MessagePack Assembly: MessagePack.dll Syntax public enum MessagePackCompression Fields Name Description Lz4Block Compresses an entire msgpack sequence as a single lz4 block format. This is the simple compression that achieves best compression ratio, at the cost of copying the entire sequence when necessary to get contiguous memory. Lz4BlockArray Compresses an entire msgpack sequence as a array of lz4 block format. This is compressed/decompressed in chunks that do not consume LOH, but the compression ratio is slightly sacrificed. None No compression is applied at the msgpack level."
  },
  "api/MessagePack.MessagePackFormatterAttribute.html": {
    "href": "api/MessagePack.MessagePackFormatterAttribute.html",
    "title": "Class MessagePackFormatterAttribute | CodeFactory for Windows",
    "keywords": "Class MessagePackFormatterAttribute Inheritance object Attribute MessagePackFormatterAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.Annotations.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Enum|AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Interface, AllowMultiple = false, Inherited = true)] public class MessagePackFormatterAttribute : Attribute Constructors MessagePackFormatterAttribute(Type) Declaration public MessagePackFormatterAttribute(Type formatterType) Parameters Type Name Description Type formatterType MessagePackFormatterAttribute(Type, params object?[]?) Declaration public MessagePackFormatterAttribute(Type formatterType, params object?[]? arguments) Parameters Type Name Description Type formatterType object[] arguments Properties Arguments Declaration public object?[]? Arguments { get; } Property Value Type Description object[] FormatterType Declaration public Type FormatterType { get; } Property Value Type Description Type"
  },
  "api/MessagePack.MessagePackObjectAttribute.html": {
    "href": "api/MessagePack.MessagePackObjectAttribute.html",
    "title": "Class MessagePackObjectAttribute | CodeFactory for Windows",
    "keywords": "Class MessagePackObjectAttribute Inheritance object Attribute MessagePackObjectAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.Annotations.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct, AllowMultiple = false, Inherited = true)] public class MessagePackObjectAttribute : Attribute Constructors MessagePackObjectAttribute(bool) Declaration public MessagePackObjectAttribute(bool keyAsPropertyName = false) Parameters Type Name Description bool keyAsPropertyName Properties KeyAsPropertyName Declaration public bool KeyAsPropertyName { get; } Property Value Type Description bool"
  },
  "api/MessagePack.MessagePackRange.html": {
    "href": "api/MessagePack.MessagePackRange.html",
    "title": "Class MessagePackRange | CodeFactory for Windows",
    "keywords": "Class MessagePackRange Inheritance object MessagePackRange Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public static class MessagePackRange Fields MaxFixArrayCount Declaration public const int MaxFixArrayCount = 15 Field Value Type Description int MaxFixMapCount Declaration public const int MaxFixMapCount = 15 Field Value Type Description int MaxFixNegativeInt Declaration public const int MaxFixNegativeInt = -1 Field Value Type Description int MaxFixPositiveInt Declaration public const int MaxFixPositiveInt = 127 Field Value Type Description int MaxFixStringLength Declaration public const int MaxFixStringLength = 31 Field Value Type Description int MinFixNegativeInt Declaration public const int MinFixNegativeInt = -32 Field Value Type Description int MinFixStringLength Declaration public const int MinFixStringLength = 0 Field Value Type Description int"
  },
  "api/MessagePack.MessagePackReader.html": {
    "href": "api/MessagePack.MessagePackReader.html",
    "title": "Struct MessagePackReader | CodeFactory for Windows",
    "keywords": "Struct MessagePackReader A primitive types reader for the MessagePack format. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.dll Syntax public ref struct MessagePackReader Remarks The MessagePack spec.. Constructors MessagePackReader(in ReadOnlySequence<byte>) Initializes a new instance of the MessagePackReader struct. Declaration public MessagePackReader(in ReadOnlySequence<byte> readOnlySequence) Parameters Type Name Description ReadOnlySequence<byte> readOnlySequence The sequence to read from. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. MessagePackReader(ReadOnlyMemory<byte>) Initializes a new instance of the MessagePackReader struct. Declaration public MessagePackReader(ReadOnlyMemory<byte> memory) Parameters Type Name Description ReadOnlyMemory<byte> memory The buffer to read from. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Properties CancellationToken Gets or sets the cancellation token for this deserialization operation. Declaration public CancellationToken CancellationToken { readonly get; set; } Property Value Type Description CancellationToken Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Consumed Gets the number of bytes consumed by the reader. Declaration public long Consumed { get; } Property Value Type Description long Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Depth Gets or sets the present depth of the object graph being deserialized. Declaration public int Depth { readonly get; set; } Property Value Type Description int Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. End Gets a value indicating whether the reader is at the end of the sequence. Declaration public bool End { get; } Property Value Type Description bool Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. IsNil Gets a value indicating whether the reader position is pointing at a nil value. Declaration public bool IsNil { get; } Property Value Type Description bool Exceptions Type Condition EndOfStreamException Thrown if the end of the sequence provided to the constructor is reached before the expected end of the data. NextCode Gets the type of the next MessagePack block. Declaration public byte NextCode { get; } Property Value Type Description byte Remarks See MessagePackCode for valid message pack codes and ranges. Exceptions Type Condition EndOfStreamException Thrown if the end of the sequence provided to the constructor is reached before the expected end of the data. NextMessagePackType Gets the next message pack type to be read. Declaration public MessagePackType NextMessagePackType { get; } Property Value Type Description MessagePackType Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Position Gets the current position of the reader within Sequence. Declaration public SequencePosition Position { get; } Property Value Type Description SequencePosition Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Sequence Gets the ReadOnlySequence<T> originally supplied to the constructor. Declaration public ReadOnlySequence<byte> Sequence { get; } Property Value Type Description ReadOnlySequence<byte> Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Methods Clone(in ReadOnlySequence<byte>) Initializes a new instance of the MessagePackReader struct, with the same settings as this one, but with its own buffer to read from. Declaration public MessagePackReader Clone(in ReadOnlySequence<byte> readOnlySequence) Parameters Type Name Description ReadOnlySequence<byte> readOnlySequence The sequence to read from. Returns Type Description MessagePackReader The new reader. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. CreatePeekReader() Creates a new MessagePackReader at this reader's current position. The two readers may then be used independently without impacting each other. Declaration public MessagePackReader CreatePeekReader() Returns Type Description MessagePackReader A new MessagePackReader. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadArrayHeader() Read an array header from Array16, Array32, or some built-in code between MinFixArray and MaxFixArray. Declaration public int ReadArrayHeader() Returns Type Description int Exceptions Type Condition EndOfStreamException Thrown if the header cannot be read in the bytes left in the Sequence or if it is clear that there are insufficient bytes remaining after the header to include all the elements the header claims to be there. MessagePackSerializationException Thrown if a code other than an array header is encountered. ReadBoolean() Reads a boolean value from either a False or True. Declaration public bool ReadBoolean() Returns Type Description bool The value. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadByte() Reads an byte value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. Declaration public byte ReadByte() Returns Type Description byte The value. Exceptions Type Condition OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadBytes() Reads a span of bytes, whose length is determined by a header of one of these types: Bin8, Bin16, Bin32, or to support OldSpec compatibility: Str16, Str32, or something between MinFixStr and MaxFixStr. Declaration public ReadOnlySequence<byte>? ReadBytes() Returns Type Description ReadOnlySequence<byte>? A sequence of bytes, or null if the read token is Nil. The data is a slice from the original sequence passed to this reader's constructor. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadChar() Reads a char from any of: UInt8, UInt16, or anything between MinFixInt and MaxFixInt. Declaration public char ReadChar() Returns Type Description char A character. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadDateTime() Reads a DateTime from a value encoded with FixExt4, FixExt8, or Ext8. Expects extension type code DateTime. Declaration public DateTime ReadDateTime() Returns Type Description DateTime The value. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadDateTime(ExtensionHeader) Reads a DateTime from a value encoded with FixExt4, FixExt8, Ext8. Expects extension type code DateTime. Declaration public DateTime ReadDateTime(ExtensionHeader header) Parameters Type Name Description ExtensionHeader header The extension header that was already read. Returns Type Description DateTime The value. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadDouble() Reads an double value from any value encoded with: Float64, Float32, Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64, or some value between MinNegativeFixInt and MaxNegativeFixInt, or some value between MinFixInt and MaxFixInt. Declaration public double ReadDouble() Returns Type Description double The value. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadExtensionFormat() Reads an extension format header and data, based on one of these codes: FixExt1, FixExt2, FixExt4, FixExt8, FixExt16, Ext8, Ext16, or Ext32. Declaration public ExtensionResult ReadExtensionFormat() Returns Type Description ExtensionResult The extension format. The data is a slice from the original sequence passed to this reader's constructor. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadExtensionFormatHeader() Reads an extension format header, based on one of these codes: FixExt1, FixExt2, FixExt4, FixExt8, FixExt16, Ext8, Ext16, or Ext32. Declaration public ExtensionHeader ReadExtensionFormatHeader() Returns Type Description ExtensionHeader The extension header. Exceptions Type Condition EndOfStreamException Thrown if the header cannot be read in the bytes left in the Sequence or if it is clear that there are insufficient bytes remaining after the header to include all the bytes the header claims to be there. MessagePackSerializationException Thrown if a code other than an extension format header is encountered. ReadInt16() Reads an short value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. Declaration public short ReadInt16() Returns Type Description short The value. Exceptions Type Condition OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadInt32() Reads an int value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. Declaration public int ReadInt32() Returns Type Description int The value. Exceptions Type Condition OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadInt64() Reads an long value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. Declaration public long ReadInt64() Returns Type Description long The value. Exceptions Type Condition OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadMapHeader() Read a map header from Map16, Map32, or some built-in code between MinFixMap and MaxFixMap. Declaration public int ReadMapHeader() Returns Type Description int The number of key=value pairs in the map. Exceptions Type Condition EndOfStreamException Thrown if the header cannot be read in the bytes left in the Sequence or if it is clear that there are insufficient bytes remaining after the header to include all the elements the header claims to be there. MessagePackSerializationException Thrown if a code other than an map header is encountered. ReadNil() Reads a Nil value. Declaration public Nil ReadNil() Returns Type Description Nil A nil value. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadRaw() Reads the next MessagePack primitive. Declaration public ReadOnlySequence<byte> ReadRaw() Returns Type Description ReadOnlySequence<byte> The raw MessagePack sequence. Remarks The entire primitive is read, including content of maps or arrays, or any other type with payloads. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadRaw(long) Reads a sequence of bytes without any decoding. Declaration public ReadOnlySequence<byte> ReadRaw(long length) Parameters Type Name Description long length The number of bytes to read. Returns Type Description ReadOnlySequence<byte> The sequence of bytes read. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadSByte() Reads an sbyte value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. Declaration public sbyte ReadSByte() Returns Type Description sbyte The value. Exceptions Type Condition OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadSingle() Reads an float value from any value encoded with: Float32, Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64, or some value between MinNegativeFixInt and MaxNegativeFixInt, or some value between MinFixInt and MaxFixInt. Declaration public float ReadSingle() Returns Type Description float The value. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadString() Reads a string, whose length is determined by a header of one of these types: Str8, Str16, Str32, or a code between MinFixStr and MaxFixStr. Declaration public string? ReadString() Returns Type Description string A string, or null if the current msgpack token is Nil. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadStringSequence() Reads a string of bytes, whose length is determined by a header of one of these types: Str8, Str16, Str32, or a code between MinFixStr and MaxFixStr. Declaration public ReadOnlySequence<byte>? ReadStringSequence() Returns Type Description ReadOnlySequence<byte>? The sequence of bytes, or null if the read token is Nil. The data is a slice from the original sequence passed to this reader's constructor. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadUInt16() Reads an ushort value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. Declaration public ushort ReadUInt16() Returns Type Description ushort The value. Exceptions Type Condition OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadUInt32() Reads an uint value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. Declaration public uint ReadUInt32() Returns Type Description uint The value. Exceptions Type Condition OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadUInt64() Reads an ulong value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. Declaration public ulong ReadUInt64() Returns Type Description ulong The value. Exceptions Type Condition OverflowException Thrown when the value exceeds what can be stored in the returned type. Skip() Advances the reader to the next MessagePack primitive to be read. Declaration public void Skip() Remarks The entire primitive is skipped, including content of maps or arrays, or any other type with payloads. To get the raw MessagePack sequence that was skipped, use ReadRaw() instead. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. TryReadArrayHeader(out int) Reads an array header from Array16, Array32, or some built-in code between MinFixArray and MaxFixArray if there is sufficient buffer to read it. Declaration public bool TryReadArrayHeader(out int count) Parameters Type Name Description int count Receives the number of elements in the array if the entire array header could be read. Returns Type Description bool true if there was sufficient buffer and an array header was found; false if the buffer incompletely describes an array header. Remarks When this method returns false the position of the reader is left in an undefined position. The caller is expected to recreate the reader (presumably with a longer sequence to read from) before continuing. Exceptions Type Condition MessagePackSerializationException Thrown if a code other than an array header is encountered. TryReadExtensionFormatHeader(out ExtensionHeader) Reads an extension format header, based on one of these codes: FixExt1, FixExt2, FixExt4, FixExt8, FixExt16, Ext8, Ext16, or Ext32 if there is sufficient buffer to read it. Declaration public bool TryReadExtensionFormatHeader(out ExtensionHeader extensionHeader) Parameters Type Name Description ExtensionHeader extensionHeader Receives the extension header if the remaining bytes in the Sequence fully describe the header. Returns Type Description bool The number of key=value pairs in the map. Remarks When this method returns false the position of the reader is left in an undefined position. The caller is expected to recreate the reader (presumably with a longer sequence to read from) before continuing. Exceptions Type Condition MessagePackSerializationException Thrown if a code other than an extension format header is encountered. TryReadMapHeader(out int) Reads a map header from Map16, Map32, or some built-in code between MinFixMap and MaxFixMap if there is sufficient buffer to read it. Declaration public bool TryReadMapHeader(out int count) Parameters Type Name Description int count Receives the number of key=value pairs in the map if the entire map header can be read. Returns Type Description bool true if there was sufficient buffer and a map header was found; false if the buffer incompletely describes an map header. Remarks When this method returns false the position of the reader is left in an undefined position. The caller is expected to recreate the reader (presumably with a longer sequence to read from) before continuing. Exceptions Type Condition MessagePackSerializationException Thrown if a code other than an map header is encountered. TryReadNil() Reads nil if it is the next token. Declaration public bool TryReadNil() Returns Type Description bool true if the next token was nil; false otherwise. Exceptions Type Condition EndOfStreamException Thrown if the end of the sequence provided to the constructor is reached before the expected end of the data. TryReadStringSpan(out ReadOnlySpan<byte>) Reads a string of bytes, whose length is determined by a header of one of these types: Str8, Str16, Str32, or a code between MinFixStr and MaxFixStr. Declaration public bool TryReadStringSpan(out ReadOnlySpan<byte> span) Parameters Type Name Description ReadOnlySpan<byte> span Receives the span to the string. Returns Type Description bool true if the string is contiguous in memory such that it could be set as a single span. false if the read token is Nil or the string is not in a contiguous span. Remarks Callers should generally be prepared for a false result and failover to calling ReadStringSequence() which can represent a null result and handle strings that are not contiguous in memory. Exceptions Type Condition MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value."
  },
  "api/MessagePack.MessagePackSecurity.html": {
    "href": "api/MessagePack.MessagePackSecurity.html",
    "title": "Class MessagePackSecurity | CodeFactory for Windows",
    "keywords": "Class MessagePackSecurity Settings related to security, particularly relevant when deserializing data from untrusted sources. Inheritance object MessagePackSecurity Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public class MessagePackSecurity Constructors MessagePackSecurity(MessagePackSecurity) Initializes a new instance of the MessagePackSecurity class with properties copied from a provided template. Declaration protected MessagePackSecurity(MessagePackSecurity copyFrom) Parameters Type Name Description MessagePackSecurity copyFrom The template to copy from. Fields TrustedData Gets an instance preconfigured with settings that omit all protections. Useful for deserializing fully-trusted and valid msgpack sequences. Declaration public static readonly MessagePackSecurity TrustedData Field Value Type Description MessagePackSecurity UntrustedData Gets an instance preconfigured with protections applied with reasonable settings for deserializing untrusted msgpack sequences. Declaration public static readonly MessagePackSecurity UntrustedData Field Value Type Description MessagePackSecurity Properties HashCollisionResistant Gets a value indicating whether data to be deserialized is untrusted and thus should not be allowed to create dictionaries or other hash-based collections unless the hashed type has a hash collision resistant implementation available. This can mitigate some denial of service attacks when deserializing untrusted code. Declaration public bool HashCollisionResistant { get; } Property Value Type Description bool The value is false for TrustedData and true for UntrustedData. MaximumObjectGraphDepth Gets the maximum depth of an object graph that may be deserialized. Declaration public int MaximumObjectGraphDepth { get; } Property Value Type Description int Remarks This value can be reduced to avoid a stack overflow that would crash the process when deserializing a msgpack sequence designed to cause deep recursion. A very short callstack on a thread with 1MB of total stack space might deserialize ~2000 nested arrays before crashing due to a stack overflow. Since stack space occupied may vary by the kind of object deserialized, a conservative value for this property to defend against stack overflow attacks might be 500. Methods Clone() Creates a new instance that is a copy of this one. Declaration protected virtual MessagePackSecurity Clone() Returns Type Description MessagePackSecurity Remarks Derived types should override this method to instantiate their own derived type. DepthStep(ref MessagePackReader) Checks the depth of the deserializing graph and increments it by 1. Declaration public void DepthStep(ref MessagePackReader reader) Parameters Type Name Description MessagePackReader reader The reader that is involved in deserialization. Remarks Callers should decrement Depth after exiting that edge in the graph. Exceptions Type Condition InsufficientExecutionStackException Thrown if Depth is already at or exceeds MaximumObjectGraphDepth. GetEqualityComparer() Gets an IEqualityComparer that is suitable to use with a hash-based collection. Declaration public IEqualityComparer GetEqualityComparer() Returns Type Description IEqualityComparer The IEqualityComparer to use. Remarks When HashCollisionResistant is active, this will be a collision resistant instance which may reject certain key types. When HashCollisionResistant is not active, this will be Default. GetEqualityComparer<T>() Gets an IEqualityComparer<T> that is suitable to use with a hash-based collection. Declaration public IEqualityComparer<T> GetEqualityComparer<T>() Returns Type Description IEqualityComparer<T> The IEqualityComparer<T> to use. Type Parameters Name Description T The type of key that will be hashed in the collection. Remarks When HashCollisionResistant is active, this will be a collision resistant instance which may reject certain key types. When HashCollisionResistant is not active, this will be Default. GetHashCollisionResistantEqualityComparer() Returns a hash collision resistant equality comparer. Declaration protected virtual IEqualityComparer GetHashCollisionResistantEqualityComparer() Returns Type Description IEqualityComparer A hash collision resistant equality comparer. GetHashCollisionResistantEqualityComparer<T>() Returns a hash collision resistant equality comparer. Declaration protected virtual IEqualityComparer<T> GetHashCollisionResistantEqualityComparer<T>() Returns Type Description IEqualityComparer<T> A hash collision resistant equality comparer. Type Parameters Name Description T The type of key that will be hashed in the collection. WithHashCollisionResistant(bool) Gets a copy of these options with the HashCollisionResistant property set to a new value. Declaration public MessagePackSecurity WithHashCollisionResistant(bool hashCollisionResistant) Parameters Type Name Description bool hashCollisionResistant The new value for the HashCollisionResistant property. Returns Type Description MessagePackSecurity The new instance; or the original if the value is unchanged. WithMaximumObjectGraphDepth(int) Gets a copy of these options with the MaximumObjectGraphDepth property set to a new value. Declaration public MessagePackSecurity WithMaximumObjectGraphDepth(int maximumObjectGraphDepth) Parameters Type Name Description int maximumObjectGraphDepth The new value for the MaximumObjectGraphDepth property. Returns Type Description MessagePackSecurity The new instance; or the original if the value is unchanged."
  },
  "api/MessagePack.MessagePackSerializationException.html": {
    "href": "api/MessagePack.MessagePackSerializationException.html",
    "title": "Class MessagePackSerializationException | CodeFactory for Windows",
    "keywords": "Class MessagePackSerializationException An exception thrown during serializing an object graph or deserializing a messagepack sequence. Inheritance object Exception MessagePackSerializationException FormatterNotRegisteredException TinyJsonException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public class MessagePackSerializationException : Exception, ISerializable Constructors MessagePackSerializationException() Initializes a new instance of the MessagePackSerializationException class. Declaration public MessagePackSerializationException() MessagePackSerializationException(SerializationInfo, StreamingContext) Initializes a new instance of the MessagePackSerializationException class. Declaration protected MessagePackSerializationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info Serialization info. StreamingContext context Serialization context. MessagePackSerializationException(string?) Initializes a new instance of the MessagePackSerializationException class. Declaration public MessagePackSerializationException(string? message) Parameters Type Name Description string message The exception message. MessagePackSerializationException(string?, Exception?) Initializes a new instance of the MessagePackSerializationException class. Declaration public MessagePackSerializationException(string? message, Exception? inner) Parameters Type Name Description string message The exception message. Exception inner The inner exception. Implements ISerializable"
  },
  "api/MessagePack.MessagePackSerializer.Typeless.html": {
    "href": "api/MessagePack.MessagePackSerializer.Typeless.html",
    "title": "Class MessagePackSerializer.Typeless | CodeFactory for Windows",
    "keywords": "Class MessagePackSerializer.Typeless A convenience wrapper around MessagePackSerializer that assumes all generic type arguments are object causing the type of top-level objects to be recorded in the MessagePack stream and thus deserialized to the original type automatically. Inheritance object MessagePackSerializer.Typeless Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public static class MessagePackSerializer.Typeless Properties DefaultOptions Gets or sets the default set of options to use when not explicitly specified for a method call. Declaration public static MessagePackSerializerOptions DefaultOptions { get; set; } Property Value Type Description MessagePackSerializerOptions The default value is Options. Remarks This is an AppDomain or process-wide setting. If you're writing a library, you should NOT set or rely on this property but should instead pass in Standard (or the required options) explicitly to every method call to guarantee appropriate behavior in any application. If you are an app author, realize that setting this property impacts the entire application so it should only be set once, and before any use of MessagePackSerializer occurs. Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions?) Declaration public static object? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions? options = null) Parameters Type Name Description MessagePackReader reader MessagePackSerializerOptions options Returns Type Description object Deserialize(in ReadOnlySequence<byte>, MessagePackSerializerOptions?, CancellationToken) Declaration public static object? Deserialize(in ReadOnlySequence<byte> byteSequence, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlySequence<byte> byteSequence MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description object Deserialize(Stream, MessagePackSerializerOptions?, CancellationToken) Declaration public static object? Deserialize(Stream stream, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description object Deserialize(Memory<byte>, MessagePackSerializerOptions?, CancellationToken) Declaration public static object? Deserialize(Memory<byte> bytes, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> bytes MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description object DeserializeAsync(Stream, MessagePackSerializerOptions?, CancellationToken) Declaration public static ValueTask<object?> DeserializeAsync(Stream stream, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description ValueTask<object> Serialize(ref MessagePackWriter, object?, MessagePackSerializerOptions?) Declaration public static void Serialize(ref MessagePackWriter writer, object? obj, MessagePackSerializerOptions? options = null) Parameters Type Name Description MessagePackWriter writer object obj MessagePackSerializerOptions options Serialize(IBufferWriter<byte>, object?, MessagePackSerializerOptions?, CancellationToken) Declaration public static void Serialize(IBufferWriter<byte> writer, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description IBufferWriter<byte> writer object obj MessagePackSerializerOptions options CancellationToken cancellationToken Serialize(Stream, object?, MessagePackSerializerOptions?, CancellationToken) Declaration public static void Serialize(Stream stream, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream object obj MessagePackSerializerOptions options CancellationToken cancellationToken Serialize(object?, MessagePackSerializerOptions?, CancellationToken) Declaration public static byte[] Serialize(object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description object obj MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description byte[] SerializeAsync(Stream, object?, MessagePackSerializerOptions?, CancellationToken) Declaration public static Task SerializeAsync(Stream stream, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream object obj MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description Task"
  },
  "api/MessagePack.MessagePackSerializer.html": {
    "href": "api/MessagePack.MessagePackSerializer.html",
    "title": "Class MessagePackSerializer | CodeFactory for Windows",
    "keywords": "Class MessagePackSerializer High-Level API of MessagePack for C#. Inheritance object MessagePackSerializer Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public static class MessagePackSerializer Properties DefaultOptions Gets or sets the default set of options to use when not explicitly specified for a method call. Declaration public static MessagePackSerializerOptions DefaultOptions { get; set; } Property Value Type Description MessagePackSerializerOptions The default value is Standard. Remarks This is an AppDomain or process-wide setting. If you're writing a library, you should NOT set or rely on this property but should instead pass in Standard (or the required options) explicitly to every method call to guarantee appropriate behavior in any application. If you are an app author, realize that setting this property impacts the entire application so it should only be set once, and before any use of MessagePackSerializer occurs. Methods ConvertFromJson(TextReader, ref MessagePackWriter, MessagePackSerializerOptions?) Translates the given JSON to MessagePack. Declaration public static void ConvertFromJson(TextReader reader, ref MessagePackWriter writer, MessagePackSerializerOptions? options = null) Parameters Type Name Description TextReader reader MessagePackWriter writer MessagePackSerializerOptions options ConvertFromJson(string, MessagePackSerializerOptions?, CancellationToken) Translates the given JSON to MessagePack. Declaration public static byte[] ConvertFromJson(string str, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description string str MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description byte[] ConvertFromJson(string, ref MessagePackWriter, MessagePackSerializerOptions?) Translates the given JSON to MessagePack. Declaration public static void ConvertFromJson(string str, ref MessagePackWriter writer, MessagePackSerializerOptions? options = null) Parameters Type Name Description string str MessagePackWriter writer MessagePackSerializerOptions options ConvertToJson(ref MessagePackReader, TextWriter, MessagePackSerializerOptions?) Convert a message-pack binary to a JSON string. Declaration public static void ConvertToJson(ref MessagePackReader reader, TextWriter jsonWriter, MessagePackSerializerOptions? options = null) Parameters Type Name Description MessagePackReader reader TextWriter jsonWriter MessagePackSerializerOptions options Exceptions Type Condition MessagePackSerializationException Thrown if an error occurs while reading the messagepack data or writing out the JSON. ConvertToJson(in ReadOnlySequence<byte>, MessagePackSerializerOptions?, CancellationToken) Convert a message-pack binary to a JSON string. Declaration public static string ConvertToJson(in ReadOnlySequence<byte> bytes, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlySequence<byte> bytes MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description string Exceptions Type Condition MessagePackSerializationException Thrown if an error occurs while reading the messagepack data or writing out the JSON. ConvertToJson(ReadOnlyMemory<byte>, MessagePackSerializerOptions?, CancellationToken) Convert a message-pack binary to a JSON string. Declaration public static string ConvertToJson(ReadOnlyMemory<byte> bytes, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> bytes MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description string Exceptions Type Condition MessagePackSerializationException Thrown if an error occurs while reading the messagepack data or writing out the JSON. Deserialize(Type, ref MessagePackReader, MessagePackSerializerOptions?) Declaration public static object? Deserialize(Type type, ref MessagePackReader reader, MessagePackSerializerOptions? options = null) Parameters Type Name Description Type type MessagePackReader reader MessagePackSerializerOptions options Returns Type Description object See Also Deserialize<T>(ref MessagePackReader, MessagePackSerializerOptions?) Deserialize(Type, ReadOnlySequence<byte>, MessagePackSerializerOptions?, CancellationToken) Declaration public static object? Deserialize(Type type, ReadOnlySequence<byte> bytes, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Type type ReadOnlySequence<byte> bytes MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description object See Also Deserialize<T>(in ReadOnlySequence<byte>, MessagePackSerializerOptions?, CancellationToken) Deserialize(Type, Stream, MessagePackSerializerOptions?, CancellationToken) Declaration public static object? Deserialize(Type type, Stream stream, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Stream stream MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description object See Also Deserialize<T>(Stream, MessagePackSerializerOptions?, CancellationToken) Deserialize(Type, ReadOnlyMemory<byte>, MessagePackSerializerOptions?, CancellationToken) Declaration public static object? Deserialize(Type type, ReadOnlyMemory<byte> bytes, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Type type ReadOnlyMemory<byte> bytes MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description object See Also Deserialize<T>(ReadOnlyMemory<byte>, MessagePackSerializerOptions?, CancellationToken) DeserializeAsync(Type, Stream, MessagePackSerializerOptions?, CancellationToken) Declaration public static ValueTask<object?> DeserializeAsync(Type type, Stream stream, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Stream stream MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description ValueTask<object> See Also DeserializeAsync<T>(Stream, MessagePackSerializerOptions?, CancellationToken) DeserializeAsync<T>(Stream, MessagePackSerializerOptions?, CancellationToken) Deserializes the entire content of a Stream. Declaration public static ValueTask<T> DeserializeAsync<T>(Stream stream, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream The stream to deserialize from. The entire stream will be read, and the first msgpack token deserialized will be returned. If CanSeek is true on the stream, its position will be set to just after the last deserialized byte. MessagePackSerializerOptions options The options. Use null to use default options. CancellationToken cancellationToken A cancellation token. Returns Type Description ValueTask<T> The deserialized value. Type Parameters Name Description T The type of value to deserialize. Remarks If multiple top-level msgpack data structures are expected on the stream, use MessagePackStreamReader instead. Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(ref MessagePackReader, MessagePackSerializerOptions?) Deserializes a value of a given type from a sequence of bytes. Declaration public static T Deserialize<T>(ref MessagePackReader reader, MessagePackSerializerOptions? options = null) Parameters Type Name Description MessagePackReader reader The reader to deserialize from. MessagePackSerializerOptions options The options. Use null to use default options. Returns Type Description T The deserialized value. Type Parameters Name Description T The type of value to deserialize. Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(in ReadOnlySequence<byte>, MessagePackSerializerOptions?, CancellationToken) Deserializes a value of a given type from a sequence of bytes. Declaration public static T Deserialize<T>(in ReadOnlySequence<byte> byteSequence, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlySequence<byte> byteSequence The sequence to deserialize from. MessagePackSerializerOptions options The options. Use null to use default options. CancellationToken cancellationToken A cancellation token. Returns Type Description T The deserialized value. Type Parameters Name Description T The type of value to deserialize. Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(Stream, MessagePackSerializerOptions?, CancellationToken) Deserializes the entire content of a Stream. Declaration public static T Deserialize<T>(Stream stream, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream The stream to deserialize from. The entire stream will be read, and the first msgpack token deserialized will be returned. If CanSeek is true on the stream, its position will be set to just after the last deserialized byte. MessagePackSerializerOptions options The options. Use null to use default options. CancellationToken cancellationToken A cancellation token. Returns Type Description T The deserialized value. Type Parameters Name Description T The type of value to deserialize. Remarks If multiple top-level msgpack data structures are expected on the stream, use MessagePackStreamReader instead. Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(ReadOnlyMemory<byte>, MessagePackSerializerOptions?, out int, CancellationToken) Deserializes a value of a given type from a sequence of bytes. Declaration public static T Deserialize<T>(ReadOnlyMemory<byte> buffer, MessagePackSerializerOptions? options, out int bytesRead, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The memory to deserialize from. MessagePackSerializerOptions options The options. Use null to use default options. int bytesRead The number of bytes read. CancellationToken cancellationToken A cancellation token. Returns Type Description T The deserialized value. Type Parameters Name Description T The type of value to deserialize. Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(ReadOnlyMemory<byte>, MessagePackSerializerOptions?, CancellationToken) Deserializes a value of a given type from a sequence of bytes. Declaration public static T Deserialize<T>(ReadOnlyMemory<byte> buffer, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The buffer to deserialize from. MessagePackSerializerOptions options The options. Use null to use default options. CancellationToken cancellationToken A cancellation token. Returns Type Description T The deserialized value. Type Parameters Name Description T The type of value to deserialize. Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(ReadOnlyMemory<byte>, out int, CancellationToken) Deserializes a value of a given type from a sequence of bytes. Declaration public static T Deserialize<T>(ReadOnlyMemory<byte> buffer, out int bytesRead, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The memory to deserialize from. int bytesRead The number of bytes read. CancellationToken cancellationToken A cancellation token. Returns Type Description T The deserialized value. Type Parameters Name Description T The type of value to deserialize. Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during deserialization. Serialize(Type, ref MessagePackWriter, object?, MessagePackSerializerOptions?) Declaration public static void Serialize(Type type, ref MessagePackWriter writer, object? obj, MessagePackSerializerOptions? options = null) Parameters Type Name Description Type type MessagePackWriter writer object obj MessagePackSerializerOptions options See Also Serialize<T>(ref MessagePackWriter, T, MessagePackSerializerOptions?) Serialize(Type, IBufferWriter<byte>, object?, MessagePackSerializerOptions?, CancellationToken) Declaration public static void Serialize(Type type, IBufferWriter<byte> writer, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Type type IBufferWriter<byte> writer object obj MessagePackSerializerOptions options CancellationToken cancellationToken See Also Serialize<T>(IBufferWriter<byte>, T, MessagePackSerializerOptions?, CancellationToken) Serialize(Type, Stream, object?, MessagePackSerializerOptions?, CancellationToken) Declaration public static void Serialize(Type type, Stream stream, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Stream stream object obj MessagePackSerializerOptions options CancellationToken cancellationToken See Also Serialize<T>(Stream, T, MessagePackSerializerOptions?, CancellationToken) Serialize(Type, object?, MessagePackSerializerOptions?, CancellationToken) Declaration public static byte[] Serialize(Type type, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Type type object obj MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description byte[] See Also Serialize<T>(T, MessagePackSerializerOptions?, CancellationToken) SerializeAsync(Type, Stream, object?, MessagePackSerializerOptions?, CancellationToken) Declaration public static Task SerializeAsync(Type type, Stream stream, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Stream stream object obj MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description Task See Also SerializeAsync<T>(Stream, T, MessagePackSerializerOptions?, CancellationToken) SerializeAsync<T>(Stream, T, MessagePackSerializerOptions?, CancellationToken) Serializes a given value to the specified stream. Declaration public static Task SerializeAsync<T>(Stream stream, T value, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream The stream to serialize to. T value The value to serialize. MessagePackSerializerOptions options The options. Use null to use default options. CancellationToken cancellationToken A cancellation token. Returns Type Description Task A task that completes with the result of the async serialization operation. Type Parameters Name Description T Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during serialization. SerializeToJson<T>(TextWriter, T, MessagePackSerializerOptions?, CancellationToken) Serialize an object to JSON string. Declaration public static void SerializeToJson<T>(TextWriter textWriter, T obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description TextWriter textWriter T obj MessagePackSerializerOptions options CancellationToken cancellationToken Type Parameters Name Description T Exceptions Type Condition MessagePackSerializationException Thrown if an error occurs during serialization. SerializeToJson<T>(T, MessagePackSerializerOptions?, CancellationToken) Serialize an object to JSON string. Declaration public static string SerializeToJson<T>(T obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description T obj MessagePackSerializerOptions options CancellationToken cancellationToken Returns Type Description string Type Parameters Name Description T Exceptions Type Condition MessagePackSerializationException Thrown if an error occurs during serialization. Serialize<T>(ref MessagePackWriter, T, MessagePackSerializerOptions?) Serializes a given value with the specified buffer writer. Declaration public static void Serialize<T>(ref MessagePackWriter writer, T value, MessagePackSerializerOptions? options = null) Parameters Type Name Description MessagePackWriter writer The buffer writer to serialize with. T value The value to serialize. MessagePackSerializerOptions options The options. Use null to use default options. Type Parameters Name Description T Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during serialization. Serialize<T>(IBufferWriter<byte>, T, MessagePackSerializerOptions?, CancellationToken) Serializes a given value with the specified buffer writer. Declaration public static void Serialize<T>(IBufferWriter<byte> writer, T value, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description IBufferWriter<byte> writer The buffer writer to serialize with. T value The value to serialize. MessagePackSerializerOptions options The options. Use null to use default options. CancellationToken cancellationToken A cancellation token. Type Parameters Name Description T Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during serialization. Serialize<T>(Stream, T, MessagePackSerializerOptions?, CancellationToken) Serializes a given value to the specified stream. Declaration public static void Serialize<T>(Stream stream, T value, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream The stream to serialize to. T value The value to serialize. MessagePackSerializerOptions options The options. Use null to use default options. CancellationToken cancellationToken A cancellation token. Type Parameters Name Description T Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during serialization. Serialize<T>(T, MessagePackSerializerOptions?, CancellationToken) Serializes a given value with the specified buffer writer. Declaration public static byte[] Serialize<T>(T value, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description T value The value to serialize. MessagePackSerializerOptions options The options. Use null to use default options. CancellationToken cancellationToken A cancellation token. Returns Type Description byte[] A byte array with the serialized value. Type Parameters Name Description T Exceptions Type Condition MessagePackSerializationException Thrown when any error occurs during serialization."
  },
  "api/MessagePack.MessagePackSerializerOptions.html": {
    "href": "api/MessagePack.MessagePackSerializerOptions.html",
    "title": "Class MessagePackSerializerOptions | CodeFactory for Windows",
    "keywords": "Class MessagePackSerializerOptions An immutable description of options for running the MessagePackSerializer. Inheritance object MessagePackSerializerOptions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public class MessagePackSerializerOptions Constructors MessagePackSerializerOptions(IFormatterResolver) Initializes a new instance of the MessagePackSerializerOptions class. Declaration public MessagePackSerializerOptions(IFormatterResolver resolver) Parameters Type Name Description IFormatterResolver resolver MessagePackSerializerOptions(MessagePackSerializerOptions) Initializes a new instance of the MessagePackSerializerOptions class with members initialized from an existing instance. Declaration protected MessagePackSerializerOptions(MessagePackSerializerOptions copyFrom) Parameters Type Name Description MessagePackSerializerOptions copyFrom The options to copy from. Properties AllowAssemblyVersionMismatch Gets a value indicating whether deserialization may instantiate types from an assembly with a different version if a matching version cannot be found. Declaration public bool AllowAssemblyVersionMismatch { get; } Property Value Type Description bool The default value is false. Compression Gets the compression scheme to apply to serialized sequences. Declaration public MessagePackCompression Compression { get; } Property Value Type Description MessagePackCompression Remarks When set to something other than None, deserialization can still work on uncompressed sequences, and serialization may not compress if msgpack sequences are short enough that compression would not likely be advantageous. CompressionMinLength Gets the length a serialized msgpack result must equal or exceed before Compression is applied. Declaration public int CompressionMinLength { get; } Property Value Type Description int The default value is 64. Remarks When compression is not applied due to a short serialized result, deserialization will still succeed even if Compression is set to something other than None. OldSpec Gets a value indicating whether to serialize with OldSpec set to some value causing messagepack spec compliance to be explicitly set to the old or new format. Declaration public bool? OldSpec { get; } Property Value Type Description bool? A null value means the MessagePackWriter's default or previous setting will be used. A non-null value will be applied to the OldSpec property for the duration of a serialization and then reverted to its prior setting. Remarks Reading always supports both new and old spec. OmitAssemblyVersion Gets a value indicating whether serialization should omit assembly version, culture and public key token metadata when using the typeless formatter. Declaration public bool OmitAssemblyVersion { get; } Property Value Type Description bool The default value is false. Resolver Gets the resolver to use for complex types. Declaration public IFormatterResolver Resolver { get; } Property Value Type Description IFormatterResolver An instance of IFormatterResolver. Never null. Exceptions Type Condition ArgumentNullException Thrown if an attempt is made to set this property to null. Security Gets the security-related options for deserializing messagepack sequences. Declaration public MessagePackSecurity Security { get; } Property Value Type Description MessagePackSecurity The default value is to use TrustedData. SequencePool Gets a thread-safe pool of reusable Nerdbank.Streams.Sequence<T> objects. Declaration public SequencePool SequencePool { get; } Property Value Type Description SequencePool The default value is the MessagePack.SequencePool.Shared instance. Standard Gets a good default set of options that uses the StandardResolver and no compression. Declaration public static MessagePackSerializerOptions Standard { get; } Property Value Type Description MessagePackSerializerOptions SuggestedContiguousMemorySize Gets the size of contiguous memory blocks in bytes that may be allocated for buffering purposes. Declaration public int SuggestedContiguousMemorySize { get; } Property Value Type Description int The default value is 1MB. Remarks Larger values may perform a bit faster, but may result in adding a runtime perf tax due to using the Large Object Heap. Methods Clone() Creates a clone of this instance with the same properties set. Declaration protected virtual MessagePackSerializerOptions Clone() Returns Type Description MessagePackSerializerOptions The cloned instance. Guaranteed to be a new instance. Exceptions Type Condition NotSupportedException Thrown if this instance is a derived type that doesn't override this method. LoadType(string) Gets a type given a string representation of the type. Declaration public virtual Type? LoadType(string typeName) Parameters Type Name Description string typeName The name of the type to load. This is typically the AssemblyQualifiedName but may use the assembly's simple name. Returns Type Description Type The loaded type or null if no matching type could be found. ThrowIfDeserializingTypeIsDisallowed(Type) Checks whether a given type may be deserialized. Declaration public virtual void ThrowIfDeserializingTypeIsDisallowed(Type type) Parameters Type Name Description Type type The type to be instantiated. Remarks This method provides a means for an important security mitigation when using the Typeless formatter to prevent untrusted messagepack from deserializing objects that may be harmful if instantiated, disposed or finalized. The default implementation throws for only a few known dangerous types. Applications that deserialize from untrusted sources should override this method and throw if the type is not among the expected set. Exceptions Type Condition TypeAccessException Thrown if the type is not allowed to be deserialized. WithAllowAssemblyVersionMismatch(bool) Gets a copy of these options with the AllowAssemblyVersionMismatch property set to a new value. Declaration public MessagePackSerializerOptions WithAllowAssemblyVersionMismatch(bool allowAssemblyVersionMismatch) Parameters Type Name Description bool allowAssemblyVersionMismatch The new value for the AllowAssemblyVersionMismatch property. Returns Type Description MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithCompression(MessagePackCompression) Gets a copy of these options with the Compression property set to a new value. Declaration public MessagePackSerializerOptions WithCompression(MessagePackCompression compression) Parameters Type Name Description MessagePackCompression compression The new value for the Compression property. Returns Type Description MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithCompressionMinLength(int) Gets a copy of these options with the CompressionMinLength property set to a new value. Declaration public MessagePackSerializerOptions WithCompressionMinLength(int compressionMinLength) Parameters Type Name Description int compressionMinLength The new value for the CompressionMinLength property. Must be a positive integer. Returns Type Description MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithOldSpec(bool?) Gets a copy of these options with the OldSpec property set to a new value. Declaration public MessagePackSerializerOptions WithOldSpec(bool? oldSpec = true) Parameters Type Name Description bool? oldSpec The new value for the OldSpec. Returns Type Description MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithOmitAssemblyVersion(bool) Gets a copy of these options with the OmitAssemblyVersion property set to a new value. Declaration public MessagePackSerializerOptions WithOmitAssemblyVersion(bool omitAssemblyVersion) Parameters Type Name Description bool omitAssemblyVersion The new value for the OmitAssemblyVersion property. Returns Type Description MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithPool(SequencePool) Gets a copy of these options with the SequencePool property set to a new value. Declaration public MessagePackSerializerOptions WithPool(SequencePool pool) Parameters Type Name Description SequencePool pool The new value for the SequencePool property. Returns Type Description MessagePackSerializerOptions The new instance. WithResolver(IFormatterResolver) Gets a copy of these options with the Resolver property set to a new value. Declaration public MessagePackSerializerOptions WithResolver(IFormatterResolver resolver) Parameters Type Name Description IFormatterResolver resolver The new value for the Resolver. Returns Type Description MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithSecurity(MessagePackSecurity) Gets a copy of these options with the Security property set to a new value. Declaration public MessagePackSerializerOptions WithSecurity(MessagePackSecurity security) Parameters Type Name Description MessagePackSecurity security The new value for the Security property. Returns Type Description MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithSuggestedContiguousMemorySize(int) Gets a copy of these options with the SuggestedContiguousMemorySize property set to a new value. Declaration public MessagePackSerializerOptions WithSuggestedContiguousMemorySize(int suggestedContiguousMemorySize) Parameters Type Name Description int suggestedContiguousMemorySize The new value for the SuggestedContiguousMemorySize property. Must be at least 256. Returns Type Description MessagePackSerializerOptions The new instance; or the original if the value is unchanged."
  },
  "api/MessagePack.MessagePackStreamReader.html": {
    "href": "api/MessagePack.MessagePackStreamReader.html",
    "title": "Class MessagePackStreamReader | CodeFactory for Windows",
    "keywords": "Class MessagePackStreamReader Reads one or more messagepack data structures from a Stream. Inheritance object MessagePackStreamReader Implements IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public class MessagePackStreamReader : IDisposable Remarks This class is not thread-safe. Do not call more than one member at once and be sure any call completes (including asynchronous tasks) before calling the next one. Constructors MessagePackStreamReader(Stream) Initializes a new instance of the MessagePackStreamReader class. Declaration public MessagePackStreamReader(Stream stream) Parameters Type Name Description Stream stream The stream to read from. This stream will be disposed of when this MessagePackStreamReader is disposed. MessagePackStreamReader(Stream, bool) Initializes a new instance of the MessagePackStreamReader class. Declaration public MessagePackStreamReader(Stream stream, bool leaveOpen) Parameters Type Name Description Stream stream The stream to read from. bool leaveOpen If true, leaves the stream open after this MessagePackStreamReader is disposed; otherwise, false. MessagePackStreamReader(Stream, bool, SequencePool) Initializes a new instance of the MessagePackStreamReader class. Declaration public MessagePackStreamReader(Stream stream, bool leaveOpen, SequencePool sequencePool) Parameters Type Name Description Stream stream The stream to read from. bool leaveOpen If true, leaves the stream open after this MessagePackStreamReader is disposed; otherwise, false. SequencePool sequencePool The pool to rent a Nerdbank.Streams.Sequence<T> object from. Properties RemainingBytes Gets any bytes that have been read since the last complete message returned from ReadAsync(CancellationToken). Declaration public ReadOnlySequence<byte> RemainingBytes { get; } Property Value Type Description ReadOnlySequence<byte> Methods DiscardBufferedData() Arranges for the next read operation to start by reading from the underlying Stream instead of any data buffered from a previous read. Declaration public void DiscardBufferedData() Remarks This is appropriate if the underlying Stream has been repositioned such that any previously buffered data is no longer applicable to what the caller wants to read. Dispose() Declaration public void Dispose() Dispose(bool) Disposes of managed and unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true if this instance is being disposed; false if it is being finalized. ReadArrayAsync(CancellationToken) Reads the next messagepack array and produces each element individually. Declaration public IAsyncEnumerable<ReadOnlySequence<byte>> ReadArrayAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token. Returns Type Description IAsyncEnumerable<ReadOnlySequence<byte>> A task whose result is the next whole data structure from the stream, or null if the stream ends. The returned sequence is valid until this MessagePackStreamReader is disposed or until this method is called again, whichever comes first. Remarks When null is the result of the returned task, any extra bytes read (between the last complete message and the end of the stream) will be available via the RemainingBytes property. ReadArrayHeaderAsync(CancellationToken) Reads the next messagepack array header. Declaration public ValueTask<int> ReadArrayHeaderAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token. Returns Type Description ValueTask<int> A task whose result is the length of the next array from the stream. Remarks Any extra bytes read (between the last complete message and the end of the stream) will be available via the RemainingBytes property. ReadAsync(CancellationToken) Reads the next whole (top-level) messagepack data structure. Declaration public ValueTask<ReadOnlySequence<byte>?> ReadAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token. Returns Type Description ValueTask<ReadOnlySequence<byte>?> A task whose result is the next whole data structure from the stream, or null if the stream ends. The returned sequence is valid until this MessagePackStreamReader is disposed or until this method is called again, whichever comes first. Remarks When null is the result of the returned task, any extra bytes read (between the last complete message and the end of the stream) will be available via the RemainingBytes property. ReadMapHeaderAsync(CancellationToken) Reads the next messagepack map header. Declaration public ValueTask<int> ReadMapHeaderAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token. Returns Type Description ValueTask<int> A task whose result is the size of the next map from the stream. Remarks Any extra bytes read (between the last complete message and the end of the stream) will be available via the RemainingBytes property. Implements IDisposable"
  },
  "api/MessagePack.MessagePackType.html": {
    "href": "api/MessagePack.MessagePackType.html",
    "title": "Enum MessagePackType | CodeFactory for Windows",
    "keywords": "Enum MessagePackType https://github.com/msgpack/msgpack/blob/master/spec.md#serialization-type-to-format-conversion. Namespace: MessagePack Assembly: MessagePack.dll Syntax public enum MessagePackType : byte Fields Name Description Array Binary Boolean Extension Float Integer Map Nil String Unknown"
  },
  "api/MessagePack.MessagePackWriter.html": {
    "href": "api/MessagePack.MessagePackWriter.html",
    "title": "Struct MessagePackWriter | CodeFactory for Windows",
    "keywords": "Struct MessagePackWriter A primitive types writer for the MessagePack format. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.dll Syntax public ref struct MessagePackWriter Remarks The MessagePack spec.. Constructors MessagePackWriter(IBufferWriter<byte>) Initializes a new instance of the MessagePackWriter struct. Declaration public MessagePackWriter(IBufferWriter<byte> writer) Parameters Type Name Description IBufferWriter<byte> writer The writer to use. Properties CancellationToken Gets or sets the cancellation token for this serialization operation. Declaration public CancellationToken CancellationToken { readonly get; set; } Property Value Type Description CancellationToken OldSpec Gets or sets a value indicating whether to write in old spec compatibility mode. Declaration public bool OldSpec { readonly get; set; } Property Value Type Description bool Methods Advance(int) Commits memory previously returned from GetSpan(int) as initialized. Declaration public void Advance(int length) Parameters Type Name Description int length The number of bytes initialized with messagepack data from the previously returned span. See Also Advance(int) Clone(IBufferWriter<byte>) Initializes a new instance of the MessagePackWriter struct, with the same settings as this one, but with its own buffer writer. Declaration public MessagePackWriter Clone(IBufferWriter<byte> writer) Parameters Type Name Description IBufferWriter<byte> writer The writer to use for the new instance. Returns Type Description MessagePackWriter The new writer. Flush() Ensures everything previously written has been flushed to the underlying IBufferWriter<T>. Declaration public void Flush() GetEncodedLength(long) Get the number of bytes required to encode a value in msgpack. Declaration public static int GetEncodedLength(long value) Parameters Type Name Description long value The value to encode. Returns Type Description int The byte length; One of 1, 2, 3, 5 or 9 bytes. GetEncodedLength(ulong) Get the number of bytes required to encode a value in msgpack. Declaration public static int GetEncodedLength(ulong value) Parameters Type Name Description ulong value The value to encode. Returns Type Description int The byte length; One of 1, 2, 3, 5 or 9 bytes. GetSpan(int) Gets memory where raw messagepack data can be written. Declaration public Span<byte> GetSpan(int length) Parameters Type Name Description int length The size of the memory block required. Returns Type Description Span<byte> The span of memory to write to. This may exceed length. Remarks After initializing the resulting memory, always follow up with a call to Advance(int). This is similar in purpose to WriteRaw(ReadOnlySpan<byte>) but provides uninitialized memory for the caller to write to instead of copying initialized memory from elsewhere. See Also GetSpan(int) Write(bool) Writes a bool value using either True or False. Declaration public void Write(bool value) Parameters Type Name Description bool value The value. Write(in ReadOnlySequence<byte>) Writes a sequence of bytes, prefixed with a length encoded as the smallest fitting from: Bin8, Bin16, or Bin32. Declaration public void Write(in ReadOnlySequence<byte> src) Parameters Type Name Description ReadOnlySequence<byte> src The span of bytes to write. Remarks When OldSpec is true, the msgpack code used is Str8, Str16 or Str32 instead. Write(byte) Writes a byte value using a 1-byte code when possible, otherwise as UInt8. Declaration public void Write(byte value) Parameters Type Name Description byte value The value. Write(byte[]?) Writes a byte[], prefixed with a length encoded as the smallest fitting from: Bin8, Bin16, Bin32, or Nil if src is null. Declaration public void Write(byte[]? src) Parameters Type Name Description byte[] src The array of bytes to write. May be null. Write(char) Writes a char value using a 1-byte code when possible, otherwise as UInt8 or UInt16. Declaration public void Write(char value) Parameters Type Name Description char value The value. Write(DateTime) Writes a DateTime using the message code DateTime. Declaration public void Write(DateTime dateTime) Parameters Type Name Description DateTime dateTime The value to write. Exceptions Type Condition NotSupportedException Thrown when OldSpec is true because the old spec does not define a DateTime format. Write(double) Writes a Float64 value. Declaration public void Write(double value) Parameters Type Name Description double value The value. Write(short) Writes a short using a built-in 1-byte code when within specific MessagePack-supported ranges, or the most compact of UInt8, UInt16, Int8, or Int16. Declaration public void Write(short value) Parameters Type Name Description short value The value to write. Write(int) Writes an int using a built-in 1-byte code when within specific MessagePack-supported ranges, or the most compact of UInt8, UInt16, UInt32, Int8, Int16, Int32. Declaration public void Write(int value) Parameters Type Name Description int value The value to write. Write(long) Writes an long using a built-in 1-byte code when within specific MessagePack-supported ranges, or the most compact of UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64. Declaration public void Write(long value) Parameters Type Name Description long value The value to write. Write(ReadOnlySpan<byte>) Writes a span of bytes, prefixed with a length encoded as the smallest fitting from: Bin8, Bin16, or Bin32. Declaration public void Write(ReadOnlySpan<byte> src) Parameters Type Name Description ReadOnlySpan<byte> src The span of bytes to write. Remarks When OldSpec is true, the msgpack code used is Str8, Str16 or Str32 instead. Write(ReadOnlySpan<char>) Writes out a string, prefixed with the length using one of these message codes: MinFixStr, Str8, Str16, Str32. Declaration public void Write(ReadOnlySpan<char> value) Parameters Type Name Description ReadOnlySpan<char> value The value to write. Write(sbyte) Writes an 8-bit value using a 1-byte code when possible, otherwise as Int8. Declaration public void Write(sbyte value) Parameters Type Name Description sbyte value The value. Write(float) Writes a Float32 value. Declaration public void Write(float value) Parameters Type Name Description float value The value. Write(string?) Writes out a string, prefixed with the length using one of these message codes: MinFixStr, Str8, Str16, Str32, or Nil if the value is null. Declaration public void Write(string? value) Parameters Type Name Description string value The value to write. May be null. Write(ushort) Writes a ushort value using a 1-byte code when possible, otherwise as UInt8 or UInt16. Declaration public void Write(ushort value) Parameters Type Name Description ushort value The value. Write(uint) Writes an uint using a built-in 1-byte code when within specific MessagePack-supported ranges, or the most compact of UInt8, UInt16, or UInt32. Declaration public void Write(uint value) Parameters Type Name Description uint value The value to write. Write(ulong) Writes an ulong using a built-in 1-byte code when within specific MessagePack-supported ranges, or the most compact of UInt8, UInt16, UInt32, Int8, Int16, Int32. Declaration public void Write(ulong value) Parameters Type Name Description ulong value The value to write. WriteArrayHeader(int) Write the length of the next array to be written in the most compact form of MinFixArray, Array16, or Array32. Declaration public void WriteArrayHeader(int count) Parameters Type Name Description int count The number of elements that will be written in the array. WriteArrayHeader(uint) Write the length of the next array to be written in the most compact form of MinFixArray, Array16, or Array32. Declaration public void WriteArrayHeader(uint count) Parameters Type Name Description uint count The number of elements that will be written in the array. WriteBinHeader(int) Writes the header that precedes a raw binary sequence with a length encoded as the smallest fitting from: Bin8, Bin16, or Bin32. Declaration public void WriteBinHeader(int length) Parameters Type Name Description int length The length of bytes that will be written next. Remarks The caller should use WriteRaw(in ReadOnlySequence<byte>) or WriteRaw(ReadOnlySpan<byte>) after calling this method to actually write the content. Alternatively a single call to Write(ReadOnlySpan<byte>) or Write(in ReadOnlySequence<byte>) will take care of the header and content in one call. When OldSpec is true, the msgpack code used is Str8, Str16 or Str32 instead. WriteExtensionFormat(ExtensionResult) Writes an extension format, using the smallest one of these codes: FixExt1, FixExt2, FixExt4, FixExt8, FixExt16, Ext8, Ext16, or Ext32. Declaration public void WriteExtensionFormat(ExtensionResult extensionData) Parameters Type Name Description ExtensionResult extensionData The extension data. WriteExtensionFormatHeader(ExtensionHeader) Writes the extension format header, using the smallest one of these codes: FixExt1, FixExt2, FixExt4, FixExt8, FixExt16, Ext8, Ext16, or Ext32. Declaration public void WriteExtensionFormatHeader(ExtensionHeader extensionHeader) Parameters Type Name Description ExtensionHeader extensionHeader The extension header. WriteInt16(short) Writes a short using Int16. Declaration public void WriteInt16(short value) Parameters Type Name Description short value The value to write. WriteInt32(int) Writes an int using Int32. Declaration public void WriteInt32(int value) Parameters Type Name Description int value The value to write. WriteInt64(long) Writes a long using Int64. Declaration public void WriteInt64(long value) Parameters Type Name Description long value The value to write. WriteInt8(sbyte) Writes an 8-bit value using Int8. Declaration public void WriteInt8(sbyte value) Parameters Type Name Description sbyte value The value. WriteMapHeader(int) Write the length of the next map to be written in the most compact form of MinFixMap, Map16, or Map32. Declaration public void WriteMapHeader(int count) Parameters Type Name Description int count The number of key=value pairs that will be written in the map. WriteMapHeader(uint) Write the length of the next map to be written in the most compact form of MinFixMap, Map16, or Map32. Declaration public void WriteMapHeader(uint count) Parameters Type Name Description uint count The number of key=value pairs that will be written in the map. WriteNil() Writes a Nil value. Declaration public void WriteNil() WriteRaw(in ReadOnlySequence<byte>) Copies bytes directly into the message pack writer. Declaration public void WriteRaw(in ReadOnlySequence<byte> rawMessagePackBlock) Parameters Type Name Description ReadOnlySequence<byte> rawMessagePackBlock The span of bytes to copy from. WriteRaw(ReadOnlySpan<byte>) Copies bytes directly into the message pack writer. Declaration public void WriteRaw(ReadOnlySpan<byte> rawMessagePackBlock) Parameters Type Name Description ReadOnlySpan<byte> rawMessagePackBlock The span of bytes to copy from. WriteString(in ReadOnlySequence<byte>) Writes out an array of bytes that (may) represent a UTF-8 encoded string, prefixed with the length using one of these message codes: MinFixStr, Str8, Str16, or Str32. Declaration public void WriteString(in ReadOnlySequence<byte> utf8stringBytes) Parameters Type Name Description ReadOnlySequence<byte> utf8stringBytes The bytes to write. WriteString(ReadOnlySpan<byte>) Writes out an array of bytes that (may) represent a UTF-8 encoded string, prefixed with the length using one of these message codes: MinFixStr, Str8, Str16, or Str32. Declaration public void WriteString(ReadOnlySpan<byte> utf8stringBytes) Parameters Type Name Description ReadOnlySpan<byte> utf8stringBytes The bytes to write. WriteStringHeader(int) Writes out the header that may precede a UTF-8 encoded string, prefixed with the length using one of these message codes: MinFixStr, Str8, Str16, or Str32. Declaration public void WriteStringHeader(int byteCount) Parameters Type Name Description int byteCount The number of bytes in the string that will follow this header. Remarks The caller should use WriteRaw(in ReadOnlySequence<byte>) or WriteRaw(ReadOnlySpan<byte>) after calling this method to actually write the content. Alternatively a single call to WriteString(ReadOnlySpan<byte>) or WriteString(in ReadOnlySequence<byte>) will take care of the header and content in one call. WriteUInt16(ushort) Writes a ushort value using UInt16. Declaration public void WriteUInt16(ushort value) Parameters Type Name Description ushort value The value. WriteUInt32(uint) Writes an uint using UInt32. Declaration public void WriteUInt32(uint value) Parameters Type Name Description uint value The value to write. WriteUInt64(ulong) Writes an ulong using Int32. Declaration public void WriteUInt64(ulong value) Parameters Type Name Description ulong value The value to write. WriteUInt8(byte) Writes a byte value using UInt8. Declaration public void WriteUInt8(byte value) Parameters Type Name Description byte value The value."
  },
  "api/MessagePack.Nil.html": {
    "href": "api/MessagePack.Nil.html",
    "title": "Struct Nil | CodeFactory for Windows",
    "keywords": "Struct Nil Implements IEquatable<Nil> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.dll Syntax public struct Nil : IEquatable<Nil> Fields Default Declaration public static readonly Nil Default Field Value Type Description Nil Methods Equals(Nil) Declaration public bool Equals(Nil other) Parameters Type Name Description Nil other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators operator ==(Nil, Nil) Declaration public static bool operator ==(Nil left, Nil right) Parameters Type Name Description Nil left Nil right Returns Type Description bool operator !=(Nil, Nil) Declaration public static bool operator !=(Nil left, Nil right) Parameters Type Name Description Nil left Nil right Returns Type Description bool Implements IEquatable<T>"
  },
  "api/MessagePack.ReservedMessagePackExtensionTypeCode.html": {
    "href": "api/MessagePack.ReservedMessagePackExtensionTypeCode.html",
    "title": "Class ReservedMessagePackExtensionTypeCode | CodeFactory for Windows",
    "keywords": "Class ReservedMessagePackExtensionTypeCode The officially defined messagepack extension type codes. Inheritance object ReservedMessagePackExtensionTypeCode Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public static class ReservedMessagePackExtensionTypeCode Fields DateTime Declaration public const sbyte DateTime = -1 Field Value Type Description sbyte"
  },
  "api/MessagePack.Resolvers.AttributeFormatterResolver.html": {
    "href": "api/MessagePack.Resolvers.AttributeFormatterResolver.html",
    "title": "Class AttributeFormatterResolver | CodeFactory for Windows",
    "keywords": "Class AttributeFormatterResolver Get formatter from MessagePackFormatterAttribute. Inheritance object AttributeFormatterResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class AttributeFormatterResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly AttributeFormatterResolver Instance Field Value Type Description AttributeFormatterResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.BuiltinResolver.html": {
    "href": "api/MessagePack.Resolvers.BuiltinResolver.html",
    "title": "Class BuiltinResolver | CodeFactory for Windows",
    "keywords": "Class BuiltinResolver Inheritance object BuiltinResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class BuiltinResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly BuiltinResolver Instance Field Value Type Description BuiltinResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.CompositeResolver.html": {
    "href": "api/MessagePack.Resolvers.CompositeResolver.html",
    "title": "Class CompositeResolver | CodeFactory for Windows",
    "keywords": "Class CompositeResolver Represents a collection of formatters and resolvers acting as one. Inheritance object CompositeResolver Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public static class CompositeResolver Remarks This class is not thread-safe for mutations. It is thread-safe when not being written to. Methods Create(params IMessagePackFormatter[]) Declaration public static IFormatterResolver Create(params IMessagePackFormatter[] formatters) Parameters Type Name Description IMessagePackFormatter[] formatters Returns Type Description IFormatterResolver Create(params IFormatterResolver[]) Declaration public static IFormatterResolver Create(params IFormatterResolver[] resolvers) Parameters Type Name Description IFormatterResolver[] resolvers Returns Type Description IFormatterResolver Create(IReadOnlyList<IMessagePackFormatter>, IReadOnlyList<IFormatterResolver>) Initializes a new instance of an IFormatterResolver with the specified formatters and sub-resolvers. Declaration public static IFormatterResolver Create(IReadOnlyList<IMessagePackFormatter> formatters, IReadOnlyList<IFormatterResolver> resolvers) Parameters Type Name Description IReadOnlyList<IMessagePackFormatter> formatters A list of instances of IMessagePackFormatter<T> to prefer (above the resolvers). The formatters are searched in the order given, so if two formatters support serializing the same type, the first one is used. May not be null, but may be Empty<T>(). IReadOnlyList<IFormatterResolver> resolvers A list of resolvers to use for serializing types for which formatters does not include a formatter. The resolvers are searched in the order given, so if two resolvers support serializing the same type, the first one is used. May not be null, but may be Empty<T>(). Returns Type Description IFormatterResolver An instance of IFormatterResolver."
  },
  "api/MessagePack.Resolvers.ContractlessStandardResolver.html": {
    "href": "api/MessagePack.Resolvers.ContractlessStandardResolver.html",
    "title": "Class ContractlessStandardResolver | CodeFactory for Windows",
    "keywords": "Class ContractlessStandardResolver Inheritance object ContractlessStandardResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class ContractlessStandardResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly ContractlessStandardResolver Instance Field Value Type Description ContractlessStandardResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.ContractlessStandardResolverAllowPrivate.html": {
    "href": "api/MessagePack.Resolvers.ContractlessStandardResolverAllowPrivate.html",
    "title": "Class ContractlessStandardResolverAllowPrivate | CodeFactory for Windows",
    "keywords": "Class ContractlessStandardResolverAllowPrivate Inheritance object ContractlessStandardResolverAllowPrivate Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class ContractlessStandardResolverAllowPrivate : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly ContractlessStandardResolverAllowPrivate Instance Field Value Type Description ContractlessStandardResolverAllowPrivate Options A MessagePackSerializerOptions instance with this formatter pre-configured. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.DynamicContractlessObjectResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicContractlessObjectResolver.html",
    "title": "Class DynamicContractlessObjectResolver | CodeFactory for Windows",
    "keywords": "Class DynamicContractlessObjectResolver ObjectResolver by dynamic code generation, no needs MessagePackObject attribute and serialized key as string. Inheritance object DynamicContractlessObjectResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class DynamicContractlessObjectResolver : IFormatterResolver Fields Instance Declaration public static readonly DynamicContractlessObjectResolver Instance Field Value Type Description DynamicContractlessObjectResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.DynamicContractlessObjectResolverAllowPrivate.html": {
    "href": "api/MessagePack.Resolvers.DynamicContractlessObjectResolverAllowPrivate.html",
    "title": "Class DynamicContractlessObjectResolverAllowPrivate | CodeFactory for Windows",
    "keywords": "Class DynamicContractlessObjectResolverAllowPrivate ObjectResolver by dynamic code generation, no needs MessagePackObject attribute and serialized key as string, allow private member. Inheritance object DynamicContractlessObjectResolverAllowPrivate Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class DynamicContractlessObjectResolverAllowPrivate : IFormatterResolver Constructors DynamicContractlessObjectResolverAllowPrivate() Declaration public DynamicContractlessObjectResolverAllowPrivate() Fields Instance Declaration public static readonly DynamicContractlessObjectResolverAllowPrivate Instance Field Value Type Description DynamicContractlessObjectResolverAllowPrivate Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.DynamicEnumAsStringResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicEnumAsStringResolver.html",
    "title": "Class DynamicEnumAsStringResolver | CodeFactory for Windows",
    "keywords": "Class DynamicEnumAsStringResolver Inheritance object DynamicEnumAsStringResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class DynamicEnumAsStringResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly DynamicEnumAsStringResolver Instance Field Value Type Description DynamicEnumAsStringResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.DynamicEnumResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicEnumResolver.html",
    "title": "Class DynamicEnumResolver | CodeFactory for Windows",
    "keywords": "Class DynamicEnumResolver EnumResolver by dynamic code generation, serialized underlying type. Inheritance object DynamicEnumResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class DynamicEnumResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly DynamicEnumResolver Instance Field Value Type Description DynamicEnumResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.DynamicGenericResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicGenericResolver.html",
    "title": "Class DynamicGenericResolver | CodeFactory for Windows",
    "keywords": "Class DynamicGenericResolver Inheritance object DynamicGenericResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class DynamicGenericResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly DynamicGenericResolver Instance Field Value Type Description DynamicGenericResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.DynamicObjectResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicObjectResolver.html",
    "title": "Class DynamicObjectResolver | CodeFactory for Windows",
    "keywords": "Class DynamicObjectResolver ObjectResolver by dynamic code generation. Inheritance object DynamicObjectResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class DynamicObjectResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly DynamicObjectResolver Instance Field Value Type Description DynamicObjectResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.DynamicObjectResolverAllowPrivate.html": {
    "href": "api/MessagePack.Resolvers.DynamicObjectResolverAllowPrivate.html",
    "title": "Class DynamicObjectResolverAllowPrivate | CodeFactory for Windows",
    "keywords": "Class DynamicObjectResolverAllowPrivate ObjectResolver by dynamic code generation, allow private member. Inheritance object DynamicObjectResolverAllowPrivate Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class DynamicObjectResolverAllowPrivate : IFormatterResolver Fields Instance Declaration public static readonly DynamicObjectResolverAllowPrivate Instance Field Value Type Description DynamicObjectResolverAllowPrivate Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.DynamicUnionResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicUnionResolver.html",
    "title": "Class DynamicUnionResolver | CodeFactory for Windows",
    "keywords": "Class DynamicUnionResolver UnionResolver by dynamic code generation. Inheritance object DynamicUnionResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class DynamicUnionResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly DynamicUnionResolver Instance Field Value Type Description DynamicUnionResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.ExpandoObjectResolver.html": {
    "href": "api/MessagePack.Resolvers.ExpandoObjectResolver.html",
    "title": "Class ExpandoObjectResolver | CodeFactory for Windows",
    "keywords": "Class ExpandoObjectResolver A resolver for use when deserializing MessagePack data where the schema is not known at compile-time such that strong-types can be instantiated. Instead, ExpandoObject is used wherever a MessagePack map is encountered. Inheritance object ExpandoObjectResolver Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public static class ExpandoObjectResolver Fields Instance The resolver to use to deserialize into C#'s dynamic keyword. Declaration public static readonly IFormatterResolver Instance Field Value Type Description IFormatterResolver Remarks This resolver includes more than just the ExpandoObjectFormatter. Options A set of options that includes the Instance and puts the deserializer into UntrustedData mode. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions"
  },
  "api/MessagePack.Resolvers.NativeDateTimeResolver.html": {
    "href": "api/MessagePack.Resolvers.NativeDateTimeResolver.html",
    "title": "Class NativeDateTimeResolver | CodeFactory for Windows",
    "keywords": "Class NativeDateTimeResolver Inheritance object NativeDateTimeResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class NativeDateTimeResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly NativeDateTimeResolver Instance Field Value Type Description NativeDateTimeResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.NativeDecimalResolver.html": {
    "href": "api/MessagePack.Resolvers.NativeDecimalResolver.html",
    "title": "Class NativeDecimalResolver | CodeFactory for Windows",
    "keywords": "Class NativeDecimalResolver Inheritance object NativeDecimalResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class NativeDecimalResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly NativeDecimalResolver Instance Field Value Type Description NativeDecimalResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.NativeGuidResolver.html": {
    "href": "api/MessagePack.Resolvers.NativeGuidResolver.html",
    "title": "Class NativeGuidResolver | CodeFactory for Windows",
    "keywords": "Class NativeGuidResolver Inheritance object NativeGuidResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class NativeGuidResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly NativeGuidResolver Instance Field Value Type Description NativeGuidResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.PrimitiveObjectResolver.html": {
    "href": "api/MessagePack.Resolvers.PrimitiveObjectResolver.html",
    "title": "Class PrimitiveObjectResolver | CodeFactory for Windows",
    "keywords": "Class PrimitiveObjectResolver Inheritance object PrimitiveObjectResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class PrimitiveObjectResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly PrimitiveObjectResolver Instance Field Value Type Description PrimitiveObjectResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.StandardResolver.html": {
    "href": "api/MessagePack.Resolvers.StandardResolver.html",
    "title": "Class StandardResolver | CodeFactory for Windows",
    "keywords": "Class StandardResolver Default composited resolver, builtin -> attribute -> dynamic enum -> dynamic generic -> dynamic union -> dynamic object -> primitive. Inheritance object StandardResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class StandardResolver : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly StandardResolver Instance Field Value Type Description StandardResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.StandardResolverAllowPrivate.html": {
    "href": "api/MessagePack.Resolvers.StandardResolverAllowPrivate.html",
    "title": "Class StandardResolverAllowPrivate | CodeFactory for Windows",
    "keywords": "Class StandardResolverAllowPrivate Inheritance object StandardResolverAllowPrivate Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class StandardResolverAllowPrivate : IFormatterResolver Fields Instance The singleton instance that can be used. Declaration public static readonly StandardResolverAllowPrivate Instance Field Value Type Description StandardResolverAllowPrivate Options A MessagePackSerializerOptions instance with this formatter pre-configured. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.StaticCompositeResolver.html": {
    "href": "api/MessagePack.Resolvers.StaticCompositeResolver.html",
    "title": "Class StaticCompositeResolver | CodeFactory for Windows",
    "keywords": "Class StaticCompositeResolver Singleton version of CompositeResolver, which can register a collection of formatters and resolvers to a single instance. Inheritance object StaticCompositeResolver Implements IFormatterResolver Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public class StaticCompositeResolver : IFormatterResolver Fields Instance Declaration public static readonly StaticCompositeResolver Instance Field Value Type Description StaticCompositeResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Register(params IMessagePackFormatter[]) Initializes a singleton instance with the specified formatters. This method can only call before use StaticCompositeResolver.Instance.GetFormatter. If call twice in the Register methods, registered formatters and resolvers will be overridden. Declaration public void Register(params IMessagePackFormatter[] formatters) Parameters Type Name Description IMessagePackFormatter[] formatters A list of instances of IMessagePackFormatter<T>. The formatters are searched in the order given, so if two formatters support serializing the same type, the first one is used. Register(params IFormatterResolver[]) Initializes a singleton instance with the specified formatters and sub-resolvers. This method can only call before use StaticCompositeResolver.Instance.GetFormatter. If call twice in the Register methods, registered formatters and resolvers will be overridden. Declaration public void Register(params IFormatterResolver[] resolvers) Parameters Type Name Description IFormatterResolver[] resolvers A list of resolvers to use for serializing types. The resolvers are searched in the order given, so if two resolvers support serializing the same type, the first one is used. Register(IReadOnlyList<IMessagePackFormatter>, IReadOnlyList<IFormatterResolver>) Initializes a singleton instance with the specified formatters and sub-resolvers. This method can only call before use StaticCompositeResolver.Instance.GetFormatter. If call twice in the Register methods, registered formatters and resolvers will be overridden. Declaration public void Register(IReadOnlyList<IMessagePackFormatter> formatters, IReadOnlyList<IFormatterResolver> resolvers) Parameters Type Name Description IReadOnlyList<IMessagePackFormatter> formatters A list of instances of IMessagePackFormatter<T>. The formatters are searched in the order given, so if two formatters support serializing the same type, the first one is used. IReadOnlyList<IFormatterResolver> resolvers A list of resolvers to use for serializing types for which formatters does not include a formatter. The resolvers are searched in the order given, so if two resolvers support serializing the same type, the first one is used. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.TypelessContractlessStandardResolver.html": {
    "href": "api/MessagePack.Resolvers.TypelessContractlessStandardResolver.html",
    "title": "Class TypelessContractlessStandardResolver | CodeFactory for Windows",
    "keywords": "Class TypelessContractlessStandardResolver Embeds the full name of .NET types for object typed fields/collection items Preserves .NET DateTime timezone. Inheritance object TypelessContractlessStandardResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class TypelessContractlessStandardResolver : IFormatterResolver Constructors TypelessContractlessStandardResolver() Declaration public TypelessContractlessStandardResolver() Fields Instance The singleton instance that can be used. Declaration public static readonly TypelessContractlessStandardResolver Instance Field Value Type Description TypelessContractlessStandardResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. Declaration public static readonly MessagePackSerializerOptions Options Field Value Type Description MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.TypelessObjectResolver.html": {
    "href": "api/MessagePack.Resolvers.TypelessObjectResolver.html",
    "title": "Class TypelessObjectResolver | CodeFactory for Windows",
    "keywords": "Class TypelessObjectResolver Used for object fields/collections, ex: var arr = new object[] { 1, \"a\", new Model() }; The runtime type of value in object field, should be covered by one of resolvers in complex/standard resolver. TypelessObjectResolver should be placed before DynamicObjectTypeFallbackResolver and PrimitiveObjectFormatter in resolvers list. Deserializer uses Namespace.TypeName, AssemblyName to get runtime type in destination app, so that combination must be present in destination app. Serialized binary is valid MessagePack binary used ext-format and custom typecode(100). Inside ext - assembly qualified type name, and serialized object. Inheritance object TypelessObjectResolver Implements IFormatterResolver Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack.Resolvers Assembly: MessagePack.dll Syntax public sealed class TypelessObjectResolver : IFormatterResolver Fields Instance Declaration public static readonly IFormatterResolver Instance Field Value Type Description IFormatterResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. Declaration public IMessagePackFormatter<T>? GetFormatter<T>() Returns Type Description IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters Name Description T The type of value to be serialized or deserialized. Implements IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver)"
  },
  "api/MessagePack.Resolvers.html": {
    "href": "api/MessagePack.Resolvers.html",
    "title": "Namespace MessagePack.Resolvers | CodeFactory for Windows",
    "keywords": "Namespace MessagePack.Resolvers Classes AttributeFormatterResolver Get formatter from MessagePackFormatterAttribute. BuiltinResolver CompositeResolver Represents a collection of formatters and resolvers acting as one. ContractlessStandardResolver ContractlessStandardResolverAllowPrivate DynamicContractlessObjectResolver ObjectResolver by dynamic code generation, no needs MessagePackObject attribute and serialized key as string. DynamicContractlessObjectResolverAllowPrivate ObjectResolver by dynamic code generation, no needs MessagePackObject attribute and serialized key as string, allow private member. DynamicEnumAsStringResolver DynamicEnumResolver EnumResolver by dynamic code generation, serialized underlying type. DynamicGenericResolver DynamicObjectResolver ObjectResolver by dynamic code generation. DynamicObjectResolverAllowPrivate ObjectResolver by dynamic code generation, allow private member. DynamicUnionResolver UnionResolver by dynamic code generation. ExpandoObjectResolver A resolver for use when deserializing MessagePack data where the schema is not known at compile-time such that strong-types can be instantiated. Instead, ExpandoObject is used wherever a MessagePack map is encountered. NativeDateTimeResolver NativeDecimalResolver NativeGuidResolver PrimitiveObjectResolver StandardResolver Default composited resolver, builtin -> attribute -> dynamic enum -> dynamic generic -> dynamic union -> dynamic object -> primitive. StandardResolverAllowPrivate StaticCompositeResolver Singleton version of CompositeResolver, which can register a collection of formatters and resolvers to a single instance. TypelessContractlessStandardResolver Embeds the full name of .NET types for object typed fields/collection items Preserves .NET DateTime timezone. TypelessObjectResolver Used for object fields/collections, ex: var arr = new object[] { 1, \"a\", new Model() }; The runtime type of value in object field, should be covered by one of resolvers in complex/standard resolver. TypelessObjectResolver should be placed before DynamicObjectTypeFallbackResolver and PrimitiveObjectFormatter in resolvers list. Deserializer uses Namespace.TypeName, AssemblyName to get runtime type in destination app, so that combination must be present in destination app. Serialized binary is valid MessagePack binary used ext-format and custom typecode(100). Inside ext - assembly qualified type name, and serialized object."
  },
  "api/MessagePack.SequencePool.html": {
    "href": "api/MessagePack.SequencePool.html",
    "title": "Class SequencePool | CodeFactory for Windows",
    "keywords": "Class SequencePool A thread-safe, alloc-free reusable object pool. Inheritance object SequencePool Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public class SequencePool Constructors SequencePool() Initializes a new instance of the SequencePool class. Declaration public SequencePool() Remarks We use a MessagePack.SequencePool.maxSize that allows every processor to be involved in messagepack serialization concurrently, plus one nested serialization per processor (since LZ4 and sometimes other nested serializations may exist). SequencePool(int) Initializes a new instance of the SequencePool class. Declaration public SequencePool(int maxSize) Parameters Type Name Description int maxSize The maximum size to allow the pool to grow. SequencePool(int, ArrayPool<byte>) Initializes a new instance of the SequencePool class. Declaration public SequencePool(int maxSize, ArrayPool<byte> arrayPool) Parameters Type Name Description int maxSize The maximum size to allow the pool to grow. ArrayPool<byte> arrayPool Array pool that will be used."
  },
  "api/MessagePack.SerializationConstructorAttribute.html": {
    "href": "api/MessagePack.SerializationConstructorAttribute.html",
    "title": "Class SerializationConstructorAttribute | CodeFactory for Windows",
    "keywords": "Class SerializationConstructorAttribute Inheritance object Attribute SerializationConstructorAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.Annotations.dll Syntax [AttributeUsage(AttributeTargets.Constructor, AllowMultiple = false, Inherited = true)] public class SerializationConstructorAttribute : Attribute Constructors SerializationConstructorAttribute() Declaration public SerializationConstructorAttribute()"
  },
  "api/MessagePack.TinyJsonException.html": {
    "href": "api/MessagePack.TinyJsonException.html",
    "title": "Class TinyJsonException | CodeFactory for Windows",
    "keywords": "Class TinyJsonException Inheritance object Exception MessagePackSerializationException TinyJsonException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: MessagePack Assembly: MessagePack.dll Syntax public class TinyJsonException : MessagePackSerializationException, ISerializable Constructors TinyJsonException(SerializationInfo, StreamingContext) Declaration protected TinyJsonException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context TinyJsonException(string) Declaration public TinyJsonException(string message) Parameters Type Name Description string message Implements ISerializable"
  },
  "api/MessagePack.UnionAttribute.html": {
    "href": "api/MessagePack.UnionAttribute.html",
    "title": "Class UnionAttribute | CodeFactory for Windows",
    "keywords": "Class UnionAttribute Inheritance object Attribute UnionAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: MessagePack Assembly: MessagePack.Annotations.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, AllowMultiple = true, Inherited = false)] public class UnionAttribute : Attribute Constructors UnionAttribute(int, string) Initializes a new instance of the UnionAttribute class. Declaration public UnionAttribute(int key, string subType) Parameters Type Name Description int key The distinguishing value that identifies a particular subtype. string subType The full name (should be assembly qualified) of the derived or implementing type. UnionAttribute(int, Type) Initializes a new instance of the UnionAttribute class. Declaration public UnionAttribute(int key, Type subType) Parameters Type Name Description int key The distinguishing value that identifies a particular subtype. Type subType The derived or implementing type. Properties Key Gets the distinguishing value that identifies a particular subtype. Declaration public int Key { get; } Property Value Type Description int SubType Gets the derived or implementing type. Declaration public Type SubType { get; } Property Value Type Description Type"
  },
  "api/MessagePack.html": {
    "href": "api/MessagePack.html",
    "title": "Namespace MessagePack | CodeFactory for Windows",
    "keywords": "Namespace MessagePack Classes FormatterNotRegisteredException FormatterResolverExtensions IgnoreMemberAttribute KeyAttribute MessagePackCode The core type codes as defined by msgpack. MessagePackFormatterAttribute MessagePackObjectAttribute MessagePackRange MessagePackSecurity Settings related to security, particularly relevant when deserializing data from untrusted sources. MessagePackSerializationException An exception thrown during serializing an object graph or deserializing a messagepack sequence. MessagePackSerializer High-Level API of MessagePack for C#. MessagePackSerializer.Typeless A convenience wrapper around MessagePackSerializer that assumes all generic type arguments are object causing the type of top-level objects to be recorded in the MessagePack stream and thus deserialized to the original type automatically. MessagePackSerializerOptions An immutable description of options for running the MessagePackSerializer. MessagePackStreamReader Reads one or more messagepack data structures from a Stream. ReservedMessagePackExtensionTypeCode The officially defined messagepack extension type codes. SequencePool A thread-safe, alloc-free reusable object pool. SerializationConstructorAttribute TinyJsonException UnionAttribute Structs ExtensionHeader ExtensionResult MessagePackReader A primitive types reader for the MessagePack format. MessagePackWriter A primitive types writer for the MessagePack format. Nil Interfaces IFormatterResolver Allows querying for a formatter for serializing or deserializing a particular Type. IMessagePackSerializationCallbackReceiver Enums MessagePackCompression Identifies the various compression schemes which might be applied at the msgpack level. MessagePackType https://github.com/msgpack/msgpack/blob/master/spec.md#serialization-type-to-format-conversion."
  },
  "api/Microsoft.Extensions.CommandLineUtils.AnsiConsole.html": {
    "href": "api/Microsoft.Extensions.CommandLineUtils.AnsiConsole.html",
    "title": "Class AnsiConsole | CodeFactory for Windows",
    "keywords": "Class AnsiConsole Inheritance object AnsiConsole Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.CommandLineUtils Assembly: Microsoft.Extensions.CommandLineUtils.dll Syntax public class AnsiConsole Properties OriginalForegroundColor Declaration public ConsoleColor OriginalForegroundColor { get; } Property Value Type Description ConsoleColor Writer Declaration public TextWriter Writer { get; } Property Value Type Description TextWriter Methods GetError(bool) Declaration public static AnsiConsole GetError(bool useConsoleColor) Parameters Type Name Description bool useConsoleColor Returns Type Description AnsiConsole GetOutput(bool) Declaration public static AnsiConsole GetOutput(bool useConsoleColor) Parameters Type Name Description bool useConsoleColor Returns Type Description AnsiConsole WriteLine(string) Declaration public void WriteLine(string message) Parameters Type Name Description string message"
  },
  "api/Microsoft.Extensions.CommandLineUtils.CommandArgument.html": {
    "href": "api/Microsoft.Extensions.CommandLineUtils.CommandArgument.html",
    "title": "Class CommandArgument | CodeFactory for Windows",
    "keywords": "Class CommandArgument Inheritance object CommandArgument Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.CommandLineUtils Assembly: Microsoft.Extensions.CommandLineUtils.dll Syntax public class CommandArgument Constructors CommandArgument() Declaration public CommandArgument() Properties Description Declaration public string Description { get; set; } Property Value Type Description string MultipleValues Declaration public bool MultipleValues { get; set; } Property Value Type Description bool Name Declaration public string Name { get; set; } Property Value Type Description string ShowInHelpText Declaration public bool ShowInHelpText { get; set; } Property Value Type Description bool Value Declaration public string Value { get; } Property Value Type Description string Values Declaration public List<string> Values { get; } Property Value Type Description List<string>"
  },
  "api/Microsoft.Extensions.CommandLineUtils.CommandLineApplication.html": {
    "href": "api/Microsoft.Extensions.CommandLineUtils.CommandLineApplication.html",
    "title": "Class CommandLineApplication | CodeFactory for Windows",
    "keywords": "Class CommandLineApplication Inheritance object CommandLineApplication Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.CommandLineUtils Assembly: Microsoft.Extensions.CommandLineUtils.dll Syntax public class CommandLineApplication Constructors CommandLineApplication(bool) Declaration public CommandLineApplication(bool throwOnUnexpectedArg = true) Parameters Type Name Description bool throwOnUnexpectedArg Fields Arguments Declaration public readonly List<CommandArgument> Arguments Field Value Type Description List<CommandArgument> Commands Declaration public readonly List<CommandLineApplication> Commands Field Value Type Description List<CommandLineApplication> Options Declaration public readonly List<CommandOption> Options Field Value Type Description List<CommandOption> RemainingArguments Declaration public readonly List<string> RemainingArguments Field Value Type Description List<string> Properties AllowArgumentSeparator Declaration public bool AllowArgumentSeparator { get; set; } Property Value Type Description bool Description Declaration public string Description { get; set; } Property Value Type Description string Error Declaration public TextWriter Error { get; set; } Property Value Type Description TextWriter ExtendedHelpText Declaration public string ExtendedHelpText { get; set; } Property Value Type Description string FullName Declaration public string FullName { get; set; } Property Value Type Description string Invoke Declaration public Func<int> Invoke { get; set; } Property Value Type Description Func<int> IsShowingInformation Declaration public bool IsShowingInformation { get; protected set; } Property Value Type Description bool LongVersionGetter Declaration public Func<string> LongVersionGetter { get; set; } Property Value Type Description Func<string> Name Declaration public string Name { get; set; } Property Value Type Description string OptionHelp Declaration public CommandOption OptionHelp { get; } Property Value Type Description CommandOption OptionVersion Declaration public CommandOption OptionVersion { get; } Property Value Type Description CommandOption Out Declaration public TextWriter Out { get; set; } Property Value Type Description TextWriter Parent Declaration public CommandLineApplication Parent { get; set; } Property Value Type Description CommandLineApplication ShortVersionGetter Declaration public Func<string> ShortVersionGetter { get; set; } Property Value Type Description Func<string> ShowInHelpText Declaration public bool ShowInHelpText { get; set; } Property Value Type Description bool Syntax Declaration public string Syntax { get; set; } Property Value Type Description string Methods Argument(string, string, Action<CommandArgument>, bool) Declaration public CommandArgument Argument(string name, string description, Action<CommandArgument> configuration, bool multipleValues = false) Parameters Type Name Description string name string description Action<CommandArgument> configuration bool multipleValues Returns Type Description CommandArgument Argument(string, string, bool) Declaration public CommandArgument Argument(string name, string description, bool multipleValues = false) Parameters Type Name Description string name string description bool multipleValues Returns Type Description CommandArgument Command(string, Action<CommandLineApplication>, bool) Declaration public CommandLineApplication Command(string name, Action<CommandLineApplication> configuration, bool throwOnUnexpectedArg = true) Parameters Type Name Description string name Action<CommandLineApplication> configuration bool throwOnUnexpectedArg Returns Type Description CommandLineApplication Execute(params string[]) Declaration public int Execute(params string[] args) Parameters Type Name Description string[] args Returns Type Description int GetFullNameAndVersion() Declaration public string GetFullNameAndVersion() Returns Type Description string GetHelpText(string) Declaration public virtual string GetHelpText(string commandName = null) Parameters Type Name Description string commandName Returns Type Description string GetOptions() Declaration public IEnumerable<CommandOption> GetOptions() Returns Type Description IEnumerable<CommandOption> HelpOption(string) Declaration public CommandOption HelpOption(string template) Parameters Type Name Description string template Returns Type Description CommandOption OnExecute(Func<int>) Declaration public void OnExecute(Func<int> invoke) Parameters Type Name Description Func<int> invoke OnExecute(Func<Task<int>>) Declaration public void OnExecute(Func<Task<int>> invoke) Parameters Type Name Description Func<Task<int>> invoke Option(string, string, CommandOptionType) Declaration public CommandOption Option(string template, string description, CommandOptionType optionType) Parameters Type Name Description string template string description CommandOptionType optionType Returns Type Description CommandOption Option(string, string, CommandOptionType, Action<CommandOption>) Declaration public CommandOption Option(string template, string description, CommandOptionType optionType, Action<CommandOption> configuration) Parameters Type Name Description string template string description CommandOptionType optionType Action<CommandOption> configuration Returns Type Description CommandOption Option(string, string, CommandOptionType, Action<CommandOption>, bool) Declaration public CommandOption Option(string template, string description, CommandOptionType optionType, Action<CommandOption> configuration, bool inherited) Parameters Type Name Description string template string description CommandOptionType optionType Action<CommandOption> configuration bool inherited Returns Type Description CommandOption Option(string, string, CommandOptionType, bool) Declaration public CommandOption Option(string template, string description, CommandOptionType optionType, bool inherited) Parameters Type Name Description string template string description CommandOptionType optionType bool inherited Returns Type Description CommandOption ShowHelp(string) Declaration public void ShowHelp(string commandName = null) Parameters Type Name Description string commandName ShowHint() Declaration public void ShowHint() ShowRootCommandFullNameAndVersion() Declaration public void ShowRootCommandFullNameAndVersion() ShowVersion() Declaration public void ShowVersion() VersionOption(string, Func<string>, Func<string>) Declaration public CommandOption VersionOption(string template, Func<string> shortFormVersionGetter, Func<string> longFormVersionGetter = null) Parameters Type Name Description string template Func<string> shortFormVersionGetter Func<string> longFormVersionGetter Returns Type Description CommandOption VersionOption(string, string, string) Declaration public CommandOption VersionOption(string template, string shortFormVersion, string longFormVersion = null) Parameters Type Name Description string template string shortFormVersion string longFormVersion Returns Type Description CommandOption"
  },
  "api/Microsoft.Extensions.CommandLineUtils.CommandOption.html": {
    "href": "api/Microsoft.Extensions.CommandLineUtils.CommandOption.html",
    "title": "Class CommandOption | CodeFactory for Windows",
    "keywords": "Class CommandOption Inheritance object CommandOption Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.CommandLineUtils Assembly: Microsoft.Extensions.CommandLineUtils.dll Syntax public class CommandOption Constructors CommandOption(string, CommandOptionType) Declaration public CommandOption(string template, CommandOptionType optionType) Parameters Type Name Description string template CommandOptionType optionType Properties Description Declaration public string Description { get; set; } Property Value Type Description string Inherited Declaration public bool Inherited { get; set; } Property Value Type Description bool LongName Declaration public string LongName { get; set; } Property Value Type Description string OptionType Declaration public CommandOptionType OptionType { get; } Property Value Type Description CommandOptionType ShortName Declaration public string ShortName { get; set; } Property Value Type Description string ShowInHelpText Declaration public bool ShowInHelpText { get; set; } Property Value Type Description bool SymbolName Declaration public string SymbolName { get; set; } Property Value Type Description string Template Declaration public string Template { get; set; } Property Value Type Description string ValueName Declaration public string ValueName { get; set; } Property Value Type Description string Values Declaration public List<string> Values { get; } Property Value Type Description List<string> Methods HasValue() Declaration public bool HasValue() Returns Type Description bool TryParse(string) Declaration public bool TryParse(string value) Parameters Type Name Description string value Returns Type Description bool Value() Declaration public string Value() Returns Type Description string"
  },
  "api/Microsoft.Extensions.CommandLineUtils.CommandOptionType.html": {
    "href": "api/Microsoft.Extensions.CommandLineUtils.CommandOptionType.html",
    "title": "Enum CommandOptionType | CodeFactory for Windows",
    "keywords": "Enum CommandOptionType Namespace: Microsoft.Extensions.CommandLineUtils Assembly: Microsoft.Extensions.CommandLineUtils.dll Syntax public enum CommandOptionType Fields Name Description MultipleValue NoValue SingleValue"
  },
  "api/Microsoft.Extensions.CommandLineUtils.CommandParsingException.html": {
    "href": "api/Microsoft.Extensions.CommandLineUtils.CommandParsingException.html",
    "title": "Class CommandParsingException | CodeFactory for Windows",
    "keywords": "Class CommandParsingException Inheritance object Exception CommandParsingException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Namespace: Microsoft.Extensions.CommandLineUtils Assembly: Microsoft.Extensions.CommandLineUtils.dll Syntax public class CommandParsingException : Exception, ISerializable, _Exception Constructors CommandParsingException(CommandLineApplication, string) Declaration public CommandParsingException(CommandLineApplication command, string message) Parameters Type Name Description CommandLineApplication command string message Properties Command Declaration public CommandLineApplication Command { get; } Property Value Type Description CommandLineApplication Implements ISerializable _Exception"
  },
  "api/Microsoft.Extensions.CommandLineUtils.html": {
    "href": "api/Microsoft.Extensions.CommandLineUtils.html",
    "title": "Namespace Microsoft.Extensions.CommandLineUtils | CodeFactory for Windows",
    "keywords": "Namespace Microsoft.Extensions.CommandLineUtils Classes AnsiConsole CommandArgument CommandLineApplication CommandOption CommandParsingException Enums CommandOptionType"
  },
  "api/Microsoft.Extensions.Logging.Abstractions.LogEntry-1.html": {
    "href": "api/Microsoft.Extensions.Logging.Abstractions.LogEntry-1.html",
    "title": "Struct LogEntry<TState> | CodeFactory for Windows",
    "keywords": "Struct LogEntry<TState> Holds the information for a single log entry. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Microsoft.Extensions.Logging.Abstractions Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public readonly struct LogEntry<TState> Type Parameters Name Description TState Constructors LogEntry(LogLevel, string, EventId, TState, Exception?, Func<TState, Exception?, string>) Initializes an instance of the LogEntry struct. Declaration public LogEntry(LogLevel logLevel, string category, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel The log level. string category The category name for the log. EventId eventId The log event Id. TState state The state for which log is being written. Exception exception The log exception. Func<TState, Exception, string> formatter The formatter. Properties Category Gets the log category Declaration public string Category { get; } Property Value Type Description string EventId Gets the log EventId Declaration public EventId EventId { get; } Property Value Type Description EventId Exception Gets the log exception Declaration public Exception? Exception { get; } Property Value Type Description Exception Formatter Gets the formatter Declaration public Func<TState, Exception?, string>? Formatter { get; } Property Value Type Description Func<TState, Exception, string> LogLevel Gets the LogLevel Declaration public LogLevel LogLevel { get; } Property Value Type Description LogLevel State Gets the TState Declaration public TState State { get; } Property Value Type Description TState"
  },
  "api/Microsoft.Extensions.Logging.Abstractions.NullLogger-1.html": {
    "href": "api/Microsoft.Extensions.Logging.Abstractions.NullLogger-1.html",
    "title": "Class NullLogger<T> | CodeFactory for Windows",
    "keywords": "Class NullLogger<T> Minimalistic logger that does nothing. Inheritance object NullLogger<T> Implements ILogger<T> ILogger Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.Logging.Abstractions Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public class NullLogger<T> : ILogger<T>, ILogger Type Parameters Name Description T Constructors NullLogger() Declaration public NullLogger() Fields Instance Returns an instance of NullLogger<T>. Declaration public static readonly NullLogger<T> Instance Field Value Type Description NullLogger<T> An instance of NullLogger<T>. Methods BeginScope<TState>(TState) Begins a logical operation scope. Declaration public IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state The identifier for the scope. Returns Type Description IDisposable An IDisposable that ends the logical operation scope on dispose. Type Parameters Name Description TState The type of the state to begin scope for. IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Level to be checked. Returns Type Description bool true if enabled. Log<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry. Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. TState state The entry to be written. Can be also an object. Exception exception The exception related to this entry. Func<TState, Exception, string> formatter Function to create a string message of the state and exception. Type Parameters Name Description TState The type of the object to be written. Remarks This method ignores the parameters and does nothing. Implements ILogger<TCategoryName> ILogger Extension Methods LoggerExtensions.BeginScope(ILogger, string, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, Exception?, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, Exception?, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, string?, params object?[]) LoggerExtensions.LogError(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogError(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogError(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogError(ILogger, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, string?, params object?[])"
  },
  "api/Microsoft.Extensions.Logging.Abstractions.NullLogger.html": {
    "href": "api/Microsoft.Extensions.Logging.Abstractions.NullLogger.html",
    "title": "Class NullLogger | CodeFactory for Windows",
    "keywords": "Class NullLogger Minimalistic logger that does nothing. Inheritance object NullLogger Implements ILogger Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.Logging.Abstractions Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public class NullLogger : ILogger Properties Instance Returns the shared instance of NullLogger. Declaration public static NullLogger Instance { get; } Property Value Type Description NullLogger Methods BeginScope<TState>(TState) Begins a logical operation scope. Declaration public IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state The identifier for the scope. Returns Type Description IDisposable An IDisposable that ends the logical operation scope on dispose. Type Parameters Name Description TState The type of the state to begin scope for. IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Level to be checked. Returns Type Description bool true if enabled. Log<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry. Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. TState state The entry to be written. Can be also an object. Exception exception The exception related to this entry. Func<TState, Exception, string> formatter Function to create a string message of the state and exception. Type Parameters Name Description TState The type of the object to be written. Implements ILogger Extension Methods LoggerExtensions.BeginScope(ILogger, string, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, Exception?, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, Exception?, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, string?, params object?[]) LoggerExtensions.LogError(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogError(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogError(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogError(ILogger, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, string?, params object?[])"
  },
  "api/Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory.html": {
    "href": "api/Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory.html",
    "title": "Class NullLoggerFactory | CodeFactory for Windows",
    "keywords": "Class NullLoggerFactory An ILoggerFactory used to create instance of NullLogger that logs nothing. Inheritance object NullLoggerFactory Implements ILoggerFactory IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.Logging.Abstractions Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public class NullLoggerFactory : ILoggerFactory, IDisposable Constructors NullLoggerFactory() Creates a new NullLoggerFactory instance. Declaration public NullLoggerFactory() Fields Instance Returns the shared instance of NullLoggerFactory. Declaration public static readonly NullLoggerFactory Instance Field Value Type Description NullLoggerFactory Methods AddProvider(ILoggerProvider) Adds an ILoggerProvider to the logging system. Declaration public void AddProvider(ILoggerProvider provider) Parameters Type Name Description ILoggerProvider provider The ILoggerProvider. Remarks This method ignores the parameter and does nothing. CreateLogger(string) Creates a new ILogger instance. Declaration public ILogger CreateLogger(string name) Parameters Type Name Description string name Returns Type Description ILogger The ILogger. Remarks This returns a NullLogger instance which logs nothing. Dispose() Declaration public void Dispose() Implements ILoggerFactory IDisposable Extension Methods LoggerFactoryExtensions.CreateLogger(ILoggerFactory, Type) LoggerFactoryExtensions.CreateLogger<T>(ILoggerFactory)"
  },
  "api/Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider.html": {
    "href": "api/Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider.html",
    "title": "Class NullLoggerProvider | CodeFactory for Windows",
    "keywords": "Class NullLoggerProvider Provider for the NullLogger. Inheritance object NullLoggerProvider Implements ILoggerProvider IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.Logging.Abstractions Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public class NullLoggerProvider : ILoggerProvider, IDisposable Properties Instance Returns an instance of NullLoggerProvider. Declaration public static NullLoggerProvider Instance { get; } Property Value Type Description NullLoggerProvider Methods CreateLogger(string) Creates a new ILogger instance. Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description string categoryName The category name for messages produced by the logger. Returns Type Description ILogger The instance of ILogger that was created. Dispose() Declaration public void Dispose() Implements ILoggerProvider IDisposable"
  },
  "api/Microsoft.Extensions.Logging.Abstractions.html": {
    "href": "api/Microsoft.Extensions.Logging.Abstractions.html",
    "title": "Namespace Microsoft.Extensions.Logging.Abstractions | CodeFactory for Windows",
    "keywords": "Namespace Microsoft.Extensions.Logging.Abstractions Classes NullLogger Minimalistic logger that does nothing. NullLoggerFactory An ILoggerFactory used to create instance of NullLogger that logs nothing. NullLoggerProvider Provider for the NullLogger. NullLogger<T> Minimalistic logger that does nothing. Structs LogEntry<TState> Holds the information for a single log entry."
  },
  "api/Microsoft.Extensions.Logging.EventId.html": {
    "href": "api/Microsoft.Extensions.Logging.EventId.html",
    "title": "Struct EventId | CodeFactory for Windows",
    "keywords": "Struct EventId Identifies a logging event. The primary identifier is the \"Id\" property, with the \"Name\" property providing a short description of this type of event. Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public readonly struct EventId Constructors EventId(int, string?) Initializes an instance of the EventId struct. Declaration public EventId(int id, string? name = null) Parameters Type Name Description int id The numeric identifier for this event. string name The name of this event. Properties Id Gets the numeric identifier for this event. Declaration public int Id { get; } Property Value Type Description int Name Gets the name of this event. Declaration public string? Name { get; } Property Value Type Description string Methods Equals(EventId) Indicates whether the current object is equal to another object of the same type. Two events are equal if they have the same id. Declaration public bool Equals(EventId other) Parameters Type Name Description EventId other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators operator ==(EventId, EventId) Checks if two specified EventId instances have the same value. They are equal if they have the same Id. Declaration public static bool operator ==(EventId left, EventId right) Parameters Type Name Description EventId left The first EventId. EventId right The second EventId. Returns Type Description bool true if the objects are equal. implicit operator EventId(int) Implicitly creates an EventId from the given int. Declaration public static implicit operator EventId(int i) Parameters Type Name Description int i The int to convert to an EventId. Returns Type Description EventId operator !=(EventId, EventId) Checks if two specified EventId instances have different values. Declaration public static bool operator !=(EventId left, EventId right) Parameters Type Name Description EventId left The first EventId. EventId right The second EventId. Returns Type Description bool true if the objects are not equal."
  },
  "api/Microsoft.Extensions.Logging.IExternalScopeProvider.html": {
    "href": "api/Microsoft.Extensions.Logging.IExternalScopeProvider.html",
    "title": "Interface IExternalScopeProvider | CodeFactory for Windows",
    "keywords": "Interface IExternalScopeProvider Represents a storage of common scope data. Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public interface IExternalScopeProvider Methods ForEachScope<TState>(Action<object?, TState>, TState) Executes callback for each currently active scope objects in order of creation. All callbacks are guaranteed to be called inline from this method. Declaration void ForEachScope<TState>(Action<object?, TState> callback, TState state) Parameters Type Name Description Action<object, TState> callback The callback to be executed for every scope object TState state The state object to be passed into the callback Type Parameters Name Description TState The type of state to accept. Push(object?) Adds scope object to the list Declaration IDisposable Push(object? state) Parameters Type Name Description object state The scope object Returns Type Description IDisposable The IDisposable token that removes scope on dispose."
  },
  "api/Microsoft.Extensions.Logging.ILogger-1.html": {
    "href": "api/Microsoft.Extensions.Logging.ILogger-1.html",
    "title": "Interface ILogger<TCategoryName> | CodeFactory for Windows",
    "keywords": "Interface ILogger<TCategoryName> A generic interface for logging where the category name is derived from the specified TCategoryName type name. Generally used to enable activation of a named ILogger from dependency injection. Inherited Members ILogger.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) ILogger.IsEnabled(LogLevel) ILogger.BeginScope<TState>(TState) Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public interface ILogger<out TCategoryName> : ILogger Type Parameters Name Description TCategoryName The type whose name is used for the logger category name. Extension Methods LoggerExtensions.BeginScope(ILogger, string, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, Exception?, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, Exception?, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, string?, params object?[]) LoggerExtensions.LogError(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogError(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogError(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogError(ILogger, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, string?, params object?[])"
  },
  "api/Microsoft.Extensions.Logging.ILogger.html": {
    "href": "api/Microsoft.Extensions.Logging.ILogger.html",
    "title": "Interface ILogger | CodeFactory for Windows",
    "keywords": "Interface ILogger Represents a type used to perform logging. Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public interface ILogger Remarks Aggregates most logging patterns to a single method. Methods BeginScope<TState>(TState) Begins a logical operation scope. Declaration IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state The identifier for the scope. Returns Type Description IDisposable An IDisposable that ends the logical operation scope on dispose. Type Parameters Name Description TState The type of the state to begin scope for. IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Level to be checked. Returns Type Description bool true if enabled. Log<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry. Declaration void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. TState state The entry to be written. Can be also an object. Exception exception The exception related to this entry. Func<TState, Exception, string> formatter Function to create a string message of the state and exception. Type Parameters Name Description TState The type of the object to be written. Extension Methods LoggerExtensions.BeginScope(ILogger, string, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, Exception?, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, Exception?, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, string?, params object?[]) LoggerExtensions.LogError(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogError(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogError(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogError(ILogger, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, string?, params object?[])"
  },
  "api/Microsoft.Extensions.Logging.ILoggerFactory.html": {
    "href": "api/Microsoft.Extensions.Logging.ILoggerFactory.html",
    "title": "Interface ILoggerFactory | CodeFactory for Windows",
    "keywords": "Interface ILoggerFactory Represents a type used to configure the logging system and create instances of ILogger from the registered ILoggerProviders. Inherited Members IDisposable.Dispose() Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public interface ILoggerFactory : IDisposable Methods AddProvider(ILoggerProvider) Adds an ILoggerProvider to the logging system. Declaration void AddProvider(ILoggerProvider provider) Parameters Type Name Description ILoggerProvider provider The ILoggerProvider. CreateLogger(string) Creates a new ILogger instance. Declaration ILogger CreateLogger(string categoryName) Parameters Type Name Description string categoryName The category name for messages produced by the logger. Returns Type Description ILogger The ILogger. Extension Methods LoggerFactoryExtensions.CreateLogger(ILoggerFactory, Type) LoggerFactoryExtensions.CreateLogger<T>(ILoggerFactory)"
  },
  "api/Microsoft.Extensions.Logging.ILoggerProvider.html": {
    "href": "api/Microsoft.Extensions.Logging.ILoggerProvider.html",
    "title": "Interface ILoggerProvider | CodeFactory for Windows",
    "keywords": "Interface ILoggerProvider Represents a type that can create instances of ILogger. Inherited Members IDisposable.Dispose() Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public interface ILoggerProvider : IDisposable Methods CreateLogger(string) Creates a new ILogger instance. Declaration ILogger CreateLogger(string categoryName) Parameters Type Name Description string categoryName The category name for messages produced by the logger. Returns Type Description ILogger The instance of ILogger that was created."
  },
  "api/Microsoft.Extensions.Logging.ISupportExternalScope.html": {
    "href": "api/Microsoft.Extensions.Logging.ISupportExternalScope.html",
    "title": "Interface ISupportExternalScope | CodeFactory for Windows",
    "keywords": "Interface ISupportExternalScope Represents a ILoggerProvider that is able to consume external scope information. Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public interface ISupportExternalScope Methods SetScopeProvider(IExternalScopeProvider) Sets external scope information source for logger provider. Declaration void SetScopeProvider(IExternalScopeProvider scopeProvider) Parameters Type Name Description IExternalScopeProvider scopeProvider The provider of scope data."
  },
  "api/Microsoft.Extensions.Logging.LogDefineOptions.html": {
    "href": "api/Microsoft.Extensions.Logging.LogDefineOptions.html",
    "title": "Class LogDefineOptions | CodeFactory for Windows",
    "keywords": "Class LogDefineOptions Options for Define(LogLevel, EventId, string) and its overloads Inheritance object LogDefineOptions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public class LogDefineOptions Constructors LogDefineOptions() Declaration public LogDefineOptions() Properties SkipEnabledCheck Gets or sets the flag to skip IsEnabled check for the logging method. Declaration public bool SkipEnabledCheck { get; set; } Property Value Type Description bool"
  },
  "api/Microsoft.Extensions.Logging.LogLevel.html": {
    "href": "api/Microsoft.Extensions.Logging.LogLevel.html",
    "title": "Enum LogLevel | CodeFactory for Windows",
    "keywords": "Enum LogLevel Defines logging severity levels. Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public enum LogLevel Fields Name Description Critical Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires immediate attention. Debug Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value. Error Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure. Information Logs that track the general flow of the application. These logs should have long-term value. None Not used for writing log messages. Specifies that a logging category should not write any messages. Trace Logs that contain the most detailed messages. These messages may contain sensitive application data. These messages are disabled by default and should never be enabled in a production environment. Warning Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the application execution to stop."
  },
  "api/Microsoft.Extensions.Logging.Logger-1.html": {
    "href": "api/Microsoft.Extensions.Logging.Logger-1.html",
    "title": "Class Logger<T> | CodeFactory for Windows",
    "keywords": "Class Logger<T> Delegates to a new ILogger instance using the full name of the given type, created by the provided ILoggerFactory. Inheritance object Logger<T> Implements ILogger<T> ILogger Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public class Logger<T> : ILogger<T>, ILogger Type Parameters Name Description T The type. Constructors Logger(ILoggerFactory) Creates a new Logger<T>. Declaration public Logger(ILoggerFactory factory) Parameters Type Name Description ILoggerFactory factory The factory. Implements ILogger<TCategoryName> ILogger Extension Methods LoggerExtensions.BeginScope(ILogger, string, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, Exception?, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, Exception?, string?, params object?[]) LoggerExtensions.Log(ILogger, LogLevel, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogCritical(ILogger, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogDebug(ILogger, string?, params object?[]) LoggerExtensions.LogError(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogError(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogError(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogError(ILogger, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogInformation(ILogger, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogTrace(ILogger, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, EventId, Exception?, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, EventId, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, Exception?, string?, params object?[]) LoggerExtensions.LogWarning(ILogger, string?, params object?[])"
  },
  "api/Microsoft.Extensions.Logging.LoggerExtensions.html": {
    "href": "api/Microsoft.Extensions.Logging.LoggerExtensions.html",
    "title": "Class LoggerExtensions | CodeFactory for Windows",
    "keywords": "Class LoggerExtensions ILogger extension methods for common scenarios. Inheritance object LoggerExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public static class LoggerExtensions Methods BeginScope(ILogger, string, params object?[]) Formats the message and creates a scope. Declaration public static IDisposable BeginScope(this ILogger logger, string messageFormat, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to create the scope in. string messageFormat Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Returns Type Description IDisposable A disposable scope object. Can be null. Examples using(logger.BeginScope(\"Processing request from {Address}\", address)) { } Log(ILogger, LogLevel, EventId, Exception?, string?, params object?[]) Formats and writes a log message at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, EventId eventId, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message. object[] args An object array that contains zero or more objects to format. Log(ILogger, LogLevel, EventId, string?, params object?[]) Formats and writes a log message at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, EventId eventId, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. EventId eventId The event id associated with the log. string message Format string of the log message. object[] args An object array that contains zero or more objects to format. Log(ILogger, LogLevel, Exception?, string?, params object?[]) Formats and writes a log message at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. Exception exception The exception to log. string message Format string of the log message. object[] args An object array that contains zero or more objects to format. Log(ILogger, LogLevel, string?, params object?[]) Formats and writes a log message at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. string message Format string of the log message. object[] args An object array that contains zero or more objects to format. LogCritical(ILogger, EventId, Exception?, string?, params object?[]) Formats and writes a critical log message. Declaration public static void LogCritical(this ILogger logger, EventId eventId, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogCritical(0, exception, \"Error while processing request from {Address}\", address) LogCritical(ILogger, EventId, string?, params object?[]) Formats and writes a critical log message. Declaration public static void LogCritical(this ILogger logger, EventId eventId, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogCritical(0, \"Processing request from {Address}\", address) LogCritical(ILogger, Exception?, string?, params object?[]) Formats and writes a critical log message. Declaration public static void LogCritical(this ILogger logger, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogCritical(exception, \"Error while processing request from {Address}\", address) LogCritical(ILogger, string?, params object?[]) Formats and writes a critical log message. Declaration public static void LogCritical(this ILogger logger, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogCritical(\"Processing request from {Address}\", address) LogDebug(ILogger, EventId, Exception?, string?, params object?[]) Formats and writes a debug log message. Declaration public static void LogDebug(this ILogger logger, EventId eventId, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogDebug(0, exception, \"Error while processing request from {Address}\", address) LogDebug(ILogger, EventId, string?, params object?[]) Formats and writes a debug log message. Declaration public static void LogDebug(this ILogger logger, EventId eventId, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogDebug(0, \"Processing request from {Address}\", address) LogDebug(ILogger, Exception?, string?, params object?[]) Formats and writes a debug log message. Declaration public static void LogDebug(this ILogger logger, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogDebug(exception, \"Error while processing request from {Address}\", address) LogDebug(ILogger, string?, params object?[]) Formats and writes a debug log message. Declaration public static void LogDebug(this ILogger logger, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogDebug(\"Processing request from {Address}\", address) LogError(ILogger, EventId, Exception?, string?, params object?[]) Formats and writes an error log message. Declaration public static void LogError(this ILogger logger, EventId eventId, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogError(0, exception, \"Error while processing request from {Address}\", address) LogError(ILogger, EventId, string?, params object?[]) Formats and writes an error log message. Declaration public static void LogError(this ILogger logger, EventId eventId, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogError(0, \"Processing request from {Address}\", address) LogError(ILogger, Exception?, string?, params object?[]) Formats and writes an error log message. Declaration public static void LogError(this ILogger logger, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogError(exception, \"Error while processing request from {Address}\", address) LogError(ILogger, string?, params object?[]) Formats and writes an error log message. Declaration public static void LogError(this ILogger logger, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogError(\"Processing request from {Address}\", address) LogInformation(ILogger, EventId, Exception?, string?, params object?[]) Formats and writes an informational log message. Declaration public static void LogInformation(this ILogger logger, EventId eventId, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogInformation(0, exception, \"Error while processing request from {Address}\", address) LogInformation(ILogger, EventId, string?, params object?[]) Formats and writes an informational log message. Declaration public static void LogInformation(this ILogger logger, EventId eventId, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogInformation(0, \"Processing request from {Address}\", address) LogInformation(ILogger, Exception?, string?, params object?[]) Formats and writes an informational log message. Declaration public static void LogInformation(this ILogger logger, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogInformation(exception, \"Error while processing request from {Address}\", address) LogInformation(ILogger, string?, params object?[]) Formats and writes an informational log message. Declaration public static void LogInformation(this ILogger logger, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogInformation(\"Processing request from {Address}\", address) LogTrace(ILogger, EventId, Exception?, string?, params object?[]) Formats and writes a trace log message. Declaration public static void LogTrace(this ILogger logger, EventId eventId, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogTrace(0, exception, \"Error while processing request from {Address}\", address) LogTrace(ILogger, EventId, string?, params object?[]) Formats and writes a trace log message. Declaration public static void LogTrace(this ILogger logger, EventId eventId, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogTrace(0, \"Processing request from {Address}\", address) LogTrace(ILogger, Exception?, string?, params object?[]) Formats and writes a trace log message. Declaration public static void LogTrace(this ILogger logger, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogTrace(exception, \"Error while processing request from {Address}\", address) LogTrace(ILogger, string?, params object?[]) Formats and writes a trace log message. Declaration public static void LogTrace(this ILogger logger, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogTrace(\"Processing request from {Address}\", address) LogWarning(ILogger, EventId, Exception?, string?, params object?[]) Formats and writes a warning log message. Declaration public static void LogWarning(this ILogger logger, EventId eventId, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogWarning(0, exception, \"Error while processing request from {Address}\", address) LogWarning(ILogger, EventId, string?, params object?[]) Formats and writes a warning log message. Declaration public static void LogWarning(this ILogger logger, EventId eventId, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogWarning(0, \"Processing request from {Address}\", address) LogWarning(ILogger, Exception?, string?, params object?[]) Formats and writes a warning log message. Declaration public static void LogWarning(this ILogger logger, Exception? exception, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogWarning(exception, \"Error while processing request from {Address}\", address) LogWarning(ILogger, string?, params object?[]) Formats and writes a warning log message. Declaration public static void LogWarning(this ILogger logger, string? message, params object?[] args) Parameters Type Name Description ILogger logger The ILogger to write to. string message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" object[] args An object array that contains zero or more objects to format. Examples logger.LogWarning(\"Processing request from {Address}\", address)"
  },
  "api/Microsoft.Extensions.Logging.LoggerExternalScopeProvider.html": {
    "href": "api/Microsoft.Extensions.Logging.LoggerExternalScopeProvider.html",
    "title": "Class LoggerExternalScopeProvider | CodeFactory for Windows",
    "keywords": "Class LoggerExternalScopeProvider Default implementation of IExternalScopeProvider Inheritance object LoggerExternalScopeProvider Implements IExternalScopeProvider Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public class LoggerExternalScopeProvider : IExternalScopeProvider Constructors LoggerExternalScopeProvider() Creates a new LoggerExternalScopeProvider. Declaration public LoggerExternalScopeProvider() Methods ForEachScope<TState>(Action<object?, TState>, TState) Executes callback for each currently active scope objects in order of creation. All callbacks are guaranteed to be called inline from this method. Declaration public void ForEachScope<TState>(Action<object?, TState> callback, TState state) Parameters Type Name Description Action<object, TState> callback The callback to be executed for every scope object TState state The state object to be passed into the callback Type Parameters Name Description TState The type of state to accept. Push(object?) Adds scope object to the list Declaration public IDisposable Push(object? state) Parameters Type Name Description object state The scope object Returns Type Description IDisposable The IDisposable token that removes scope on dispose. Implements IExternalScopeProvider"
  },
  "api/Microsoft.Extensions.Logging.LoggerFactoryExtensions.html": {
    "href": "api/Microsoft.Extensions.Logging.LoggerFactoryExtensions.html",
    "title": "Class LoggerFactoryExtensions | CodeFactory for Windows",
    "keywords": "Class LoggerFactoryExtensions ILoggerFactory extension methods for common scenarios. Inheritance object LoggerFactoryExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public static class LoggerFactoryExtensions Methods CreateLogger(ILoggerFactory, Type) Creates a new ILogger instance using the full name of the given type. Declaration public static ILogger CreateLogger(this ILoggerFactory factory, Type type) Parameters Type Name Description ILoggerFactory factory The factory. Type type The type. Returns Type Description ILogger CreateLogger<T>(ILoggerFactory) Creates a new ILogger instance using the full name of the given type. Declaration public static ILogger<T> CreateLogger<T>(this ILoggerFactory factory) Parameters Type Name Description ILoggerFactory factory The factory. Returns Type Description ILogger<T> The ILogger that was created. Type Parameters Name Description T The type."
  },
  "api/Microsoft.Extensions.Logging.LoggerMessage.html": {
    "href": "api/Microsoft.Extensions.Logging.LoggerMessage.html",
    "title": "Class LoggerMessage | CodeFactory for Windows",
    "keywords": "Class LoggerMessage Creates delegates which can be later cached to log messages in a performant way. Inheritance object LoggerMessage Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax public static class LoggerMessage Methods Define(LogLevel, EventId, string) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, Exception?> Define(LogLevel logLevel, EventId eventId, string formatString) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string Returns Type Description Action<ILogger, Exception> A delegate which when invoked creates a log message. Define(LogLevel, EventId, string, LogDefineOptions?) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, Exception?> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions? options) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string LogDefineOptions options The LogDefineOptions Returns Type Description Action<ILogger, Exception> A delegate which when invoked creates a log message. DefineScope(string) Creates a delegate which can be invoked to create a log scope. Declaration public static Func<ILogger, IDisposable> DefineScope(string formatString) Parameters Type Name Description string formatString The named format string Returns Type Description Func<ILogger, IDisposable> A delegate which when invoked creates a log scope. DefineScope<T1>(string) Creates a delegate which can be invoked to create a log scope. Declaration public static Func<ILogger, T1, IDisposable> DefineScope<T1>(string formatString) Parameters Type Name Description string formatString The named format string Returns Type Description Func<ILogger, T1, IDisposable> A delegate which when invoked creates a log scope. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. DefineScope<T1, T2>(string) Creates a delegate which can be invoked to create a log scope. Declaration public static Func<ILogger, T1, T2, IDisposable> DefineScope<T1, T2>(string formatString) Parameters Type Name Description string formatString The named format string Returns Type Description Func<ILogger, T1, T2, IDisposable> A delegate which when invoked creates a log scope. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. DefineScope<T1, T2, T3>(string) Creates a delegate which can be invoked to create a log scope. Declaration public static Func<ILogger, T1, T2, T3, IDisposable> DefineScope<T1, T2, T3>(string formatString) Parameters Type Name Description string formatString The named format string Returns Type Description Func<ILogger, T1, T2, T3, IDisposable> A delegate which when invoked creates a log scope. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. DefineScope<T1, T2, T3, T4>(string) Creates a delegate which can be invoked to create a log scope. Declaration public static Func<ILogger, T1, T2, T3, T4, IDisposable> DefineScope<T1, T2, T3, T4>(string formatString) Parameters Type Name Description string formatString The named format string Returns Type Description Func<ILogger, T1, T2, T3, T4, IDisposable> A delegate which when invoked creates a log scope. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. T4 The type of the fourth parameter passed to the named format string. DefineScope<T1, T2, T3, T4, T5>(string) Creates a delegate which can be invoked to create a log scope. Declaration public static Func<ILogger, T1, T2, T3, T4, T5, IDisposable> DefineScope<T1, T2, T3, T4, T5>(string formatString) Parameters Type Name Description string formatString The named format string Returns Type Description Func<ILogger, T1, T2, T3, T4, T5, IDisposable> A delegate which when invoked creates a log scope. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. T4 The type of the fourth parameter passed to the named format string. T5 The type of the fifth parameter passed to the named format string. DefineScope<T1, T2, T3, T4, T5, T6>(string) Creates a delegate which can be invoked to create a log scope. Declaration public static Func<ILogger, T1, T2, T3, T4, T5, T6, IDisposable> DefineScope<T1, T2, T3, T4, T5, T6>(string formatString) Parameters Type Name Description string formatString The named format string Returns Type Description Func<ILogger, T1, T2, T3, T4, T5, T6, IDisposable> A delegate which when invoked creates a log scope. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. T4 The type of the fourth parameter passed to the named format string. T5 The type of the fifth parameter passed to the named format string. T6 The type of the sixth parameter passed to the named format string. Define<T1>(LogLevel, EventId, string) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, Exception?> Define<T1>(LogLevel logLevel, EventId eventId, string formatString) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string Returns Type Description Action<ILogger, T1, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. Define<T1>(LogLevel, EventId, string, LogDefineOptions?) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, Exception?> Define<T1>(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions? options) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string LogDefineOptions options The LogDefineOptions Returns Type Description Action<ILogger, T1, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. Define<T1, T2>(LogLevel, EventId, string) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, T2, Exception?> Define<T1, T2>(LogLevel logLevel, EventId eventId, string formatString) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string Returns Type Description Action<ILogger, T1, T2, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. Define<T1, T2>(LogLevel, EventId, string, LogDefineOptions?) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, T2, Exception?> Define<T1, T2>(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions? options) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string LogDefineOptions options The LogDefineOptions Returns Type Description Action<ILogger, T1, T2, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. Define<T1, T2, T3>(LogLevel, EventId, string) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, T2, T3, Exception?> Define<T1, T2, T3>(LogLevel logLevel, EventId eventId, string formatString) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string Returns Type Description Action<ILogger, T1, T2, T3, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. Define<T1, T2, T3>(LogLevel, EventId, string, LogDefineOptions?) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, T2, T3, Exception?> Define<T1, T2, T3>(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions? options) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string LogDefineOptions options The LogDefineOptions Returns Type Description Action<ILogger, T1, T2, T3, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. Define<T1, T2, T3, T4>(LogLevel, EventId, string) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, T2, T3, T4, Exception?> Define<T1, T2, T3, T4>(LogLevel logLevel, EventId eventId, string formatString) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string Returns Type Description Action<ILogger, T1, T2, T3, T4, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. T4 The type of the fourth parameter passed to the named format string. Define<T1, T2, T3, T4>(LogLevel, EventId, string, LogDefineOptions?) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, T2, T3, T4, Exception?> Define<T1, T2, T3, T4>(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions? options) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string LogDefineOptions options The LogDefineOptions Returns Type Description Action<ILogger, T1, T2, T3, T4, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. T4 The type of the fourth parameter passed to the named format string. Define<T1, T2, T3, T4, T5>(LogLevel, EventId, string) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, T2, T3, T4, T5, Exception?> Define<T1, T2, T3, T4, T5>(LogLevel logLevel, EventId eventId, string formatString) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string Returns Type Description Action<ILogger, T1, T2, T3, T4, T5, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. T4 The type of the fourth parameter passed to the named format string. T5 The type of the fifth parameter passed to the named format string. Define<T1, T2, T3, T4, T5>(LogLevel, EventId, string, LogDefineOptions?) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, T2, T3, T4, T5, Exception?> Define<T1, T2, T3, T4, T5>(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions? options) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string LogDefineOptions options The LogDefineOptions Returns Type Description Action<ILogger, T1, T2, T3, T4, T5, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. T4 The type of the fourth parameter passed to the named format string. T5 The type of the fifth parameter passed to the named format string. Define<T1, T2, T3, T4, T5, T6>(LogLevel, EventId, string) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, T2, T3, T4, T5, T6, Exception?> Define<T1, T2, T3, T4, T5, T6>(LogLevel logLevel, EventId eventId, string formatString) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string Returns Type Description Action<ILogger, T1, T2, T3, T4, T5, T6, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. T4 The type of the fourth parameter passed to the named format string. T5 The type of the fifth parameter passed to the named format string. T6 The type of the sixth parameter passed to the named format string. Define<T1, T2, T3, T4, T5, T6>(LogLevel, EventId, string, LogDefineOptions?) Creates a delegate which can be invoked for logging a message. Declaration public static Action<ILogger, T1, T2, T3, T4, T5, T6, Exception?> Define<T1, T2, T3, T4, T5, T6>(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions? options) Parameters Type Name Description LogLevel logLevel The LogLevel EventId eventId The event id string formatString The named format string LogDefineOptions options The LogDefineOptions Returns Type Description Action<ILogger, T1, T2, T3, T4, T5, T6, Exception> A delegate which when invoked creates a log message. Type Parameters Name Description T1 The type of the first parameter passed to the named format string. T2 The type of the second parameter passed to the named format string. T3 The type of the third parameter passed to the named format string. T4 The type of the fourth parameter passed to the named format string. T5 The type of the fifth parameter passed to the named format string. T6 The type of the sixth parameter passed to the named format string."
  },
  "api/Microsoft.Extensions.Logging.LoggerMessageAttribute.html": {
    "href": "api/Microsoft.Extensions.Logging.LoggerMessageAttribute.html",
    "title": "Class LoggerMessageAttribute | CodeFactory for Windows",
    "keywords": "Class LoggerMessageAttribute Provides information to guide the production of a strongly-typed logging method. Inheritance object Attribute LoggerMessageAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Microsoft.Extensions.Logging Assembly: Microsoft.Extensions.Logging.Abstractions.dll Syntax [AttributeUsage(AttributeTargets.Method)] public sealed class LoggerMessageAttribute : Attribute, _Attribute Remarks The method this attribute is applied to: - Must be a partial method. - Must return void. - Must not be generic. - Must have an ILogger as one of its parameters. - Must have a LogLevel as one of its parameters. - None of the parameters can be generic. Examples ```csharp static partial class Log { [LoggerMessage(EventId = 0, Message = \"Could not open socket for {hostName}\")] static partial void CouldNotOpenSocket(ILogger logger, LogLevel level, string hostName); } ``` Constructors LoggerMessageAttribute() Initializes a new instance of the LoggerMessageAttribute class which is used to guide the production of a strongly-typed logging method. Declaration public LoggerMessageAttribute() LoggerMessageAttribute(int, LogLevel, string) Initializes a new instance of the LoggerMessageAttribute class which is used to guide the production of a strongly-typed logging method. Declaration public LoggerMessageAttribute(int eventId, LogLevel level, string message) Parameters Type Name Description int eventId The log event Id. LogLevel level The log level. string message Format string of the log message. Properties EventId Gets the logging event id for the logging method. Declaration public int EventId { get; set; } Property Value Type Description int EventName Gets or sets the logging event name for the logging method. Declaration public string? EventName { get; set; } Property Value Type Description string Remarks This will equal the method name if not specified. Level Gets the logging level for the logging method. Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel Message Gets the message text for the logging method. Declaration public string Message { get; set; } Property Value Type Description string SkipEnabledCheck Gets the flag to skip IsEnabled check for the logging method. Declaration public bool SkipEnabledCheck { get; set; } Property Value Type Description bool Implements _Attribute"
  },
  "api/Microsoft.Extensions.Logging.html": {
    "href": "api/Microsoft.Extensions.Logging.html",
    "title": "Namespace Microsoft.Extensions.Logging | CodeFactory for Windows",
    "keywords": "Namespace Microsoft.Extensions.Logging Classes LogDefineOptions Options for Define(LogLevel, EventId, string) and its overloads LoggerExtensions ILogger extension methods for common scenarios. LoggerExternalScopeProvider Default implementation of IExternalScopeProvider LoggerFactoryExtensions ILoggerFactory extension methods for common scenarios. LoggerMessage Creates delegates which can be later cached to log messages in a performant way. LoggerMessageAttribute Provides information to guide the production of a strongly-typed logging method. Logger<T> Delegates to a new ILogger instance using the full name of the given type, created by the provided ILoggerFactory. Structs EventId Identifies a logging event. The primary identifier is the \"Id\" property, with the \"Name\" property providing a short description of this type of event. Interfaces IExternalScopeProvider Represents a storage of common scope data. ILogger Represents a type used to perform logging. ILoggerFactory Represents a type used to configure the logging system and create instances of ILogger from the registered ILoggerProviders. ILoggerProvider Represents a type that can create instances of ILogger. ILogger<TCategoryName> A generic interface for logging where the category name is derived from the specified TCategoryName type name. Generally used to enable activation of a named ILogger from dependency injection. ISupportExternalScope Represents a ILoggerProvider that is able to consume external scope information. Enums LogLevel Defines logging severity levels."
  },
  "api/Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.html": {
    "href": "api/Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.html",
    "title": "Struct SpanBasedStringBuilder.Enumerator | CodeFactory for Windows",
    "keywords": "Struct SpanBasedStringBuilder.Enumerator Enumerator for the top-level class. Enumerates characters of the string. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Microsoft.NET.StringTools Assembly: Microsoft.NET.StringTools.dll Syntax public struct SpanBasedStringBuilder.Enumerator Properties Current Returns the current character. Declaration public readonly char Current { get; } Property Value Type Description char Methods MoveNext() Moves to the next character. Declaration public bool MoveNext() Returns Type Description bool True if there is another character, false if the enumerator reached the end."
  },
  "api/Microsoft.NET.StringTools.SpanBasedStringBuilder.html": {
    "href": "api/Microsoft.NET.StringTools.SpanBasedStringBuilder.html",
    "title": "Class SpanBasedStringBuilder | CodeFactory for Windows",
    "keywords": "Class SpanBasedStringBuilder A StringBuilder replacement that keeps a list of ReadOnlyMemory<T> spans making up the intermediate string rather than a copy of its characters. This has positive impact on both memory (no need to allocate space for the intermediate string) and time (no need to copy characters to the intermediate string). Inheritance object SpanBasedStringBuilder Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.NET.StringTools Assembly: Microsoft.NET.StringTools.dll Syntax public class SpanBasedStringBuilder : IDisposable Remarks The ToString() method tries to intern the resulting string without even allocating it if it's already interned. Use GetSpanBasedStringBuilder() to take advantage of pooling to eliminate allocation overhead of this class. Constructors SpanBasedStringBuilder(int) Constructs a new empty SpanBasedStringBuilder with the given expected number of spans. Declaration public SpanBasedStringBuilder(int capacity = 4) Parameters Type Name Description int capacity SpanBasedStringBuilder(string) Constructs a new SpanBasedStringBuilder containing the given string. Declaration public SpanBasedStringBuilder(string str) Parameters Type Name Description string str The string to wrap, must be non-null. Properties Capacity Gets the capacity of the SpanBasedStringBuilder in terms of number of spans it can hold without allocating. Declaration public int Capacity { get; } Property Value Type Description int Length Gets the length of the string. Declaration public int Length { get; } Property Value Type Description int Methods Append(ReadOnlyMemory<char>) Appends a character span represented by ReadOnlyMemory<T>. Declaration public void Append(ReadOnlyMemory<char> span) Parameters Type Name Description ReadOnlyMemory<char> span The character span to append. Append(string) Appends a string. Declaration public void Append(string value) Parameters Type Name Description string value The string to append. Append(string, int, int) Appends a substring. Declaration public void Append(string value, int startIndex, int count) Parameters Type Name Description string value The string to append. int startIndex The start index of the substring within value to append. int count The length of the substring to append. Clear() Clears this instance making it represent an empty string. Declaration public void Clear() Dispose() Releases this instance. Declaration public void Dispose() GetEnumerator() Creates a new enumerator for enumerating characters in this string. Does not allocate. Declaration public SpanBasedStringBuilder.Enumerator GetEnumerator() Returns Type Description SpanBasedStringBuilder.Enumerator The enumerator. ToString() Converts this instance to a System.String while first searching for a match in the intern table. Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Remarks May allocate depending on whether the string has already been interned. Trim() Removes leading and trailing white-space characters from the string. Declaration public void Trim() TrimEnd() Removes trailing white-space characters from the string. Declaration public void TrimEnd() TrimStart() Removes leading white-space characters from the string. Declaration public void TrimStart() Implements IDisposable"
  },
  "api/Microsoft.NET.StringTools.Strings.html": {
    "href": "api/Microsoft.NET.StringTools.Strings.html",
    "title": "Class Strings | CodeFactory for Windows",
    "keywords": "Class Strings Inheritance object Strings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Microsoft.NET.StringTools Assembly: Microsoft.NET.StringTools.dll Syntax public static class Strings Methods CreateDiagnosticReport() Retrieves the diagnostic data describing the current state of the interner. Make sure to call EnableDiagnostics() beforehand. Declaration public static string CreateDiagnosticReport() Returns Type Description string EnableDiagnostics() Enables diagnostics in the interner. Call CreateDiagnosticReport() to retrieve the diagnostic data. Declaration public static void EnableDiagnostics() GetSpanBasedStringBuilder() Returns a new or recycled SpanBasedStringBuilder. Declaration public static SpanBasedStringBuilder GetSpanBasedStringBuilder() Returns Type Description SpanBasedStringBuilder The SpanBasedStringBuilder. Remarks Call Dispose() on the returned instance to recycle it. WeakIntern(ReadOnlySpan<char>) Interns the given readonly span of characters, keeping only a weak reference to the returned value. Declaration public static string WeakIntern(ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str The character span to intern. Returns Type Description string A string equal to str, could be the result of calling ToString() on str. Remarks The intern pool does not retain strong references to the strings it's holding so strings are automatically evicted after they become unrooted. This is in contrast to System.String.Intern which holds strings forever. WeakIntern(string) Interns the given string, keeping only a weak reference to the returned value. Declaration public static string WeakIntern(string str) Parameters Type Name Description string str The string to intern. Returns Type Description string A string equal to str, could be the same object as str. Remarks The intern pool does not retain strong references to the strings it's holding so strings are automatically evicted after they become unrooted. This is in contrast to System.String.Intern which holds strings forever."
  },
  "api/Microsoft.NET.StringTools.html": {
    "href": "api/Microsoft.NET.StringTools.html",
    "title": "Namespace Microsoft.NET.StringTools | CodeFactory for Windows",
    "keywords": "Namespace Microsoft.NET.StringTools Classes SpanBasedStringBuilder A StringBuilder replacement that keeps a list of ReadOnlyMemory<T> spans making up the intermediate string rather than a copy of its characters. This has positive impact on both memory (no need to allocate space for the intermediate string) and time (no need to copy characters to the intermediate string). Strings Structs SpanBasedStringBuilder.Enumerator Enumerator for the top-level class. Enumerates characters of the string."
  },
  "api/Serilog.Configuration.ILoggerSettings.html": {
    "href": "api/Serilog.Configuration.ILoggerSettings.html",
    "title": "Interface ILoggerSettings | CodeFactory for Windows",
    "keywords": "Interface ILoggerSettings Implemented on types that apply settings to a logger configuration. Namespace: Serilog.Configuration Assembly: Serilog.dll Syntax public interface ILoggerSettings Methods Configure(LoggerConfiguration) Apply the settings to the logger configuration. Declaration void Configure(LoggerConfiguration loggerConfiguration) Parameters Type Name Description LoggerConfiguration loggerConfiguration The logger configuration to apply settings to."
  },
  "api/Serilog.Configuration.LoggerAuditSinkConfiguration.html": {
    "href": "api/Serilog.Configuration.LoggerAuditSinkConfiguration.html",
    "title": "Class LoggerAuditSinkConfiguration | CodeFactory for Windows",
    "keywords": "Class LoggerAuditSinkConfiguration Controls audit sink configuration. Inheritance object LoggerAuditSinkConfiguration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Configuration Assembly: Serilog.dll Syntax public class LoggerAuditSinkConfiguration Methods Logger(ILogger, LogEventLevel) Audit log events to a sub-logger, where further processing may occur. Events through the sub-logger will be constrained by filters and enriched by enrichers that are active in the parent. A sub-logger cannot be used to log at a more verbose level, but a less verbose level is possible. Declaration public LoggerConfiguration Logger(ILogger logger, LogEventLevel restrictedToMinimumLevel = LogEventLevel.Verbose) Parameters Type Name Description ILogger logger The sub-logger. This will not be shut down automatically when the parent logger is disposed. LogEventLevel restrictedToMinimumLevel The minimum level for events passed through the sink. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Logger(Action<LoggerConfiguration>, LogEventLevel, LoggingLevelSwitch?) Audit log events to a sub-logger, where further processing may occur. Events through the sub-logger will be constrained by filters and enriched by enrichers that are active in the parent. A sub-logger cannot be used to log at a more verbose level, but a less verbose level is possible. Declaration public LoggerConfiguration Logger(Action<LoggerConfiguration> configureLogger, LogEventLevel restrictedToMinimumLevel = LogEventLevel.Verbose, LoggingLevelSwitch? levelSwitch = null) Parameters Type Name Description Action<LoggerConfiguration> configureLogger An action that configures the sub-logger. LogEventLevel restrictedToMinimumLevel The minimum level for events passed through the sink. Ignored when levelSwitch is specified. LoggingLevelSwitch levelSwitch A switch allowing the pass-through minimum level to be changed at runtime. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Sink(ILogEventSink, LogEventLevel, LoggingLevelSwitch?) Audit log events to the specified ILogEventSink. Declaration public LoggerConfiguration Sink(ILogEventSink logEventSink, LogEventLevel restrictedToMinimumLevel = LogEventLevel.Verbose, LoggingLevelSwitch? levelSwitch = null) Parameters Type Name Description ILogEventSink logEventSink The sink. LogEventLevel restrictedToMinimumLevel The minimum level for events passed through the sink. Ignored when levelSwitch is specified. LoggingLevelSwitch levelSwitch A switch allowing the pass-through minimum level to be changed at runtime. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Sink<TSink>(LogEventLevel, LoggingLevelSwitch?) Audit log events to the specified ILogEventSink. Declaration public LoggerConfiguration Sink<TSink>(LogEventLevel restrictedToMinimumLevel = LogEventLevel.Verbose, LoggingLevelSwitch? levelSwitch = null) where TSink : ILogEventSink, new() Parameters Type Name Description LogEventLevel restrictedToMinimumLevel The minimum level for events passed through the sink. Ignored when levelSwitch is specified. LoggingLevelSwitch levelSwitch A switch allowing the pass-through minimum level to be changed at runtime. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Type Parameters Name Description TSink The sink."
  },
  "api/Serilog.Configuration.LoggerDestructuringConfiguration.html": {
    "href": "api/Serilog.Configuration.LoggerDestructuringConfiguration.html",
    "title": "Class LoggerDestructuringConfiguration | CodeFactory for Windows",
    "keywords": "Class LoggerDestructuringConfiguration Controls template parameter destructuring configuration. Inheritance object LoggerDestructuringConfiguration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Configuration Assembly: Serilog.dll Syntax public class LoggerDestructuringConfiguration Methods AsScalar(Type) Treat objects of the specified type as scalar values, i.e., don't break them down into properties even when destructuring complex types. Declaration public LoggerConfiguration AsScalar(Type scalarType) Parameters Type Name Description Type scalarType Type to treat as scalar. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When scalarType is null AsScalar<TScalar>() Treat objects of the specified type as scalar values, i.e., don't break them down into properties even when destructuring complex types. Declaration public LoggerConfiguration AsScalar<TScalar>() Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Type Parameters Name Description TScalar Type to treat as scalar. ByTransformingWhere<TValue>(Func<Type, bool>, Func<TValue, object>) When destructuring objects, transform instances of the specified type with the provided function, if the predicate returns true. Be careful to avoid any intensive work in the predicate, as it can slow down the pipeline significantly. Declaration public LoggerConfiguration ByTransformingWhere<TValue>(Func<Type, bool> predicate, Func<TValue, object> transformation) Parameters Type Name Description Func<Type, bool> predicate A predicate used to determine if the transform applies to a specific type of value Func<TValue, object> transformation Function mapping instances of TValue to an alternative representation. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Type Parameters Name Description TValue Type of values to transform. Exceptions Type Condition ArgumentNullException When predicate is null ArgumentNullException When transformation is null ByTransforming<TValue>(Func<TValue, object>) When destructuring objects, transform instances of the specified type with the provided function. Declaration public LoggerConfiguration ByTransforming<TValue>(Func<TValue, object> transformation) Parameters Type Name Description Func<TValue, object> transformation Function mapping instances of TValue to an alternative representation. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Type Parameters Name Description TValue Type of values to transform. Exceptions Type Condition ArgumentNullException When transformation is null ToMaximumCollectionCount(int) When destructuring objects, collections be restricted to specified count thus avoiding bloating payload. Limit is applied to each collection separately, sum of length of collection can exceed limit. Applies limit to all IEnumerable including dictionaries. Declaration public LoggerConfiguration ToMaximumCollectionCount(int maximumCollectionCount) Parameters Type Name Description int maximumCollectionCount Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentOutOfRangeException When maximumCollectionCount is less than 1 ToMaximumDepth(int) When destructuring objects, depth will be limited to 10 property traversals deep to guard against ballooning space when recursive/cyclic structures are accidentally passed. To change this limit pass a new maximum depth. Declaration public LoggerConfiguration ToMaximumDepth(int maximumDestructuringDepth) Parameters Type Name Description int maximumDestructuringDepth The maximum depth to use. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentOutOfRangeException When maximumDestructuringDepth is negative ToMaximumStringLength(int) When destructuring objects, string values can be restricted to specified length thus avoiding bloating payload. Limit is applied to each value separately, sum of length of strings can exceed limit. Declaration public LoggerConfiguration ToMaximumStringLength(int maximumStringLength) Parameters Type Name Description int maximumStringLength The maximum string length. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentOutOfRangeException When maximumStringLength is less than 2 With(params IDestructuringPolicy[]) When destructuring objects, transform instances with the provided policies. Declaration public LoggerConfiguration With(params IDestructuringPolicy[] destructuringPolicies) Parameters Type Name Description IDestructuringPolicy[] destructuringPolicies Policies to apply when destructuring. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When destructuringPolicies is null ArgumentException When any element of destructuringPolicies is null With<TDestructuringPolicy>() When destructuring objects, transform instances with the provided policy. Declaration public LoggerConfiguration With<TDestructuringPolicy>() where TDestructuringPolicy : IDestructuringPolicy, new() Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Type Parameters Name Description TDestructuringPolicy Policy to apply when destructuring."
  },
  "api/Serilog.Configuration.LoggerEnrichmentConfiguration.html": {
    "href": "api/Serilog.Configuration.LoggerEnrichmentConfiguration.html",
    "title": "Class LoggerEnrichmentConfiguration | CodeFactory for Windows",
    "keywords": "Class LoggerEnrichmentConfiguration Controls enrichment configuration. Inheritance object LoggerEnrichmentConfiguration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Configuration Assembly: Serilog.dll Syntax public class LoggerEnrichmentConfiguration Methods AtLevel(LoggingLevelSwitch, Action<LoggerEnrichmentConfiguration>) Apply an enricher only to events with a LogEventLevel greater than or equal to the level specified by levelSwitch. Declaration public LoggerConfiguration AtLevel(LoggingLevelSwitch levelSwitch, Action<LoggerEnrichmentConfiguration> configureEnricher) Parameters Type Name Description LoggingLevelSwitch levelSwitch A LoggingLevelSwitch that specifies the level from which the enricher will be applied. Action<LoggerEnrichmentConfiguration> configureEnricher An action that configures the wrapped enricher. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Remarks This method permits additional information to be attached to e.g. warnings and errors, that might be too expensive to collect or store at lower levels. Exceptions Type Condition ArgumentNullException When configureEnricher is null AtLevel(LogEventLevel, Action<LoggerEnrichmentConfiguration>) Apply an enricher only to events with a LogEventLevel greater than or equal to enrichFromLevel. Declaration public LoggerConfiguration AtLevel(LogEventLevel enrichFromLevel, Action<LoggerEnrichmentConfiguration> configureEnricher) Parameters Type Name Description LogEventLevel enrichFromLevel The level from which the enricher will be applied. Action<LoggerEnrichmentConfiguration> configureEnricher An action that configures the wrapped enricher. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Remarks This method permits additional information to be attached to e.g. warnings and errors, that might be too expensive to collect or store at lower levels. Exceptions Type Condition ArgumentNullException When configureEnricher is null FromLogContext() Enrich log events with properties from LogContext. Declaration public LoggerConfiguration FromLogContext() Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When(Func<LogEvent, bool>, Action<LoggerEnrichmentConfiguration>) Apply an enricher only when condition evaluates to true. Declaration public LoggerConfiguration When(Func<LogEvent, bool> condition, Action<LoggerEnrichmentConfiguration> configureEnricher) Parameters Type Name Description Func<LogEvent, bool> condition A predicate that evaluates to true when the supplied LogEvent should be enriched. Action<LoggerEnrichmentConfiguration> configureEnricher An action that configures the wrapped enricher. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When condition is null ArgumentNullException When configureEnricher is null With(params ILogEventEnricher[]) Specifies one or more enrichers that may add properties dynamically to log events. Declaration public LoggerConfiguration With(params ILogEventEnricher[] enrichers) Parameters Type Name Description ILogEventEnricher[] enrichers Enrichers to apply to all events passing through the logger. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When enrichers is null ArgumentException When any element of enrichers is null WithProperty(string, object, bool) Include the specified property value in all events logged to the logger. Declaration public LoggerConfiguration WithProperty(string name, object value, bool destructureObjects = false) Parameters Type Name Description string name The name of the property to add. object value The property value to add. bool destructureObjects If true, objects of unknown type will be logged as structures; otherwise they will be converted using ToString(). Returns Type Description LoggerConfiguration Configuration object allowing method chaining. With<TEnricher>() Specifies an enricher that may add properties dynamically to log events. Declaration public LoggerConfiguration With<TEnricher>() where TEnricher : ILogEventEnricher, new() Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Type Parameters Name Description TEnricher Enricher type to apply to all events passing through the logger. Wrap(LoggerEnrichmentConfiguration, Func<ILogEventEnricher, ILogEventEnricher>, Action<LoggerEnrichmentConfiguration>) Helper method for wrapping sinks. Declaration public static LoggerConfiguration Wrap(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration, Func<ILogEventEnricher, ILogEventEnricher> wrapEnricher, Action<LoggerEnrichmentConfiguration> configureWrappedEnricher) Parameters Type Name Description LoggerEnrichmentConfiguration loggerEnrichmentConfiguration The parent enrichment configuration. Func<ILogEventEnricher, ILogEventEnricher> wrapEnricher A function that allows for wrapping ILogEventEnrichers added in configureWrappedEnricher. Action<LoggerEnrichmentConfiguration> configureWrappedEnricher An action that configures enrichers to be wrapped in wrapEnricher. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When loggerEnrichmentConfiguration is null ArgumentNullException When wrapEnricher is null ArgumentNullException When configureWrappedEnricher is null"
  },
  "api/Serilog.Configuration.LoggerFilterConfiguration.html": {
    "href": "api/Serilog.Configuration.LoggerFilterConfiguration.html",
    "title": "Class LoggerFilterConfiguration | CodeFactory for Windows",
    "keywords": "Class LoggerFilterConfiguration Controls filter configuration. Inheritance object LoggerFilterConfiguration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Configuration Assembly: Serilog.dll Syntax public class LoggerFilterConfiguration Methods ByExcluding(Func<LogEvent, bool>) Filter out log events that match a predicate. Declaration public LoggerConfiguration ByExcluding(Func<LogEvent, bool> exclusionPredicate) Parameters Type Name Description Func<LogEvent, bool> exclusionPredicate Function that returns true when an event should be excluded (silenced). Returns Type Description LoggerConfiguration Configuration object allowing method chaining. ByIncludingOnly(Func<LogEvent, bool>) Filter log events to include only those that match a predicate. Declaration public LoggerConfiguration ByIncludingOnly(Func<LogEvent, bool> inclusionPredicate) Parameters Type Name Description Func<LogEvent, bool> inclusionPredicate Function that returns true when an event should be included (emitted). Returns Type Description LoggerConfiguration Configuration object allowing method chaining. With(params ILogEventFilter[]) Filter out log events from the stream based on the provided filter. Declaration public LoggerConfiguration With(params ILogEventFilter[] filters) Parameters Type Name Description ILogEventFilter[] filters The filters to apply. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When filters is null ArgumentException When any element of filters is null With<TFilter>() Filter out log events from the stream based on the provided filter. Declaration public LoggerConfiguration With<TFilter>() where TFilter : ILogEventFilter, new() Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Type Parameters Name Description TFilter The filters to apply."
  },
  "api/Serilog.Configuration.LoggerMinimumLevelConfiguration.html": {
    "href": "api/Serilog.Configuration.LoggerMinimumLevelConfiguration.html",
    "title": "Class LoggerMinimumLevelConfiguration | CodeFactory for Windows",
    "keywords": "Class LoggerMinimumLevelConfiguration Controls sink configuration. Inheritance object LoggerMinimumLevelConfiguration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Configuration Assembly: Serilog.dll Syntax public class LoggerMinimumLevelConfiguration Methods ControlledBy(LoggingLevelSwitch) Sets the minimum level to be dynamically controlled by the provided switch. Declaration public LoggerConfiguration ControlledBy(LoggingLevelSwitch levelSwitch) Parameters Type Name Description LoggingLevelSwitch levelSwitch The switch. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When levelSwitch is null Debug() Internal system events that aren't necessarily observable from the outside. Declaration public LoggerConfiguration Debug() Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Error() Functionality is unavailable, invariants are broken or data is lost. Declaration public LoggerConfiguration Error() Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Fatal() If you have a pager, it goes off when one of these occurs. Declaration public LoggerConfiguration Fatal() Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Information() The lifeblood of operational intelligence - things happen. Declaration public LoggerConfiguration Information() Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Is(LogEventLevel) Sets the minimum level at which events will be passed to sinks. Declaration public LoggerConfiguration Is(LogEventLevel minimumLevel) Parameters Type Name Description LogEventLevel minimumLevel The minimum level to set. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Override(string, LoggingLevelSwitch) Override the minimum level for events from a specific namespace or type name. This API is not supported for configuring sub-loggers (created through Logger(ILogger, LogEventLevel)). Use Filter or Conditional(Func<LogEvent, bool>, Action<LoggerSinkConfiguration>) instead. You also might consider using https://github.com/serilog/serilog-filters-expressions. Declaration public LoggerConfiguration Override(string source, LoggingLevelSwitch levelSwitch) Parameters Type Name Description string source The (partial) namespace or type name to set the override for. LoggingLevelSwitch levelSwitch The switch controlling loggers for matching sources. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When source is null ArgumentException When a trimmed source is empty ArgumentNullException When levelSwitch is null Override(string, LogEventLevel) Override the minimum level for events from a specific namespace or type name. This API is not supported for configuring sub-loggers (created through Logger(ILogger, LogEventLevel)). Use Filter or Conditional(Func<LogEvent, bool>, Action<LoggerSinkConfiguration>) instead. You also might consider using https://github.com/serilog/serilog-filters-expressions. Declaration public LoggerConfiguration Override(string source, LogEventLevel minimumLevel) Parameters Type Name Description string source The (partial) namespace or type name to set the override for. LogEventLevel minimumLevel The minimum level applied to loggers for matching sources. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When source is null Verbose() Anything and everything you might want to know about a running block of code. Declaration public LoggerConfiguration Verbose() Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Warning() Service is degraded or endangered. Declaration public LoggerConfiguration Warning() Returns Type Description LoggerConfiguration Configuration object allowing method chaining."
  },
  "api/Serilog.Configuration.LoggerSettingsConfiguration.html": {
    "href": "api/Serilog.Configuration.LoggerSettingsConfiguration.html",
    "title": "Class LoggerSettingsConfiguration | CodeFactory for Windows",
    "keywords": "Class LoggerSettingsConfiguration Allows additional setting sources to drive the logger configuration. Inheritance object LoggerSettingsConfiguration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Configuration Assembly: Serilog.dll Syntax public class LoggerSettingsConfiguration Methods KeyValuePairs(IEnumerable<KeyValuePair<string, string>>) Apply settings specified in the Serilog key-value setting format to the logger configuration. Declaration public LoggerConfiguration KeyValuePairs(IEnumerable<KeyValuePair<string, string>> settings) Parameters Type Name Description IEnumerable<KeyValuePair<string, string>> settings A list of key-value pairs describing logger settings. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Remarks In case of duplicate keys, the last value for the key is kept and the previous ones are ignored. Exceptions Type Condition ArgumentNullException When settings is null Settings(ILoggerSettings) Apply external settings to the logger configuration. Declaration public LoggerConfiguration Settings(ILoggerSettings settings) Parameters Type Name Description ILoggerSettings settings Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When settings is null"
  },
  "api/Serilog.Configuration.LoggerSinkConfiguration.html": {
    "href": "api/Serilog.Configuration.LoggerSinkConfiguration.html",
    "title": "Class LoggerSinkConfiguration | CodeFactory for Windows",
    "keywords": "Class LoggerSinkConfiguration Controls sink configuration. Inheritance object LoggerSinkConfiguration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Configuration Assembly: Serilog.dll Syntax public class LoggerSinkConfiguration Methods Conditional(Func<LogEvent, bool>, Action<LoggerSinkConfiguration>) Write to a sink only when condition evaluates to true. Declaration public LoggerConfiguration Conditional(Func<LogEvent, bool> condition, Action<LoggerSinkConfiguration> configureSink) Parameters Type Name Description Func<LogEvent, bool> condition A predicate that evaluates to true when the supplied LogEvent should be written to the configured sink. Action<LoggerSinkConfiguration> configureSink An action that configures the wrapped sink. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When condition is null ArgumentNullException When configureSink is null Logger(ILogger, LogEventLevel) Write log events to a sub-logger, where further processing may occur. Events through the sub-logger will be constrained by filters and enriched by enrichers that are active in the parent. A sub-logger cannot be used to log at a more verbose level, but a less verbose level is possible. Declaration public LoggerConfiguration Logger(ILogger logger, LogEventLevel restrictedToMinimumLevel = LogEventLevel.Verbose) Parameters Type Name Description ILogger logger The sub-logger. This will not be shut down automatically when the parent logger is disposed. LogEventLevel restrictedToMinimumLevel The minimum level for events passed through the sink. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When logger is null Logger(Action<LoggerConfiguration>, LogEventLevel, LoggingLevelSwitch?) Write log events to a sub-logger, where further processing may occur. Events through the sub-logger will be constrained by filters and enriched by enrichers that are active in the parent. A sub-logger cannot be used to log at a more verbose level, but a less verbose level is possible. Declaration public LoggerConfiguration Logger(Action<LoggerConfiguration> configureLogger, LogEventLevel restrictedToMinimumLevel = LogEventLevel.Verbose, LoggingLevelSwitch? levelSwitch = null) Parameters Type Name Description Action<LoggerConfiguration> configureLogger An action that configures the sub-logger. LogEventLevel restrictedToMinimumLevel The minimum level for events passed through the sink. Ignored when levelSwitch is specified. LoggingLevelSwitch levelSwitch A switch allowing the pass-through minimum level to be changed at runtime. Can be null Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When configureLogger is null Sink(ILogEventSink, LogEventLevel, LoggingLevelSwitch?) Write log events to the specified ILogEventSink. Declaration public LoggerConfiguration Sink(ILogEventSink logEventSink, LogEventLevel restrictedToMinimumLevel = LogEventLevel.Verbose, LoggingLevelSwitch? levelSwitch = null) Parameters Type Name Description ILogEventSink logEventSink The sink. LogEventLevel restrictedToMinimumLevel The minimum level for events passed through the sink. Ignored when levelSwitch is specified. LoggingLevelSwitch levelSwitch A switch allowing the pass-through minimum level to be changed at runtime. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Sink<TSink>(LogEventLevel, LoggingLevelSwitch?) Write log events to the specified ILogEventSink. Declaration public LoggerConfiguration Sink<TSink>(LogEventLevel restrictedToMinimumLevel = LogEventLevel.Verbose, LoggingLevelSwitch? levelSwitch = null) where TSink : ILogEventSink, new() Parameters Type Name Description LogEventLevel restrictedToMinimumLevel The minimum level for events passed through the sink. Ignored when levelSwitch is specified. LoggingLevelSwitch levelSwitch A switch allowing the pass-through minimum level to be changed at runtime. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Type Parameters Name Description TSink The sink. Wrap(LoggerSinkConfiguration, Func<ILogEventSink, ILogEventSink>, Action<LoggerSinkConfiguration>) Helper method for wrapping sinks. Declaration [Obsolete(\"Please use `LoggerConfiguration.Wrap(loggerSinkConfiguration, wrapSink, configureWrappedSink, restrictedToMinimumLevel, levelSwitch)` instead.\")] public static LoggerConfiguration Wrap(LoggerSinkConfiguration loggerSinkConfiguration, Func<ILogEventSink, ILogEventSink> wrapSink, Action<LoggerSinkConfiguration> configureWrappedSink) Parameters Type Name Description LoggerSinkConfiguration loggerSinkConfiguration The parent sink configuration. Func<ILogEventSink, ILogEventSink> wrapSink A function that allows for wrapping ILogEventSinks added in configureWrappedSink. Action<LoggerSinkConfiguration> configureWrappedSink An action that configures sinks to be wrapped in wrapSink. Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Wrap(LoggerSinkConfiguration, Func<ILogEventSink, ILogEventSink>, Action<LoggerSinkConfiguration>, LogEventLevel, LoggingLevelSwitch?) Helper method for wrapping sinks. Declaration public static LoggerConfiguration Wrap(LoggerSinkConfiguration loggerSinkConfiguration, Func<ILogEventSink, ILogEventSink> wrapSink, Action<LoggerSinkConfiguration> configureWrappedSink, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch? levelSwitch) Parameters Type Name Description LoggerSinkConfiguration loggerSinkConfiguration The parent sink configuration. Func<ILogEventSink, ILogEventSink> wrapSink A function that allows for wrapping ILogEventSinks added in configureWrappedSink. Action<LoggerSinkConfiguration> configureWrappedSink An action that configures sinks to be wrapped in wrapSink. LogEventLevel restrictedToMinimumLevel The minimum level for events passed through the sink. Ignored when levelSwitch is specified. LoggingLevelSwitch levelSwitch A switch allowing the pass-through minimum level to be changed at runtime. Can be null Returns Type Description LoggerConfiguration Configuration object allowing method chaining. Exceptions Type Condition ArgumentNullException When loggerSinkConfiguration is null ArgumentNullException When wrapSink is null ArgumentNullException When configureWrappedSink is null"
  },
  "api/Serilog.Configuration.html": {
    "href": "api/Serilog.Configuration.html",
    "title": "Namespace Serilog.Configuration | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Configuration Classes LoggerAuditSinkConfiguration Controls audit sink configuration. LoggerDestructuringConfiguration Controls template parameter destructuring configuration. LoggerEnrichmentConfiguration Controls enrichment configuration. LoggerFilterConfiguration Controls filter configuration. LoggerMinimumLevelConfiguration Controls sink configuration. LoggerSettingsConfiguration Allows additional setting sources to drive the logger configuration. LoggerSinkConfiguration Controls sink configuration. Interfaces ILoggerSettings Implemented on types that apply settings to a logger configuration."
  },
  "api/Serilog.Context.LogContext.html": {
    "href": "api/Serilog.Context.LogContext.html",
    "title": "Class LogContext | CodeFactory for Windows",
    "keywords": "Class LogContext Holds ambient properties that can be attached to log events. To configure, use the FromLogContext() method. Inheritance object LogContext Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Context Assembly: Serilog.dll Syntax public static class LogContext Remarks The scope of the context is the current logical thread, using AsyncLocal (and so is preserved across async/await calls). Examples Configuration: var log = new LoggerConfiguration() .Enrich.FromLogContext() ... Usage: using (LogContext.PushProperty(\"MessageId\", message.Id)) { Log.Information(\"The MessageId property will be attached to this event\"); } Methods Clone() Obtain an enricher that represents the current contents of the LogContext. This can be pushed back onto the context in a different location/thread when required. Declaration public static ILogEventEnricher Clone() Returns Type Description ILogEventEnricher An enricher that represents the current contents of the LogContext. Push(ILogEventEnricher) Push an enricher onto the context, returning an IDisposable that must later be used to remove the property, along with any others that may have been pushed on top of it and not yet popped. The property must be popped from the same thread/logical call context. Declaration public static IDisposable Push(ILogEventEnricher enricher) Parameters Type Name Description ILogEventEnricher enricher An enricher to push onto the log context Returns Type Description IDisposable A token that must be disposed, in order, to pop properties back off the stack. Exceptions Type Condition ArgumentNullException When enricher is null Push(params ILogEventEnricher[]) Push multiple enrichers onto the context, returning an IDisposable that must later be used to remove the property, along with any others that may have been pushed on top of it and not yet popped. The property must be popped from the same thread/logical call context. Declaration public static IDisposable Push(params ILogEventEnricher[] enrichers) Parameters Type Name Description ILogEventEnricher[] enrichers Enrichers to push onto the log context Returns Type Description IDisposable A token that must be disposed, in order, to pop properties back off the stack. Exceptions Type Condition ArgumentNullException When enrichers is null See Also PropertyEnricher PushProperty(string, object?, bool) Push a property onto the context, returning an IDisposable that must later be used to remove the property, along with any others that may have been pushed on top of it and not yet popped. The property must be popped from the same thread/logical call context. Declaration public static IDisposable PushProperty(string name, object? value, bool destructureObjects = false) Parameters Type Name Description string name The name of the property. object value The value of the property. bool destructureObjects If true, and the value is a non-primitive, non-array type, then the value will be converted to a structure; otherwise, unknown types will be converted to scalars, which are generally stored as strings. Returns Type Description IDisposable A handle to later remove the property from the context. Reset() Remove all enrichers from LogContext for the current async scope. Declaration public static void Reset() Suspend() Remove all enrichers from the LogContext, returning an IDisposable that must later be used to restore enrichers that were on the stack before Suspend() was called. Declaration public static IDisposable Suspend() Returns Type Description IDisposable A token that must be disposed, in order, to restore properties back to the stack."
  },
  "api/Serilog.Context.html": {
    "href": "api/Serilog.Context.html",
    "title": "Namespace Serilog.Context | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Context Classes LogContext Holds ambient properties that can be attached to log events. To configure, use the FromLogContext() method."
  },
  "api/Serilog.Core.Constants.html": {
    "href": "api/Serilog.Core.Constants.html",
    "title": "Class Constants | CodeFactory for Windows",
    "keywords": "Class Constants Constants used in the core logging pipeline and associated types. Inheritance object Constants Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Core Assembly: Serilog.dll Syntax public static class Constants Fields SourceContextPropertyName The name of the property included in the emitted log events when ForContext<T>() and overloads are applied. Declaration public const string SourceContextPropertyName = \"SourceContext\" Field Value Type Description string"
  },
  "api/Serilog.Core.Enrichers.PropertyEnricher.html": {
    "href": "api/Serilog.Core.Enrichers.PropertyEnricher.html",
    "title": "Class PropertyEnricher | CodeFactory for Windows",
    "keywords": "Class PropertyEnricher Adds a new property enricher to the log event. Inheritance object PropertyEnricher Implements ILogEventEnricher Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Core.Enrichers Assembly: Serilog.dll Syntax public class PropertyEnricher : ILogEventEnricher Constructors PropertyEnricher(string, object?, bool) Create a new property enricher. Declaration public PropertyEnricher(string name, object? value, bool destructureObjects = false) Parameters Type Name Description string name The name of the property. object value The value of the property. bool destructureObjects If true, and the value is a non-primitive, non-array type, then the value will be converted to a structure; otherwise, unknown types will be converted to scalars, which are generally stored as strings. Exceptions Type Condition ArgumentNullException When name is null ArgumentException When name is empty or only contains whitespace Methods Enrich(LogEvent, ILogEventPropertyFactory) Enrich the log event. Declaration public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory) Parameters Type Name Description LogEvent logEvent The log event to enrich. ILogEventPropertyFactory propertyFactory Factory for creating new properties to add to the event. Exceptions Type Condition ArgumentNullException When logEvent is null ArgumentNullException When propertyFactory is null Implements ILogEventEnricher"
  },
  "api/Serilog.Core.Enrichers.html": {
    "href": "api/Serilog.Core.Enrichers.html",
    "title": "Namespace Serilog.Core.Enrichers | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Core.Enrichers Classes PropertyEnricher Adds a new property enricher to the log event."
  },
  "api/Serilog.Core.IDestructuringPolicy.html": {
    "href": "api/Serilog.Core.IDestructuringPolicy.html",
    "title": "Interface IDestructuringPolicy | CodeFactory for Windows",
    "keywords": "Interface IDestructuringPolicy Determine how, when destructuring, a supplied value is represented as a complex log event property. Namespace: Serilog.Core Assembly: Serilog.dll Syntax public interface IDestructuringPolicy Methods TryDestructure(object, ILogEventPropertyValueFactory, out LogEventPropertyValue?) If supported, destructure the provided value. Declaration bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, out LogEventPropertyValue? result) Parameters Type Name Description object value The value to destructure. ILogEventPropertyValueFactory propertyValueFactory Recursively apply policies to destructure additional values. LogEventPropertyValue result The destructured value, or null. Returns Type Description bool True if the value could be destructured under this policy."
  },
  "api/Serilog.Core.ILogEventEnricher.html": {
    "href": "api/Serilog.Core.ILogEventEnricher.html",
    "title": "Interface ILogEventEnricher | CodeFactory for Windows",
    "keywords": "Interface ILogEventEnricher Applied during logging to add additional information to log events. Namespace: Serilog.Core Assembly: Serilog.dll Syntax public interface ILogEventEnricher Methods Enrich(LogEvent, ILogEventPropertyFactory) Enrich the log event. Declaration void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory) Parameters Type Name Description LogEvent logEvent The log event to enrich. ILogEventPropertyFactory propertyFactory Factory for creating new properties to add to the event."
  },
  "api/Serilog.Core.ILogEventFilter.html": {
    "href": "api/Serilog.Core.ILogEventFilter.html",
    "title": "Interface ILogEventFilter | CodeFactory for Windows",
    "keywords": "Interface ILogEventFilter Provides filtering of the log event stream. Namespace: Serilog.Core Assembly: Serilog.dll Syntax public interface ILogEventFilter Methods IsEnabled(LogEvent) Returns true if the provided event is enabled. Otherwise, false. Declaration bool IsEnabled(LogEvent logEvent) Parameters Type Name Description LogEvent logEvent The event to test. Returns Type Description bool True if the event is enabled by this filter. If false is returned, the event will not be emitted."
  },
  "api/Serilog.Core.ILogEventPropertyFactory.html": {
    "href": "api/Serilog.Core.ILogEventPropertyFactory.html",
    "title": "Interface ILogEventPropertyFactory | CodeFactory for Windows",
    "keywords": "Interface ILogEventPropertyFactory Creates log event properties from regular .NET objects, applying policies as required. Namespace: Serilog.Core Assembly: Serilog.dll Syntax public interface ILogEventPropertyFactory Methods CreateProperty(string, object?, bool) Construct a LogEventProperty with the specified name and value. Declaration LogEventProperty CreateProperty(string name, object? value, bool destructureObjects = false) Parameters Type Name Description string name The name of the property. object value The value of the property. bool destructureObjects If true, and the value is a non-primitive, non-array type, then the value will be converted to a structure; otherwise, unknown types will be converted to scalars, which are generally stored as strings. Returns Type Description LogEventProperty Created LogEventProperty instance."
  },
  "api/Serilog.Core.ILogEventPropertyValueFactory.html": {
    "href": "api/Serilog.Core.ILogEventPropertyValueFactory.html",
    "title": "Interface ILogEventPropertyValueFactory | CodeFactory for Windows",
    "keywords": "Interface ILogEventPropertyValueFactory Supports the policy-driven construction of LogEventPropertyValues given regular .NET objects. Namespace: Serilog.Core Assembly: Serilog.dll Syntax public interface ILogEventPropertyValueFactory Methods CreatePropertyValue(object, bool) Create a LogEventPropertyValue given a .NET object and destructuring strategy. Declaration LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects = false) Parameters Type Name Description object value The value of the property. bool destructureObjects If true, and the value is a non-primitive, non-array type, then the value will be converted to a structure; otherwise, unknown types will be converted to scalars, which are generally stored as strings. Returns Type Description LogEventPropertyValue The value."
  },
  "api/Serilog.Core.ILogEventSink.html": {
    "href": "api/Serilog.Core.ILogEventSink.html",
    "title": "Interface ILogEventSink | CodeFactory for Windows",
    "keywords": "Interface ILogEventSink A destination for log events. Namespace: Serilog.Core Assembly: Serilog.dll Syntax public interface ILogEventSink Methods Emit(LogEvent) Emit the provided log event to the sink. Declaration void Emit(LogEvent logEvent) Parameters Type Name Description LogEvent logEvent The log event to write."
  },
  "api/Serilog.Core.Logger.html": {
    "href": "api/Serilog.Core.Logger.html",
    "title": "Class Logger | CodeFactory for Windows",
    "keywords": "Class Logger The core Serilog logging pipeline. A Logger must be disposed to flush any events buffered within it. Most application code should depend on ILogger, not this class. Inheritance object Logger Implements ILogger ILogEventSink IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: Serilog.Core Assembly: Serilog.dll Syntax public sealed class Logger : ILogger, ILogEventSink, IDisposable Properties None An ILogger instance that efficiently ignores all method calls. Declaration public static ILogger None { get; } Property Value Type Description ILogger Methods BindMessageTemplate(string, object?[]?, out MessageTemplate?, out IEnumerable<LogEventProperty>?) Uses configured scalar conversion and destructuring rules to bind a set of properties to a message template. Returns false if the template or values are invalid (ILogger methods never throw exceptions). Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public bool BindMessageTemplate(string messageTemplate, object?[]? propertyValues, out MessageTemplate? parsedTemplate, out IEnumerable<LogEventProperty>? boundProperties) Parameters Type Name Description string messageTemplate Message template describing an event. object[] propertyValues Objects positionally formatted into the message template. MessageTemplate parsedTemplate The internal representation of the template, which may be used to render the boundProperties as text. IEnumerable<LogEventProperty> boundProperties Captured properties from the template and propertyValues. Returns Type Description bool Examples MessageTemplate template; IEnumerable<LogEventProperty> properties>; if (Log.BindMessageTemplate(\"Hello, {Name}!\", new[] { \"World\" }, out template, out properties) { var propsByName = properties.ToDictionary(p => p.Name, p => p.Value); Console.WriteLine(template.Render(propsByName, null)); // -> \"Hello, World!\" } BindProperty(string?, object?, bool, out LogEventProperty?) Uses configured scalar conversion and destructuring rules to bind a property value to its captured representation. Declaration public bool BindProperty(string? propertyName, object? value, bool destructureObjects, out LogEventProperty? property) Parameters Type Name Description string propertyName The name of the property. Must be non-empty. object value The property value. bool destructureObjects If true, the value will be serialized as a structured object if possible; if false, the object will be recorded as a scalar or simple array. LogEventProperty property The resulting property. Returns Type Description bool True if the property could be bound, otherwise false ( ILogger methods never throw exceptions). Debug(Exception?, string) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Debug(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug(Exception?, string, params object?[]?) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Debug(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug(string) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Debug(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug(string, params object?[]?) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Debug(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug<T>(Exception?, string, T) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Debug<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug<T>(string, T) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Debug<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug<T0, T1>(Exception?, string, T0, T1) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Debug<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug<T0, T1>(string, T0, T1) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Debug<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Debug<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Debug<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Dispose() Close and flush the logging pipeline. Declaration public void Dispose() Error(Exception?, string) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Error(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error(Exception?, string, params object?[]?) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Error(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error(string) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Error(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error(string, params object?[]?) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Error(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T>(Exception?, string, T) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Error<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T>(string, T) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Error<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1>(Exception?, string, T0, T1) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Error<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1>(string, T0, T1) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Error<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Error<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Error<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Fatal(Exception?, string) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Fatal(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Fatal(ex, \"Process terminating.\"); Fatal(Exception?, string, params object?[]?) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Fatal(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Fatal(ex, \"Process terminating.\"); Fatal(string) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Fatal(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Fatal(\"Process terminating.\"); Fatal(string, params object?[]?) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Fatal(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Fatal(\"Process terminating.\"); Fatal<T>(Exception?, string, T) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Fatal<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Fatal(ex, \"Process terminating.\"); Fatal<T>(string, T) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Fatal<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Fatal(\"Process terminating.\"); Fatal<T0, T1>(Exception?, string, T0, T1) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Fatal<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Fatal(ex, \"Process terminating.\"); Fatal<T0, T1>(string, T0, T1) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Fatal<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Fatal(\"Process terminating.\"); Fatal<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Fatal<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Fatal(ex, \"Process terminating.\"); Fatal<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Fatal<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Fatal(\"Process terminating.\"); ForContext(ILogEventEnricher) Create a logger that enriches log events via the provided enrichers. Declaration public ILogger ForContext(ILogEventEnricher enricher) Parameters Type Name Description ILogEventEnricher enricher Enricher that applies in the context. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext(IEnumerable<ILogEventEnricher>) Create a logger that enriches log events via the provided enrichers. Declaration public ILogger ForContext(IEnumerable<ILogEventEnricher> enrichers) Parameters Type Name Description IEnumerable<ILogEventEnricher> enrichers Enrichers that apply in the context. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext(string, object?, bool) Create a logger that enriches log events with the specified property. Declaration public ILogger ForContext(string propertyName, object? value, bool destructureObjects = false) Parameters Type Name Description string propertyName The name of the property. Must be non-empty. object value The property value. bool destructureObjects If true, the value will be serialized as a structured object if possible; if false, the object will be recorded as a scalar or simple array. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext(Type) Create a logger that marks log events as being from the specified source type. Declaration public ILogger ForContext(Type source) Parameters Type Name Description Type source Type generating log messages in the context. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext<TSource>() Create a logger that marks log events as being from the specified source type. Declaration public ILogger ForContext<TSource>() Returns Type Description ILogger A logger that will enrich log events as specified. Type Parameters Name Description TSource Type generating log messages in the context. Information(Exception?, string) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information(Exception?, string, params object?[]?) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information(string) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information(string, params object?[]?) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T>(Exception?, string, T) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T>(string, T) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1>(Exception?, string, T0, T1) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1>(string, T0, T1) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); IsEnabled(LogEventLevel) Determine if events at the specified level, and higher, will be passed through to the log sinks. Declaration public bool IsEnabled(LogEventLevel level) Parameters Type Name Description LogEventLevel level Level to check. Returns Type Description bool True if the level is enabled; otherwise, false. Verbose(Exception?, string) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Verbose(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose(Exception?, string, params object?[]?) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Verbose(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose(string) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Verbose(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose(string, params object?[]?) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Verbose(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose<T>(Exception?, string, T) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Verbose<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose<T>(string, T) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Verbose<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose<T0, T1>(Exception?, string, T0, T1) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Verbose<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose<T0, T1>(string, T0, T1) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Verbose<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Verbose<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Verbose<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Warning(Exception?, string) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Warning(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning(Exception?, string, params object?[]?) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Warning(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning(string) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Warning(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning(string, params object?[]?) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Warning(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T>(Exception?, string, T) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Warning<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T>(string, T) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Warning<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1>(Exception?, string, T0, T1) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Warning<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1>(string, T0, T1) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Warning<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Warning<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Warning<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Write(LogEvent) Write an event to the log. Declaration public void Write(LogEvent logEvent) Parameters Type Name Description LogEvent logEvent The event to write. Write(LogEventLevel, Exception?, string) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Write(LogEventLevel level, Exception? exception, string messageTemplate) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. Write(LogEventLevel, Exception?, string, params object?[]?) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Write(LogEventLevel level, Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Write(LogEventLevel, string) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Write(LogEventLevel level, string messageTemplate) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. Write(LogEventLevel, string, params object?[]?) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Write(LogEventLevel level, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate object[] propertyValues Write<T>(LogEventLevel, Exception?, string, T) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Write<T>(LogEventLevel level, Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Write<T>(LogEventLevel, string, T) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Write<T>(LogEventLevel level, string messageTemplate, T propertyValue) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Write<T0, T1>(LogEventLevel, Exception?, string, T0, T1) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Write<T0, T1>(LogEventLevel level, Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Write<T0, T1>(LogEventLevel, string, T0, T1) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Write<T0, T1>(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Write<T0, T1, T2>(LogEventLevel, Exception?, string, T0, T1, T2) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Write<T0, T1, T2>(LogEventLevel level, Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Write<T0, T1, T2>(LogEventLevel, string, T0, T1, T2) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public void Write<T0, T1, T2>(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Implements ILogger ILogEventSink IDisposable Extension Methods LoggerExtensions.ForContext<TValue>(ILogger, LogEventLevel, string, TValue, bool)"
  },
  "api/Serilog.Core.LoggingLevelSwitch.html": {
    "href": "api/Serilog.Core.LoggingLevelSwitch.html",
    "title": "Class LoggingLevelSwitch | CodeFactory for Windows",
    "keywords": "Class LoggingLevelSwitch Dynamically controls logging level. Inheritance object LoggingLevelSwitch Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Core Assembly: Serilog.dll Syntax public class LoggingLevelSwitch Constructors LoggingLevelSwitch(LogEventLevel) Create a LoggingLevelSwitch at the initial minimum level. Declaration public LoggingLevelSwitch(LogEventLevel initialMinimumLevel = LogEventLevel.Information) Parameters Type Name Description LogEventLevel initialMinimumLevel The initial level to which the switch is set. Properties MinimumLevel The current minimum level, below which no events should be generated. Declaration public LogEventLevel MinimumLevel { get; set; } Property Value Type Description LogEventLevel"
  },
  "api/Serilog.Core.MessageTemplateFormatMethodAttribute.html": {
    "href": "api/Serilog.Core.MessageTemplateFormatMethodAttribute.html",
    "title": "Class MessageTemplateFormatMethodAttribute | CodeFactory for Windows",
    "keywords": "Class MessageTemplateFormatMethodAttribute Indicates that the marked method logs data using a message template and (optional) arguments. The name of the parameter which contains the message template should be given in the constructor. Inheritance object Attribute MessageTemplateFormatMethodAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Serilog.Core Assembly: Serilog.dll Syntax [AttributeUsage(AttributeTargets.Constructor|AttributeTargets.Method)] public sealed class MessageTemplateFormatMethodAttribute : Attribute, _Attribute Examples [MessageTemplateFormatMethod(\"messageTemplate\")] public void Information(string messageTemplate, params object[] propertyValues) { // Do something } public void Foo() { Information(\"Hello, {Name}!\") // Warning: Non-existing argument in message template. } Constructors MessageTemplateFormatMethodAttribute(string) Initializes a new instance of the MessageTemplateFormatMethodAttribute class. Declaration public MessageTemplateFormatMethodAttribute(string messageTemplateParameterName) Parameters Type Name Description string messageTemplateParameterName Name of the message template parameter. Properties MessageTemplateParameterName Gets the name of the message template parameter. Declaration public string MessageTemplateParameterName { get; } Property Value Type Description string The name of the message template parameter. Implements _Attribute"
  },
  "api/Serilog.Core.html": {
    "href": "api/Serilog.Core.html",
    "title": "Namespace Serilog.Core | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Core Classes Constants Constants used in the core logging pipeline and associated types. Logger The core Serilog logging pipeline. A Logger must be disposed to flush any events buffered within it. Most application code should depend on ILogger, not this class. LoggingLevelSwitch Dynamically controls logging level. MessageTemplateFormatMethodAttribute Indicates that the marked method logs data using a message template and (optional) arguments. The name of the parameter which contains the message template should be given in the constructor. Interfaces IDestructuringPolicy Determine how, when destructuring, a supplied value is represented as a complex log event property. ILogEventEnricher Applied during logging to add additional information to log events. ILogEventFilter Provides filtering of the log event stream. ILogEventPropertyFactory Creates log event properties from regular .NET objects, applying policies as required. ILogEventPropertyValueFactory Supports the policy-driven construction of LogEventPropertyValues given regular .NET objects. ILogEventSink A destination for log events."
  },
  "api/Serilog.Data.LogEventPropertyValueRewriter-1.html": {
    "href": "api/Serilog.Data.LogEventPropertyValueRewriter-1.html",
    "title": "Class LogEventPropertyValueRewriter<TState> | CodeFactory for Windows",
    "keywords": "Class LogEventPropertyValueRewriter<TState> A base class for visitors that rewrite the value with modifications. For example, implementations might remove all structure properties with a certain name, apply size/length limits, or convert scalar properties of one type into scalar properties of another. Inheritance object LogEventPropertyValueVisitor<TState, LogEventPropertyValue> LogEventPropertyValueRewriter<TState> Inherited Members LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.Visit(TState, LogEventPropertyValue) LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.VisitScalarValue(TState, ScalarValue) LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.VisitSequenceValue(TState, SequenceValue) LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.VisitStructureValue(TState, StructureValue) LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.VisitDictionaryValue(TState, DictionaryValue) LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.VisitUnsupportedValue(TState, LogEventPropertyValue) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Data Assembly: Serilog.dll Syntax public abstract class LogEventPropertyValueRewriter<TState> : LogEventPropertyValueVisitor<TState, LogEventPropertyValue> Type Parameters Name Description TState Constructors LogEventPropertyValueRewriter() Declaration protected LogEventPropertyValueRewriter() Methods VisitDictionaryValue(TState, DictionaryValue) Visit a DictionaryValue value. Declaration protected override LogEventPropertyValue VisitDictionaryValue(TState state, DictionaryValue dictionary) Parameters Type Name Description TState state Operation state. DictionaryValue dictionary The value to visit. Returns Type Description LogEventPropertyValue The result of visiting dictionary. Overrides LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.VisitDictionaryValue(TState, DictionaryValue) Exceptions Type Condition ArgumentNullException When dictionary is null VisitScalarValue(TState, ScalarValue) Visit a ScalarValue value. Declaration protected override LogEventPropertyValue VisitScalarValue(TState state, ScalarValue scalar) Parameters Type Name Description TState state Operation state. ScalarValue scalar The value to visit. Returns Type Description LogEventPropertyValue The result of visiting scalar. Overrides LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.VisitScalarValue(TState, ScalarValue) Exceptions Type Condition ArgumentNullException When scalar is null VisitSequenceValue(TState, SequenceValue) Visit a SequenceValue value. Declaration protected override LogEventPropertyValue VisitSequenceValue(TState state, SequenceValue sequence) Parameters Type Name Description TState state Operation state. SequenceValue sequence The value to visit. Returns Type Description LogEventPropertyValue The result of visiting sequence. Overrides LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.VisitSequenceValue(TState, SequenceValue) Exceptions Type Condition ArgumentNullException When sequence is null VisitStructureValue(TState, StructureValue) Visit a StructureValue value. Declaration protected override LogEventPropertyValue VisitStructureValue(TState state, StructureValue structure) Parameters Type Name Description TState state Operation state. StructureValue structure The value to visit. Returns Type Description LogEventPropertyValue The result of visiting structure. Overrides LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.VisitStructureValue(TState, StructureValue) Exceptions Type Condition ArgumentNullException When structure is null VisitUnsupportedValue(TState, LogEventPropertyValue) Visit a value of an unsupported type. Returns the value unchanged. Declaration protected override LogEventPropertyValue VisitUnsupportedValue(TState state, LogEventPropertyValue value) Parameters Type Name Description TState state Operation state. LogEventPropertyValue value The value to visit. Returns Type Description LogEventPropertyValue The result of visiting value. Overrides LogEventPropertyValueVisitor<TState, LogEventPropertyValue>.VisitUnsupportedValue(TState, LogEventPropertyValue)"
  },
  "api/Serilog.Data.LogEventPropertyValueVisitor-2.html": {
    "href": "api/Serilog.Data.LogEventPropertyValueVisitor-2.html",
    "title": "Class LogEventPropertyValueVisitor<TState, TResult> | CodeFactory for Windows",
    "keywords": "Class LogEventPropertyValueVisitor<TState, TResult> An abstract base class for visitors that walk data in the LogEventPropertyValue format. Subclasses, by overriding appropriate methods, may search for, transform, or print the value structures being visited. Inheritance object LogEventPropertyValueVisitor<TState, TResult> LogEventPropertyValueRewriter<TState> JsonValueFormatter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Data Assembly: Serilog.dll Syntax public abstract class LogEventPropertyValueVisitor<TState, TResult> Type Parameters Name Description TState The type of a state object passed through the visiting process. TResult The type of the result generated by visiting a node. Remarks Stateless, designed to accommodate allocation-free visiting of multiple values by the same visitor instance. Constructors LogEventPropertyValueVisitor() Declaration protected LogEventPropertyValueVisitor() Methods Visit(TState, LogEventPropertyValue) Visit the root node type. This method delegates to a concrete Visit*Value() method appropriate for the value. Declaration protected virtual TResult Visit(TState state, LogEventPropertyValue value) Parameters Type Name Description TState state Operation state. LogEventPropertyValue value The value to visit. Returns Type Description TResult The result of visiting value. Exceptions Type Condition ArgumentNullException When value is null VisitDictionaryValue(TState, DictionaryValue) Visit a DictionaryValue value. Declaration protected abstract TResult VisitDictionaryValue(TState state, DictionaryValue dictionary) Parameters Type Name Description TState state Operation state. DictionaryValue dictionary The value to visit. Returns Type Description TResult The result of visiting dictionary. VisitScalarValue(TState, ScalarValue) Visit a ScalarValue value. Declaration protected abstract TResult VisitScalarValue(TState state, ScalarValue scalar) Parameters Type Name Description TState state Operation state. ScalarValue scalar The value to visit. Returns Type Description TResult The result of visiting scalar. VisitSequenceValue(TState, SequenceValue) Visit a SequenceValue value. Declaration protected abstract TResult VisitSequenceValue(TState state, SequenceValue sequence) Parameters Type Name Description TState state Operation state. SequenceValue sequence The value to visit. Returns Type Description TResult The result of visiting sequence. VisitStructureValue(TState, StructureValue) Visit a StructureValue value. Declaration protected abstract TResult VisitStructureValue(TState state, StructureValue structure) Parameters Type Name Description TState state Operation state. StructureValue structure The value to visit. Returns Type Description TResult The result of visiting structure. VisitUnsupportedValue(TState, LogEventPropertyValue) Visit a value of an unsupported type. Always throws NotSupportedException, when is not overridden. Declaration protected virtual TResult VisitUnsupportedValue(TState state, LogEventPropertyValue value) Parameters Type Name Description TState state Operation state. LogEventPropertyValue value The value to visit. Returns Type Description TResult The result of visiting value. Exceptions Type Condition ArgumentNullException When value is null NotSupportedException Always"
  },
  "api/Serilog.Data.html": {
    "href": "api/Serilog.Data.html",
    "title": "Namespace Serilog.Data | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Data Classes LogEventPropertyValueRewriter<TState> A base class for visitors that rewrite the value with modifications. For example, implementations might remove all structure properties with a certain name, apply size/length limits, or convert scalar properties of one type into scalar properties of another. LogEventPropertyValueVisitor<TState, TResult> An abstract base class for visitors that walk data in the LogEventPropertyValue format. Subclasses, by overriding appropriate methods, may search for, transform, or print the value structures being visited."
  },
  "api/Serilog.Debugging.LoggingFailedException.html": {
    "href": "api/Serilog.Debugging.LoggingFailedException.html",
    "title": "Class LoggingFailedException | CodeFactory for Windows",
    "keywords": "Class LoggingFailedException May be thrown by log event sinks when a failure occurs. Should not be used in cases where the exception would propagate out to callers. Inheritance object Exception LoggingFailedException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Namespace: Serilog.Debugging Assembly: Serilog.dll Syntax public class LoggingFailedException : Exception, ISerializable, _Exception Constructors LoggingFailedException(string) Construct a LoggingFailedException to communicate a logging failure. Declaration public LoggingFailedException(string message) Parameters Type Name Description string message A message describing the logging failure. Implements ISerializable _Exception"
  },
  "api/Serilog.Debugging.SelfLog.html": {
    "href": "api/Serilog.Debugging.SelfLog.html",
    "title": "Class SelfLog | CodeFactory for Windows",
    "keywords": "Class SelfLog A simple source of information generated by Serilog itself, for example when exceptions are thrown and caught internally. Inheritance object SelfLog Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Debugging Assembly: Serilog.dll Syntax public static class SelfLog Properties Out The output mechanism for self-log messages. Declaration [Obsolete(\"Use SelfLog.Enable(value) and SelfLog.Disable() instead\")] public static TextWriter? Out { set; } Property Value Type Description TextWriter Examples SelfLog.Out = Console.Error; Methods Disable() Clear the output mechanism and disable self-log events. Declaration public static void Disable() Enable(Action<string>) Set the output mechanism for self-log messages. Declaration public static void Enable(Action<string> output) Parameters Type Name Description Action<string> output An action to invoke with self-log messages. Exceptions Type Condition ArgumentNullException When output is null Enable(TextWriter) Set the output mechanism for self-log messages. Declaration public static void Enable(TextWriter output) Parameters Type Name Description TextWriter output A synchronized TextWriter to which self-log messages will be written. Exceptions Type Condition ArgumentNullException When output is null WriteLine(string, object?, object?, object?) Write a message to the self-log. Declaration public static void WriteLine(string format, object? arg0 = null, object? arg1 = null, object? arg2 = null) Parameters Type Name Description string format Standard .NET format string containing the message. object arg0 First argument, if supplied. object arg1 Second argument, if supplied. object arg2 Third argument, if supplied. Remarks The name is historical; because this is used from third-party sink packages, removing the \"Line\" suffix as would seem sensible isn't worth the breakage."
  },
  "api/Serilog.Debugging.html": {
    "href": "api/Serilog.Debugging.html",
    "title": "Namespace Serilog.Debugging | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Debugging Classes LoggingFailedException May be thrown by log event sinks when a failure occurs. Should not be used in cases where the exception would propagate out to callers. SelfLog A simple source of information generated by Serilog itself, for example when exceptions are thrown and caught internally."
  },
  "api/Serilog.Events.DictionaryValue.html": {
    "href": "api/Serilog.Events.DictionaryValue.html",
    "title": "Class DictionaryValue | CodeFactory for Windows",
    "keywords": "Class DictionaryValue A value represented as a mapping from keys to values. Inheritance object LogEventPropertyValue DictionaryValue Implements IFormattable Inherited Members LogEventPropertyValue.ToString() LogEventPropertyValue.ToString(string, IFormatProvider) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Events Assembly: Serilog.dll Syntax public class DictionaryValue : LogEventPropertyValue, IFormattable Constructors DictionaryValue(IEnumerable<KeyValuePair<ScalarValue, LogEventPropertyValue>>) Create a DictionaryValue with the provided elements. Declaration public DictionaryValue(IEnumerable<KeyValuePair<ScalarValue, LogEventPropertyValue>> elements) Parameters Type Name Description IEnumerable<KeyValuePair<ScalarValue, LogEventPropertyValue>> elements The key-value mappings represented in the dictionary. Exceptions Type Condition ArgumentNullException When elements is null Properties Elements The dictionary mapping. Declaration public IReadOnlyDictionary<ScalarValue, LogEventPropertyValue> Elements { get; } Property Value Type Description IReadOnlyDictionary<ScalarValue, LogEventPropertyValue> Methods Render(TextWriter, string?, IFormatProvider?) Render the value to the output. Declaration public override void Render(TextWriter output, string? format = null, IFormatProvider? formatProvider = null) Parameters Type Name Description TextWriter output The output. string format A format string applied to the value, or null. IFormatProvider formatProvider A format provider to apply to the value, or null to use the default. Overrides LogEventPropertyValue.Render(TextWriter, string?, IFormatProvider?) Exceptions Type Condition ArgumentNullException When output is null See Also ToString(string, IFormatProvider) Implements IFormattable"
  },
  "api/Serilog.Events.LevelAlias.html": {
    "href": "api/Serilog.Events.LevelAlias.html",
    "title": "Class LevelAlias | CodeFactory for Windows",
    "keywords": "Class LevelAlias Descriptive aliases for LogEventLevel. Inheritance object LevelAlias Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Events Assembly: Serilog.dll Syntax public static class LevelAlias Remarks These do not appear as members of the enumeration as duplicated underlying values result in issues when presenting enum values with ToString(). Fields Maximum The most significant level of event. Declaration public const LogEventLevel Maximum = Fatal Field Value Type Description LogEventLevel Minimum The least significant level of event. Declaration public const LogEventLevel Minimum = Verbose Field Value Type Description LogEventLevel"
  },
  "api/Serilog.Events.LogEvent.html": {
    "href": "api/Serilog.Events.LogEvent.html",
    "title": "Class LogEvent | CodeFactory for Windows",
    "keywords": "Class LogEvent A log event. Inheritance object LogEvent Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Events Assembly: Serilog.dll Syntax public class LogEvent Constructors LogEvent(DateTimeOffset, LogEventLevel, Exception?, MessageTemplate, IEnumerable<LogEventProperty>) Construct a new LogEvent. Declaration public LogEvent(DateTimeOffset timestamp, LogEventLevel level, Exception? exception, MessageTemplate messageTemplate, IEnumerable<LogEventProperty> properties) Parameters Type Name Description DateTimeOffset timestamp The time at which the event occurred. LogEventLevel level The level of the event. Exception exception An exception associated with the event, or null. MessageTemplate messageTemplate The message template describing the event. IEnumerable<LogEventProperty> properties Properties associated with the event, including those presented in messageTemplate. Exceptions Type Condition ArgumentNullException When messageTemplate is null ArgumentNullException When properties is null Properties Exception An exception associated with the event, or null. Declaration public Exception? Exception { get; } Property Value Type Description Exception Level The level of the event. Declaration public LogEventLevel Level { get; } Property Value Type Description LogEventLevel MessageTemplate The message template describing the event. Declaration public MessageTemplate MessageTemplate { get; } Property Value Type Description MessageTemplate Properties Properties associated with the event, including those presented in MessageTemplate. Declaration public IReadOnlyDictionary<string, LogEventPropertyValue> Properties { get; } Property Value Type Description IReadOnlyDictionary<string, LogEventPropertyValue> Timestamp The time at which the event occurred. Declaration public DateTimeOffset Timestamp { get; } Property Value Type Description DateTimeOffset Methods AddOrUpdateProperty(LogEventProperty) Add a property to the event if not already present, otherwise, update its value. Declaration public void AddOrUpdateProperty(LogEventProperty property) Parameters Type Name Description LogEventProperty property The property to add or update. Exceptions Type Condition ArgumentNullException When property is null AddPropertyIfAbsent(LogEventProperty) Add a property to the event if not already present. Declaration public void AddPropertyIfAbsent(LogEventProperty property) Parameters Type Name Description LogEventProperty property The property to add. Exceptions Type Condition ArgumentNullException When property is null RemovePropertyIfPresent(string) Remove a property from the event, if present. Otherwise no action is performed. Declaration public void RemovePropertyIfPresent(string propertyName) Parameters Type Name Description string propertyName The name of the property to remove. RenderMessage(IFormatProvider?) Render the message template given the properties associated with the event, and return the result. Declaration public string RenderMessage(IFormatProvider? formatProvider = null) Parameters Type Name Description IFormatProvider formatProvider Supplies culture-specific formatting information, or null. Returns Type Description string RenderMessage(TextWriter, IFormatProvider?) Render the message template to the specified output, given the properties associated with the event. Declaration public void RenderMessage(TextWriter output, IFormatProvider? formatProvider = null) Parameters Type Name Description TextWriter output The output. IFormatProvider formatProvider Supplies culture-specific formatting information, or null."
  },
  "api/Serilog.Events.LogEventLevel.html": {
    "href": "api/Serilog.Events.LogEventLevel.html",
    "title": "Enum LogEventLevel | CodeFactory for Windows",
    "keywords": "Enum LogEventLevel Specifies the meaning and relative importance of a log event. Namespace: Serilog.Events Assembly: Serilog.dll Syntax public enum LogEventLevel Fields Name Description Debug Internal system events that aren't necessarily observable from the outside. Error Functionality is unavailable, invariants are broken or data is lost. Fatal If you have a pager, it goes off when one of these occurs. Information The lifeblood of operational intelligence - things happen. Verbose Anything and everything you might want to know about a running block of code. Warning Service is degraded or endangered."
  },
  "api/Serilog.Events.LogEventProperty.html": {
    "href": "api/Serilog.Events.LogEventProperty.html",
    "title": "Class LogEventProperty | CodeFactory for Windows",
    "keywords": "Class LogEventProperty A property associated with a LogEvent. Inheritance object LogEventProperty Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Events Assembly: Serilog.dll Syntax public class LogEventProperty Constructors LogEventProperty(string, LogEventPropertyValue) Construct a LogEventProperty with the specified name and value. Declaration public LogEventProperty(string name, LogEventPropertyValue value) Parameters Type Name Description string name The name of the property. LogEventPropertyValue value The value of the property. Exceptions Type Condition ArgumentNullException When name is null ArgumentException When name is empty or only contains whitespace ArgumentNullException When value is null Properties Name The name of the property. Declaration public string Name { get; } Property Value Type Description string Value The value of the property. Declaration public LogEventPropertyValue Value { get; } Property Value Type Description LogEventPropertyValue Methods IsValidName(string?) Test name to determine if it is a valid property name. Declaration public static bool IsValidName(string? name) Parameters Type Name Description string name The name to check. Returns Type Description bool True if the name is valid; otherwise, false."
  },
  "api/Serilog.Events.LogEventPropertyValue.html": {
    "href": "api/Serilog.Events.LogEventPropertyValue.html",
    "title": "Class LogEventPropertyValue | CodeFactory for Windows",
    "keywords": "Class LogEventPropertyValue The value associated with a LogEventProperty. Divided into scalar, sequence and structure values to direct serialization into various formats. Inheritance object LogEventPropertyValue DictionaryValue ScalarValue SequenceValue StructureValue Implements IFormattable Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Events Assembly: Serilog.dll Syntax public abstract class LogEventPropertyValue : IFormattable Constructors LogEventPropertyValue() Declaration protected LogEventPropertyValue() Methods Render(TextWriter, string?, IFormatProvider?) Render the value to the output. Declaration public abstract void Render(TextWriter output, string? format = null, IFormatProvider? formatProvider = null) Parameters Type Name Description TextWriter output The output. string format A format string applied to the value, or null. IFormatProvider formatProvider A format provider to apply to the value, or null to use the default. See Also ToString(string?, IFormatProvider?) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() ToString(string?, IFormatProvider?) Formats the value of the current instance using the specified format. Declaration public string ToString(string? format, IFormatProvider? formatProvider) Parameters Type Name Description string format The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. IFormatProvider formatProvider The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns Type Description string The value of the current instance in the specified format. Implements IFormattable"
  },
  "api/Serilog.Events.MessageTemplate.html": {
    "href": "api/Serilog.Events.MessageTemplate.html",
    "title": "Class MessageTemplate | CodeFactory for Windows",
    "keywords": "Class MessageTemplate Represents a message template passed to a log method. The template can subsequently render the template in textual form given the list of properties. Inheritance object MessageTemplate Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Events Assembly: Serilog.dll Syntax public class MessageTemplate Constructors MessageTemplate(IEnumerable<MessageTemplateToken>) Construct a message template using manually-defined text and property tokens. Declaration public MessageTemplate(IEnumerable<MessageTemplateToken> tokens) Parameters Type Name Description IEnumerable<MessageTemplateToken> tokens The text and property tokens defining the template. MessageTemplate(string, IEnumerable<MessageTemplateToken>) Construct a message template using manually-defined text and property tokens. Declaration public MessageTemplate(string text, IEnumerable<MessageTemplateToken> tokens) Parameters Type Name Description string text The full text of the template; used by Serilog internally to avoid unneeded string concatenation. IEnumerable<MessageTemplateToken> tokens The text and property tokens defining the template. Exceptions Type Condition ArgumentNullException When text is null ArgumentNullException When tokens is null Properties Empty Represents the empty message template. Declaration public static MessageTemplate Empty { get; } Property Value Type Description MessageTemplate Text The raw text describing the template. Declaration public string Text { get; } Property Value Type Description string Tokens The tokens parsed from the template. Declaration public IEnumerable<MessageTemplateToken> Tokens { get; } Property Value Type Description IEnumerable<MessageTemplateToken> Methods Render(IReadOnlyDictionary<string, LogEventPropertyValue>, IFormatProvider?) Convert the message template into a textual message, given the properties matching the tokens in the message template. Declaration public string Render(IReadOnlyDictionary<string, LogEventPropertyValue> properties, IFormatProvider? formatProvider = null) Parameters Type Name Description IReadOnlyDictionary<string, LogEventPropertyValue> properties Properties matching template tokens. IFormatProvider formatProvider Supplies culture-specific formatting information, or null. Returns Type Description string The message created from the template and properties. If the properties are mismatched with the template, the template will be returned with incomplete substitution. Exceptions Type Condition ArgumentNullException When properties is null Render(IReadOnlyDictionary<string, LogEventPropertyValue>, TextWriter, IFormatProvider?) Convert the message template into a textual message, given the properties matching the tokens in the message template. Declaration public void Render(IReadOnlyDictionary<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider? formatProvider = null) Parameters Type Name Description IReadOnlyDictionary<string, LogEventPropertyValue> properties Properties matching template tokens. TextWriter output The message created from the template and properties. If the properties are mismatched with the template, the template will be returned with incomplete substitution. IFormatProvider formatProvider Supplies culture-specific formatting information, or null. Exceptions Type Condition ArgumentNullException When properties is null ArgumentNullException When output is null ToString() Render the template as a string. Declaration public override string ToString() Returns Type Description string The string representation of the template. Overrides object.ToString()"
  },
  "api/Serilog.Events.ScalarValue.html": {
    "href": "api/Serilog.Events.ScalarValue.html",
    "title": "Class ScalarValue | CodeFactory for Windows",
    "keywords": "Class ScalarValue A property value corresponding to a simple, scalar type. Inheritance object LogEventPropertyValue ScalarValue Implements IFormattable Inherited Members LogEventPropertyValue.ToString() LogEventPropertyValue.ToString(string, IFormatProvider) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Serilog.Events Assembly: Serilog.dll Syntax public class ScalarValue : LogEventPropertyValue, IFormattable Constructors ScalarValue(object?) Construct a ScalarValue with the specified value. Declaration public ScalarValue(object? value) Parameters Type Name Description object value The value, which may be null . Properties Value The value, which may be null . Declaration public object? Value { get; } Property Value Type Description object Methods Equals(object?) Determine if this instance is equal to obj. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The instance to compare with. Returns Type Description bool True if the instances are equal; otherwise, false. Overrides object.Equals(object) GetHashCode() Get a hash code representing the value. Declaration public override int GetHashCode() Returns Type Description int The instance's hash code. Overrides object.GetHashCode() Render(TextWriter, string?, IFormatProvider?) Render the value to the output. Declaration public override void Render(TextWriter output, string? format = null, IFormatProvider? formatProvider = null) Parameters Type Name Description TextWriter output The output. string format A format string applied to the value, or null. IFormatProvider formatProvider A format provider to apply to the value, or null to use the default. Overrides LogEventPropertyValue.Render(TextWriter, string?, IFormatProvider?) Exceptions Type Condition ArgumentNullException When output is null See Also ToString(string, IFormatProvider) Implements IFormattable"
  },
  "api/Serilog.Events.SequenceValue.html": {
    "href": "api/Serilog.Events.SequenceValue.html",
    "title": "Class SequenceValue | CodeFactory for Windows",
    "keywords": "Class SequenceValue A value represented as an ordered sequence of values. Inheritance object LogEventPropertyValue SequenceValue Implements IFormattable Inherited Members LogEventPropertyValue.ToString() LogEventPropertyValue.ToString(string, IFormatProvider) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Events Assembly: Serilog.dll Syntax public class SequenceValue : LogEventPropertyValue, IFormattable Constructors SequenceValue(IEnumerable<LogEventPropertyValue>) Create a SequenceValue with the provided elements. Declaration public SequenceValue(IEnumerable<LogEventPropertyValue> elements) Parameters Type Name Description IEnumerable<LogEventPropertyValue> elements The elements of the sequence. Exceptions Type Condition ArgumentNullException When elements is null Properties Elements The elements of the sequence. Declaration public IReadOnlyList<LogEventPropertyValue> Elements { get; } Property Value Type Description IReadOnlyList<LogEventPropertyValue> Methods Render(TextWriter, string?, IFormatProvider?) Render the value to the output. Declaration public override void Render(TextWriter output, string? format = null, IFormatProvider? formatProvider = null) Parameters Type Name Description TextWriter output The output. string format A format string applied to the value, or null. IFormatProvider formatProvider A format provider to apply to the value, or null to use the default. Overrides LogEventPropertyValue.Render(TextWriter, string?, IFormatProvider?) Exceptions Type Condition ArgumentNullException When output is null See Also ToString(string, IFormatProvider) Implements IFormattable"
  },
  "api/Serilog.Events.StructureValue.html": {
    "href": "api/Serilog.Events.StructureValue.html",
    "title": "Class StructureValue | CodeFactory for Windows",
    "keywords": "Class StructureValue A value represented as a collection of name-value properties. Inheritance object LogEventPropertyValue StructureValue Implements IFormattable Inherited Members LogEventPropertyValue.ToString() LogEventPropertyValue.ToString(string, IFormatProvider) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Events Assembly: Serilog.dll Syntax public class StructureValue : LogEventPropertyValue, IFormattable Constructors StructureValue(IEnumerable<LogEventProperty>, string?) Construct a StructureValue with the provided properties. Declaration public StructureValue(IEnumerable<LogEventProperty> properties, string? typeTag = null) Parameters Type Name Description IEnumerable<LogEventProperty> properties The properties of the structure. string typeTag Optionally, a piece of metadata describing the \"type\" of the structure. Can be null . Exceptions Type Condition ArgumentNullException When properties is null Properties Properties The properties of the structure. Declaration public IReadOnlyList<LogEventProperty> Properties { get; } Property Value Type Description IReadOnlyList<LogEventProperty> Remarks Not presented as a dictionary because dictionary construction is relatively expensive; it is cheaper to build a dictionary over properties only when the structure is of interest. TypeTag A piece of metadata describing the \"type\" of the structure, or null. Declaration public string? TypeTag { get; } Property Value Type Description string Methods Render(TextWriter, string?, IFormatProvider?) Render the value to the output. Declaration public override void Render(TextWriter output, string? format = null, IFormatProvider? formatProvider = null) Parameters Type Name Description TextWriter output The output. string format A format string applied to the value, or null. IFormatProvider formatProvider A format provider to apply to the value, or null to use the default. Overrides LogEventPropertyValue.Render(TextWriter, string?, IFormatProvider?) Exceptions Type Condition ArgumentNullException When output is null See Also ToString(string, IFormatProvider) Implements IFormattable"
  },
  "api/Serilog.Events.html": {
    "href": "api/Serilog.Events.html",
    "title": "Namespace Serilog.Events | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Events Classes DictionaryValue A value represented as a mapping from keys to values. LevelAlias Descriptive aliases for LogEventLevel. LogEvent A log event. LogEventProperty A property associated with a LogEvent. LogEventPropertyValue The value associated with a LogEventProperty. Divided into scalar, sequence and structure values to direct serialization into various formats. MessageTemplate Represents a message template passed to a log method. The template can subsequently render the template in textual form given the list of properties. ScalarValue A property value corresponding to a simple, scalar type. SequenceValue A value represented as an ordered sequence of values. StructureValue A value represented as a collection of name-value properties. Enums LogEventLevel Specifies the meaning and relative importance of a log event."
  },
  "api/Serilog.Filters.Matching.html": {
    "href": "api/Serilog.Filters.Matching.html",
    "title": "Class Matching | CodeFactory for Windows",
    "keywords": "Class Matching Predicates applied to log events that can be used Inheritance object Matching Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Filters Assembly: Serilog.dll Syntax public static class Matching Methods FromSource(string) Matches events from the specified source type or namespace and nested types or namespaces. Declaration public static Func<LogEvent, bool> FromSource(string source) Parameters Type Name Description string source A dotted source type or namespace identifier. Returns Type Description Func<LogEvent, bool> A function that matches log events emitted by the source. Exceptions Type Condition ArgumentNullException When source is null FromSource<TSource>() Matches events from the specified source type. Declaration public static Func<LogEvent, bool> FromSource<TSource>() Returns Type Description Func<LogEvent, bool> A predicate for matching events. Type Parameters Name Description TSource The source type. WithProperty(string) Matches events with the specified property attached, regardless of its value. Declaration public static Func<LogEvent, bool> WithProperty(string propertyName) Parameters Type Name Description string propertyName The name of the property to match. Returns Type Description Func<LogEvent, bool> A predicate for matching events. Exceptions Type Condition ArgumentNullException When propertyName is null WithProperty(string, object) Matches events with the specified property value. Declaration public static Func<LogEvent, bool> WithProperty(string propertyName, object scalarValue) Parameters Type Name Description string propertyName The name of the property to match. object scalarValue The property value to match; must be a scalar type. Null is allowed. Returns Type Description Func<LogEvent, bool> A predicate for matching events. Exceptions Type Condition ArgumentNullException When propertyName is null WithProperty<TScalar>(string, Func<TScalar, bool>) Matches events with the specified property value. Declaration public static Func<LogEvent, bool> WithProperty<TScalar>(string propertyName, Func<TScalar, bool> predicate) Parameters Type Name Description string propertyName The name of the property to match. Func<TScalar, bool> predicate A predicate for testing Returns Type Description Func<LogEvent, bool> A predicate for matching events. Type Parameters Name Description TScalar The type of scalar values to match. Exceptions Type Condition ArgumentNullException When propertyName is null ArgumentNullException When predicate is null"
  },
  "api/Serilog.Filters.html": {
    "href": "api/Serilog.Filters.html",
    "title": "Namespace Serilog.Filters | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Filters Classes Matching Predicates applied to log events that can be used"
  },
  "api/Serilog.Formatting.Display.MessageTemplateTextFormatter.html": {
    "href": "api/Serilog.Formatting.Display.MessageTemplateTextFormatter.html",
    "title": "Class MessageTemplateTextFormatter | CodeFactory for Windows",
    "keywords": "Class MessageTemplateTextFormatter A ITextFormatter that supports the Serilog message template format. Formatting log events for display has a different set of requirements and expectations from rendering the data within them. To meet this, the formatter overrides some behavior: First, strings are always output as literals (not quoted) unless some other format is applied to them. Second, tokens without matching properties are skipped rather than being written as raw text. Inheritance object MessageTemplateTextFormatter Implements ITextFormatter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Formatting.Display Assembly: Serilog.dll Syntax public class MessageTemplateTextFormatter : ITextFormatter Constructors MessageTemplateTextFormatter(string, IFormatProvider?) Construct a MessageTemplateTextFormatter. Declaration public MessageTemplateTextFormatter(string outputTemplate, IFormatProvider? formatProvider = null) Parameters Type Name Description string outputTemplate A message template describing the output messages. IFormatProvider formatProvider Supplies culture-specific formatting information, or null. Exceptions Type Condition ArgumentNullException When outputTemplate is null Methods Format(LogEvent, TextWriter) Format the log event into the output. Declaration public void Format(LogEvent logEvent, TextWriter output) Parameters Type Name Description LogEvent logEvent The event to format. TextWriter output The output. Exceptions Type Condition ArgumentNullException When logEvent is null ArgumentNullException When output is null Implements ITextFormatter"
  },
  "api/Serilog.Formatting.Display.OutputProperties.html": {
    "href": "api/Serilog.Formatting.Display.OutputProperties.html",
    "title": "Class OutputProperties | CodeFactory for Windows",
    "keywords": "Class OutputProperties Describes the properties available in standard message template-based output format strings. Inheritance object OutputProperties Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Formatting.Display Assembly: Serilog.dll Syntax public static class OutputProperties Fields ExceptionPropertyName The exception associated with the log event. Declaration public const string ExceptionPropertyName = \"Exception\" Field Value Type Description string LevelPropertyName The level of the log event. Declaration public const string LevelPropertyName = \"Level\" Field Value Type Description string MessagePropertyName The message rendered from the log event. Declaration public const string MessagePropertyName = \"Message\" Field Value Type Description string NewLinePropertyName A new line. Declaration public const string NewLinePropertyName = \"NewLine\" Field Value Type Description string PropertiesPropertyName The properties of the log event. Declaration public const string PropertiesPropertyName = \"Properties\" Field Value Type Description string TimestampPropertyName The timestamp of the log event. Declaration public const string TimestampPropertyName = \"Timestamp\" Field Value Type Description string Methods GetOutputProperties(LogEvent) Create properties from the provided log event. Declaration [Obsolete(\"These implementation details of output formatting will not be exposed in a future version.\")] public static IReadOnlyDictionary<string, LogEventPropertyValue> GetOutputProperties(LogEvent logEvent) Parameters Type Name Description LogEvent logEvent The log event. Returns Type Description IReadOnlyDictionary<string, LogEventPropertyValue> A dictionary with properties representing the log event."
  },
  "api/Serilog.Formatting.Display.html": {
    "href": "api/Serilog.Formatting.Display.html",
    "title": "Namespace Serilog.Formatting.Display | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Formatting.Display Classes MessageTemplateTextFormatter A ITextFormatter that supports the Serilog message template format. Formatting log events for display has a different set of requirements and expectations from rendering the data within them. To meet this, the formatter overrides some behavior: First, strings are always output as literals (not quoted) unless some other format is applied to them. Second, tokens without matching properties are skipped rather than being written as raw text. OutputProperties Describes the properties available in standard message template-based output format strings."
  },
  "api/Serilog.Formatting.ITextFormatter.html": {
    "href": "api/Serilog.Formatting.ITextFormatter.html",
    "title": "Interface ITextFormatter | CodeFactory for Windows",
    "keywords": "Interface ITextFormatter Formats log events in a textual representation. Namespace: Serilog.Formatting Assembly: Serilog.dll Syntax public interface ITextFormatter Methods Format(LogEvent, TextWriter) Format the log event into the output. Declaration void Format(LogEvent logEvent, TextWriter output) Parameters Type Name Description LogEvent logEvent The event to format. TextWriter output The output."
  },
  "api/Serilog.Formatting.Json.JsonFormatter.html": {
    "href": "api/Serilog.Formatting.Json.JsonFormatter.html",
    "title": "Class JsonFormatter | CodeFactory for Windows",
    "keywords": "Class JsonFormatter Formats log events in a simple JSON structure. Instances of this class are safe for concurrent access by multiple threads. Inheritance object JsonFormatter Implements ITextFormatter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Formatting.Json Assembly: Serilog.dll Syntax public class JsonFormatter : ITextFormatter Constructors JsonFormatter(bool, string?, bool, IFormatProvider?) Construct a JsonFormatter. Declaration [Obsolete(\"The omitEnclosingObject parameter is obsolete and will be removed in a future Serilog version.\")] public JsonFormatter(bool omitEnclosingObject, string? closingDelimiter = null, bool renderMessage = false, IFormatProvider? formatProvider = null) Parameters Type Name Description bool omitEnclosingObject If true, the properties of the event will be written to the output without enclosing braces. Otherwise, if false, each event will be written as a well-formed JSON object. string closingDelimiter A string that will be written after each log event is formatted. If null, NewLine will be used. Ignored if omitEnclosingObject is true. bool renderMessage If true, the message will be rendered and written to the output as a property named RenderedMessage. IFormatProvider formatProvider Supplies culture-specific formatting information, or null. JsonFormatter(string?, bool, IFormatProvider?) Construct a JsonFormatter. Declaration public JsonFormatter(string? closingDelimiter = null, bool renderMessage = false, IFormatProvider? formatProvider = null) Parameters Type Name Description string closingDelimiter A string that will be written after each log event is formatted. If null, NewLine will be used. bool renderMessage If true, the message will be rendered and written to the output as a property named RenderedMessage. IFormatProvider formatProvider Supplies culture-specific formatting information, or null. Methods AddLiteralWriter(Type, Action<object, TextWriter>) Adds a writer function for a given type. Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected void AddLiteralWriter(Type type, Action<object, TextWriter> writer) Parameters Type Name Description Type type The type of values, which writer handles. Action<object, TextWriter> writer The function, which writes the values. Exceptions Type Condition ArgumentNullException When type is null ArgumentNullException When writer is null Format(LogEvent, TextWriter) Format the log event into the output. Declaration public void Format(LogEvent logEvent, TextWriter output) Parameters Type Name Description LogEvent logEvent The event to format. TextWriter output The output. Exceptions Type Condition ArgumentNullException When logEvent is null ArgumentNullException When output is null WriteDictionary(IReadOnlyDictionary<ScalarValue, LogEventPropertyValue>, TextWriter) Writes out a dictionary Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteDictionary(IReadOnlyDictionary<ScalarValue, LogEventPropertyValue> elements, TextWriter output) Parameters Type Name Description IReadOnlyDictionary<ScalarValue, LogEventPropertyValue> elements TextWriter output WriteException(Exception, ref string, TextWriter) Writes out the attached exception Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteException(Exception exception, ref string delim, TextWriter output) Parameters Type Name Description Exception exception string delim TextWriter output WriteJsonProperty(string, object?, ref string, TextWriter) Writes out a json property with the specified value on output writer Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteJsonProperty(string name, object? value, ref string precedingDelimiter, TextWriter output) Parameters Type Name Description string name object value string precedingDelimiter TextWriter output WriteLevel(LogEventLevel, ref string, TextWriter) Writes out the log level Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteLevel(LogEventLevel level, ref string delim, TextWriter output) Parameters Type Name Description LogEventLevel level string delim TextWriter output WriteLiteralValue(object, TextWriter) Allows a subclass to write out objects that have no configured literal writer. Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteLiteralValue(object value, TextWriter output) Parameters Type Name Description object value The value to be written as a json construct TextWriter output The writer to write on WriteMessageTemplate(string, ref string, TextWriter) Writes out the message template for the logevent. Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteMessageTemplate(string template, ref string delim, TextWriter output) Parameters Type Name Description string template string delim TextWriter output WriteProperties(IReadOnlyDictionary<string, LogEventPropertyValue>, TextWriter) Writes out the attached properties Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteProperties(IReadOnlyDictionary<string, LogEventPropertyValue> properties, TextWriter output) Parameters Type Name Description IReadOnlyDictionary<string, LogEventPropertyValue> properties TextWriter output WritePropertiesValues(IReadOnlyDictionary<string, LogEventPropertyValue>, TextWriter) Writes out the attached properties values Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WritePropertiesValues(IReadOnlyDictionary<string, LogEventPropertyValue> properties, TextWriter output) Parameters Type Name Description IReadOnlyDictionary<string, LogEventPropertyValue> properties TextWriter output WriteRenderedMessage(string, ref string, TextWriter) (Optionally) writes out the rendered message Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteRenderedMessage(string message, ref string delim, TextWriter output) Parameters Type Name Description string message string delim TextWriter output WriteRenderings(IGrouping<string, PropertyToken>[], IReadOnlyDictionary<string, LogEventPropertyValue>, TextWriter) Writes out individual renderings of attached properties Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteRenderings(IGrouping<string, PropertyToken>[] tokensWithFormat, IReadOnlyDictionary<string, LogEventPropertyValue> properties, TextWriter output) Parameters Type Name Description IGrouping<string, PropertyToken>[] tokensWithFormat IReadOnlyDictionary<string, LogEventPropertyValue> properties TextWriter output WriteRenderingsValues(IGrouping<string, PropertyToken>[], IReadOnlyDictionary<string, LogEventPropertyValue>, TextWriter) Writes out the values of individual renderings of attached properties Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteRenderingsValues(IGrouping<string, PropertyToken>[] tokensWithFormat, IReadOnlyDictionary<string, LogEventPropertyValue> properties, TextWriter output) Parameters Type Name Description IGrouping<string, PropertyToken>[] tokensWithFormat IReadOnlyDictionary<string, LogEventPropertyValue> properties TextWriter output WriteSequence(IEnumerable, TextWriter) Writes out a sequence property Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteSequence(IEnumerable elements, TextWriter output) Parameters Type Name Description IEnumerable elements TextWriter output WriteStructure(string?, IEnumerable<LogEventProperty>, TextWriter) Writes out a structure property Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteStructure(string? typeTag, IEnumerable<LogEventProperty> properties, TextWriter output) Parameters Type Name Description string typeTag IEnumerable<LogEventProperty> properties TextWriter output WriteTimestamp(DateTimeOffset, ref string, TextWriter) Writes out the log timestamp Declaration [Obsolete(\"Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.\")] protected virtual void WriteTimestamp(DateTimeOffset timestamp, ref string delim, TextWriter output) Parameters Type Name Description DateTimeOffset timestamp string delim TextWriter output Implements ITextFormatter"
  },
  "api/Serilog.Formatting.Json.JsonValueFormatter.html": {
    "href": "api/Serilog.Formatting.Json.JsonValueFormatter.html",
    "title": "Class JsonValueFormatter | CodeFactory for Windows",
    "keywords": "Class JsonValueFormatter Converts Serilog's structured property value format into JSON. Inheritance object LogEventPropertyValueVisitor<TextWriter, bool> JsonValueFormatter Inherited Members LogEventPropertyValueVisitor<TextWriter, bool>.Visit(TextWriter, LogEventPropertyValue) LogEventPropertyValueVisitor<TextWriter, bool>.VisitScalarValue(TextWriter, ScalarValue) LogEventPropertyValueVisitor<TextWriter, bool>.VisitSequenceValue(TextWriter, SequenceValue) LogEventPropertyValueVisitor<TextWriter, bool>.VisitStructureValue(TextWriter, StructureValue) LogEventPropertyValueVisitor<TextWriter, bool>.VisitDictionaryValue(TextWriter, DictionaryValue) LogEventPropertyValueVisitor<TextWriter, bool>.VisitUnsupportedValue(TextWriter, LogEventPropertyValue) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Formatting.Json Assembly: Serilog.dll Syntax public class JsonValueFormatter : LogEventPropertyValueVisitor<TextWriter, bool> Constructors JsonValueFormatter(string?) Construct a JsonFormatter. Declaration public JsonValueFormatter(string? typeTagName = \"_typeTag\") Parameters Type Name Description string typeTagName When serializing structured (object) values, the property name to use for the Serilog TypeTag field in the resulting JSON. If null, no type tag field will be written. The default is \"_typeTag\". Methods Format(LogEventPropertyValue, TextWriter) Format value as JSON to output. Declaration public void Format(LogEventPropertyValue value, TextWriter output) Parameters Type Name Description LogEventPropertyValue value The value to format TextWriter output The output FormatLiteralValue(object?, TextWriter) Write a literal as a single JSON value, e.g. as a number or string. Override to support more value types. Don't write arrays/structures through this method - the active destructuring policies have already indicated the value should be scalar at this point. Declaration protected virtual void FormatLiteralValue(object? value, TextWriter output) Parameters Type Name Description object value The value to write. TextWriter output The output VisitDictionaryValue(TextWriter, DictionaryValue) Visit a DictionaryValue value. Declaration protected override bool VisitDictionaryValue(TextWriter state, DictionaryValue dictionary) Parameters Type Name Description TextWriter state Operation state. DictionaryValue dictionary The value to visit. Returns Type Description bool The result of visiting dictionary. Overrides LogEventPropertyValueVisitor<TextWriter, bool>.VisitDictionaryValue(TextWriter, DictionaryValue) VisitScalarValue(TextWriter, ScalarValue) Visit a ScalarValue value. Declaration protected override bool VisitScalarValue(TextWriter state, ScalarValue scalar) Parameters Type Name Description TextWriter state Operation state. ScalarValue scalar The value to visit. Returns Type Description bool The result of visiting scalar. Overrides LogEventPropertyValueVisitor<TextWriter, bool>.VisitScalarValue(TextWriter, ScalarValue) Exceptions Type Condition ArgumentNullException When scalar is null VisitSequenceValue(TextWriter, SequenceValue) Visit a SequenceValue value. Declaration protected override bool VisitSequenceValue(TextWriter state, SequenceValue sequence) Parameters Type Name Description TextWriter state Operation state. SequenceValue sequence The value to visit. Returns Type Description bool The result of visiting sequence. Overrides LogEventPropertyValueVisitor<TextWriter, bool>.VisitSequenceValue(TextWriter, SequenceValue) Exceptions Type Condition ArgumentNullException When sequence is null VisitStructureValue(TextWriter, StructureValue) Visit a StructureValue value. Declaration protected override bool VisitStructureValue(TextWriter state, StructureValue structure) Parameters Type Name Description TextWriter state Operation state. StructureValue structure The value to visit. Returns Type Description bool The result of visiting structure. Overrides LogEventPropertyValueVisitor<TextWriter, bool>.VisitStructureValue(TextWriter, StructureValue) WriteQuotedJsonString(string, TextWriter) Write a valid JSON string literal, escaping as necessary. Declaration public static void WriteQuotedJsonString(string str, TextWriter output) Parameters Type Name Description string str The string value to write. TextWriter output The output."
  },
  "api/Serilog.Formatting.Json.html": {
    "href": "api/Serilog.Formatting.Json.html",
    "title": "Namespace Serilog.Formatting.Json | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Formatting.Json Classes JsonFormatter Formats log events in a simple JSON structure. Instances of this class are safe for concurrent access by multiple threads. JsonValueFormatter Converts Serilog's structured property value format into JSON."
  },
  "api/Serilog.Formatting.Raw.RawFormatter.html": {
    "href": "api/Serilog.Formatting.Raw.RawFormatter.html",
    "title": "Class RawFormatter | CodeFactory for Windows",
    "keywords": "Class RawFormatter Formats log events as a raw dump of the message template and properties. Inheritance object RawFormatter Implements ITextFormatter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Formatting.Raw Assembly: Serilog.dll Syntax [Obsolete(\"A JSON-based formatter such as `Serilog.Formatting.Compact.CompactJsonFormatter` is recommended for this task.\")] public class RawFormatter : ITextFormatter Constructors RawFormatter() Declaration public RawFormatter() Methods Format(LogEvent, TextWriter) Format the log event into the output. Declaration public void Format(LogEvent logEvent, TextWriter output) Parameters Type Name Description LogEvent logEvent The event to format. TextWriter output The output. Implements ITextFormatter"
  },
  "api/Serilog.Formatting.Raw.html": {
    "href": "api/Serilog.Formatting.Raw.html",
    "title": "Namespace Serilog.Formatting.Raw | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Formatting.Raw Classes RawFormatter Formats log events as a raw dump of the message template and properties."
  },
  "api/Serilog.Formatting.html": {
    "href": "api/Serilog.Formatting.html",
    "title": "Namespace Serilog.Formatting | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Formatting Interfaces ITextFormatter Formats log events in a textual representation."
  },
  "api/Serilog.ILogger.html": {
    "href": "api/Serilog.ILogger.html",
    "title": "Interface ILogger | CodeFactory for Windows",
    "keywords": "Interface ILogger The core Serilog logging API, used for writing log events. Namespace: Serilog Assembly: Serilog.dll Syntax public interface ILogger Remarks The methods on ILogger (and its static sibling Log) are guaranteed never to throw exceptions. Methods on all other types may. Examples var log = new LoggerConfiguration() .WriteTo.Console() .CreateLogger(); var thing = \"World\"; log.Information(\"Hello, {Thing}!\", thing); Methods BindMessageTemplate(string, object?[]?, out MessageTemplate?, out IEnumerable<LogEventProperty>?) Uses configured scalar conversion and destructuring rules to bind a set of properties to a message template. Returns false if the template or values are invalid (ILogger methods never throw exceptions). Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] bool BindMessageTemplate(string messageTemplate, object?[]? propertyValues, out MessageTemplate? parsedTemplate, out IEnumerable<LogEventProperty>? boundProperties) Parameters Type Name Description string messageTemplate Message template describing an event. object[] propertyValues Objects positionally formatted into the message template. MessageTemplate parsedTemplate The internal representation of the template, which may be used to render the boundProperties as text. IEnumerable<LogEventProperty> boundProperties Captured properties from the template and propertyValues. Returns Type Description bool Examples MessageTemplate template; IEnumerable<LogEventProperty> properties; if (Log.BindMessageTemplate(\"Hello, {Name}!\", new[] { \"World\" }, out template, out properties) { var propsByName = properties.ToDictionary(p => p.Name, p => p.Value); Console.WriteLine(template.Render(propsByName, null)); // -> \"Hello, World!\" } BindProperty(string?, object?, bool, out LogEventProperty?) Uses configured scalar conversion and destructuring rules to bind a property value to its captured representation. Declaration bool BindProperty(string? propertyName, object? value, bool destructureObjects, out LogEventProperty? property) Parameters Type Name Description string propertyName The name of the property. Must be non-empty. object value The property value. bool destructureObjects If true, the value will be serialized as a structured object if possible; if false, the object will be recorded as a scalar or simple array. LogEventProperty property The resulting property. Returns Type Description bool True if the property could be bound, otherwise false ( ILogger methods never throw exceptions). Debug(Exception?, string) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Debug(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug(Exception?, string, params object?[]?) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Debug(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug(string) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Debug(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug(string, params object?[]?) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Debug(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug<T>(Exception?, string, T) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Debug<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug<T>(string, T) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Debug<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug<T0, T1>(Exception?, string, T0, T1) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Debug<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug<T0, T1>(string, T0, T1) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Debug<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Debug<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Debug<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Error(Exception?, string) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Error(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error(Exception?, string, params object?[]?) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Error(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error(string) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Error(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error(string, params object?[]?) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Error(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T>(Exception?, string, T) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Error<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T>(string, T) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Error<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1>(Exception?, string, T0, T1) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Error<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1>(string, T0, T1) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Error<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Error<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Error<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Fatal(Exception?, string) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Fatal(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Fatal(ex, \"Process terminating.\"); Fatal(Exception?, string, params object?[]?) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Fatal(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Fatal(ex, \"Process terminating.\"); Fatal(string) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Fatal(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Fatal(\"Process terminating.\"); Fatal(string, params object?[]?) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Fatal(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Fatal(\"Process terminating.\"); Fatal<T>(Exception?, string, T) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Fatal<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Fatal(ex, \"Process terminating.\"); Fatal<T>(string, T) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Fatal<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Fatal(\"Process terminating.\"); Fatal<T0, T1>(Exception?, string, T0, T1) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Fatal<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Fatal(ex, \"Process terminating.\"); Fatal<T0, T1>(string, T0, T1) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Fatal<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Fatal(\"Process terminating.\"); Fatal<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Fatal<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Fatal(ex, \"Process terminating.\"); Fatal<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Fatal<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Fatal(\"Process terminating.\"); ForContext(ILogEventEnricher) Create a logger that enriches log events via the provided enrichers. Declaration ILogger ForContext(ILogEventEnricher enricher) Parameters Type Name Description ILogEventEnricher enricher Enricher that applies in the context. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext(IEnumerable<ILogEventEnricher>) Create a logger that enriches log events via the provided enrichers. Declaration ILogger ForContext(IEnumerable<ILogEventEnricher> enrichers) Parameters Type Name Description IEnumerable<ILogEventEnricher> enrichers Enrichers that apply in the context. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext(string, object?, bool) Create a logger that enriches log events with the specified property. Declaration ILogger ForContext(string propertyName, object? value, bool destructureObjects = false) Parameters Type Name Description string propertyName The name of the property. Must be non-empty. object value The property value. bool destructureObjects If true, the value will be serialized as a structured object if possible; if false, the object will be recorded as a scalar or simple array. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext(Type) Create a logger that marks log events as being from the specified source type. Declaration ILogger ForContext(Type source) Parameters Type Name Description Type source Type generating log messages in the context. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext<TSource>() Create a logger that marks log events as being from the specified source type. Declaration ILogger ForContext<TSource>() Returns Type Description ILogger A logger that will enrich log events as specified. Type Parameters Name Description TSource Type generating log messages in the context. Information(Exception?, string) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Information(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information(Exception?, string, params object?[]?) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Information(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information(string) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Information(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information(string, params object?[]?) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Information(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T>(Exception?, string, T) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Information<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T>(string, T) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Information<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1>(Exception?, string, T0, T1) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Information<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1>(string, T0, T1) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Information<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Information<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Information<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); IsEnabled(LogEventLevel) Determine if events at the specified level will be passed through to the log sinks. Declaration bool IsEnabled(LogEventLevel level) Parameters Type Name Description LogEventLevel level Level to check. Returns Type Description bool True if the level is enabled; otherwise, false. Verbose(Exception?, string) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Verbose(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose(Exception?, string, params object?[]?) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Verbose(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose(string) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Verbose(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose(string, params object?[]?) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Verbose(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose<T>(Exception?, string, T) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Verbose<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose<T>(string, T) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Verbose<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose<T0, T1>(Exception?, string, T0, T1) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Verbose<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose<T0, T1>(string, T0, T1) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Verbose<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Verbose<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Verbose<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Warning(Exception?, string) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Warning(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning(Exception?, string, params object?[]?) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Warning(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning(string) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Warning(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning(string, params object?[]?) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Warning(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T>(Exception?, string, T) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Warning<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T>(string, T) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Warning<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1>(Exception?, string, T0, T1) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Warning<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1>(string, T0, T1) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Warning<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Warning<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Warning<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Write(LogEvent) Write an event to the log. Declaration void Write(LogEvent logEvent) Parameters Type Name Description LogEvent logEvent The event to write. Write(LogEventLevel, Exception?, string) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Write(LogEventLevel level, Exception? exception, string messageTemplate) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. Write(LogEventLevel, Exception?, string, params object?[]?) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Write(LogEventLevel level, Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Write(LogEventLevel, string) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Write(LogEventLevel level, string messageTemplate) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. Write(LogEventLevel, string, params object?[]?) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Write(LogEventLevel level, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate object[] propertyValues Write<T>(LogEventLevel, Exception?, string, T) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Write<T>(LogEventLevel level, Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Write<T>(LogEventLevel, string, T) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Write<T>(LogEventLevel level, string messageTemplate, T propertyValue) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Write<T0, T1>(LogEventLevel, Exception?, string, T0, T1) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Write<T0, T1>(LogEventLevel level, Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Write<T0, T1>(LogEventLevel, string, T0, T1) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Write<T0, T1>(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Write<T0, T1, T2>(LogEventLevel, Exception?, string, T0, T1, T2) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Write<T0, T1, T2>(LogEventLevel level, Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Write<T0, T1, T2>(LogEventLevel, string, T0, T1, T2) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] void Write<T0, T1, T2>(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Extension Methods LoggerExtensions.ForContext<TValue>(ILogger, LogEventLevel, string, TValue, bool)"
  },
  "api/Serilog.Log.html": {
    "href": "api/Serilog.Log.html",
    "title": "Class Log | CodeFactory for Windows",
    "keywords": "Class Log An optional static entry point for logging that can be easily referenced by different parts of an application. To configure the Log set the Logger static property to a logger instance. Inheritance object Log Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog Assembly: Serilog.dll Syntax public static class Log Remarks The methods on Log (and its dynamic sibling ILogger) are guaranteed never to throw exceptions. Methods on all other types may. Examples Log.Logger = new LoggerConfiguration() .WithConsoleSink() .CreateLogger(); var thing = \"World\"; Log.Logger.Information(\"Hello, {Thing}!\", thing); Properties Logger The globally-shared logger. Declaration public static ILogger Logger { get; set; } Property Value Type Description ILogger Exceptions Type Condition ArgumentNullException When value is null Methods BindMessageTemplate(string, object?[], out MessageTemplate?, out IEnumerable<LogEventProperty>?) Uses configured scalar conversion and destructuring rules to bind a set of properties to a message template. Returns false if the template or values are invalid ( ILogger methods never throw exceptions). Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static bool BindMessageTemplate(string messageTemplate, object?[] propertyValues, out MessageTemplate? parsedTemplate, out IEnumerable<LogEventProperty>? boundProperties) Parameters Type Name Description string messageTemplate Message template describing an event. object[] propertyValues Objects positionally formatted into the message template. MessageTemplate parsedTemplate The internal representation of the template, which may be used to render the boundProperties as text. IEnumerable<LogEventProperty> boundProperties Captured properties from the template and propertyValues. Returns Type Description bool Examples MessageTemplate template; IEnumerable<LogEventProperty> properties>; if (Log.BindMessageTemplate(\"Hello, {Name}!\", new[] { \"World\" }, out template, out properties) { var propsByName = properties.ToDictionary(p => p.Name, p => p.Value); Console.WriteLine(template.Render(propsByName, null)); // -> \"Hello, World!\" } BindProperty(string, object, bool, out LogEventProperty?) Uses configured scalar conversion and destructuring rules to bind a property value to its captured representation. Declaration public static bool BindProperty(string propertyName, object value, bool destructureObjects, out LogEventProperty? property) Parameters Type Name Description string propertyName The name of the property. Must be non-empty. object value The property value. bool destructureObjects If true, the value will be serialized as a structured object if possible; if false, the object will be recorded as a scalar or simple array. LogEventProperty property The resulting property. Returns Type Description bool True if the property could be bound, otherwise false ( ILogger methods never throw exceptions). CloseAndFlush() Resets Logger to the default and disposes the original if possible Declaration public static void CloseAndFlush() Debug(Exception?, string) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Debug(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug(Exception?, string, params object?[]?) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Debug(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug(string) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Debug(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug(string, params object?[]?) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Debug(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug<T>(Exception?, string, T) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Debug<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug<T>(string, T) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Debug<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug<T0, T1>(Exception?, string, T0, T1) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Debug<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug<T0, T1>(string, T0, T1) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Debug<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Debug<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Debug level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Debug<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Debug(ex, \"Swallowing a mundane exception.\"); Debug<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Debug level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Debug<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Debug(\"Starting up at {StartedAt}.\", DateTime.Now); Error(Exception?, string) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Error(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error(Exception?, string, params object?[]?) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Error(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error(string) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Error(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error(string, params object?[]?) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Error(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T>(Exception?, string, T) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Error<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T>(string, T) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Error<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1>(Exception?, string, T0, T1) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Error<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1>(string, T0, T1) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Error<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Error level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Error<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Error(ex, \"Failed {ErrorCount} records.\", brokenRecords.Length); Error<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Error level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Error<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Error(\"Failed {ErrorCount} records.\", brokenRecords.Length); Fatal(Exception?, string) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Fatal(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Fatal(ex, \"Process terminating.\"); Fatal(Exception?, string, params object?[]?) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Fatal(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Fatal(ex, \"Process terminating.\"); Fatal(string) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Fatal(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Fatal(\"Process terminating.\"); Fatal(string, params object?[]?) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Fatal(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Fatal(\"Process terminating.\"); Fatal<T>(Exception?, string, T) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Fatal<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Fatal(ex, \"Process terminating.\"); Fatal<T>(string, T) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Fatal<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Fatal(\"Process terminating.\"); Fatal<T0, T1>(Exception?, string, T0, T1) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Fatal<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Fatal(ex, \"Process terminating.\"); Fatal<T0, T1>(string, T0, T1) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Fatal<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Fatal(\"Process terminating.\"); Fatal<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Fatal level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Fatal<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Fatal(ex, \"Process terminating.\"); Fatal<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Fatal level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Fatal<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Fatal(\"Process terminating.\"); ForContext(ILogEventEnricher) Create a logger that enriches log events via the provided enrichers. Declaration public static ILogger ForContext(ILogEventEnricher enricher) Parameters Type Name Description ILogEventEnricher enricher Enricher that applies in the context. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext(ILogEventEnricher[]) Create a logger that enriches log events via the provided enrichers. Declaration public static ILogger ForContext(ILogEventEnricher[] enrichers) Parameters Type Name Description ILogEventEnricher[] enrichers Enrichers that apply in the context. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext(string, object?, bool) Create a logger that enriches log events with the specified property. Declaration public static ILogger ForContext(string propertyName, object? value, bool destructureObjects = false) Parameters Type Name Description string propertyName object value bool destructureObjects Returns Type Description ILogger A logger that will enrich log events as specified. ForContext(Type) Create a logger that marks log events as being from the specified source type. Declaration public static ILogger ForContext(Type source) Parameters Type Name Description Type source Type generating log messages in the context. Returns Type Description ILogger A logger that will enrich log events as specified. ForContext<TSource>() Create a logger that marks log events as being from the specified source type. Declaration public static ILogger ForContext<TSource>() Returns Type Description ILogger A logger that will enrich log events as specified. Type Parameters Name Description TSource Type generating log messages in the context. Information(Exception?, string) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Information(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information(Exception?, string, params object?[]?) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Information(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information(string) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Information(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information(string, params object?[]?) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Information(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T>(Exception?, string, T) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Information<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T>(string, T) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Information<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1>(Exception?, string, T0, T1) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Information<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1>(string, T0, T1) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Information<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Information level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Information<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Information(ex, \"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); Information<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Information level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Information<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Information(\"Processed {RecordCount} records in {TimeMS}.\", records.Length, sw.ElapsedMilliseconds); IsEnabled(LogEventLevel) Determine if events at the specified level will be passed through to the log sinks. Declaration public static bool IsEnabled(LogEventLevel level) Parameters Type Name Description LogEventLevel level Level to check. Returns Type Description bool True if the level is enabled; otherwise, false. Verbose(Exception?, string) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Verbose(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose(Exception?, string, params object?[]?) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Verbose(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose(string) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Verbose(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose(string, params object?[]?) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Verbose(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose<T>(Exception?, string, T) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Verbose<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose<T>(string, T) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Verbose<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose<T0, T1>(Exception?, string, T0, T1) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Verbose<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose<T0, T1>(string, T0, T1) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Verbose<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Verbose<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Verbose level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Verbose<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Verbose(ex, \"Staring into space, wondering where this comet came from.\"); Verbose<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Verbose level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Verbose<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Verbose(\"Staring into space, wondering if we're alone.\"); Warning(Exception?, string) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Warning(Exception? exception, string messageTemplate) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning(Exception?, string, params object?[]?) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Warning(Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning(string) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Warning(string messageTemplate) Parameters Type Name Description string messageTemplate Message template describing the event. Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning(string, params object?[]?) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Warning(string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T>(Exception?, string, T) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Warning<T>(Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T>(string, T) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Warning<T>(string messageTemplate, T propertyValue) Parameters Type Name Description string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1>(Exception?, string, T0, T1) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Warning<T0, T1>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1>(string, T0, T1) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Warning<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1, T2>(Exception?, string, T0, T1, T2) Write a log event with the Warning level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Warning<T0, T1, T2>(Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Warning(ex, \"Skipped {SkipCount} records.\", skippedRecords.Length); Warning<T0, T1, T2>(string, T0, T1, T2) Write a log event with the Warning level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Warning<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Examples Log.Warning(\"Skipped {SkipCount} records.\", skippedRecords.Length); Write(LogEvent) Write an event to the log. Declaration public static void Write(LogEvent logEvent) Parameters Type Name Description LogEvent logEvent The event to write. Write(LogEventLevel, Exception?, string) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Write(LogEventLevel level, Exception? exception, string messageTemplate) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. Write(LogEventLevel, Exception?, string, params object?[]?) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Write(LogEventLevel level, Exception? exception, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Write(LogEventLevel, string) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Write(LogEventLevel level, string messageTemplate) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. Write(LogEventLevel, string, params object?[]?) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Write(LogEventLevel level, string messageTemplate, params object?[]? propertyValues) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. object[] propertyValues Objects positionally formatted into the message template. Write<T>(LogEventLevel, Exception?, string, T) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Write<T>(LogEventLevel level, Exception? exception, string messageTemplate, T propertyValue) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Write<T>(LogEventLevel, string, T) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Write<T>(LogEventLevel level, string messageTemplate, T propertyValue) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. T propertyValue Object positionally formatted into the message template. Type Parameters Name Description T Write<T0, T1>(LogEventLevel, Exception?, string, T0, T1) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Write<T0, T1>(LogEventLevel level, Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Write<T0, T1>(LogEventLevel, string, T0, T1) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Write<T0, T1>(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 Write<T0, T1, T2>(LogEventLevel, Exception?, string, T0, T1, T2) Write a log event with the specified level and associated exception. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Write<T0, T1, T2>(LogEventLevel level, Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description LogEventLevel level The level of the event. Exception exception Exception related to the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2 Write<T0, T1, T2>(LogEventLevel, string, T0, T1, T2) Write a log event with the specified level. Declaration [MessageTemplateFormatMethod(\"messageTemplate\")] public static void Write<T0, T1, T2>(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) Parameters Type Name Description LogEventLevel level The level of the event. string messageTemplate Message template describing the event. T0 propertyValue0 Object positionally formatted into the message template. T1 propertyValue1 Object positionally formatted into the message template. T2 propertyValue2 Object positionally formatted into the message template. Type Parameters Name Description T0 T1 T2"
  },
  "api/Serilog.LoggerConfiguration.html": {
    "href": "api/Serilog.LoggerConfiguration.html",
    "title": "Class LoggerConfiguration | CodeFactory for Windows",
    "keywords": "Class LoggerConfiguration Configuration object for creating ILogger instances. Inheritance object LoggerConfiguration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog Assembly: Serilog.dll Syntax public class LoggerConfiguration Constructors LoggerConfiguration() Construct a LoggerConfiguration. Declaration public LoggerConfiguration() Properties AuditTo Configures sinks for auditing, instead of regular (safe) logging. When auditing is used, exceptions from sinks and any intermediate filters propagate back to the caller. Most callers should use WriteTo instead. Declaration public LoggerAuditSinkConfiguration AuditTo { get; } Property Value Type Description LoggerAuditSinkConfiguration Remarks Not all sinks are compatible with transactional auditing requirements (many will use asynchronous batching to improve write throughput and latency). Sinks need to opt-in to auditing support by extending LoggerAuditSinkConfiguration, though the generic Sink(ILogEventSink, LogEventLevel, LoggingLevelSwitch?) method allows any sink class to be adapted for auditing. Destructure Configures destructuring of message template parameters. Declaration public LoggerDestructuringConfiguration Destructure { get; } Property Value Type Description LoggerDestructuringConfiguration Enrich Configures enrichment of LogEvents. Enrichers can add, remove and modify the properties associated with events. Declaration public LoggerEnrichmentConfiguration Enrich { get; } Property Value Type Description LoggerEnrichmentConfiguration Filter Configures global filtering of LogEvents. Declaration public LoggerFilterConfiguration Filter { get; } Property Value Type Description LoggerFilterConfiguration MinimumLevel Configures the minimum level at which events will be passed to sinks. If not specified, only events at the Information level and above will be passed through. Declaration public LoggerMinimumLevelConfiguration MinimumLevel { get; } Property Value Type Description LoggerMinimumLevelConfiguration Configuration object allowing method chaining. ReadFrom Apply external settings to the logger configuration. Declaration public LoggerSettingsConfiguration ReadFrom { get; } Property Value Type Description LoggerSettingsConfiguration WriteTo Configures the sinks that log events will be emitted to. Declaration public LoggerSinkConfiguration WriteTo { get; } Property Value Type Description LoggerSinkConfiguration Methods CreateLogger() Create a logger using the configured sinks, enrichers and minimum level. Declaration public Logger CreateLogger() Returns Type Description Logger The logger. Remarks To free resources held by sinks ahead of program shutdown, the returned logger may be cast to IDisposable and disposed. Exceptions Type Condition InvalidOperationException When the logger is already created"
  },
  "api/Serilog.LoggerExtensions.html": {
    "href": "api/Serilog.LoggerExtensions.html",
    "title": "Class LoggerExtensions | CodeFactory for Windows",
    "keywords": "Class LoggerExtensions Extends ILogger with additional methods. Inheritance object LoggerExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog Assembly: Serilog.dll Syntax public static class LoggerExtensions Methods ForContext<TValue>(ILogger, LogEventLevel, string, TValue, bool) Create a logger that enriches log events when the specified level is enabled. Declaration public static ILogger ForContext<TValue>(this ILogger logger, LogEventLevel level, string propertyName, TValue value, bool destructureObjects = false) Parameters Type Name Description ILogger logger The logger. LogEventLevel level The log event level used to determine if log is enriched with property. string propertyName The name of the property. Must be non-empty. TValue value The property value. bool destructureObjects If true, the value will be serialized as a structured object if possible; if false, the object will be recorded as a scalar or simple array. Returns Type Description ILogger A logger that will enrich log events as specified. Type Parameters Name Description TValue The type of the property value. Exceptions Type Condition ArgumentNullException When logger is null"
  },
  "api/Serilog.Parsing.Alignment.html": {
    "href": "api/Serilog.Parsing.Alignment.html",
    "title": "Struct Alignment | CodeFactory for Windows",
    "keywords": "Struct Alignment A structure representing the alignment settings to apply when rendering a property. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Serilog.Parsing Assembly: Serilog.dll Syntax public struct Alignment Constructors Alignment(AlignmentDirection, int) Initializes a new instance of Alignment. Declaration public Alignment(AlignmentDirection direction, int width) Parameters Type Name Description AlignmentDirection direction The text alignment direction. int width The width of the text, in characters. Properties Direction The text alignment direction. Declaration public readonly AlignmentDirection Direction { get; } Property Value Type Description AlignmentDirection Width The width of the text. Declaration public readonly int Width { get; } Property Value Type Description int"
  },
  "api/Serilog.Parsing.AlignmentDirection.html": {
    "href": "api/Serilog.Parsing.AlignmentDirection.html",
    "title": "Enum AlignmentDirection | CodeFactory for Windows",
    "keywords": "Enum AlignmentDirection Defines the direction of the alignment. Namespace: Serilog.Parsing Assembly: Serilog.dll Syntax public enum AlignmentDirection Fields Name Description Left Text will be left-aligned. Right Text will be right-aligned."
  },
  "api/Serilog.Parsing.Destructuring.html": {
    "href": "api/Serilog.Parsing.Destructuring.html",
    "title": "Enum Destructuring | CodeFactory for Windows",
    "keywords": "Enum Destructuring Instructs the logger on how to store information about provided parameters. Namespace: Serilog.Parsing Assembly: Serilog.dll Syntax public enum Destructuring Fields Name Description Default Convert known types and objects to scalars, arrays to sequences. Destructure Convert known types to scalars, destructure objects and collections into sequences and structures. Prefix name with '@'. Stringify Convert all types to scalar strings. Prefix name with '$'."
  },
  "api/Serilog.Parsing.MessageTemplateParser.html": {
    "href": "api/Serilog.Parsing.MessageTemplateParser.html",
    "title": "Class MessageTemplateParser | CodeFactory for Windows",
    "keywords": "Class MessageTemplateParser Parses message template strings into sequences of text or property tokens. Inheritance object MessageTemplateParser Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Parsing Assembly: Serilog.dll Syntax public class MessageTemplateParser Constructors MessageTemplateParser() Declaration public MessageTemplateParser() Methods Parse(string) Parse the supplied message template. Declaration public MessageTemplate Parse(string messageTemplate) Parameters Type Name Description string messageTemplate The message template to parse. Returns Type Description MessageTemplate A sequence of text or property tokens. Where the template is not syntactically valid, text tokens will be returned. The parser will make a best effort to extract valid property tokens even in the presence of parsing issues. Exceptions Type Condition ArgumentNullException When messageTemplate is null"
  },
  "api/Serilog.Parsing.MessageTemplateToken.html": {
    "href": "api/Serilog.Parsing.MessageTemplateToken.html",
    "title": "Class MessageTemplateToken | CodeFactory for Windows",
    "keywords": "Class MessageTemplateToken An element parsed from a message template string. Inheritance object MessageTemplateToken PropertyToken TextToken Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Serilog.Parsing Assembly: Serilog.dll Syntax public abstract class MessageTemplateToken Constructors MessageTemplateToken(int) Construct a MessageTemplateToken. Declaration protected MessageTemplateToken(int startIndex) Parameters Type Name Description int startIndex The token's start index in the template. Properties Length The token's length. Declaration public abstract int Length { get; } Property Value Type Description int StartIndex The token's start index in the template. Declaration public int StartIndex { get; } Property Value Type Description int Methods Render(IReadOnlyDictionary<string, LogEventPropertyValue>, TextWriter, IFormatProvider?) Render the token to the output. Declaration public abstract void Render(IReadOnlyDictionary<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider? formatProvider = null) Parameters Type Name Description IReadOnlyDictionary<string, LogEventPropertyValue> properties Properties that may be represented by the token. TextWriter output Output for the rendered string. IFormatProvider formatProvider Supplies culture-specific formatting information, or null."
  },
  "api/Serilog.Parsing.PropertyToken.html": {
    "href": "api/Serilog.Parsing.PropertyToken.html",
    "title": "Class PropertyToken | CodeFactory for Windows",
    "keywords": "Class PropertyToken A message template token representing a log event property. Inheritance object MessageTemplateToken PropertyToken Inherited Members MessageTemplateToken.StartIndex object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Serilog.Parsing Assembly: Serilog.dll Syntax public sealed class PropertyToken : MessageTemplateToken Constructors PropertyToken(string, string, string?, Alignment?, Destructuring, int) Construct a PropertyToken. Declaration public PropertyToken(string propertyName, string rawText, string? format = null, Alignment? alignment = null, Destructuring destructuring = Destructuring.Default, int startIndex = -1) Parameters Type Name Description string propertyName The name of the property. string rawText The token as it appears in the message template. string format The format applied to the property, if any. Alignment? alignment The alignment applied to the property, if any. Destructuring destructuring The destructuring strategy applied to the property, if any. int startIndex The token's start index in the template. Exceptions Type Condition ArgumentNullException When propertyName is null ArgumentNullException When rawText is null Properties Alignment Alignment applied to the property. Declaration public Alignment? Alignment { get; } Property Value Type Description Alignment? Destructuring Destructuring strategy applied to the property. Declaration public Destructuring Destructuring { get; } Property Value Type Description Destructuring Format Format applied to the property. Declaration public string? Format { get; } Property Value Type Description string IsPositional True if the property name is a positional index; otherwise, false. Declaration public bool IsPositional { get; } Property Value Type Description bool Length The token's length. Declaration public override int Length { get; } Property Value Type Description int Overrides MessageTemplateToken.Length PropertyName The property name. Declaration public string PropertyName { get; } Property Value Type Description string Methods Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() Render(IReadOnlyDictionary<string, LogEventPropertyValue>, TextWriter, IFormatProvider?) Render the token to the output. Declaration public override void Render(IReadOnlyDictionary<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider? formatProvider = null) Parameters Type Name Description IReadOnlyDictionary<string, LogEventPropertyValue> properties Properties that may be represented by the token. TextWriter output Output for the rendered string. IFormatProvider formatProvider Supplies culture-specific formatting information, or null. Overrides MessageTemplateToken.Render(IReadOnlyDictionary<string, LogEventPropertyValue>, TextWriter, IFormatProvider?) Exceptions Type Condition ArgumentNullException When properties is null ArgumentNullException When output is null ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() TryGetPositionalValue(out int) Try to get the integer value represented by the property name. Declaration public bool TryGetPositionalValue(out int position) Parameters Type Name Description int position The integer value, if present. Returns Type Description bool True if the property is positional, otherwise false."
  },
  "api/Serilog.Parsing.TextToken.html": {
    "href": "api/Serilog.Parsing.TextToken.html",
    "title": "Class TextToken | CodeFactory for Windows",
    "keywords": "Class TextToken A message template token representing literal text. Inheritance object MessageTemplateToken TextToken Inherited Members MessageTemplateToken.StartIndex object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Serilog.Parsing Assembly: Serilog.dll Syntax public sealed class TextToken : MessageTemplateToken Constructors TextToken(string, int) Construct a TextToken. Declaration public TextToken(string text, int startIndex = -1) Parameters Type Name Description string text The text of the token. int startIndex The token's start index in the template. Exceptions Type Condition ArgumentNullException When text is null Properties Length The token's length. Declaration public override int Length { get; } Property Value Type Description int Overrides MessageTemplateToken.Length Text The text of the token. Declaration public string Text { get; } Property Value Type Description string Methods Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() Render(IReadOnlyDictionary<string, LogEventPropertyValue>, TextWriter, IFormatProvider?) Render the token to the output. Declaration public override void Render(IReadOnlyDictionary<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider? formatProvider = null) Parameters Type Name Description IReadOnlyDictionary<string, LogEventPropertyValue> properties Properties that may be represented by the token. TextWriter output Output for the rendered string. IFormatProvider formatProvider Supplies culture-specific formatting information, or null. Overrides MessageTemplateToken.Render(IReadOnlyDictionary<string, LogEventPropertyValue>, TextWriter, IFormatProvider?) Exceptions Type Condition ArgumentNullException When output is null ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "api/Serilog.Parsing.html": {
    "href": "api/Serilog.Parsing.html",
    "title": "Namespace Serilog.Parsing | CodeFactory for Windows",
    "keywords": "Namespace Serilog.Parsing Classes MessageTemplateParser Parses message template strings into sequences of text or property tokens. MessageTemplateToken An element parsed from a message template string. PropertyToken A message template token representing a log event property. TextToken A message template token representing literal text. Structs Alignment A structure representing the alignment settings to apply when rendering a property. Enums AlignmentDirection Defines the direction of the alignment. Destructuring Instructs the logger on how to store information about provided parameters."
  },
  "api/Serilog.html": {
    "href": "api/Serilog.html",
    "title": "Namespace Serilog | CodeFactory for Windows",
    "keywords": "Namespace Serilog Classes Log An optional static entry point for logging that can be easily referenced by different parts of an application. To configure the Log set the Logger static property to a logger instance. LoggerConfiguration Configuration object for creating ILogger instances. LoggerExtensions Extends ILogger with additional methods. Interfaces ILogger The core Serilog logging API, used for writing log events."
  },
  "api/System.Buffers.ArrayPool-1.html": {
    "href": "api/System.Buffers.ArrayPool-1.html",
    "title": "Class ArrayPool<T> | CodeFactory for Windows",
    "keywords": "Class ArrayPool<T> Provides a resource pool that enables reusing instances of type . Inheritance object ArrayPool<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Buffers Assembly: System.Buffers.dll Syntax public abstract class ArrayPool<T> Type Parameters Name Description T The type of the objects that are in the resource pool. Constructors ArrayPool() Initializes a new instance of the ArrayPool<T> class. Declaration protected ArrayPool() Properties Shared Gets a shared ArrayPool<T> instance. Declaration public static ArrayPool<T> Shared { get; } Property Value Type Description ArrayPool<T> A shared instance. Methods Create() Creates a new instance of the ArrayPool<T> class. Declaration public static ArrayPool<T> Create() Returns Type Description ArrayPool<T> A new instance of the class. Create(int, int) Creates a new instance of the ArrayPool<T> class using the specifed configuration. Declaration public static ArrayPool<T> Create(int maxArrayLength, int maxArraysPerBucket) Parameters Type Name Description int maxArrayLength The maximum length of an array instance that may be stored in the pool. int maxArraysPerBucket The maximum number of array instances that may be stored in each bucket in the pool. The pool groups arrays of similar lengths into buckets for faster access. Returns Type Description ArrayPool<T> A new instance of the class with the specified configuration. Rent(int) Retrieves a buffer that is at least the requested length. Declaration public abstract T[] Rent(int minimumLength) Parameters Type Name Description int minimumLength The minimum length of the array. Returns Type Description T[] An array of type that is at least minimumLength in length. Return(T[], bool) Returns an array to the pool that was previously obtained using the Rent(int) method on the same ArrayPool<T> instance. Declaration public abstract void Return(T[] array, bool clearArray = false) Parameters Type Name Description T[] array A buffer to return to the pool that was previously obtained using the Rent(int) method. bool clearArray Indicates whether the contents of the buffer should be cleared before reuse. If clearArray is set to true, and if the pool will store the buffer to enable subsequent reuse, the Return(T[], bool) method will clear the array of its contents so that a subsequent caller using the Rent(int) method will not see the content of the previous caller. If clearArray is set to false or if the pool will release the buffer, the array&#39;s contents are left unchanged."
  },
  "api/System.Buffers.Binary.BinaryPrimitives.html": {
    "href": "api/System.Buffers.Binary.BinaryPrimitives.html",
    "title": "Class BinaryPrimitives | CodeFactory for Windows",
    "keywords": "Class BinaryPrimitives Inheritance object BinaryPrimitives Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Buffers.Binary Assembly: System.Memory.dll Syntax public static class BinaryPrimitives Methods ReadInt16BigEndian(ReadOnlySpan<byte>) Declaration public static short ReadInt16BigEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description short ReadInt16LittleEndian(ReadOnlySpan<byte>) Declaration public static short ReadInt16LittleEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description short ReadInt32BigEndian(ReadOnlySpan<byte>) Declaration public static int ReadInt32BigEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description int ReadInt32LittleEndian(ReadOnlySpan<byte>) Declaration public static int ReadInt32LittleEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description int ReadInt64BigEndian(ReadOnlySpan<byte>) Declaration public static long ReadInt64BigEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description long ReadInt64LittleEndian(ReadOnlySpan<byte>) Declaration public static long ReadInt64LittleEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description long ReadUInt16BigEndian(ReadOnlySpan<byte>) Declaration [CLSCompliant(false)] public static ushort ReadUInt16BigEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description ushort ReadUInt16LittleEndian(ReadOnlySpan<byte>) Declaration [CLSCompliant(false)] public static ushort ReadUInt16LittleEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description ushort ReadUInt32BigEndian(ReadOnlySpan<byte>) Declaration [CLSCompliant(false)] public static uint ReadUInt32BigEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description uint ReadUInt32LittleEndian(ReadOnlySpan<byte>) Declaration [CLSCompliant(false)] public static uint ReadUInt32LittleEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description uint ReadUInt64BigEndian(ReadOnlySpan<byte>) Declaration [CLSCompliant(false)] public static ulong ReadUInt64BigEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description ulong ReadUInt64LittleEndian(ReadOnlySpan<byte>) Declaration [CLSCompliant(false)] public static ulong ReadUInt64LittleEndian(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description ulong ReverseEndianness(byte) Declaration public static byte ReverseEndianness(byte value) Parameters Type Name Description byte value Returns Type Description byte ReverseEndianness(short) Declaration public static short ReverseEndianness(short value) Parameters Type Name Description short value Returns Type Description short ReverseEndianness(int) Declaration public static int ReverseEndianness(int value) Parameters Type Name Description int value Returns Type Description int ReverseEndianness(long) Declaration public static long ReverseEndianness(long value) Parameters Type Name Description long value Returns Type Description long ReverseEndianness(sbyte) Declaration [CLSCompliant(false)] public static sbyte ReverseEndianness(sbyte value) Parameters Type Name Description sbyte value Returns Type Description sbyte ReverseEndianness(ushort) Declaration [CLSCompliant(false)] public static ushort ReverseEndianness(ushort value) Parameters Type Name Description ushort value Returns Type Description ushort ReverseEndianness(uint) Declaration [CLSCompliant(false)] public static uint ReverseEndianness(uint value) Parameters Type Name Description uint value Returns Type Description uint ReverseEndianness(ulong) Declaration [CLSCompliant(false)] public static ulong ReverseEndianness(ulong value) Parameters Type Name Description ulong value Returns Type Description ulong TryReadInt16BigEndian(ReadOnlySpan<byte>, out short) Declaration public static bool TryReadInt16BigEndian(ReadOnlySpan<byte> source, out short value) Parameters Type Name Description ReadOnlySpan<byte> source short value Returns Type Description bool TryReadInt16LittleEndian(ReadOnlySpan<byte>, out short) Declaration public static bool TryReadInt16LittleEndian(ReadOnlySpan<byte> source, out short value) Parameters Type Name Description ReadOnlySpan<byte> source short value Returns Type Description bool TryReadInt32BigEndian(ReadOnlySpan<byte>, out int) Declaration public static bool TryReadInt32BigEndian(ReadOnlySpan<byte> source, out int value) Parameters Type Name Description ReadOnlySpan<byte> source int value Returns Type Description bool TryReadInt32LittleEndian(ReadOnlySpan<byte>, out int) Declaration public static bool TryReadInt32LittleEndian(ReadOnlySpan<byte> source, out int value) Parameters Type Name Description ReadOnlySpan<byte> source int value Returns Type Description bool TryReadInt64BigEndian(ReadOnlySpan<byte>, out long) Declaration public static bool TryReadInt64BigEndian(ReadOnlySpan<byte> source, out long value) Parameters Type Name Description ReadOnlySpan<byte> source long value Returns Type Description bool TryReadInt64LittleEndian(ReadOnlySpan<byte>, out long) Declaration public static bool TryReadInt64LittleEndian(ReadOnlySpan<byte> source, out long value) Parameters Type Name Description ReadOnlySpan<byte> source long value Returns Type Description bool TryReadUInt16BigEndian(ReadOnlySpan<byte>, out ushort) Declaration [CLSCompliant(false)] public static bool TryReadUInt16BigEndian(ReadOnlySpan<byte> source, out ushort value) Parameters Type Name Description ReadOnlySpan<byte> source ushort value Returns Type Description bool TryReadUInt16LittleEndian(ReadOnlySpan<byte>, out ushort) Declaration [CLSCompliant(false)] public static bool TryReadUInt16LittleEndian(ReadOnlySpan<byte> source, out ushort value) Parameters Type Name Description ReadOnlySpan<byte> source ushort value Returns Type Description bool TryReadUInt32BigEndian(ReadOnlySpan<byte>, out uint) Declaration [CLSCompliant(false)] public static bool TryReadUInt32BigEndian(ReadOnlySpan<byte> source, out uint value) Parameters Type Name Description ReadOnlySpan<byte> source uint value Returns Type Description bool TryReadUInt32LittleEndian(ReadOnlySpan<byte>, out uint) Declaration [CLSCompliant(false)] public static bool TryReadUInt32LittleEndian(ReadOnlySpan<byte> source, out uint value) Parameters Type Name Description ReadOnlySpan<byte> source uint value Returns Type Description bool TryReadUInt64BigEndian(ReadOnlySpan<byte>, out ulong) Declaration [CLSCompliant(false)] public static bool TryReadUInt64BigEndian(ReadOnlySpan<byte> source, out ulong value) Parameters Type Name Description ReadOnlySpan<byte> source ulong value Returns Type Description bool TryReadUInt64LittleEndian(ReadOnlySpan<byte>, out ulong) Declaration [CLSCompliant(false)] public static bool TryReadUInt64LittleEndian(ReadOnlySpan<byte> source, out ulong value) Parameters Type Name Description ReadOnlySpan<byte> source ulong value Returns Type Description bool TryWriteInt16BigEndian(Span<byte>, short) Declaration public static bool TryWriteInt16BigEndian(Span<byte> destination, short value) Parameters Type Name Description Span<byte> destination short value Returns Type Description bool TryWriteInt16LittleEndian(Span<byte>, short) Declaration public static bool TryWriteInt16LittleEndian(Span<byte> destination, short value) Parameters Type Name Description Span<byte> destination short value Returns Type Description bool TryWriteInt32BigEndian(Span<byte>, int) Declaration public static bool TryWriteInt32BigEndian(Span<byte> destination, int value) Parameters Type Name Description Span<byte> destination int value Returns Type Description bool TryWriteInt32LittleEndian(Span<byte>, int) Declaration public static bool TryWriteInt32LittleEndian(Span<byte> destination, int value) Parameters Type Name Description Span<byte> destination int value Returns Type Description bool TryWriteInt64BigEndian(Span<byte>, long) Declaration public static bool TryWriteInt64BigEndian(Span<byte> destination, long value) Parameters Type Name Description Span<byte> destination long value Returns Type Description bool TryWriteInt64LittleEndian(Span<byte>, long) Declaration public static bool TryWriteInt64LittleEndian(Span<byte> destination, long value) Parameters Type Name Description Span<byte> destination long value Returns Type Description bool TryWriteUInt16BigEndian(Span<byte>, ushort) Declaration [CLSCompliant(false)] public static bool TryWriteUInt16BigEndian(Span<byte> destination, ushort value) Parameters Type Name Description Span<byte> destination ushort value Returns Type Description bool TryWriteUInt16LittleEndian(Span<byte>, ushort) Declaration [CLSCompliant(false)] public static bool TryWriteUInt16LittleEndian(Span<byte> destination, ushort value) Parameters Type Name Description Span<byte> destination ushort value Returns Type Description bool TryWriteUInt32BigEndian(Span<byte>, uint) Declaration [CLSCompliant(false)] public static bool TryWriteUInt32BigEndian(Span<byte> destination, uint value) Parameters Type Name Description Span<byte> destination uint value Returns Type Description bool TryWriteUInt32LittleEndian(Span<byte>, uint) Declaration [CLSCompliant(false)] public static bool TryWriteUInt32LittleEndian(Span<byte> destination, uint value) Parameters Type Name Description Span<byte> destination uint value Returns Type Description bool TryWriteUInt64BigEndian(Span<byte>, ulong) Declaration [CLSCompliant(false)] public static bool TryWriteUInt64BigEndian(Span<byte> destination, ulong value) Parameters Type Name Description Span<byte> destination ulong value Returns Type Description bool TryWriteUInt64LittleEndian(Span<byte>, ulong) Declaration [CLSCompliant(false)] public static bool TryWriteUInt64LittleEndian(Span<byte> destination, ulong value) Parameters Type Name Description Span<byte> destination ulong value Returns Type Description bool WriteInt16BigEndian(Span<byte>, short) Declaration public static void WriteInt16BigEndian(Span<byte> destination, short value) Parameters Type Name Description Span<byte> destination short value WriteInt16LittleEndian(Span<byte>, short) Declaration public static void WriteInt16LittleEndian(Span<byte> destination, short value) Parameters Type Name Description Span<byte> destination short value WriteInt32BigEndian(Span<byte>, int) Declaration public static void WriteInt32BigEndian(Span<byte> destination, int value) Parameters Type Name Description Span<byte> destination int value WriteInt32LittleEndian(Span<byte>, int) Declaration public static void WriteInt32LittleEndian(Span<byte> destination, int value) Parameters Type Name Description Span<byte> destination int value WriteInt64BigEndian(Span<byte>, long) Declaration public static void WriteInt64BigEndian(Span<byte> destination, long value) Parameters Type Name Description Span<byte> destination long value WriteInt64LittleEndian(Span<byte>, long) Declaration public static void WriteInt64LittleEndian(Span<byte> destination, long value) Parameters Type Name Description Span<byte> destination long value WriteUInt16BigEndian(Span<byte>, ushort) Declaration [CLSCompliant(false)] public static void WriteUInt16BigEndian(Span<byte> destination, ushort value) Parameters Type Name Description Span<byte> destination ushort value WriteUInt16LittleEndian(Span<byte>, ushort) Declaration [CLSCompliant(false)] public static void WriteUInt16LittleEndian(Span<byte> destination, ushort value) Parameters Type Name Description Span<byte> destination ushort value WriteUInt32BigEndian(Span<byte>, uint) Declaration [CLSCompliant(false)] public static void WriteUInt32BigEndian(Span<byte> destination, uint value) Parameters Type Name Description Span<byte> destination uint value WriteUInt32LittleEndian(Span<byte>, uint) Declaration [CLSCompliant(false)] public static void WriteUInt32LittleEndian(Span<byte> destination, uint value) Parameters Type Name Description Span<byte> destination uint value WriteUInt64BigEndian(Span<byte>, ulong) Declaration [CLSCompliant(false)] public static void WriteUInt64BigEndian(Span<byte> destination, ulong value) Parameters Type Name Description Span<byte> destination ulong value WriteUInt64LittleEndian(Span<byte>, ulong) Declaration [CLSCompliant(false)] public static void WriteUInt64LittleEndian(Span<byte> destination, ulong value) Parameters Type Name Description Span<byte> destination ulong value"
  },
  "api/System.Buffers.Binary.html": {
    "href": "api/System.Buffers.Binary.html",
    "title": "Namespace System.Buffers.Binary | CodeFactory for Windows",
    "keywords": "Namespace System.Buffers.Binary Classes BinaryPrimitives"
  },
  "api/System.Buffers.BuffersExtensions.html": {
    "href": "api/System.Buffers.BuffersExtensions.html",
    "title": "Class BuffersExtensions | CodeFactory for Windows",
    "keywords": "Class BuffersExtensions Inheritance object BuffersExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Buffers Assembly: System.Memory.dll Syntax public static class BuffersExtensions Methods CopyTo<T>(in ReadOnlySequence<T>, Span<T>) Declaration public static void CopyTo<T>(this in ReadOnlySequence<T> source, Span<T> destination) Parameters Type Name Description ReadOnlySequence<T> source Span<T> destination Type Parameters Name Description T PositionOf<T>(in ReadOnlySequence<T>, T) Declaration public static SequencePosition? PositionOf<T>(this in ReadOnlySequence<T> source, T value) where T : IEquatable<T> Parameters Type Name Description ReadOnlySequence<T> source T value Returns Type Description SequencePosition? Type Parameters Name Description T ToArray<T>(in ReadOnlySequence<T>) Declaration public static T[] ToArray<T>(this in ReadOnlySequence<T> sequence) Parameters Type Name Description ReadOnlySequence<T> sequence Returns Type Description T[] Type Parameters Name Description T Write<T>(IBufferWriter<T>, ReadOnlySpan<T>) Declaration public static void Write<T>(this IBufferWriter<T> writer, ReadOnlySpan<T> value) Parameters Type Name Description IBufferWriter<T> writer ReadOnlySpan<T> value Type Parameters Name Description T"
  },
  "api/System.Buffers.IBufferWriter-1.html": {
    "href": "api/System.Buffers.IBufferWriter-1.html",
    "title": "Interface IBufferWriter<T> | CodeFactory for Windows",
    "keywords": "Interface IBufferWriter<T> Namespace: System.Buffers Assembly: System.Memory.dll Syntax public interface IBufferWriter<T> Type Parameters Name Description T Methods Advance(int) Declaration void Advance(int count) Parameters Type Name Description int count GetMemory(int) Declaration Memory<T> GetMemory(int sizeHint = 0) Parameters Type Name Description int sizeHint Returns Type Description Memory<T> GetSpan(int) Declaration Span<T> GetSpan(int sizeHint = 0) Parameters Type Name Description int sizeHint Returns Type Description Span<T> Extension Methods BuffersExtensions.Write<T>(IBufferWriter<T>, ReadOnlySpan<T>)"
  },
  "api/System.Buffers.IMemoryOwner-1.html": {
    "href": "api/System.Buffers.IMemoryOwner-1.html",
    "title": "Interface IMemoryOwner<T> | CodeFactory for Windows",
    "keywords": "Interface IMemoryOwner<T> Inherited Members IDisposable.Dispose() Namespace: System.Buffers Assembly: System.Memory.dll Syntax public interface IMemoryOwner<T> : IDisposable Type Parameters Name Description T Properties Memory Declaration Memory<T> Memory { get; } Property Value Type Description Memory<T>"
  },
  "api/System.Buffers.IPinnable.html": {
    "href": "api/System.Buffers.IPinnable.html",
    "title": "Interface IPinnable | CodeFactory for Windows",
    "keywords": "Interface IPinnable Namespace: System.Buffers Assembly: System.Memory.dll Syntax public interface IPinnable Methods Pin(int) Declaration MemoryHandle Pin(int elementIndex) Parameters Type Name Description int elementIndex Returns Type Description MemoryHandle Unpin() Declaration void Unpin()"
  },
  "api/System.Buffers.MemoryHandle.html": {
    "href": "api/System.Buffers.MemoryHandle.html",
    "title": "Struct MemoryHandle | CodeFactory for Windows",
    "keywords": "Struct MemoryHandle Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Buffers Assembly: System.Memory.dll Syntax public struct MemoryHandle : IDisposable Constructors MemoryHandle(void*, GCHandle, IPinnable) Declaration [CLSCompliant(false)] public MemoryHandle(void* pointer, GCHandle handle = default, IPinnable pinnable = null) Parameters Type Name Description void* pointer GCHandle handle IPinnable pinnable Properties Pointer Declaration [CLSCompliant(false)] public void* Pointer { get; } Property Value Type Description void* Methods Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "api/System.Buffers.MemoryManager-1.html": {
    "href": "api/System.Buffers.MemoryManager-1.html",
    "title": "Class MemoryManager<T> | CodeFactory for Windows",
    "keywords": "Class MemoryManager<T> Inheritance object MemoryManager<T> Implements IMemoryOwner<T> IDisposable IPinnable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Buffers Assembly: System.Memory.dll Syntax public abstract class MemoryManager<T> : IMemoryOwner<T>, IDisposable, IPinnable Type Parameters Name Description T Constructors MemoryManager() Declaration protected MemoryManager() Properties Memory Declaration public virtual Memory<T> Memory { get; } Property Value Type Description Memory<T> Methods CreateMemory(int) Declaration protected Memory<T> CreateMemory(int length) Parameters Type Name Description int length Returns Type Description Memory<T> CreateMemory(int, int) Declaration protected Memory<T> CreateMemory(int start, int length) Parameters Type Name Description int start int length Returns Type Description Memory<T> Dispose(bool) Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description bool disposing GetSpan() Declaration public abstract Span<T> GetSpan() Returns Type Description Span<T> Pin(int) Declaration public abstract MemoryHandle Pin(int elementIndex = 0) Parameters Type Name Description int elementIndex Returns Type Description MemoryHandle TryGetArray(out ArraySegment<T>) Declaration protected virtual bool TryGetArray(out ArraySegment<T> segment) Parameters Type Name Description ArraySegment<T> segment Returns Type Description bool Unpin() Declaration public abstract void Unpin() Implements IMemoryOwner<T> IDisposable IPinnable"
  },
  "api/System.Buffers.MemoryPool-1.html": {
    "href": "api/System.Buffers.MemoryPool-1.html",
    "title": "Class MemoryPool<T> | CodeFactory for Windows",
    "keywords": "Class MemoryPool<T> Inheritance object MemoryPool<T> Implements IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Buffers Assembly: System.Memory.dll Syntax public abstract class MemoryPool<T> : IDisposable Type Parameters Name Description T Constructors MemoryPool() Declaration protected MemoryPool() Properties MaxBufferSize Declaration public abstract int MaxBufferSize { get; } Property Value Type Description int Shared Declaration public static MemoryPool<T> Shared { get; } Property Value Type Description MemoryPool<T> Methods Dispose() Declaration public void Dispose() Dispose(bool) Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description bool disposing Rent(int) Declaration public abstract IMemoryOwner<T> Rent(int minBufferSize = -1) Parameters Type Name Description int minBufferSize Returns Type Description IMemoryOwner<T> Implements IDisposable"
  },
  "api/System.Buffers.OperationStatus.html": {
    "href": "api/System.Buffers.OperationStatus.html",
    "title": "Enum OperationStatus | CodeFactory for Windows",
    "keywords": "Enum OperationStatus Namespace: System.Buffers Assembly: System.Memory.dll Syntax public enum OperationStatus Fields Name Description DestinationTooSmall Done InvalidData NeedMoreData"
  },
  "api/System.Buffers.ReadOnlySequence-1.Enumerator.html": {
    "href": "api/System.Buffers.ReadOnlySequence-1.Enumerator.html",
    "title": "Struct ReadOnlySequence<T>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ReadOnlySequence<T>.Enumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Buffers Assembly: System.Memory.dll Syntax public struct ReadOnlySequence<T>.Enumerator Constructors Enumerator(in ReadOnlySequence<T>) Declaration public Enumerator(in ReadOnlySequence<T> sequence) Parameters Type Name Description ReadOnlySequence<T> sequence Properties Current Declaration public ReadOnlyMemory<T> Current { get; } Property Value Type Description ReadOnlyMemory<T> Methods MoveNext() Declaration public bool MoveNext() Returns Type Description bool"
  },
  "api/System.Buffers.ReadOnlySequence-1.html": {
    "href": "api/System.Buffers.ReadOnlySequence-1.html",
    "title": "Struct ReadOnlySequence<T> | CodeFactory for Windows",
    "keywords": "Struct ReadOnlySequence<T> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Buffers Assembly: System.Memory.dll Syntax public readonly struct ReadOnlySequence<T> Type Parameters Name Description T Constructors ReadOnlySequence(ReadOnlySequenceSegment<T>, int, ReadOnlySequenceSegment<T>, int) Declaration public ReadOnlySequence(ReadOnlySequenceSegment<T> startSegment, int startIndex, ReadOnlySequenceSegment<T> endSegment, int endIndex) Parameters Type Name Description ReadOnlySequenceSegment<T> startSegment int startIndex ReadOnlySequenceSegment<T> endSegment int endIndex ReadOnlySequence(ReadOnlyMemory<T>) Declaration public ReadOnlySequence(ReadOnlyMemory<T> memory) Parameters Type Name Description ReadOnlyMemory<T> memory ReadOnlySequence(T[]) Declaration public ReadOnlySequence(T[] array) Parameters Type Name Description T[] array ReadOnlySequence(T[], int, int) Declaration public ReadOnlySequence(T[] array, int start, int length) Parameters Type Name Description T[] array int start int length Fields Empty Declaration public static readonly ReadOnlySequence<T> Empty Field Value Type Description ReadOnlySequence<T> Properties End Declaration public SequencePosition End { get; } Property Value Type Description SequencePosition First Declaration public ReadOnlyMemory<T> First { get; } Property Value Type Description ReadOnlyMemory<T> IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description bool IsSingleSegment Declaration public bool IsSingleSegment { get; } Property Value Type Description bool Length Declaration public long Length { get; } Property Value Type Description long Start Declaration public SequencePosition Start { get; } Property Value Type Description SequencePosition Methods GetEnumerator() Declaration public ReadOnlySequence<T>.Enumerator GetEnumerator() Returns Type Description ReadOnlySequence<T>.Enumerator GetPosition(long) Declaration public SequencePosition GetPosition(long offset) Parameters Type Name Description long offset Returns Type Description SequencePosition GetPosition(long, SequencePosition) Declaration public SequencePosition GetPosition(long offset, SequencePosition origin) Parameters Type Name Description long offset SequencePosition origin Returns Type Description SequencePosition Slice(int, int) Declaration public ReadOnlySequence<T> Slice(int start, int length) Parameters Type Name Description int start int length Returns Type Description ReadOnlySequence<T> Slice(int, SequencePosition) Declaration public ReadOnlySequence<T> Slice(int start, SequencePosition end) Parameters Type Name Description int start SequencePosition end Returns Type Description ReadOnlySequence<T> Slice(long) Declaration public ReadOnlySequence<T> Slice(long start) Parameters Type Name Description long start Returns Type Description ReadOnlySequence<T> Slice(long, long) Declaration public ReadOnlySequence<T> Slice(long start, long length) Parameters Type Name Description long start long length Returns Type Description ReadOnlySequence<T> Slice(long, SequencePosition) Declaration public ReadOnlySequence<T> Slice(long start, SequencePosition end) Parameters Type Name Description long start SequencePosition end Returns Type Description ReadOnlySequence<T> Slice(SequencePosition) Declaration public ReadOnlySequence<T> Slice(SequencePosition start) Parameters Type Name Description SequencePosition start Returns Type Description ReadOnlySequence<T> Slice(SequencePosition, int) Declaration public ReadOnlySequence<T> Slice(SequencePosition start, int length) Parameters Type Name Description SequencePosition start int length Returns Type Description ReadOnlySequence<T> Slice(SequencePosition, long) Declaration public ReadOnlySequence<T> Slice(SequencePosition start, long length) Parameters Type Name Description SequencePosition start long length Returns Type Description ReadOnlySequence<T> Slice(SequencePosition, SequencePosition) Declaration public ReadOnlySequence<T> Slice(SequencePosition start, SequencePosition end) Parameters Type Name Description SequencePosition start SequencePosition end Returns Type Description ReadOnlySequence<T> ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() TryGet(ref SequencePosition, out ReadOnlyMemory<T>, bool) Declaration public bool TryGet(ref SequencePosition position, out ReadOnlyMemory<T> memory, bool advance = true) Parameters Type Name Description SequencePosition position ReadOnlyMemory<T> memory bool advance Returns Type Description bool Extension Methods BuffersExtensions.CopyTo<T>(in ReadOnlySequence<T>, Span<T>) BuffersExtensions.ToArray<T>(in ReadOnlySequence<T>)"
  },
  "api/System.Buffers.ReadOnlySequenceSegment-1.html": {
    "href": "api/System.Buffers.ReadOnlySequenceSegment-1.html",
    "title": "Class ReadOnlySequenceSegment<T> | CodeFactory for Windows",
    "keywords": "Class ReadOnlySequenceSegment<T> Inheritance object ReadOnlySequenceSegment<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Buffers Assembly: System.Memory.dll Syntax public abstract class ReadOnlySequenceSegment<T> Type Parameters Name Description T Constructors ReadOnlySequenceSegment() Declaration protected ReadOnlySequenceSegment() Properties Memory Declaration public ReadOnlyMemory<T> Memory { get; protected set; } Property Value Type Description ReadOnlyMemory<T> Next Declaration public ReadOnlySequenceSegment<T> Next { get; protected set; } Property Value Type Description ReadOnlySequenceSegment<T> RunningIndex Declaration public long RunningIndex { get; protected set; } Property Value Type Description long"
  },
  "api/System.Buffers.StandardFormat.html": {
    "href": "api/System.Buffers.StandardFormat.html",
    "title": "Struct StandardFormat | CodeFactory for Windows",
    "keywords": "Struct StandardFormat Implements IEquatable<StandardFormat> Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Buffers Assembly: System.Memory.dll Syntax public readonly struct StandardFormat : IEquatable<StandardFormat> Constructors StandardFormat(char, byte) Declaration public StandardFormat(char symbol, byte precision = 255) Parameters Type Name Description char symbol byte precision Fields MaxPrecision Declaration public const byte MaxPrecision = 99 Field Value Type Description byte NoPrecision Declaration public const byte NoPrecision = 255 Field Value Type Description byte Properties HasPrecision Declaration public bool HasPrecision { get; } Property Value Type Description bool IsDefault Declaration public bool IsDefault { get; } Property Value Type Description bool Precision Declaration public byte Precision { get; } Property Value Type Description byte Symbol Declaration public char Symbol { get; } Property Value Type Description char Methods Equals(StandardFormat) Declaration public bool Equals(StandardFormat other) Parameters Type Name Description StandardFormat other Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Parse(ReadOnlySpan<char>) Declaration public static StandardFormat Parse(ReadOnlySpan<char> format) Parameters Type Name Description ReadOnlySpan<char> format Returns Type Description StandardFormat Parse(string) Declaration public static StandardFormat Parse(string format) Parameters Type Name Description string format Returns Type Description StandardFormat ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators operator ==(StandardFormat, StandardFormat) Declaration public static bool operator ==(StandardFormat left, StandardFormat right) Parameters Type Name Description StandardFormat left StandardFormat right Returns Type Description bool implicit operator StandardFormat(char) Declaration public static implicit operator StandardFormat(char symbol) Parameters Type Name Description char symbol Returns Type Description StandardFormat operator !=(StandardFormat, StandardFormat) Declaration public static bool operator !=(StandardFormat left, StandardFormat right) Parameters Type Name Description StandardFormat left StandardFormat right Returns Type Description bool Implements IEquatable<T>"
  },
  "api/System.Buffers.Text.Base64.html": {
    "href": "api/System.Buffers.Text.Base64.html",
    "title": "Class Base64 | CodeFactory for Windows",
    "keywords": "Class Base64 Inheritance object Base64 Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Buffers.Text Assembly: System.Memory.dll Syntax public static class Base64 Methods DecodeFromUtf8(ReadOnlySpan<byte>, Span<byte>, out int, out int, bool) Declaration public static OperationStatus DecodeFromUtf8(ReadOnlySpan<byte> utf8, Span<byte> bytes, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true) Parameters Type Name Description ReadOnlySpan<byte> utf8 Span<byte> bytes int bytesConsumed int bytesWritten bool isFinalBlock Returns Type Description OperationStatus DecodeFromUtf8InPlace(Span<byte>, out int) Declaration public static OperationStatus DecodeFromUtf8InPlace(Span<byte> buffer, out int bytesWritten) Parameters Type Name Description Span<byte> buffer int bytesWritten Returns Type Description OperationStatus EncodeToUtf8(ReadOnlySpan<byte>, Span<byte>, out int, out int, bool) Declaration public static OperationStatus EncodeToUtf8(ReadOnlySpan<byte> bytes, Span<byte> utf8, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true) Parameters Type Name Description ReadOnlySpan<byte> bytes Span<byte> utf8 int bytesConsumed int bytesWritten bool isFinalBlock Returns Type Description OperationStatus EncodeToUtf8InPlace(Span<byte>, int, out int) Declaration public static OperationStatus EncodeToUtf8InPlace(Span<byte> buffer, int dataLength, out int bytesWritten) Parameters Type Name Description Span<byte> buffer int dataLength int bytesWritten Returns Type Description OperationStatus GetMaxDecodedFromUtf8Length(int) Declaration public static int GetMaxDecodedFromUtf8Length(int length) Parameters Type Name Description int length Returns Type Description int GetMaxEncodedToUtf8Length(int) Declaration public static int GetMaxEncodedToUtf8Length(int length) Parameters Type Name Description int length Returns Type Description int"
  },
  "api/System.Buffers.Text.Utf8Formatter.html": {
    "href": "api/System.Buffers.Text.Utf8Formatter.html",
    "title": "Class Utf8Formatter | CodeFactory for Windows",
    "keywords": "Class Utf8Formatter Inheritance object Utf8Formatter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Buffers.Text Assembly: System.Memory.dll Syntax public static class Utf8Formatter Methods TryFormat(bool, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(bool value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description bool value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(byte, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(byte value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description byte value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(DateTime, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(DateTime value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description DateTime value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(DateTimeOffset, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(DateTimeOffset value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description DateTimeOffset value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(decimal, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(decimal value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description decimal value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(double, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(double value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description double value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(Guid, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(Guid value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description Guid value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(short, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(short value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description short value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(int, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(int value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description int value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(long, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(long value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description long value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(sbyte, Span<byte>, out int, StandardFormat) Declaration [CLSCompliant(false)] public static bool TryFormat(sbyte value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description sbyte value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(float, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(float value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description float value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(TimeSpan, Span<byte>, out int, StandardFormat) Declaration public static bool TryFormat(TimeSpan value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description TimeSpan value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(ushort, Span<byte>, out int, StandardFormat) Declaration [CLSCompliant(false)] public static bool TryFormat(ushort value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description ushort value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(uint, Span<byte>, out int, StandardFormat) Declaration [CLSCompliant(false)] public static bool TryFormat(uint value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description uint value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool TryFormat(ulong, Span<byte>, out int, StandardFormat) Declaration [CLSCompliant(false)] public static bool TryFormat(ulong value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) Parameters Type Name Description ulong value Span<byte> destination int bytesWritten StandardFormat format Returns Type Description bool"
  },
  "api/System.Buffers.Text.Utf8Parser.html": {
    "href": "api/System.Buffers.Text.Utf8Parser.html",
    "title": "Class Utf8Parser | CodeFactory for Windows",
    "keywords": "Class Utf8Parser Inheritance object Utf8Parser Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Buffers.Text Assembly: System.Memory.dll Syntax public static class Utf8Parser Methods TryParse(ReadOnlySpan<byte>, out bool, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out bool value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source bool value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out byte, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out byte value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source byte value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out DateTime, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out DateTime value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source DateTime value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out DateTimeOffset, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out DateTimeOffset value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source DateTimeOffset value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out decimal, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out decimal value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source decimal value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out double, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out double value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source double value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out Guid, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out Guid value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source Guid value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out short, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out short value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source short value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out int, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out int value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source int value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out long, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out long value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source long value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out sbyte, out int, char) Declaration [CLSCompliant(false)] public static bool TryParse(ReadOnlySpan<byte> source, out sbyte value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source sbyte value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out float, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out float value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source float value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out TimeSpan, out int, char) Declaration public static bool TryParse(ReadOnlySpan<byte> source, out TimeSpan value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source TimeSpan value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out ushort, out int, char) Declaration [CLSCompliant(false)] public static bool TryParse(ReadOnlySpan<byte> source, out ushort value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source ushort value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out uint, out int, char) Declaration [CLSCompliant(false)] public static bool TryParse(ReadOnlySpan<byte> source, out uint value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source uint value int bytesConsumed char standardFormat Returns Type Description bool TryParse(ReadOnlySpan<byte>, out ulong, out int, char) Declaration [CLSCompliant(false)] public static bool TryParse(ReadOnlySpan<byte> source, out ulong value, out int bytesConsumed, char standardFormat = '\\0') Parameters Type Name Description ReadOnlySpan<byte> source ulong value int bytesConsumed char standardFormat Returns Type Description bool"
  },
  "api/System.Buffers.Text.html": {
    "href": "api/System.Buffers.Text.html",
    "title": "Namespace System.Buffers.Text | CodeFactory for Windows",
    "keywords": "Namespace System.Buffers.Text Classes Base64 Utf8Formatter Utf8Parser"
  },
  "api/System.Buffers.html": {
    "href": "api/System.Buffers.html",
    "title": "Namespace System.Buffers | CodeFactory for Windows",
    "keywords": "Namespace System.Buffers Classes ArrayPool<T> Provides a resource pool that enables reusing instances of type . BuffersExtensions MemoryManager<T> MemoryPool<T> ReadOnlySequenceSegment<T> Structs MemoryHandle ReadOnlySequence<T> ReadOnlySequence<T>.Enumerator StandardFormat Interfaces IBufferWriter<T> IMemoryOwner<T> IPinnable Enums OperationStatus"
  },
  "api/System.Collections.Generic.IAsyncEnumerable-1.html": {
    "href": "api/System.Collections.Generic.IAsyncEnumerable-1.html",
    "title": "Interface IAsyncEnumerable<T> | CodeFactory for Windows",
    "keywords": "Interface IAsyncEnumerable<T> Exposes an enumerator that provides asynchronous iteration over values of a specified type. Namespace: System.Collections.Generic Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax public interface IAsyncEnumerable<out T> Type Parameters Name Description T The type of values to enumerate. Methods GetAsyncEnumerator(CancellationToken) Returns an enumerator that iterates asynchronously through the collection. Declaration IAsyncEnumerator<out T> GetAsyncEnumerator(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken that may be used to cancel the asynchronous iteration. Returns Type Description IAsyncEnumerator<T> An enumerator that can be used to iterate asynchronously through the collection. Extension Methods TaskAsyncEnumerableExtensions.ConfigureAwait<T>(IAsyncEnumerable<T>, bool) TaskAsyncEnumerableExtensions.WithCancellation<T>(IAsyncEnumerable<T>, CancellationToken)"
  },
  "api/System.Collections.Generic.IAsyncEnumerator-1.html": {
    "href": "api/System.Collections.Generic.IAsyncEnumerator-1.html",
    "title": "Interface IAsyncEnumerator<T> | CodeFactory for Windows",
    "keywords": "Interface IAsyncEnumerator<T> Supports a simple asynchronous iteration over a generic collection. Inherited Members IAsyncDisposable.DisposeAsync() Namespace: System.Collections.Generic Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax public interface IAsyncEnumerator<out T> : IAsyncDisposable Type Parameters Name Description T The type of objects to enumerate. Properties Current Gets the element in the collection at the current position of the enumerator. Declaration T Current { get; } Property Value Type Description T Methods MoveNextAsync() Advances the enumerator asynchronously to the next element of the collection. Declaration ValueTask<bool> MoveNextAsync() Returns Type Description ValueTask<bool> A ValueTask<TResult> that will complete with a result of true if the enumerator was successfully advanced to the next element, or false if the enumerator has passed the end of the collection. Extension Methods TaskAsyncEnumerableExtensions.ConfigureAwait(IAsyncDisposable, bool)"
  },
  "api/System.Collections.Generic.html": {
    "href": "api/System.Collections.Generic.html",
    "title": "Namespace System.Collections.Generic | CodeFactory for Windows",
    "keywords": "Namespace System.Collections.Generic Interfaces IAsyncEnumerable<T> Exposes an enumerator that provides asynchronous iteration over values of a specified type. IAsyncEnumerator<T> Supports a simple asynchronous iteration over a generic collection."
  },
  "api/System.Collections.Immutable.IImmutableDictionary-2.html": {
    "href": "api/System.Collections.Immutable.IImmutableDictionary-2.html",
    "title": "Interface IImmutableDictionary<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Interface IImmutableDictionary<TKey, TValue> Represents an immutable collection of key/value pairs. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inherited Members IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey) IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, out TValue) IReadOnlyDictionary<TKey, TValue>.this[TKey] IReadOnlyDictionary<TKey, TValue>.Keys IReadOnlyDictionary<TKey, TValue>.Values IReadOnlyCollection<KeyValuePair<TKey, TValue>>.Count IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() IEnumerable.GetEnumerator() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public interface IImmutableDictionary<TKey, TValue> : IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary. Methods Add(TKey, TValue) Adds an element with the specified key and value to the dictionary. Declaration IImmutableDictionary<TKey, TValue> Add(TKey key, TValue value) Parameters Type Name Description TKey key The key of the element to add. TValue value The value of the element to add. Returns Type Description IImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the additional key/value pair. Exceptions Type Condition ArgumentException The given key already exists in the dictionary but has a different value. AddRange(IEnumerable<KeyValuePair<TKey, TValue>>) Adds the specified key/value pairs to the dictionary. Declaration IImmutableDictionary<TKey, TValue> AddRange(IEnumerable<KeyValuePair<TKey, TValue>> pairs) Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> pairs The key/value pairs to add. Returns Type Description IImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the additional key/value pairs. Exceptions Type Condition ArgumentException One of the given keys already exists in the dictionary but has a different value. Clear() Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance. Declaration IImmutableDictionary<TKey, TValue> Clear() Returns Type Description IImmutableDictionary<TKey, TValue> An empty dictionary with equivalent ordering and key/value comparison rules. Contains(KeyValuePair<TKey, TValue>) Determines whether the immutable dictionary contains the specified key/value pair. Declaration bool Contains(KeyValuePair<TKey, TValue> pair) Parameters Type Name Description KeyValuePair<TKey, TValue> pair The key/value pair to locate. Returns Type Description bool true if the specified key/value pair is found in the dictionary; otherwise, false. Remove(TKey) Removes the element with the specified key from the immutable dictionary. Declaration IImmutableDictionary<TKey, TValue> Remove(TKey key) Parameters Type Name Description TKey key The key of the element to remove. Returns Type Description IImmutableDictionary<TKey, TValue> A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary. RemoveRange(IEnumerable<TKey>) Removes the elements with the specified keys from the immutable dictionary. Declaration IImmutableDictionary<TKey, TValue> RemoveRange(IEnumerable<TKey> keys) Parameters Type Name Description IEnumerable<TKey> keys The keys of the elements to remove. Returns Type Description IImmutableDictionary<TKey, TValue> A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary. SetItem(TKey, TValue) Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key. Declaration IImmutableDictionary<TKey, TValue> SetItem(TKey key, TValue value) Parameters Type Name Description TKey key The key of the entry to add. TValue value The key value to set. Returns Type Description IImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the specified key/value pair. SetItems(IEnumerable<KeyValuePair<TKey, TValue>>) Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys. Declaration IImmutableDictionary<TKey, TValue> SetItems(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> items The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values. Returns Type Description IImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the specified key/value pairs. TryGetKey(TKey, out TKey) Determines whether this dictionary contains a specified key. Declaration bool TryGetKey(TKey equalKey, out TKey actualKey) Parameters Type Name Description TKey equalKey The key to search for. TKey actualKey The matching key located in the dictionary if found, or equalkey if no match is found. Returns Type Description bool true if a match for equalKey is found; otherwise, false. Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableDictionary.Contains<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey, TValue) ImmutableDictionary.GetValueOrDefault<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey) ImmutableDictionary.GetValueOrDefault<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey, TValue)"
  },
  "api/System.Collections.Immutable.IImmutableList-1.html": {
    "href": "api/System.Collections.Immutable.IImmutableList-1.html",
    "title": "Interface IImmutableList<T> | CodeFactory for Windows",
    "keywords": "Interface IImmutableList<T> Represents a list of elements that cannot be modified. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inherited Members IReadOnlyList<T>.this[int] IReadOnlyCollection<T>.Count IEnumerable<T>.GetEnumerator() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public interface IImmutableList<T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the list. Methods Add(T) Makes a copy of the list, and adds the specified object to the end of the copied list. Declaration IImmutableList<T> Add(T value) Parameters Type Name Description T value The object to add to the list. Returns Type Description IImmutableList<T> A new list with the object added. AddRange(IEnumerable<T>) Makes a copy of the list and adds the specified objects to the end of the copied list. Declaration IImmutableList<T> AddRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The objects to add to the list. Returns Type Description IImmutableList<T> A new list with the elements added. Clear() Creates a list with all the items removed, but with the same sorting and ordering semantics as this list. Declaration IImmutableList<T> Clear() Returns Type Description IImmutableList<T> An empty list that has the same sorting and ordering semantics as this instance. IndexOf(T, int, int, IEqualityComparer<T>?) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the IImmutableList<T> that starts at the specified index and contains the specified number of elements. Declaration int IndexOf(T item, int index, int count, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The object to locate in the IImmutableList<T>. This value can be null for reference types. int index The zero-based starting indexes of the search. 0 (zero) is valid in an empty list. int count The number of elements in the section to search. IEqualityComparer<T> equalityComparer The equality comparer to use to locate item. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the IImmutableList<T> that starts at index and contains count number of elements if found; otherwise -1. Insert(int, T) Inserts the specified element at the specified index in the immutable list. Declaration IImmutableList<T> Insert(int index, T element) Parameters Type Name Description int index The zero-based index at which to insert the value. T element The object to insert. Returns Type Description IImmutableList<T> A new immutable list that includes the specified element. InsertRange(int, IEnumerable<T>) Inserts the specified elements at the specified index in the immutable list. Declaration IImmutableList<T> InsertRange(int index, IEnumerable<T> items) Parameters Type Name Description int index The zero-based index at which the new elements should be inserted. IEnumerable<T> items The elements to insert. Returns Type Description IImmutableList<T> A new immutable list that includes the specified elements. LastIndexOf(T, int, int, IEqualityComparer<T>?) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the IImmutableList<T> that contains the specified number of elements and ends at the specified index. Declaration int LastIndexOf(T item, int index, int count, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The object to locate in the list. The value can be null for reference types. int index The zero-based starting index of the search. 0 (zero) is valid in an empty list. int count The number of elements in the section to search. IEqualityComparer<T> equalityComparer The equality comparer to match item. Returns Type Description int Returns int. Remove(T, IEqualityComparer<T>?) Removes the first occurrence of a specified object from this immutable list. Declaration IImmutableList<T> Remove(T value, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T value The object to remove from the list. IEqualityComparer<T> equalityComparer The equality comparer to use to locate value. Returns Type Description IImmutableList<T> A new list with the specified object removed. RemoveAll(Predicate<T>) Removes all the elements that match the conditions defined by the specified predicate. Declaration IImmutableList<T> RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the elements to remove. Returns Type Description IImmutableList<T> A new immutable list with the elements removed. RemoveAt(int) Removes the element at the specified index of the immutable list. Declaration IImmutableList<T> RemoveAt(int index) Parameters Type Name Description int index The index of the element to remove. Returns Type Description IImmutableList<T> A new list with the element removed. RemoveRange(IEnumerable<T>, IEqualityComparer<T>?) Removes the specified object from the list. Declaration IImmutableList<T> RemoveRange(IEnumerable<T> items, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description IEnumerable<T> items The objects to remove from the list. IEqualityComparer<T> equalityComparer The equality comparer to use to determine if items match any objects in the list. Returns Type Description IImmutableList<T> A new immutable list with the specified objects removed, if items matched objects in the list. RemoveRange(int, int) Removes a range of elements from the IImmutableList<T>. Declaration IImmutableList<T> RemoveRange(int index, int count) Parameters Type Name Description int index The zero-based starting index of the range of elements to remove. int count The number of elements to remove. Returns Type Description IImmutableList<T> A new immutable list with the elements removed. Replace(T, T, IEqualityComparer<T>?) Returns a new list with the first matching element in the list replaced with the specified element. Declaration IImmutableList<T> Replace(T oldValue, T newValue, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T oldValue The element to be replaced. T newValue The element to replace the first occurrence of oldValue with. IEqualityComparer<T> equalityComparer The equality comparer to use for matching oldValue. Returns Type Description IImmutableList<T> A new list that contains newValue, even if oldvalue is the same as newValue. Exceptions Type Condition ArgumentException oldValue does not exist in the list. SetItem(int, T) Replaces an element in the list at a given position with the specified element. Declaration IImmutableList<T> SetItem(int index, T value) Parameters Type Name Description int index The position in the list of the element to replace. T value The element to replace the old element with. Returns Type Description IImmutableList<T> A new list that contains the new element, even if the element at the specified location is the same as the new element. Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableList.IndexOf<T>(IImmutableList<T>, T) ImmutableList.IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?) ImmutableList.IndexOf<T>(IImmutableList<T>, T, int) ImmutableList.IndexOf<T>(IImmutableList<T>, T, int, int) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, int) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, int, int) ImmutableList.RemoveRange<T>(IImmutableList<T>, IEnumerable<T>) ImmutableList.Remove<T>(IImmutableList<T>, T) ImmutableList.Replace<T>(IImmutableList<T>, T, T)"
  },
  "api/System.Collections.Immutable.IImmutableQueue-1.html": {
    "href": "api/System.Collections.Immutable.IImmutableQueue-1.html",
    "title": "Interface IImmutableQueue<T> | CodeFactory for Windows",
    "keywords": "Interface IImmutableQueue<T> Represents an immutable first-in, first-out collection of objects. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inherited Members IEnumerable<T>.GetEnumerator() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public interface IImmutableQueue<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the queue. Properties IsEmpty Gets a value that indicates whether this immutable queue is empty. Declaration bool IsEmpty { get; } Property Value Type Description bool true if this queue is empty; otherwise, false. Methods Clear() Returns a new queue with all the elements removed. Declaration IImmutableQueue<T> Clear() Returns Type Description IImmutableQueue<T> An empty immutable queue. Dequeue() Removes the first element in the immutable queue, and returns the new queue. Declaration IImmutableQueue<T> Dequeue() Returns Type Description IImmutableQueue<T> The new immutable queue with the first element removed. This value is never null. Exceptions Type Condition InvalidOperationException The queue is empty. Enqueue(T) Adds an element to the end of the immutable queue, and returns the new queue. Declaration IImmutableQueue<T> Enqueue(T value) Parameters Type Name Description T value The element to add. Returns Type Description IImmutableQueue<T> The new immutable queue with the specified element added. Peek() Returns the element at the beginning of the immutable queue without removing it. Declaration T Peek() Returns Type Description T The element at the beginning of the queue. Exceptions Type Condition InvalidOperationException The queue is empty. Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableQueue.Dequeue<T>(IImmutableQueue<T>, out T)"
  },
  "api/System.Collections.Immutable.IImmutableSet-1.html": {
    "href": "api/System.Collections.Immutable.IImmutableSet-1.html",
    "title": "Interface IImmutableSet<T> | CodeFactory for Windows",
    "keywords": "Interface IImmutableSet<T> Represents a set of elements that can only be modified by creating a new instance of the set. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inherited Members IReadOnlyCollection<T>.Count IEnumerable<T>.GetEnumerator() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public interface IImmutableSet<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of element stored in the set. Methods Add(T) Adds the specified element to this immutable set. Declaration IImmutableSet<T> Add(T value) Parameters Type Name Description T value The element to add. Returns Type Description IImmutableSet<T> A new set with the element added, or this set if the element is already in the set. Clear() Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance. Declaration IImmutableSet<T> Clear() Returns Type Description IImmutableSet<T> An empty set that has the same sorting and ordering semantics as this instance. Contains(T) Determines whether this immutable set contains a specified element. Declaration bool Contains(T value) Parameters Type Name Description T value The element to locate in the set. Returns Type Description bool true if the set contains the specified value; otherwise, false. Except(IEnumerable<T>) Removes the elements in the specified collection from the current immutable set. Declaration IImmutableSet<T> Except(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection of items to remove from this set. Returns Type Description IImmutableSet<T> A new set with the items removed; or the original set if none of the items were in the set. Intersect(IEnumerable<T>) Creates an immutable set that contains only elements that exist in this set and the specified set. Declaration IImmutableSet<T> Intersect(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current IImmutableSet<T>. Returns Type Description IImmutableSet<T> A new immutable set that contains elements that exist in both sets. IsProperSubsetOf(IEnumerable<T>) Determines whether the current immutable set is a proper (strict) subset of the specified collection. Declaration bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper subset of the specified collection; otherwise, false. IsProperSupersetOf(IEnumerable<T>) Determines whether the current immutable set is a proper (strict) superset of the specified collection. Declaration bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper superset of the specified collection; otherwise, false. IsSubsetOf(IEnumerable<T>) Determines whether the current immutable set is a subset of a specified collection. Declaration bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of the specified collection; otherwise, false. IsSupersetOf(IEnumerable<T>) Determines whether the current immutable set is a superset of a specified collection. Declaration bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a superset of the specified collection; otherwise, false. Overlaps(IEnumerable<T>) Determines whether the current immutable set overlaps with the specified collection. Declaration bool Overlaps(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set and the specified collection share at least one common element; otherwise, false. Remove(T) Removes the specified element from this immutable set. Declaration IImmutableSet<T> Remove(T value) Parameters Type Name Description T value The element to remove. Returns Type Description IImmutableSet<T> A new set with the specified element removed, or the current set if the element cannot be found in the set. SetEquals(IEnumerable<T>) Determines whether the current immutable set and the specified collection contain the same elements. Declaration bool SetEquals(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the sets are equal; otherwise, false. SymmetricExcept(IEnumerable<T>) Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both. Declaration IImmutableSet<T> SymmetricExcept(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description IImmutableSet<T> A new set that contains the elements that are present only in the current set or in the specified collection, but not both. TryGetValue(T, out T) Determines whether the set contains a specified value. Declaration bool TryGetValue(T equalValue, out T actualValue) Parameters Type Name Description T equalValue The value to search for. T actualValue The matching value from the set, if found, or equalvalue if there are no matches. Returns Type Description bool true if a matching value was found; otherwise, false. Union(IEnumerable<T>) Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection. Declaration IImmutableSet<T> Union(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to add elements from. Returns Type Description IImmutableSet<T> A new immutable set with the items added; or the original set if all the items were already in the set. Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?)"
  },
  "api/System.Collections.Immutable.IImmutableStack-1.html": {
    "href": "api/System.Collections.Immutable.IImmutableStack-1.html",
    "title": "Interface IImmutableStack<T> | CodeFactory for Windows",
    "keywords": "Interface IImmutableStack<T> Represents an immutable last-in-first-out (LIFO) collection. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inherited Members IEnumerable<T>.GetEnumerator() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public interface IImmutableStack<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the stack. Properties IsEmpty Gets a value that indicates whether this immutable stack is empty. Declaration bool IsEmpty { get; } Property Value Type Description bool true if this stack is empty; otherwise,false. Methods Clear() Removes all objects from the immutable stack. Declaration IImmutableStack<T> Clear() Returns Type Description IImmutableStack<T> An empty immutable stack. Peek() Returns the element at the top of the immutable stack without removing it. Declaration T Peek() Returns Type Description T The element at the top of the stack. Exceptions Type Condition InvalidOperationException The stack is empty. Pop() Removes the element at the top of the immutable stack and returns the new stack. Declaration IImmutableStack<T> Pop() Returns Type Description IImmutableStack<T> The new stack; never null. Exceptions Type Condition InvalidOperationException The stack is empty. Push(T) Inserts an element at the top of the immutable stack and returns the new stack. Declaration IImmutableStack<T> Push(T value) Parameters Type Name Description T value The element to push onto the stack. Returns Type Description IImmutableStack<T> The new stack. Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableStack.Pop<T>(IImmutableStack<T>, out T)"
  },
  "api/System.Collections.Immutable.ImmutableArray-1.Builder.html": {
    "href": "api/System.Collections.Immutable.ImmutableArray-1.Builder.html",
    "title": "Class ImmutableArray<T>.Builder | CodeFactory for Windows",
    "keywords": "Class ImmutableArray<T>.Builder A writable array accessor that can be converted into an ImmutableArray<T> instance without allocating extra memory. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableArray<T>.Builder Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableArray<T>.Builder : IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Properties Capacity Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length. Declaration public int Capacity { get; set; } Property Value Type Description int The length of the internal array. Count Gets or sets the number of items in the array. Declaration public int Count { get; set; } Property Value Type Description int The number of items in the array. this[int] Gets or sets the item at the specified index. Declaration public T this[int index] { get; set; } Parameters Type Name Description int index The index of the item to get or set. Property Value Type Description T The item at the specified index. Exceptions Type Condition IndexOutOfRangeException The specified index is not in the array. Methods Add(T) Adds the specified item to the array. Declaration public void Add(T item) Parameters Type Name Description T item The object to add to the array. AddRange(IEnumerable<T>) Adds the specified items to the end of the array. Declaration public void AddRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The items to add to the array. AddRange(ImmutableArray<T>) Adds the specified items to the end of the array. Declaration public void AddRange(ImmutableArray<T> items) Parameters Type Name Description ImmutableArray<T> items The items to add to the array. AddRange(ImmutableArray<T>, int) Adds the specified items to the end of the array. Declaration public void AddRange(ImmutableArray<T> items, int length) Parameters Type Name Description ImmutableArray<T> items The items to add to the array. int length The number of elements from the source array to add. AddRange(Builder) Adds the specified items to the end of the array. Declaration public void AddRange(ImmutableArray<T>.Builder items) Parameters Type Name Description ImmutableArray<T>.Builder items The items to add to the array. AddRange(params T[]) Adds the specified items to the end of the array. Declaration public void AddRange(params T[] items) Parameters Type Name Description T[] items The items to add to the array. AddRange(T[], int) Adds the specified items to the end of the array. Declaration public void AddRange(T[] items, int length) Parameters Type Name Description T[] items The items to add to the array. int length The number of elements from the source array to add. AddRange<TDerived>(ImmutableArray<TDerived>) Adds the specified items that derive from the type currently in the array, to the end of the array. Declaration public void AddRange<TDerived>(ImmutableArray<TDerived> items) where TDerived : T Parameters Type Name Description ImmutableArray<TDerived> items The items to add to the end of the array. Type Parameters Name Description TDerived The type that derives from the type of item already in the array. AddRange<TDerived>(Builder) Adds the specified items that derive from the type currently in the array, to the end of the array. Declaration public void AddRange<TDerived>(ImmutableArray<TDerived>.Builder items) where TDerived : T Parameters Type Name Description ImmutableArray<TDerived>.Builder items The items to add to the end of the array. Type Parameters Name Description TDerived The type that derives from the type of item already in the array. AddRange<TDerived>(TDerived[]) Adds the specified items that derive from the type currently in the array, to the end of the array. Declaration public void AddRange<TDerived>(TDerived[] items) where TDerived : T Parameters Type Name Description TDerived[] items The items to add to end of the array. Type Parameters Name Description TDerived The type that derives from the type of item already in the array. Clear() Removes all items from the array. Declaration public void Clear() Contains(T) Determines whether the array contains a specific value. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the array. Returns Type Description bool true if the object is found; otherwise, false. CopyTo(T[], int) Copies the current contents to the specified array. Declaration public void CopyTo(T[] array, int index) Parameters Type Name Description T[] array The array to copy to. int index The index to start the copy operation. GetEnumerator() Gets an object that can be used to iterate through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An object that can be used to iterate through the collection. IndexOf(T) Determines the index of a specific item in the array. Declaration public int IndexOf(T item) Parameters Type Name Description T item The item to locate in the array. Returns Type Description int The index of item if it's found in the list; otherwise, -1. IndexOf(T, int) Determines the index of the specified item. Declaration public int IndexOf(T item, int startIndex) Parameters Type Name Description T item The item to locate in the array. int startIndex The starting position of the search. Returns Type Description int The index of item if it's found in the list; otherwise, -1. IndexOf(T, int, int) Determines the index of the specified item. Declaration public int IndexOf(T item, int startIndex, int count) Parameters Type Name Description T item The item to locate in the array. int startIndex The starting position of the search. int count The number of elements to search. Returns Type Description int The index of item if it's found in the list; otherwise, -1. IndexOf(T, int, int, IEqualityComparer<T>?) Determines the index for the specified item. Declaration public int IndexOf(T item, int startIndex, int count, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The item to locate in the array. int startIndex The index at which to begin the search. int count The starting position of the search. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The index of item if it's found in the list; otherwise, -1. Insert(int, T) Inserts an item in the array at the specified index. Declaration public void Insert(int index, T item) Parameters Type Name Description int index The zero-based index at which to insert the item. T item The object to insert into the array. ItemRef(int) Gets a read-only reference to the element at the specified index. Declaration public ref readonly T ItemRef(int index) Parameters Type Name Description int index The item index. Returns Type Description T The read-only reference to the element at the specified index. Exceptions Type Condition IndexOutOfRangeException index is greater or equal to the array count. LastIndexOf(T) Determines the 0-based index of the last occurrence of the specified item in this array. Declaration public int LastIndexOf(T item) Parameters Type Name Description T item The item to search for. Returns Type Description int The 0-based index where the item was found; or -1 if it could not be found. LastIndexOf(T, int) Determines the 0-based index of the last occurrence of the specified item in this array. Declaration public int LastIndexOf(T item, int startIndex) Parameters Type Name Description T item The item to search for. int startIndex The starting position of the search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. LastIndexOf(T, int, int) Determines the 0-based index of the last occurrence of the specified item in this array. Declaration public int LastIndexOf(T item, int startIndex, int count) Parameters Type Name Description T item The item to search for. int startIndex The starting position of the search. int count The number of elements to search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. LastIndexOf(T, int, int, IEqualityComparer<T>?) Determines the 0-based index of the last occurrence of the specified item in this array. Declaration public int LastIndexOf(T item, int startIndex, int count, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The item to search for. int startIndex The starting position of the search. int count The number of elements to search. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. MoveToImmutable() Extracts the internal array as an ImmutableArray<T> and replaces it with a zero length array. Declaration public ImmutableArray<T> MoveToImmutable() Returns Type Description ImmutableArray<T> An immutable array containing the elements of the builder. Exceptions Type Condition InvalidOperationException When Count doesn't equal Capacity. Remove(T) Removes the specified element. Declaration public bool Remove(T element) Parameters Type Name Description T element The item to remove. Returns Type Description bool true if element was found and removed; otherwise, false. RemoveAt(int) Removes the item at the specified index from the array. Declaration public void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the item to remove. Reverse() Reverses the order of elements in the collection. Declaration public void Reverse() Sort() Sorts the contents of the array. Declaration public void Sort() Sort(IComparer<T>?) Sorts the contents of the array. Declaration public void Sort(IComparer<T>? comparer) Parameters Type Name Description IComparer<T> comparer The comparer to use for sorting. If comparer is null, the default comparer for the elements type in the array is used. Sort(Comparison<T>) Sorts the elements in the entire array using the specified Comparison<T>. Declaration public void Sort(Comparison<T> comparison) Parameters Type Name Description Comparison<T> comparison The Comparison<T> to use when comparing elements. Exceptions Type Condition ArgumentNullException comparison is null. Sort(int, int, IComparer<T>?) Sorts the contents of the array. Declaration public void Sort(int index, int count, IComparer<T>? comparer) Parameters Type Name Description int index The starting index for the sort. int count The number of elements to include in the sort. IComparer<T> comparer The comparer to use for sorting. If comparer is null, the default comparer for the elements type in the array is used. ToArray() Creates a new array with the current contents of this ImmutableArray<T>.Builder. Declaration public T[] ToArray() Returns Type Description T[] A new array with the contents of this ImmutableArray<T>.Builder. ToImmutable() Returns an immutable array that contains the current contents of this ImmutableArray<T>.Builder. Declaration public ImmutableArray<T> ToImmutable() Returns Type Description ImmutableArray<T> An immutable array that contains the current contents of this ImmutableArray<T>.Builder. Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableArray.ToImmutableArray<TSource>(ImmutableArray<TSource>.Builder) ImmutableArrayExtensions.Any<T>(ImmutableArray<T>.Builder) ImmutableArrayExtensions.FirstOrDefault<T>(ImmutableArray<T>.Builder) ImmutableArrayExtensions.First<T>(ImmutableArray<T>.Builder) ImmutableArrayExtensions.LastOrDefault<T>(ImmutableArray<T>.Builder) ImmutableArrayExtensions.Last<T>(ImmutableArray<T>.Builder)"
  },
  "api/System.Collections.Immutable.ImmutableArray-1.Enumerator.html": {
    "href": "api/System.Collections.Immutable.ImmutableArray-1.Enumerator.html",
    "title": "Struct ImmutableArray<T>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ImmutableArray<T>.Enumerator An array enumerator. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public struct ImmutableArray<T>.Enumerator Properties Current Gets the current item. Declaration public T Current { get; } Property Value Type Description T The current item. Methods MoveNext() Advances to the next value in the array. Declaration public bool MoveNext() Returns Type Description bool true if another item exists in the array; otherwise, false."
  },
  "api/System.Collections.Immutable.ImmutableArray-1.html": {
    "href": "api/System.Collections.Immutable.ImmutableArray-1.html",
    "title": "Struct ImmutableArray<T> | CodeFactory for Windows",
    "keywords": "Struct ImmutableArray<T> Represents an array that is immutable; meaning it cannot be changed once it is created. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Implements IList<T> ICollection<T> IEquatable<ImmutableArray<T>> IList ICollection IStructuralComparable IStructuralEquatable IImmutableList<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public readonly struct ImmutableArray<T> : IList<T>, ICollection<T>, IEquatable<ImmutableArray<T>>, IList, ICollection, IStructuralComparable, IStructuralEquatable, IImmutableList<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of element stored by the array. Fields Empty Gets an empty immutable array. Declaration public static readonly ImmutableArray<T> Empty Field Value Type Description ImmutableArray<T> Properties IsDefault Gets a value indicating whether this array was declared but not initialized. Declaration public bool IsDefault { get; } Property Value Type Description bool true if the ImmutableArray<T> is null; otherwise, false. IsDefaultOrEmpty Gets a value indicating whether this ImmutableArray<T> is empty or is not initialized. Declaration public bool IsDefaultOrEmpty { get; } Property Value Type Description bool true if the ImmutableArray<T> is null or Empty; otherwise, false. IsEmpty Gets a value indicating whether this ImmutableArray<T> is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool true if the ImmutableArray<T> is empty; otherwise, false. this[int] Gets the element at the specified index in the immutable array. Declaration public T this[int index] { get; } Parameters Type Name Description int index The zero-based index of the element to get. Property Value Type Description T The element at the specified index in the immutable array. Length Gets the number of elements in the array. Declaration public int Length { get; } Property Value Type Description int The number of elements in the array. Methods Add(T) Returns a copy of the original array with the specified item added to the end. Declaration public ImmutableArray<T> Add(T item) Parameters Type Name Description T item The item to be added to the end of the array. Returns Type Description ImmutableArray<T> A new array with the specified item added to the end. AddRange(IEnumerable<T>) Returns a copy of the original array with the specified elements added to the end of the array. Declaration public ImmutableArray<T> AddRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The elements to add to the array. Returns Type Description ImmutableArray<T> A new array with the elements added. AddRange(ImmutableArray<T>) Returns a copy of the original array with the specified elements added to the end of the array. Declaration public ImmutableArray<T> AddRange(ImmutableArray<T> items) Parameters Type Name Description ImmutableArray<T> items The elements to add to the array. Returns Type Description ImmutableArray<T> A new array with the elements added. AsMemory() Creates a new read-only memory region over this immutable array. Declaration public ReadOnlyMemory<T> AsMemory() Returns Type Description ReadOnlyMemory<T> The read-only memory representation of this immutable array. AsSpan() Creates a new read-only span over this immutable array. Declaration public ReadOnlySpan<T> AsSpan() Returns Type Description ReadOnlySpan<T> The read-only span representation of this immutable array. As<TOther>() Returns a new immutable array that contains the elements of this array cast to a different type. Declaration public ImmutableArray<TOther> As<TOther>() where TOther : class? Returns Type Description ImmutableArray<TOther> An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose IsDefault property returns true. Type Parameters Name Description TOther The type of array element to return. CastArray<TOther>() Initializes a new instance of the ImmutableArray<T> struct by casting the underlying array to an array of type TOther. Declaration public ImmutableArray<TOther> CastArray<TOther>() where TOther : class? Returns Type Description ImmutableArray<TOther> An immutable array instance with elements cast to the new type. Type Parameters Name Description TOther The type of array element to return. Exceptions Type Condition InvalidCastException Thrown if the cast is illegal. CastUp<TDerived>(ImmutableArray<TDerived>) Initializes a new instance of the ImmutableArray<T> struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array. Declaration public static ImmutableArray<T> CastUp<TDerived>(ImmutableArray<TDerived> items) where TDerived : class?, T Parameters Type Name Description ImmutableArray<TDerived> items The array to initialize the array with. No copy is made. Returns Type Description ImmutableArray<T> An immutable array instance with elements cast to the new type. Type Parameters Name Description TDerived The type of array element to return. Clear() Returns an array with all the elements removed. Declaration public ImmutableArray<T> Clear() Returns Type Description ImmutableArray<T> An array with all of the elements removed. Contains(T) Determines whether the specified item exists in the array. Declaration public bool Contains(T item) Parameters Type Name Description T item The item to search for. Returns Type Description bool true if the specified item was found in the array; otherwise false. CopyTo(int, T[], int, int) Copies the specified items in this array to the specified array at the specified starting index. Declaration public void CopyTo(int sourceIndex, T[] destination, int destinationIndex, int length) Parameters Type Name Description int sourceIndex The index of this array where copying begins. T[] destination The array to copy to. int destinationIndex The index in array where copying begins. int length The number of elements to copy from this array. CopyTo(T[]) Copies the contents of this array to the specified array. Declaration public void CopyTo(T[] destination) Parameters Type Name Description T[] destination The array to copy to. CopyTo(T[], int) Copies the contents of this array to the specified array starting at the specified destination index. Declaration public void CopyTo(T[] destination, int destinationIndex) Parameters Type Name Description T[] destination The array to copy to. int destinationIndex The index in array where copying begins. Equals(ImmutableArray<T>) Indicates whether specified array is equal to this array. Declaration public bool Equals(ImmutableArray<T> other) Parameters Type Name Description ImmutableArray<T> other An object to compare with this object. Returns Type Description bool true if other is equal to this array; otherwise, false. Equals(object?) Determines if this array is equal to the specified object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with this array. Returns Type Description bool true if this array is equal to obj; otherwise, false. Overrides ValueType.Equals(object) GetEnumerator() Returns an enumerator that iterates through the contents of the array. Declaration public ImmutableArray<T>.Enumerator GetEnumerator() Returns Type Description ImmutableArray<T>.Enumerator An enumerator. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() IndexOf(T) Searches the array for the specified item. Declaration public int IndexOf(T item) Parameters Type Name Description T item The item to search for. Returns Type Description int The zero-based index position of the item if it is found, or -1 if it is not. IndexOf(T, int) Searches the array for the specified item. Declaration public int IndexOf(T item, int startIndex) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. Returns Type Description int The zero-based index position of the item if it is found, or -1 if it is not. IndexOf(T, int, IEqualityComparer<T>?) Searches the array for the specified item. Declaration public int IndexOf(T item, int startIndex, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The zero-based index position of the item if it is found, or -1 if it is not. IndexOf(T, int, int) Searches the array for the specified item. Declaration public int IndexOf(T item, int startIndex, int count) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. int count The number of elements to search. Returns Type Description int The zero-based index position of the item if it is found, or -1 if it is not. IndexOf(T, int, int, IEqualityComparer<T>?) Searches the array for the specified item. Declaration public int IndexOf(T item, int startIndex, int count, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. int count The number of elements to search. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The zero-based index position of the item if it is found, or -1 if it is not. Insert(int, T) Returns a new array with the specified value inserted at the specified position. Declaration public ImmutableArray<T> Insert(int index, T item) Parameters Type Name Description int index The 0-based index into the array at which the new item should be added. T item The item to insert at the start of the array. Returns Type Description ImmutableArray<T> A new array with the item inserted at the specified index. InsertRange(int, IEnumerable<T>) Inserts the specified values at the specified index. Declaration public ImmutableArray<T> InsertRange(int index, IEnumerable<T> items) Parameters Type Name Description int index The index at which to insert the value. IEnumerable<T> items The elements to insert. Returns Type Description ImmutableArray<T> A new immutable array with the items inserted at the specified index. InsertRange(int, ImmutableArray<T>) Inserts the specified values at the specified index. Declaration public ImmutableArray<T> InsertRange(int index, ImmutableArray<T> items) Parameters Type Name Description int index The index at which to insert the value. ImmutableArray<T> items The elements to insert. Returns Type Description ImmutableArray<T> A new immutable array with the items inserted at the specified index. ItemRef(int) Gets a read-only reference to the element at the specified index in the read-only list. Declaration public ref readonly T ItemRef(int index) Parameters Type Name Description int index The zero-based index of the element to get a reference to. Returns Type Description T A read-only reference to the element at the specified index in the read-only list. LastIndexOf(T) Searches the array for the specified item; starting at the end of the array. Declaration public int LastIndexOf(T item) Parameters Type Name Description T item The item to search for. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. LastIndexOf(T, int) Searches the array for the specified item; starting at the end of the array. Declaration public int LastIndexOf(T item, int startIndex) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. LastIndexOf(T, int, int) Searches the array for the specified item; starting at the end of the array. Declaration public int LastIndexOf(T item, int startIndex, int count) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. int count The number of elements to search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. LastIndexOf(T, int, int, IEqualityComparer<T>?) Searches the array for the specified item; starting at the end of the array. Declaration public int LastIndexOf(T item, int startIndex, int count, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. int count The number of elements to search. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. OfType<TResult>() Filters the elements of this array to those assignable to the specified type. Declaration public IEnumerable<TResult> OfType<TResult>() Returns Type Description IEnumerable<TResult> An IEnumerable that contains elements from the input sequence of type of TResult. Type Parameters Name Description TResult The type to filter the elements of the sequence on. Remove(T) Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned. Declaration public ImmutableArray<T> Remove(T item) Parameters Type Name Description T item The item to remove. Returns Type Description ImmutableArray<T> A new array with the item removed. Remove(T, IEqualityComparer<T>?) Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned. Declaration public ImmutableArray<T> Remove(T item, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The item to remove. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description ImmutableArray<T> A new array with the specified item removed. RemoveAll(Predicate<T>) Removes all the items from the array that meet the specified condition. Declaration public ImmutableArray<T> RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the elements to remove. Returns Type Description ImmutableArray<T> A new array with items that meet the specified condition removed. RemoveAt(int) Returns an array with the element at the specified position removed. Declaration public ImmutableArray<T> RemoveAt(int index) Parameters Type Name Description int index The 0-based index of the element to remove from the returned array. Returns Type Description ImmutableArray<T> A new array with the item at the specified index removed. RemoveRange(IEnumerable<T>) Removes the specified items from this array. Declaration public ImmutableArray<T> RemoveRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The items to remove if matches are found in this list. Returns Type Description ImmutableArray<T> A new array with the elements removed. RemoveRange(IEnumerable<T>, IEqualityComparer<T>?) Removes the specified items from this array. Declaration public ImmutableArray<T> RemoveRange(IEnumerable<T> items, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description IEnumerable<T> items The items to remove if matches are found in this list. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description ImmutableArray<T> A new array with the elements removed. RemoveRange(ImmutableArray<T>) Removes the specified values from this list. Declaration public ImmutableArray<T> RemoveRange(ImmutableArray<T> items) Parameters Type Name Description ImmutableArray<T> items The items to remove if matches are found in this list. Returns Type Description ImmutableArray<T> A new list with the elements removed. RemoveRange(ImmutableArray<T>, IEqualityComparer<T>?) Removes the specified items from this list. Declaration public ImmutableArray<T> RemoveRange(ImmutableArray<T> items, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description ImmutableArray<T> items The items to remove if matches are found in this list. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description ImmutableArray<T> A new array with the elements removed. RemoveRange(int, int) Returns an array with the elements at the specified position removed. Declaration public ImmutableArray<T> RemoveRange(int index, int length) Parameters Type Name Description int index The 0-based index of the starting element to remove from the array. int length The number of elements to remove from the array. Returns Type Description ImmutableArray<T> The new array with the specified elements removed. Replace(T, T) Finds the first element in the array equal to the specified value and replaces the value with the specified new value. Declaration public ImmutableArray<T> Replace(T oldValue, T newValue) Parameters Type Name Description T oldValue The value to find and replace in the array. T newValue The value to replace the oldvalue with. Returns Type Description ImmutableArray<T> A new array that contains newValue even if the new and old values are the same. Exceptions Type Condition ArgumentException oldValue is not found in the array. Replace(T, T, IEqualityComparer<T>?) Finds the first element in the array equal to the specified value and replaces the value with the specified new value. Declaration public ImmutableArray<T> Replace(T oldValue, T newValue, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T oldValue The value to find and replace in the array. T newValue The value to replace the oldvalue with. IEqualityComparer<T> equalityComparer The equality comparer to use to compare values. Returns Type Description ImmutableArray<T> A new array that contains newValue even if the new and old values are the same. Exceptions Type Condition ArgumentException oldValue is not found in the array. SetItem(int, T) Replaces the item at the specified index with the specified item. Declaration public ImmutableArray<T> SetItem(int index, T item) Parameters Type Name Description int index The index of the item to replace. T item The item to add to the list. Returns Type Description ImmutableArray<T> The new array that contains item at the specified index. Sort() Sorts the elements in the immutable array using the default comparer. Declaration public ImmutableArray<T> Sort() Returns Type Description ImmutableArray<T> A new immutable array that contains the items in this array, in sorted order. Sort(IComparer<T>?) Sorts the elements in the immutable array using the specified comparer. Declaration public ImmutableArray<T> Sort(IComparer<T>? comparer) Parameters Type Name Description IComparer<T> comparer The implementation to use when comparing elements, or null to use the default comparer. Returns Type Description ImmutableArray<T> A new immutable array that contains the items in this array, in sorted order. Sort(Comparison<T>) Sorts the elements in the entire ImmutableArray<T> using the specified Comparison<T>. Declaration public ImmutableArray<T> Sort(Comparison<T> comparison) Parameters Type Name Description Comparison<T> comparison The Comparison<T> to use when comparing elements. Returns Type Description ImmutableArray<T> The sorted list. Exceptions Type Condition ArgumentNullException comparison is null. Sort(int, int, IComparer<T>?) Sorts the specified elements in the immutable array using the specified comparer. Declaration public ImmutableArray<T> Sort(int index, int count, IComparer<T>? comparer) Parameters Type Name Description int index The index of the first element to sort. int count The number of elements to include in the sort. IComparer<T> comparer The implementation to use when comparing elements, or null to use the default comparer. Returns Type Description ImmutableArray<T> A new immutable array that contains the items in this array, in sorted order. ToBuilder() Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces. Declaration public ImmutableArray<T>.Builder ToBuilder() Returns Type Description ImmutableArray<T>.Builder The new builder with the same contents as this array. Operators operator ==(ImmutableArray<T>, ImmutableArray<T>) Returns a value that indicates if two arrays are equal. Declaration public static bool operator ==(ImmutableArray<T> left, ImmutableArray<T> right) Parameters Type Name Description ImmutableArray<T> left The array to the left of the operator. ImmutableArray<T> right The array to the right of the operator. Returns Type Description bool true if the arrays are equal; otherwise, false. operator ==(ImmutableArray<T>?, ImmutableArray<T>?) Returns a value that indicates if two arrays are equal. Declaration public static bool operator ==(ImmutableArray<T>? left, ImmutableArray<T>? right) Parameters Type Name Description ImmutableArray<T>? left The array to the left of the operator. ImmutableArray<T>? right The array to the right of the operator. Returns Type Description bool true if the arrays are equal; otherwise, false. operator !=(ImmutableArray<T>, ImmutableArray<T>) Returns a value that indicates whether two arrays are not equal. Declaration public static bool operator !=(ImmutableArray<T> left, ImmutableArray<T> right) Parameters Type Name Description ImmutableArray<T> left The array to the left of the operator. ImmutableArray<T> right The array to the right of the operator. Returns Type Description bool true if the arrays are not equal; otherwise, false. operator !=(ImmutableArray<T>?, ImmutableArray<T>?) Checks for inequality between two array. Declaration public static bool operator !=(ImmutableArray<T>? left, ImmutableArray<T>? right) Parameters Type Name Description ImmutableArray<T>? left The object to the left of the operator. ImmutableArray<T>? right The object to the right of the operator. Returns Type Description bool true if the two arrays are not equal; otherwise, false. Implements IList<T> ICollection<T> IEquatable<T> IList ICollection IStructuralComparable IStructuralEquatable IImmutableList<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableList.IndexOf<T>(IImmutableList<T>, T) ImmutableList.IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?) ImmutableList.IndexOf<T>(IImmutableList<T>, T, int) ImmutableList.IndexOf<T>(IImmutableList<T>, T, int, int) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, int) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, int, int) ImmutableList.RemoveRange<T>(IImmutableList<T>, IEnumerable<T>) ImmutableList.Remove<T>(IImmutableList<T>, T) ImmutableList.Replace<T>(IImmutableList<T>, T, T) ImmutableArray.BinarySearch<T>(ImmutableArray<T>, int, int, T) ImmutableArray.BinarySearch<T>(ImmutableArray<T>, int, int, T, IComparer<T>?) ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T) ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>?) ImmutableArrayExtensions.Aggregate<T>(ImmutableArray<T>, Func<T, T, T>) ImmutableArrayExtensions.Aggregate<TAccumulate, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>) ImmutableArrayExtensions.Aggregate<TAccumulate, TResult, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>, Func<TAccumulate, TResult>) ImmutableArrayExtensions.All<T>(ImmutableArray<T>, Func<T, bool>) ImmutableArrayExtensions.Any<T>(ImmutableArray<T>) ImmutableArrayExtensions.Any<T>(ImmutableArray<T>, Func<T, bool>) ImmutableArrayExtensions.ElementAtOrDefault<T>(ImmutableArray<T>, int) ImmutableArrayExtensions.ElementAt<T>(ImmutableArray<T>, int) ImmutableArrayExtensions.FirstOrDefault<T>(ImmutableArray<T>) ImmutableArrayExtensions.FirstOrDefault<T>(ImmutableArray<T>, Func<T, bool>) ImmutableArrayExtensions.First<T>(ImmutableArray<T>) ImmutableArrayExtensions.First<T>(ImmutableArray<T>, Func<T, bool>) ImmutableArrayExtensions.LastOrDefault<T>(ImmutableArray<T>) ImmutableArrayExtensions.LastOrDefault<T>(ImmutableArray<T>, Func<T, bool>) ImmutableArrayExtensions.Last<T>(ImmutableArray<T>) ImmutableArrayExtensions.Last<T>(ImmutableArray<T>, Func<T, bool>) ImmutableArrayExtensions.SelectMany<TSource, TCollection, TResult>(ImmutableArray<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>) ImmutableArrayExtensions.Select<T, TResult>(ImmutableArray<T>, Func<T, TResult>) ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, IEnumerable<TDerived>, IEqualityComparer<TBase>?) ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, IEqualityComparer<TBase>?) ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, Func<TBase, TBase, bool>) ImmutableArrayExtensions.SingleOrDefault<T>(ImmutableArray<T>) ImmutableArrayExtensions.SingleOrDefault<T>(ImmutableArray<T>, Func<T, bool>) ImmutableArrayExtensions.Single<T>(ImmutableArray<T>) ImmutableArrayExtensions.Single<T>(ImmutableArray<T>, Func<T, bool>) ImmutableArrayExtensions.ToArray<T>(ImmutableArray<T>) ImmutableArrayExtensions.ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>) ImmutableArrayExtensions.ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>, IEqualityComparer<TKey>?) ImmutableArrayExtensions.ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>) ImmutableArrayExtensions.ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>?) ImmutableArrayExtensions.Where<T>(ImmutableArray<T>, Func<T, bool>)"
  },
  "api/System.Collections.Immutable.ImmutableArray.html": {
    "href": "api/System.Collections.Immutable.ImmutableArray.html",
    "title": "Class ImmutableArray | CodeFactory for Windows",
    "keywords": "Class ImmutableArray Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableArray Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public static class ImmutableArray Methods BinarySearch<T>(ImmutableArray<T>, int, int, T) Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found. Declaration public static int BinarySearch<T>(this ImmutableArray<T> array, int index, int length, T value) Parameters Type Name Description ImmutableArray<T> array The sorted array to search. int index The starting index of the range to search. int length The length of the range to search. T value The object to search for. Returns Type Description int The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than value or, if there is no larger element, the bitwise complement of Count. Type Parameters Name Description T The type of element stored in the array. Exceptions Type Condition InvalidOperationException value does not implement IComparable or the search encounters an element that does not implement IComparable. ArgumentException index and length do not specify a valid range in array. ArgumentOutOfRangeException <code class=\"paramref\">index</code> is less than the lower bound of <code class=\"paramref\">array</code>. -or- length is less than zero. BinarySearch<T>(ImmutableArray<T>, int, int, T, IComparer<T>?) Searches a sorted immutable array for a specified element and returns the zero-based index of the element. Declaration public static int BinarySearch<T>(this ImmutableArray<T> array, int index, int length, T value, IComparer<T>? comparer) Parameters Type Name Description ImmutableArray<T> array The sorted array to search. int index The starting index of the range to search. int length The length of the range to search. T value The object to search for. IComparer<T> comparer The comparer to use when comparing elements for equality or null to use the default comparer. Returns Type Description int The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than value or, if there is no larger element, the bitwise complement of Count. Type Parameters Name Description T The type of element stored in the array. Exceptions Type Condition InvalidOperationException comparer is null and value does not implement IComparable or the search encounters an element that does not implement IComparable. ArgumentException <code class=\"paramref\">index</code> and <code class=\"paramref\">length</code> do not specify a valid range in <code class=\"paramref\">array</code>. -or- comparer is null, and value is of a type that is not compatible with the elements of array. ArgumentOutOfRangeException <code class=\"paramref\">index</code> is less than the lower bound of <code class=\"paramref\">array</code>. -or- length is less than zero. BinarySearch<T>(ImmutableArray<T>, T) Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found. Declaration public static int BinarySearch<T>(this ImmutableArray<T> array, T value) Parameters Type Name Description ImmutableArray<T> array The sorted array to search. T value The object to search for. Returns Type Description int The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than value or, if there is no larger element, the bitwise complement of Count. Type Parameters Name Description T The type of element stored in the array. Exceptions Type Condition InvalidOperationException value does not implement IComparable or the search encounters an element that does not implement IComparable. BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>?) Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found. Declaration public static int BinarySearch<T>(this ImmutableArray<T> array, T value, IComparer<T>? comparer) Parameters Type Name Description ImmutableArray<T> array The sorted array to search. T value The object to search for. IComparer<T> comparer The comparer implementation to use when comparing elements, or null to use the default comparer. Returns Type Description int The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than value or, if there is no larger element, the bitwise complement of Count. Type Parameters Name Description T The type of element stored in the array. Exceptions Type Condition InvalidOperationException comparer is null and value does not implement IComparable or the search encounters an element that does not implement IComparable. CreateBuilder<T>() Creates a mutable array that can be converted to an ImmutableArray without allocating new memory. Declaration public static ImmutableArray<T>.Builder CreateBuilder<T>() Returns Type Description ImmutableArray<T>.Builder A mutable array of the specified type that can be efficiently converted to an immutable array. Type Parameters Name Description T The type of elements stored in the builder. CreateBuilder<T>(int) Creates a mutable array that can be converted to an ImmutableArray without allocating new memory. Declaration public static ImmutableArray<T>.Builder CreateBuilder<T>(int initialCapacity) Parameters Type Name Description int initialCapacity The initial capacity of the builder. Returns Type Description ImmutableArray<T>.Builder A mutable array of the specified type that can be efficiently converted to an immutable array. Type Parameters Name Description T The type of elements stored in the builder. CreateRange<T>(IEnumerable<T>) Creates a new ImmutableArray<T> populated with the specified items. Declaration public static ImmutableArray<T> CreateRange<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The elements to add to the array. Returns Type Description ImmutableArray<T> An immutable array that contains the specified items. Type Parameters Name Description T The type of element stored in the array. CreateRange<TSource, TResult>(ImmutableArray<TSource>, Func<TSource, TResult>) Initializes a new instance of the ImmutableArray<T> struct. Declaration public static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, Func<TSource, TResult> selector) Parameters Type Name Description ImmutableArray<TSource> items The source array to initialize the resulting array with. Func<TSource, TResult> selector The function to apply to each element from the source array. Returns Type Description ImmutableArray<TResult> An immutable array that contains the specified items. Type Parameters Name Description TSource The type of element stored in the source array. TResult The type of element to store in the target array. CreateRange<TSource, TResult>(ImmutableArray<TSource>, int, int, Func<TSource, TResult>) Initializes a new instance of the ImmutableArray<T> struct. Declaration public static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, int start, int length, Func<TSource, TResult> selector) Parameters Type Name Description ImmutableArray<TSource> items The source array to initialize the resulting array with. int start The index of the first element in the source array to include in the resulting array. int length The number of elements from the source array to include in the resulting array. Func<TSource, TResult> selector The function to apply to each element from the source array included in the resulting array. Returns Type Description ImmutableArray<TResult> An immutable array that contains the specified items. Type Parameters Name Description TSource The type of element stored in the source array. TResult The type of element to store in the target array. CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource>, Func<TSource, TArg, TResult>, TArg) Initializes a new instance of the ImmutableArray<T> struct. Declaration public static ImmutableArray<TResult> CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource> items, Func<TSource, TArg, TResult> selector, TArg arg) Parameters Type Name Description ImmutableArray<TSource> items The source array to initialize the resulting array with. Func<TSource, TArg, TResult> selector The function to apply to each element from the source array. TArg arg An argument to be passed to the selector mapping function. Returns Type Description ImmutableArray<TResult> An immutable array that contains the specified items. Type Parameters Name Description TSource The type of element stored in the source array. TArg The type of argument to pass to the selector mapping function. TResult The type of element to store in the target array. CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource>, int, int, Func<TSource, TArg, TResult>, TArg) Initializes a new instance of the ImmutableArray<T> struct. Declaration public static ImmutableArray<TResult> CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource> items, int start, int length, Func<TSource, TArg, TResult> selector, TArg arg) Parameters Type Name Description ImmutableArray<TSource> items The source array to initialize the resulting array with. int start The index of the first element in the source array to include in the resulting array. int length The number of elements from the source array to include in the resulting array. Func<TSource, TArg, TResult> selector The function to apply to each element from the source array included in the resulting array. TArg arg An argument to be passed to the selector mapping function. Returns Type Description ImmutableArray<TResult> An immutable array that contains the specified items. Type Parameters Name Description TSource The type of element stored in the source array. TArg The type of argument to be passed to the selector mapping function. TResult The type of element to be stored in the target array. Create<T>() Creates an empty immutable array. Declaration public static ImmutableArray<T> Create<T>() Returns Type Description ImmutableArray<T> An empty immutable array. Type Parameters Name Description T The type of elements stored in the array. Create<T>(ImmutableArray<T>, int, int) Creates an immutable array with the specified objects from another immutable array. Declaration public static ImmutableArray<T> Create<T>(ImmutableArray<T> items, int start, int length) Parameters Type Name Description ImmutableArray<T> items The source array of objects. int start The index of the first element to copy from items. int length The number of elements from items to include in this immutable array. Returns Type Description ImmutableArray<T> An immutable array that contains the specified objects from the source array. Type Parameters Name Description T The type of elements stored in the array. Create<T>(T) Creates an immutable array that contains the specified object. Declaration public static ImmutableArray<T> Create<T>(T item) Parameters Type Name Description T item The object to store in the array. Returns Type Description ImmutableArray<T> An immutable array that contains the specified object. Type Parameters Name Description T The type of elements stored in the array. Create<T>(T, T) Creates an immutable array that contains the specified objects. Declaration public static ImmutableArray<T> Create<T>(T item1, T item2) Parameters Type Name Description T item1 The first object to store in the array. T item2 The second object to store in the array. Returns Type Description ImmutableArray<T> An immutable array that contains the specified objects. Type Parameters Name Description T The type of elements stored in the array. Create<T>(T, T, T) Creates an immutable array that contains the specified objects. Declaration public static ImmutableArray<T> Create<T>(T item1, T item2, T item3) Parameters Type Name Description T item1 The first object to store in the array. T item2 The second object to store in the array. T item3 The third object to store in the array. Returns Type Description ImmutableArray<T> An immutable array that contains the specified objects. Type Parameters Name Description T The type of elements stored in the array. Create<T>(T, T, T, T) Creates an immutable array that contains the specified objects. Declaration public static ImmutableArray<T> Create<T>(T item1, T item2, T item3, T item4) Parameters Type Name Description T item1 The first object to store in the array. T item2 The second object to store in the array. T item3 The third object to store in the array. T item4 The fourth object to store in the array. Returns Type Description ImmutableArray<T> An immutable array that contains the specified objects. Type Parameters Name Description T The type of elements stored in the array. Create<T>(params T[]?) Creates an immutable array from the specified array of objects. Declaration public static ImmutableArray<T> Create<T>(params T[]? items) Parameters Type Name Description T[] items The array of objects to populate the array with. Returns Type Description ImmutableArray<T> An immutable array that contains the array of items. Type Parameters Name Description T The type of elements stored in the array. Create<T>(T[], int, int) Creates an immutable array with specified objects from another array. Declaration public static ImmutableArray<T> Create<T>(T[] items, int start, int length) Parameters Type Name Description T[] items The source array of objects. int start The index of the first element to copy from items. int length The number of elements from items to include in this immutable array. Returns Type Description ImmutableArray<T> An immutable array that contains the specified objects from the source array. Type Parameters Name Description T The type of elements stored in the array. ToImmutableArray<TSource>(IEnumerable<TSource>) Creates an immutable array from the specified collection. Declaration public static ImmutableArray<TSource> ToImmutableArray<TSource>(this IEnumerable<TSource> items) Parameters Type Name Description IEnumerable<TSource> items The collection of objects to copy to the immutable array. Returns Type Description ImmutableArray<TSource> An immutable array that contains the specified collection of objects. Type Parameters Name Description TSource The type of elements contained in items. ToImmutableArray<TSource>(Builder) Creates an immutable array from the current contents of the builder's array. Declaration public static ImmutableArray<TSource> ToImmutableArray<TSource>(this ImmutableArray<TSource>.Builder builder) Parameters Type Name Description ImmutableArray<TSource>.Builder builder The builder to create the immutable array from. Returns Type Description ImmutableArray<TSource> An immutable array that contains the current contents of the builder's array. Type Parameters Name Description TSource The type of elements contained in the immutable array."
  },
  "api/System.Collections.Immutable.ImmutableDictionary-2.Builder.html": {
    "href": "api/System.Collections.Immutable.ImmutableDictionary-2.Builder.html",
    "title": "Class ImmutableDictionary<TKey, TValue>.Builder | CodeFactory for Windows",
    "keywords": "Class ImmutableDictionary<TKey, TValue>.Builder Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableDictionary<TKey, TValue>.Builder Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IDictionary ICollection IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableDictionary<TKey, TValue>.Builder : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable Properties Count Gets the number of elements contained in the immutable dictionary. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the immutable dictionary. this[TKey] Gets or sets the element with the specified key. Declaration public TValue this[TKey key] { get; set; } Parameters Type Name Description TKey key The element to get or set. Property Value Type Description TValue The element that has the specified key. Exceptions Type Condition ArgumentNullException key is null. KeyNotFoundException The property is being retrieved, and key is not found. NotSupportedException The property is being set, and the IDictionary<TKey, TValue> is read-only. KeyComparer Gets or sets the key comparer. Declaration public IEqualityComparer<TKey> KeyComparer { get; set; } Property Value Type Description IEqualityComparer<TKey> The key comparer. Keys Gets a collection that contains the keys of the immutable dictionary. Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description IEnumerable<TKey> A collection that contains the keys of the object that implements the immutable dictionary. ValueComparer Gets or sets the value comparer. Declaration public IEqualityComparer<TValue> ValueComparer { get; set; } Property Value Type Description IEqualityComparer<TValue> The value comparer. Values Gets a collection that contains the values of the immutable dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description IEnumerable<TValue> A collection that contains the values of the object that implements the dictionary. Methods Add(KeyValuePair<TKey, TValue>) Adds the specified item to the immutable dictionary. Declaration public void Add(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item The object to add to the dictionary. Exceptions Type Condition NotSupportedException The dictionary is read-only. Add(TKey, TValue) Adds an element that has the specified key and value to the immutable dictionary. Declaration public void Add(TKey key, TValue value) Parameters Type Name Description TKey key The key of the element to add. TValue value The value of the element to add. Exceptions Type Condition ArgumentNullException key is null. ArgumentException An element with the same key already exists in the dictionary. NotSupportedException The dictionary is read-only. AddRange(IEnumerable<KeyValuePair<TKey, TValue>>) Adds a sequence of values to this collection. Declaration public void AddRange(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> items The items to add to this collection. Clear() Removes all items from the immutable dictionary. Declaration public void Clear() Exceptions Type Condition NotSupportedException The dictionary is read-only. Contains(KeyValuePair<TKey, TValue>) Determines whether the immutable dictionary contains a specific value. Declaration public bool Contains(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item The object to locate in the dictionary. Returns Type Description bool true if item is found in the dictionary; otherwise, false. ContainsKey(TKey) Determines whether the immutable dictionary contains an element that has the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to locate in the dictionary. Returns Type Description bool true if the dictionary contains an element with the key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. ContainsValue(TValue) Determines whether the immutable dictionary contains an element that has the specified value. Declaration public bool ContainsValue(TValue value) Parameters Type Name Description TValue value The value to locate in the immutable dictionary. The value can be null for reference types. Returns Type Description bool true if the dictionary contains an element with the specified value; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the immutable dictionary. Declaration public ImmutableDictionary<TKey, TValue>.Enumerator GetEnumerator() Returns Type Description ImmutableDictionary<TKey, TValue>.Enumerator An enumerator that can be used to iterate through the collection. GetValueOrDefault(TKey) Gets the value for a given key if a matching key exists in the dictionary. Declaration public TValue? GetValueOrDefault(TKey key) Parameters Type Name Description TKey key The key to search for. Returns Type Description TValue The value for the key, or default(TValue) if no matching key was found. GetValueOrDefault(TKey, TValue) Gets the value for a given key if a matching key exists in the dictionary. Declaration public TValue GetValueOrDefault(TKey key, TValue defaultValue) Parameters Type Name Description TKey key The key to search for. TValue defaultValue The default value to return if no matching key is found in the dictionary. Returns Type Description TValue The value for the key, or defaultValue if no matching key was found. Remove(KeyValuePair<TKey, TValue>) Removes the first occurrence of a specific object from the immutable dictionary. Declaration public bool Remove(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item The object to remove from the dictionary. Returns Type Description bool true if item was successfully removed from the dictionary; otherwise, false. This method also returns false if item is not found in the dictionary. Exceptions Type Condition NotSupportedException The dictionary is read-only. Remove(TKey) Removes the element with the specified key from the immutable dictionary. Declaration public bool Remove(TKey key) Parameters Type Name Description TKey key The key of the element to remove. Returns Type Description bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the dictionary. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The dictionary is read-only. RemoveRange(IEnumerable<TKey>) Removes any entries with keys that match those found in the specified sequence from the immutable dictionary. Declaration public void RemoveRange(IEnumerable<TKey> keys) Parameters Type Name Description IEnumerable<TKey> keys The keys for entries to remove from the dictionary. ToImmutable() Creates an immutable dictionary based on the contents of this instance. Declaration public ImmutableDictionary<TKey, TValue> ToImmutable() Returns Type Description ImmutableDictionary<TKey, TValue> An immutable dictionary. TryGetKey(TKey, out TKey) Determines whether this dictionary contains a specified key. Declaration public bool TryGetKey(TKey equalKey, out TKey actualKey) Parameters Type Name Description TKey equalKey The key to search for. TKey actualKey The matching key located in the dictionary if found, or equalkey if no match is found. Returns Type Description bool true if a match for equalKey is found; otherwise, false. TryGetValue(TKey, out TValue) Returns the value associated with the specified key. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key whose value will be retrieved. TValue value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements the immutable dictionary contains an element with the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. Implements IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(ImmutableDictionary<TKey, TValue>.Builder)"
  },
  "api/System.Collections.Immutable.ImmutableDictionary-2.Enumerator.html": {
    "href": "api/System.Collections.Immutable.ImmutableDictionary-2.Enumerator.html",
    "title": "Struct ImmutableDictionary<TKey, TValue>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ImmutableDictionary<TKey, TValue>.Enumerator Enumerates the contents of the immutable dictionary without allocating any memory. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Implements IEnumerator<KeyValuePair<TKey, TValue>> IDisposable IEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public struct ImmutableDictionary<TKey, TValue>.Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, IEnumerator Properties Current Gets the element at the current position of the enumerator. Declaration public KeyValuePair<TKey, TValue> Current { get; } Property Value Type Description KeyValuePair<TKey, TValue> The element in the dictionary at the current position of the enumerator. Methods Dispose() Releases the resources used by the current instance of the ImmutableDictionary<TKey, TValue>.Enumerator class. Declaration public void Dispose() MoveNext() Advances the enumerator to the next element of the immutable dictionary. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the dictionary. Exceptions Type Condition InvalidOperationException The dictionary was modified after the enumerator was created. Reset() Sets the enumerator to its initial position, which is before the first element in the dictionary. Declaration public void Reset() Exceptions Type Condition InvalidOperationException The dictionary was modified after the enumerator was created. Implements IEnumerator<T> IDisposable IEnumerator"
  },
  "api/System.Collections.Immutable.ImmutableDictionary-2.html": {
    "href": "api/System.Collections.Immutable.ImmutableDictionary-2.html",
    "title": "Class ImmutableDictionary<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class ImmutableDictionary<TKey, TValue> Represents an immutable, unordered collection of keys and values. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableDictionary<TKey, TValue> Implements IImmutableDictionary<TKey, TValue> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IDictionary ICollection IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableDictionary<TKey, TValue> : IImmutableDictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable where TKey : notnull Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. Fields Empty Gets an empty immutable dictionary. Declaration public static readonly ImmutableDictionary<TKey, TValue> Empty Field Value Type Description ImmutableDictionary<TKey, TValue> Properties Count Gets the number of key/value pairs in the immutable dictionary. Declaration public int Count { get; } Property Value Type Description int The number of key/value pairs in the dictionary. IsEmpty Gets a value that indicates whether this instance of the immutable dictionary is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool true if this instance is empty; otherwise, false. this[TKey] Gets the TValue associated with the specified key. Declaration public TValue this[TKey key] { get; } Parameters Type Name Description TKey key The type of the key. Property Value Type Description TValue The value associated with the specified key. If no results are found, the operation throws an exception. KeyComparer Gets the key comparer for the immutable dictionary. Declaration public IEqualityComparer<TKey> KeyComparer { get; } Property Value Type Description IEqualityComparer<TKey> The key comparer. Keys Gets the keys in the immutable dictionary. Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description IEnumerable<TKey> The keys in the immutable dictionary. ValueComparer Gets the value comparer used to determine whether values are equal. Declaration public IEqualityComparer<TValue> ValueComparer { get; } Property Value Type Description IEqualityComparer<TValue> The value comparer used to determine whether values are equal. Values Gets the values in the immutable dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description IEnumerable<TValue> The values in the immutable dictionary. Methods Add(TKey, TValue) Adds an element with the specified key and value to the immutable dictionary. Declaration public ImmutableDictionary<TKey, TValue> Add(TKey key, TValue value) Parameters Type Name Description TKey key The key of the element to add. TValue value The value of the element to add. Returns Type Description ImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the additional key/value pair. Exceptions Type Condition ArgumentException The given key already exists in the dictionary but has a different value. AddRange(IEnumerable<KeyValuePair<TKey, TValue>>) Adds the specified key/value pairs to the immutable dictionary. Declaration public ImmutableDictionary<TKey, TValue> AddRange(IEnumerable<KeyValuePair<TKey, TValue>> pairs) Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> pairs The key/value pairs to add. Returns Type Description ImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the additional key/value pairs. Exceptions Type Condition ArgumentException One of the given keys already exists in the dictionary but has a different value. Clear() Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance. Declaration public ImmutableDictionary<TKey, TValue> Clear() Returns Type Description ImmutableDictionary<TKey, TValue> An empty dictionary with equivalent ordering and key/value comparison rules. Contains(KeyValuePair<TKey, TValue>) Determines whether this immutable dictionary contains the specified key/value pair. Declaration public bool Contains(KeyValuePair<TKey, TValue> pair) Parameters Type Name Description KeyValuePair<TKey, TValue> pair The key/value pair to locate. Returns Type Description bool true if the specified key/value pair is found in the dictionary; otherwise, false. ContainsKey(TKey) Determines whether the immutable dictionary contains an element with the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to locate. Returns Type Description bool true if the immutable dictionary contains an element with the specified key; otherwise, false. ContainsValue(TValue) Determines whether the immutable dictionary contains an element with the specified value. Declaration public bool ContainsValue(TValue value) Parameters Type Name Description TValue value The value to locate. The value can be null for reference types. Returns Type Description bool true if the dictionary contains an element with the specified value; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the immutable dictionary. Declaration public ImmutableDictionary<TKey, TValue>.Enumerator GetEnumerator() Returns Type Description ImmutableDictionary<TKey, TValue>.Enumerator An enumerator that can be used to iterate through the dictionary. Remove(TKey) Removes the element with the specified key from the immutable dictionary. Declaration public ImmutableDictionary<TKey, TValue> Remove(TKey key) Parameters Type Name Description TKey key The key of the element to remove. Returns Type Description ImmutableDictionary<TKey, TValue> A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary. RemoveRange(IEnumerable<TKey>) Removes the elements with the specified keys from the immutable dictionary. Declaration public ImmutableDictionary<TKey, TValue> RemoveRange(IEnumerable<TKey> keys) Parameters Type Name Description IEnumerable<TKey> keys The keys of the elements to remove. Returns Type Description ImmutableDictionary<TKey, TValue> A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary. SetItem(TKey, TValue) Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key. Declaration public ImmutableDictionary<TKey, TValue> SetItem(TKey key, TValue value) Parameters Type Name Description TKey key The key of the entry to add. TValue value The key value to set. Returns Type Description ImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the specified key/value pair. SetItems(IEnumerable<KeyValuePair<TKey, TValue>>) Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys. Declaration public ImmutableDictionary<TKey, TValue> SetItems(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> items The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values. Returns Type Description ImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the specified key/value pairs. ToBuilder() Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces. Declaration public ImmutableDictionary<TKey, TValue>.Builder ToBuilder() Returns Type Description ImmutableDictionary<TKey, TValue>.Builder A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces. TryGetKey(TKey, out TKey) Determines whether this dictionary contains a specified key. Declaration public bool TryGetKey(TKey equalKey, out TKey actualKey) Parameters Type Name Description TKey equalKey The key to search for. TKey actualKey The matching key located in the dictionary if found, or equalkey if no match is found. Returns Type Description bool true if a match for equalKey is found; otherwise, false. TryGetValue(TKey, out TValue) Gets the value associated with the specified key. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key whose value will be retrieved. TValue value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements the dictionary contains an element with the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. WithComparers(IEqualityComparer<TKey>?) Gets an instance of the immutable dictionary that uses the specified key comparer. Declaration public ImmutableDictionary<TKey, TValue> WithComparers(IEqualityComparer<TKey>? keyComparer) Parameters Type Name Description IEqualityComparer<TKey> keyComparer The key comparer to use. Returns Type Description ImmutableDictionary<TKey, TValue> An instance of the immutable dictionary that uses the given comparer. WithComparers(IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) Gets an instance of the immutable dictionary that uses the specified key and value comparers. Declaration public ImmutableDictionary<TKey, TValue> WithComparers(IEqualityComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer) Parameters Type Name Description IEqualityComparer<TKey> keyComparer The key comparer to use. IEqualityComparer<TValue> valueComparer The value comparer to use. Returns Type Description ImmutableDictionary<TKey, TValue> An instance of the immutable dictionary that uses the given comparers. Implements IImmutableDictionary<TKey, TValue> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IDictionary ICollection IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableDictionary.Contains<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey, TValue) ImmutableDictionary.GetValueOrDefault<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey) ImmutableDictionary.GetValueOrDefault<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey, TValue)"
  },
  "api/System.Collections.Immutable.ImmutableDictionary.html": {
    "href": "api/System.Collections.Immutable.ImmutableDictionary.html",
    "title": "Class ImmutableDictionary | CodeFactory for Windows",
    "keywords": "Class ImmutableDictionary Provides a set of initialization methods for instances of the ImmutableDictionary<TKey, TValue> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableDictionary Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public static class ImmutableDictionary Methods Contains<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey, TValue) Determines whether the specified immutable dictionary contains the specified key/value pair. Declaration public static bool Contains<TKey, TValue>(this IImmutableDictionary<TKey, TValue> map, TKey key, TValue value) where TKey : notnull Parameters Type Name Description IImmutableDictionary<TKey, TValue> map The immutable dictionary to search. TKey key The key to locate in the immutable dictionary. TValue value The value to locate on the specified key, if the key is found. Returns Type Description bool true if this map contains the specified key/value pair; otherwise, false. Type Parameters Name Description TKey The type of the keys in the immutable dictionary. TValue The type of the values in the immutable dictionary. CreateBuilder<TKey, TValue>() Creates a new immutable dictionary builder. Declaration public static ImmutableDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>() where TKey : notnull Returns Type Description ImmutableDictionary<TKey, TValue>.Builder The new builder. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. CreateBuilder<TKey, TValue>(IEqualityComparer<TKey>?) Creates a new immutable dictionary builder. Declaration public static ImmutableDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(IEqualityComparer<TKey>? keyComparer) where TKey : notnull Parameters Type Name Description IEqualityComparer<TKey> keyComparer The key comparer. Returns Type Description ImmutableDictionary<TKey, TValue>.Builder The new builder. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. CreateBuilder<TKey, TValue>(IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) Creates a new immutable dictionary builder. Declaration public static ImmutableDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(IEqualityComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer) where TKey : notnull Parameters Type Name Description IEqualityComparer<TKey> keyComparer The key comparer. IEqualityComparer<TValue> valueComparer The value comparer. Returns Type Description ImmutableDictionary<TKey, TValue>.Builder The new builder. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. CreateRange<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Creates a new immutable dictionary that contains the specified items. Declaration public static ImmutableDictionary<TKey, TValue> CreateRange<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>> items) where TKey : notnull Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> items The items used to populate the dictionary before it's immutable. Returns Type Description ImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the specified items. Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary. CreateRange<TKey, TValue>(IEqualityComparer<TKey>?, IEnumerable<KeyValuePair<TKey, TValue>>) Creates a new immutable dictionary that contains the specified items and uses the specified key comparer. Declaration public static ImmutableDictionary<TKey, TValue> CreateRange<TKey, TValue>(IEqualityComparer<TKey>? keyComparer, IEnumerable<KeyValuePair<TKey, TValue>> items) where TKey : notnull Parameters Type Name Description IEqualityComparer<TKey> keyComparer The comparer implementation to use to compare keys for equality. IEnumerable<KeyValuePair<TKey, TValue>> items The items to add to the dictionary before it's immutable. Returns Type Description ImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the specified items and uses the specified comparer. Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary. CreateRange<TKey, TValue>(IEqualityComparer<TKey>?, IEqualityComparer<TValue>?, IEnumerable<KeyValuePair<TKey, TValue>>) Creates a new immutable dictionary that contains the specified items and uses the specified key comparer. Declaration public static ImmutableDictionary<TKey, TValue> CreateRange<TKey, TValue>(IEqualityComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer, IEnumerable<KeyValuePair<TKey, TValue>> items) where TKey : notnull Parameters Type Name Description IEqualityComparer<TKey> keyComparer The comparer implementation to use to compare keys for equality. IEqualityComparer<TValue> valueComparer The comparer implementation to use to compare values for equality. IEnumerable<KeyValuePair<TKey, TValue>> items The items to add to the dictionary before it's immutable. Returns Type Description ImmutableDictionary<TKey, TValue> A new immutable dictionary that contains the specified items and uses the specified comparer. Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary. Create<TKey, TValue>() Creates an empty immutable dictionary. Declaration public static ImmutableDictionary<TKey, TValue> Create<TKey, TValue>() where TKey : notnull Returns Type Description ImmutableDictionary<TKey, TValue> An empty immutable dictionary. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. Create<TKey, TValue>(IEqualityComparer<TKey>?) Creates an empty immutable dictionary that uses the specified key comparer. Declaration public static ImmutableDictionary<TKey, TValue> Create<TKey, TValue>(IEqualityComparer<TKey>? keyComparer) where TKey : notnull Parameters Type Name Description IEqualityComparer<TKey> keyComparer The implementation to use to determine the equality of keys in the dictionary. Returns Type Description ImmutableDictionary<TKey, TValue> An empty immutable dictionary. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. Create<TKey, TValue>(IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) Creates an empty immutable dictionary that uses the specified key and value comparers. Declaration public static ImmutableDictionary<TKey, TValue> Create<TKey, TValue>(IEqualityComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer) where TKey : notnull Parameters Type Name Description IEqualityComparer<TKey> keyComparer The implementation to use to determine the equality of keys in the dictionary. IEqualityComparer<TValue> valueComparer The implementation to use to determine the equality of values in the dictionary. Returns Type Description ImmutableDictionary<TKey, TValue> An empty immutable dictionary. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. GetValueOrDefault<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey) Gets the value for a given key if a matching key exists in the dictionary. Declaration public static TValue? GetValueOrDefault<TKey, TValue>(this IImmutableDictionary<TKey, TValue> dictionary, TKey key) where TKey : notnull Parameters Type Name Description IImmutableDictionary<TKey, TValue> dictionary The dictionary to retrieve the value from. TKey key The key to search for. Returns Type Description TValue The value for the key, or default(TValue) if no matching key was found. Type Parameters Name Description TKey The type of the key. TValue The type of the value. GetValueOrDefault<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey, TValue) Gets the value for a given key if a matching key exists in the dictionary. Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IImmutableDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) where TKey : notnull Parameters Type Name Description IImmutableDictionary<TKey, TValue> dictionary The dictionary to retrieve the value from. TKey key The key to search for. TValue defaultValue The default value to return if no matching key is found in the dictionary. Returns Type Description TValue The value for the key, or defaultValue if no matching key was found. Type Parameters Name Description TKey The type of the key. TValue The type of the value. ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents. Declaration public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source) where TKey : notnull Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> source The sequence of key/value pairs to enumerate. Returns Type Description ImmutableDictionary<TKey, TValue> An immutable dictionary that contains the key/value pairs in the specified sequence. Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?) Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer. Declaration public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, IEqualityComparer<TKey>? keyComparer) where TKey : notnull Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> source The sequence of key/value pairs to enumerate. IEqualityComparer<TKey> keyComparer The key comparer to use when building the immutable dictionary. Returns Type Description ImmutableDictionary<TKey, TValue> An immutable dictionary that contains the key/value pairs in the specified sequence. Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers. Declaration public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, IEqualityComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer) where TKey : notnull Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> source The sequence of key/value pairs to enumerate. IEqualityComparer<TKey> keyComparer The key comparer to use when building the immutable dictionary. IEqualityComparer<TValue> valueComparer The value comparer to use for the immutable dictionary. Returns Type Description ImmutableDictionary<TKey, TValue> An immutable dictionary that contains the key/value pairs in the specified sequence. Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys. Declaration public static ImmutableDictionary<TKey, TSource> ToImmutableDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector) where TKey : notnull Parameters Type Name Description IEnumerable<TSource> source The source collection used to generate the immutable dictionary. Func<TSource, TKey> keySelector The function used to transform keys for the immutable dictionary. Returns Type Description ImmutableDictionary<TKey, TSource> The immutable dictionary that contains elements from source, with keys transformed by applying keySelector. Type Parameters Name Description TSource The type of element in the source collection. TKey The type of key in the resulting immutable dictionary. ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) Constructs an immutable dictionary based on some transformation of a sequence. Declaration public static ImmutableDictionary<TKey, TSource> ToImmutableDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey>? keyComparer) where TKey : notnull Parameters Type Name Description IEnumerable<TSource> source The source collection used to generate the immutable dictionary. Func<TSource, TKey> keySelector The function used to transform keys for the immutable dictionary. IEqualityComparer<TKey> keyComparer The key comparer to use for the dictionary. Returns Type Description ImmutableDictionary<TKey, TSource> The immutable dictionary that contains elements from source, with keys transformed by applying keySelector. Type Parameters Name Description TSource The type of element in the source collection. TKey The type of key in the resulting immutable dictionary. ToImmutableDictionary<TKey, TValue>(Builder) Creates an immutable dictionary from the current contents of the builder's dictionary. Declaration public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this ImmutableDictionary<TKey, TValue>.Builder builder) where TKey : notnull Parameters Type Name Description ImmutableDictionary<TKey, TValue>.Builder builder The builder to create the immutable dictionary from. Returns Type Description ImmutableDictionary<TKey, TValue> An immutable dictionary that contains the current contents in the builder's dictionary. Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) Enumerates and transforms a sequence, and produces an immutable dictionary of its contents. Declaration public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TSource, TKey, TValue>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector) where TKey : notnull Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate to generate the dictionary. Func<TSource, TKey> keySelector The function that will produce the key for the dictionary from each sequence element. Func<TSource, TValue> elementSelector The function that will produce the value for the dictionary from each sequence element. Returns Type Description ImmutableDictionary<TKey, TValue> An immutable dictionary that contains the items in the specified sequence. Type Parameters Name Description TSource The type of the elements in the sequence. TKey The type of the keys in the resulting dictionary. TValue The type of the values in the resulting dictionary. ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer. Declaration public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TSource, TKey, TValue>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, IEqualityComparer<TKey>? keyComparer) where TKey : notnull Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate to generate the dictionary. Func<TSource, TKey> keySelector The function that will produce the key for the dictionary from each sequence element. Func<TSource, TValue> elementSelector The function that will produce the value for the dictionary from each sequence element. IEqualityComparer<TKey> keyComparer The key comparer to use for the dictionary. Returns Type Description ImmutableDictionary<TKey, TValue> An immutable dictionary that contains the items in the specified sequence. Type Parameters Name Description TSource The type of the elements in the sequence. TKey The type of the keys in the resulting dictionary. TValue The type of the values in the resulting dictionary. ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers. Declaration public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TSource, TKey, TValue>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, IEqualityComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer) where TKey : notnull Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate to generate the dictionary. Func<TSource, TKey> keySelector The function that will produce the key for the dictionary from each sequence element. Func<TSource, TValue> elementSelector The function that will produce the value for the dictionary from each sequence element. IEqualityComparer<TKey> keyComparer The key comparer to use for the dictionary. IEqualityComparer<TValue> valueComparer The value comparer to use for the dictionary. Returns Type Description ImmutableDictionary<TKey, TValue> An immutable dictionary that contains the items in the specified sequence. Type Parameters Name Description TSource The type of the elements in the sequence. TKey The type of the keys in the resulting dictionary. TValue The type of the values in the resulting dictionary."
  },
  "api/System.Collections.Immutable.ImmutableHashSet-1.Builder.html": {
    "href": "api/System.Collections.Immutable.ImmutableHashSet-1.Builder.html",
    "title": "Class ImmutableHashSet<T>.Builder | CodeFactory for Windows",
    "keywords": "Class ImmutableHashSet<T>.Builder Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableHashSet<T>.Builder Implements IReadOnlyCollection<T> ISet<T> ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableHashSet<T>.Builder : IReadOnlyCollection<T>, ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable Properties Count Gets the number of elements contained in the immutable hash set. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the immutable hash set. KeyComparer Gets or sets the key comparer. Declaration public IEqualityComparer<T> KeyComparer { get; set; } Property Value Type Description IEqualityComparer<T> The key comparer. Methods Add(T) Adds the specified item to the immutable hash set. Declaration public bool Add(T item) Parameters Type Name Description T item The item to add. Returns Type Description bool true if the item did not already belong to the collection; otherwise, false. Clear() Removes all items from the immutable hash set. Declaration public void Clear() Exceptions Type Condition NotSupportedException The hash set is read-only. Contains(T) Determines whether the immutable hash set contains a specific value. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the hash set. Returns Type Description bool true if item is found in the hash set ; otherwise, false. ExceptWith(IEnumerable<T>) Removes all elements in the specified collection from the current hash set. Declaration public void ExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection of items to remove from the set. GetEnumerator() Returns an enumerator that iterates through the immutable hash set. Declaration public ImmutableHashSet<T>.Enumerator GetEnumerator() Returns Type Description ImmutableHashSet<T>.Enumerator An enumerator that can be used to iterate through the set. IntersectWith(IEnumerable<T>) Modifies the current set so that it contains only elements that are also in a specified collection. Declaration public void IntersectWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. IsProperSubsetOf(IEnumerable<T>) Determines whether the current set is a proper (strict) subset of a specified collection. Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper subset of other; otherwise, false. IsProperSupersetOf(IEnumerable<T>) Determines whether the current set is a proper (strict) superset of a specified collection. Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper superset of other; otherwise, false. IsSubsetOf(IEnumerable<T>) Determines whether the current set is a subset of a specified collection. Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise, false. IsSupersetOf(IEnumerable<T>) Determines whether the current set is a superset of a specified collection. Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a superset of other; otherwise, false. Overlaps(IEnumerable<T>) Determines whether the current set overlaps with the specified collection. Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set and other share at least one common element; otherwise, false. Remove(T) Removes the first occurrence of a specific object from the immutable hash set. Declaration public bool Remove(T item) Parameters Type Name Description T item The object to remove from the set. Returns Type Description bool true if item was successfully removed from the set ; otherwise, false. This method also returns false if item is not found in the original set. Exceptions Type Condition NotSupportedException The set is read-only. SetEquals(IEnumerable<T>) Determines whether the current set and the specified collection contain the same elements. Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is equal to other; otherwise, false. SymmetricExceptWith(IEnumerable<T>) Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both. Declaration public void SymmetricExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. ToImmutable() Creates an immutable hash set based on the contents of this instance. Declaration public ImmutableHashSet<T> ToImmutable() Returns Type Description ImmutableHashSet<T> An immutable set. TryGetValue(T, out T) Searches the set for a given value and returns the equal value it finds, if any. Declaration public bool TryGetValue(T equalValue, out T actualValue) Parameters Type Name Description T equalValue The value for which to search. T actualValue The value from the set that the search found, or the original value if the search yielded no match. Returns Type Description bool A value indicating whether the search was successful. UnionWith(IEnumerable<T>) Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection. Declaration public void UnionWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Implements IReadOnlyCollection<T> ISet<T> ICollection<T> IEnumerable<T> IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableHashSet.ToImmutableHashSet<TSource>(ImmutableHashSet<TSource>.Builder)"
  },
  "api/System.Collections.Immutable.ImmutableHashSet-1.Enumerator.html": {
    "href": "api/System.Collections.Immutable.ImmutableHashSet-1.Enumerator.html",
    "title": "Struct ImmutableHashSet<T>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ImmutableHashSet<T>.Enumerator Enumerates the contents of the immutable hash set without allocating any memory. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Implements IEnumerator<T> IDisposable IEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public struct ImmutableHashSet<T>.Enumerator : IEnumerator<T>, IDisposable, IEnumerator Properties Current Gets the element at the current position of the enumerator. Declaration public T Current { get; } Property Value Type Description T The element at the current position of the enumerator. Methods Dispose() Releases the resources used by the current instance of the ImmutableHashSet<T>.Enumerator class. Declaration public void Dispose() MoveNext() Advances the enumerator to the next element of the immutable hash set. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the hash set. Exceptions Type Condition InvalidOperationException The hash set was modified after the enumerator was created. Reset() Sets the enumerator to its initial position, which is before the first element in the hash set. Declaration public void Reset() Exceptions Type Condition InvalidOperationException The hash set was modified after the enumerator was created. Implements IEnumerator<T> IDisposable IEnumerator"
  },
  "api/System.Collections.Immutable.ImmutableHashSet-1.html": {
    "href": "api/System.Collections.Immutable.ImmutableHashSet-1.html",
    "title": "Class ImmutableHashSet<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableHashSet<T> Represents an immutable, unordered hash set. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableHashSet<T> Implements IImmutableSet<T> IReadOnlyCollection<T> ISet<T> ICollection<T> IEnumerable<T> ICollection IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableHashSet<T> : IImmutableSet<T>, IReadOnlyCollection<T>, ISet<T>, ICollection<T>, IEnumerable<T>, ICollection, IEnumerable Type Parameters Name Description T The type of elements in the hash set. Fields Empty Gets an immutable hash set for this type that uses the default IEqualityComparer<T>. Declaration public static readonly ImmutableHashSet<T> Empty Field Value Type Description ImmutableHashSet<T> Properties Count Gets the number of elements in the immutable hash set. Declaration public int Count { get; } Property Value Type Description int The number of elements in the hash set. IsEmpty Gets a value that indicates whether the current immutable hash set is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool true if this instance is empty; otherwise, false. KeyComparer Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set. Declaration public IEqualityComparer<T> KeyComparer { get; } Property Value Type Description IEqualityComparer<T> The comparer used to obtain hash codes for the keys and check equality. Methods Add(T) Adds the specified element to the hash set. Declaration public ImmutableHashSet<T> Add(T item) Parameters Type Name Description T item The element to add to the set. Returns Type Description ImmutableHashSet<T> A hash set that contains the added value and any values previously held by the ImmutableHashSet<T> object. Clear() Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance. Declaration public ImmutableHashSet<T> Clear() Returns Type Description ImmutableHashSet<T> An empty hash set that has the same sorting and ordering semantics as this instance. Contains(T) Determines whether this immutable hash set contains the specified element. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the immutable hash set. Returns Type Description bool true if item is found in the ImmutableHashSet<T>; otherwise, false. Except(IEnumerable<T>) Removes the elements in the specified collection from the current immutable hash set. Declaration public ImmutableHashSet<T> Except(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection of items to remove from this set. Returns Type Description ImmutableHashSet<T> A new set with the items removed; or the original set if none of the items were in the set. GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public ImmutableHashSet<T>.Enumerator GetEnumerator() Returns Type Description ImmutableHashSet<T>.Enumerator An enumerator that can be used to iterate through the collection. Intersect(IEnumerable<T>) Creates an immutable hash set that contains elements that exist in both this set and the specified set. Declaration public ImmutableHashSet<T> Intersect(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description ImmutableHashSet<T> A new immutable set that contains any elements that exist in both sets. IsProperSubsetOf(IEnumerable<T>) Determines whether the current immutable hash set is a proper (strict) subset of a specified collection. Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper subset of the specified collection; otherwise, false. IsProperSupersetOf(IEnumerable<T>) Determines whether the current immutable hash set is a proper (strict) superset of a specified collection. Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper superset of the specified collection; otherwise, false. IsSubsetOf(IEnumerable<T>) Determines whether the current immutable hash set is a subset of a specified collection. Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of the specified collection; otherwise, false. IsSupersetOf(IEnumerable<T>) Determines whether the current immutable hash set is a superset of a specified collection. Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a superset of the specified collection; otherwise, false. Overlaps(IEnumerable<T>) Determines whether the current immutable hash set overlaps with the specified collection. Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set and the specified collection share at least one common element; otherwise, false. Remove(T) Removes the specified element from this immutable hash set. Declaration public ImmutableHashSet<T> Remove(T item) Parameters Type Name Description T item The element to remove. Returns Type Description ImmutableHashSet<T> A new set with the specified element removed, or the current set if the element cannot be found in the set. SetEquals(IEnumerable<T>) Determines whether the current immutable hash set and the specified collection contain the same elements. Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the sets are equal; otherwise, false. SymmetricExcept(IEnumerable<T>) Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both. Declaration public ImmutableHashSet<T> SymmetricExcept(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description ImmutableHashSet<T> A new set that contains the elements that are present only in the current set or in the specified collection, but not both. ToBuilder() Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces. Declaration public ImmutableHashSet<T>.Builder ToBuilder() Returns Type Description ImmutableHashSet<T>.Builder A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces. TryGetValue(T, out T) Searches the set for a given value and returns the equal value it finds, if any. Declaration public bool TryGetValue(T equalValue, out T actualValue) Parameters Type Name Description T equalValue The value to search for. T actualValue The value from the set that the search found, or the original value if the search yielded no match. Returns Type Description bool A value indicating whether the search was successful. Union(IEnumerable<T>) Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection. Declaration public ImmutableHashSet<T> Union(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to add elements from. Returns Type Description ImmutableHashSet<T> A new immutable hash set with the items added; or the original set if all the items were already in the set. WithComparer(IEqualityComparer<T>?) Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods. Declaration public ImmutableHashSet<T> WithComparer(IEqualityComparer<T>? equalityComparer) Parameters Type Name Description IEqualityComparer<T> equalityComparer The equality comparer to use. Returns Type Description ImmutableHashSet<T> An instance of this immutable hash set that uses the given comparer. Implements IImmutableSet<T> IReadOnlyCollection<T> ISet<T> ICollection<T> IEnumerable<T> ICollection IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?)"
  },
  "api/System.Collections.Immutable.ImmutableHashSet.html": {
    "href": "api/System.Collections.Immutable.ImmutableHashSet.html",
    "title": "Class ImmutableHashSet | CodeFactory for Windows",
    "keywords": "Class ImmutableHashSet Provides a set of initialization methods for instances of the ImmutableHashSet<T> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableHashSet Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public static class ImmutableHashSet Methods CreateBuilder<T>() Creates a new immutable hash set builder. Declaration public static ImmutableHashSet<T>.Builder CreateBuilder<T>() Returns Type Description ImmutableHashSet<T>.Builder The immutable hash set builder. Type Parameters Name Description T The type of items stored by the collection. CreateBuilder<T>(IEqualityComparer<T>?) Creates a new immutable hash set builder. Declaration public static ImmutableHashSet<T>.Builder CreateBuilder<T>(IEqualityComparer<T>? equalityComparer) Parameters Type Name Description IEqualityComparer<T> equalityComparer The object to use for comparing objects in the set for equality. Returns Type Description ImmutableHashSet<T>.Builder The new immutable hash set builder. Type Parameters Name Description T The type of items stored by the collection. CreateRange<T>(IEnumerable<T>) Creates a new immutable hash set prefilled with the specified items. Declaration public static ImmutableHashSet<T> CreateRange<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The items to add to the hash set. Returns Type Description ImmutableHashSet<T> The new immutable hash set that contains the specified items. Type Parameters Name Description T The type of items stored by the collection. CreateRange<T>(IEqualityComparer<T>?, IEnumerable<T>) Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type. Declaration public static ImmutableHashSet<T> CreateRange<T>(IEqualityComparer<T>? equalityComparer, IEnumerable<T> items) Parameters Type Name Description IEqualityComparer<T> equalityComparer The object to use for comparing objects in the set for equality. IEnumerable<T> items The items add to the collection before immutability is applied. Returns Type Description ImmutableHashSet<T> The new immutable hash set. Type Parameters Name Description T The type of items stored in the collection. Create<T>() Creates an empty immutable hash set. Declaration public static ImmutableHashSet<T> Create<T>() Returns Type Description ImmutableHashSet<T> An empty immutable hash set. Type Parameters Name Description T The type of items to be stored in the immutable hash set. Create<T>(IEqualityComparer<T>?) Creates an empty immutable hash set that uses the specified equality comparer. Declaration public static ImmutableHashSet<T> Create<T>(IEqualityComparer<T>? equalityComparer) Parameters Type Name Description IEqualityComparer<T> equalityComparer The object to use for comparing objects in the set for equality. Returns Type Description ImmutableHashSet<T> An empty immutable hash set. Type Parameters Name Description T The type of items in the immutable hash set. Create<T>(IEqualityComparer<T>?, T) Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type. Declaration public static ImmutableHashSet<T> Create<T>(IEqualityComparer<T>? equalityComparer, T item) Parameters Type Name Description IEqualityComparer<T> equalityComparer The object to use for comparing objects in the set for equality. T item The item to prepopulate the hash set with. Returns Type Description ImmutableHashSet<T> A new immutable hash set that contains the specified item. Type Parameters Name Description T The type of items in the immutable hash set. Create<T>(IEqualityComparer<T>?, params T[]) Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type. Declaration public static ImmutableHashSet<T> Create<T>(IEqualityComparer<T>? equalityComparer, params T[] items) Parameters Type Name Description IEqualityComparer<T> equalityComparer The object to use for comparing objects in the set for equality. T[] items An array that contains the items to prepopulate the hash set with. Returns Type Description ImmutableHashSet<T> A new immutable hash set that contains the specified items. Type Parameters Name Description T The type of items stored in the immutable hash set. Create<T>(T) Creates a new immutable hash set that contains the specified item. Declaration public static ImmutableHashSet<T> Create<T>(T item) Parameters Type Name Description T item The item to prepopulate the hash set with. Returns Type Description ImmutableHashSet<T> A new immutable hash set that contains the specified item. Type Parameters Name Description T The type of items in the immutable hash set. Create<T>(params T[]) Creates a new immutable hash set that contains the specified array of items. Declaration public static ImmutableHashSet<T> Create<T>(params T[] items) Parameters Type Name Description T[] items An array that contains the items to prepopulate the hash set with. Returns Type Description ImmutableHashSet<T> A new immutable hash set that contains the specified items. Type Parameters Name Description T The type of items in the immutable hash set. ToImmutableHashSet<TSource>(IEnumerable<TSource>) Enumerates a sequence and produces an immutable hash set of its contents. Declaration public static ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate. Returns Type Description ImmutableHashSet<TSource> An immutable hash set that contains the items in the specified sequence. Type Parameters Name Description TSource The type of the elements in the sequence. ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type. Declaration public static ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(this IEnumerable<TSource> source, IEqualityComparer<TSource>? equalityComparer) Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate. IEqualityComparer<TSource> equalityComparer The object to use for comparing objects in the set for equality. Returns Type Description ImmutableHashSet<TSource> An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer. Type Parameters Name Description TSource The type of the elements in the sequence. ToImmutableHashSet<TSource>(Builder) Creates an immutable hash set from the current contents of the builder's set. Declaration public static ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(this ImmutableHashSet<TSource>.Builder builder) Parameters Type Name Description ImmutableHashSet<TSource>.Builder builder The builder to create the immutable hash set from. Returns Type Description ImmutableHashSet<TSource> An immutable hash set that contains the current contents in the builder's set. Type Parameters Name Description TSource The type of the elements in the hash set."
  },
  "api/System.Collections.Immutable.ImmutableInterlocked.html": {
    "href": "api/System.Collections.Immutable.ImmutableInterlocked.html",
    "title": "Class ImmutableInterlocked | CodeFactory for Windows",
    "keywords": "Class ImmutableInterlocked Contains interlocked exchange mechanisms for immutable collections. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableInterlocked Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public static class ImmutableInterlocked Methods AddOrUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) Obtains the value from a dictionary after having added it or updated an existing entry. Declaration public static TValue AddOrUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) where TKey : notnull Parameters Type Name Description ImmutableDictionary<TKey, TValue> location The variable or field to atomically update if the specified is not in the dictionary. TKey key The key for the value to add or update. Func<TKey, TValue> addValueFactory The function that receives the key and returns a new value to add to the dictionary when no value previously exists. Func<TKey, TValue, TValue> updateValueFactory The function that receives the key and prior value and returns the new value with which to update the dictionary. Returns Type Description TValue The added or updated value. Type Parameters Name Description TKey The type of key stored by the dictionary. TValue The type of value stored by the dictionary. AddOrUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) Obtains the value from a dictionary after having added it or updated an existing entry. Declaration public static TValue AddOrUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) where TKey : notnull Parameters Type Name Description ImmutableDictionary<TKey, TValue> location The variable or field to atomically update if the specified is not in the dictionary. TKey key The key for the value to add or update. TValue addValue The value to use if no previous value exists. Func<TKey, TValue, TValue> updateValueFactory The function that receives the key and prior value and returns the new value with which to update the dictionary. Returns Type Description TValue The added or updated value. Type Parameters Name Description TKey The type of key stored by the dictionary. TValue The type of value stored by the dictionary. Enqueue<T>(ref ImmutableQueue<T>, T) Atomically enqueues an element to the end of a queue. Declaration public static void Enqueue<T>(ref ImmutableQueue<T> location, T value) Parameters Type Name Description ImmutableQueue<T> location The variable or field to atomically update. T value The value to enqueue. Type Parameters Name Description T The type of items contained in the collection. GetOrAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary. Declaration public static TValue GetOrAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, Func<TKey, TValue> valueFactory) where TKey : notnull Parameters Type Name Description ImmutableDictionary<TKey, TValue> location The variable or field to atomically update if the specified is not in the dictionary. TKey key The key for the value to retrieve or add. Func<TKey, TValue> valueFactory The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once. Returns Type Description TValue The value at the specified key or valueFactory if the key was not present. Type Parameters Name Description TKey The type of the keys contained in the collection. TValue The type of the values contained in the collection. GetOrAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue>, TKey, TValue) Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary. Declaration public static TValue GetOrAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue value) where TKey : notnull Parameters Type Name Description ImmutableDictionary<TKey, TValue> location The variable or field to atomically update if the specified key is not in the dictionary. TKey key The key for the value to get or add. TValue value The value to add to the dictionary the key is not found. Returns Type Description TValue The value at the specified key or valueFactory if the key was not present. Type Parameters Name Description TKey The type of the keys contained in the collection. TValue The type of the values contained in the collection. GetOrAdd<TKey, TValue, TArg>(ref ImmutableDictionary<TKey, TValue>, TKey, Func<TKey, TArg, TValue>, TArg) Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary. Declaration public static TValue GetOrAdd<TKey, TValue, TArg>(ref ImmutableDictionary<TKey, TValue> location, TKey key, Func<TKey, TArg, TValue> valueFactory, TArg factoryArgument) where TKey : notnull Parameters Type Name Description ImmutableDictionary<TKey, TValue> location The variable or field to update if the specified is not in the dictionary. TKey key The key for the value to retrieve or add. Func<TKey, TArg, TValue> valueFactory The function to execute to obtain the value to insert into the dictionary if the key is not found. TArg factoryArgument The argument to pass to the value factory. Returns Type Description TValue The value at the specified key or valueFactory if the key was not present. Type Parameters Name Description TKey The type of the keys contained in the collection. TValue The type of the values contained in the collection. TArg The type of the argument supplied to the value factory. InterlockedCompareExchange<T>(ref ImmutableArray<T>, ImmutableArray<T>, ImmutableArray<T>) Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays. Declaration public static ImmutableArray<T> InterlockedCompareExchange<T>(ref ImmutableArray<T> location, ImmutableArray<T> value, ImmutableArray<T> comparand) Parameters Type Name Description ImmutableArray<T> location The destination, whose value is compared with comparand and possibly replaced. ImmutableArray<T> value The value that replaces the destination value if the comparison results in equality. ImmutableArray<T> comparand The value that is compared to the value at location. Returns Type Description ImmutableArray<T> The original value in location. Type Parameters Name Description T The type of element stored by the array. InterlockedExchange<T>(ref ImmutableArray<T>, ImmutableArray<T>) Sets an array to the specified array and returns a reference to the original array, as an atomic operation. Declaration public static ImmutableArray<T> InterlockedExchange<T>(ref ImmutableArray<T> location, ImmutableArray<T> value) Parameters Type Name Description ImmutableArray<T> location The array to set to the specified value. ImmutableArray<T> value The value to which the location parameter is set. Returns Type Description ImmutableArray<T> The original value of location. Type Parameters Name Description T The type of element stored by the array. InterlockedInitialize<T>(ref ImmutableArray<T>, ImmutableArray<T>) Sets an array to the specified array if the array has not been initialized. Declaration public static bool InterlockedInitialize<T>(ref ImmutableArray<T> location, ImmutableArray<T> value) Parameters Type Name Description ImmutableArray<T> location The array to set to the specified value. ImmutableArray<T> value The value to which the location parameter is set, if it's not initialized. Returns Type Description bool true if the array was assigned the specified value; otherwise, false. Type Parameters Name Description T The type of element stored by the array. Push<T>(ref ImmutableStack<T>, T) Pushes a new element onto the stack. Declaration public static void Push<T>(ref ImmutableStack<T> location, T value) Parameters Type Name Description ImmutableStack<T> location The stack to update. T value The value to push on the stack. Type Parameters Name Description T The type of items in the stack. TryAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue>, TKey, TValue) Adds the specified key and value to the dictionary if the key is not in the dictionary. Declaration public static bool TryAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue value) where TKey : notnull Parameters Type Name Description ImmutableDictionary<TKey, TValue> location The dictionary to update with the specified key and value. TKey key The key to add, if is not already defined in the dictionary. TValue value The value to add. Returns Type Description bool true if the key is not in the dictionary; otherwise, false. Type Parameters Name Description TKey The type of the keys contained in the collection. TValue The type of the values contained in the collection. TryDequeue<T>(ref ImmutableQueue<T>, out T) Atomically removes and returns the specified element at the head of the queue, if the queue is not empty. Declaration public static bool TryDequeue<T>(ref ImmutableQueue<T> location, out T value) Parameters Type Name Description ImmutableQueue<T> location The variable or field to atomically update. T value Set to the value from the head of the queue, if the queue not empty. Returns Type Description bool true if the queue is not empty and the head element is removed; otherwise, false. Type Parameters Name Description T The type of items in the queue. TryPop<T>(ref ImmutableStack<T>, out T) Removes an element from the top of the stack, if there is an element to remove. Declaration public static bool TryPop<T>(ref ImmutableStack<T> location, out T value) Parameters Type Name Description ImmutableStack<T> location The stack to update. T value Receives the value removed from the stack, if the stack is not empty. Returns Type Description bool true if an element is removed from the stack; otherwise, false. Type Parameters Name Description T The type of items in the stack. TryRemove<TKey, TValue>(ref ImmutableDictionary<TKey, TValue>, TKey, out TValue) Removes the element with the specified key, if the key exists. Declaration public static bool TryRemove<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, out TValue value) where TKey : notnull Parameters Type Name Description ImmutableDictionary<TKey, TValue> location The dictionary to update. TKey key The key to remove. TValue value Receives the value of the removed item, if the dictionary is not empty. Returns Type Description bool true if the key was found and removed; otherwise, false. Type Parameters Name Description TKey The type of the keys contained in the collection. TValue The type of the values contained in the collection. TryUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue>, TKey, TValue, TValue) Sets the specified key to the specified value if the specified key already is set to a specific value. Declaration public static bool TryUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue newValue, TValue comparisonValue) where TKey : notnull Parameters Type Name Description ImmutableDictionary<TKey, TValue> location The dictionary to update. TKey key The key to update. TValue newValue The new value to set. TValue comparisonValue The current value for key in order for the update to succeed. Returns Type Description bool true if key and comparisonValue are present in the dictionary and comparison was updated to newValue; otherwise, false. Type Parameters Name Description TKey The type of the keys contained in the collection. TValue The type of the values contained in the collection. Update<T>(ref ImmutableArray<T>, Func<ImmutableArray<T>, ImmutableArray<T>>) Mutates an immutable array in-place with optimistic locking transaction semantics via a specified transformation function. The transformation is retried as many times as necessary to win the optimistic locking race. Declaration public static bool Update<T>(ref ImmutableArray<T> location, Func<ImmutableArray<T>, ImmutableArray<T>> transformer) Parameters Type Name Description ImmutableArray<T> location The immutable array to be changed. Func<ImmutableArray<T>, ImmutableArray<T>> transformer A function that produces the new array from the old. This function should be side-effect free, as it may run multiple times when races occur with other threads. Returns Type Description bool true if the location's value is changed by applying the result of the transformer function; false if the location's value remained the same because the last invocation of transformer returned the existing value. Type Parameters Name Description T The type of data in the immutable array. Update<T>(ref T, Func<T, T>) Mutates a value in-place with optimistic locking transaction semantics via a specified transformation function. The transformation is retried as many times as necessary to win the optimistic locking race. Declaration public static bool Update<T>(ref T location, Func<T, T> transformer) where T : class? Parameters Type Name Description T location The variable or field to be changed, which may be accessed by multiple threads. Func<T, T> transformer A function that mutates the value. This function should be side-effect free, as it may run multiple times when races occur with other threads. Returns Type Description bool true if the location's value is changed by applying the result of the transformer function; false if the location's value remained the same because the last invocation of transformer returned the existing value. Type Parameters Name Description T The type of data. Update<T, TArg>(ref ImmutableArray<T>, Func<ImmutableArray<T>, TArg, ImmutableArray<T>>, TArg) Mutates an immutable array in-place with optimistic locking transaction semantics via a specified transformation function. The transformation is retried as many times as necessary to win the optimistic locking race. Declaration public static bool Update<T, TArg>(ref ImmutableArray<T> location, Func<ImmutableArray<T>, TArg, ImmutableArray<T>> transformer, TArg transformerArgument) Parameters Type Name Description ImmutableArray<T> location The immutable array to be changed. Func<ImmutableArray<T>, TArg, ImmutableArray<T>> transformer A function that produces the new array from the old. This function should be side-effect free, as it may run multiple times when races occur with other threads. TArg transformerArgument The argument to pass to transformer. Returns Type Description bool true if the location's value is changed by applying the result of the transformer function; false if the location's value remained the same because the last invocation of transformer returned the existing value. Type Parameters Name Description T The type of data in the immutable array. TArg The type of argument passed to the transformer. Update<T, TArg>(ref T, Func<T, TArg, T>, TArg) Mutates a value in-place with optimistic locking transaction semantics via a specified transformation function. The transformation is retried as many times as necessary to win the optimistic locking race. Declaration public static bool Update<T, TArg>(ref T location, Func<T, TArg, T> transformer, TArg transformerArgument) where T : class? Parameters Type Name Description T location The variable or field to be changed, which may be accessed by multiple threads. Func<T, TArg, T> transformer A function that mutates the value. This function should be side-effect free, as it may run multiple times when races occur with other threads. TArg transformerArgument The argument to pass to transformer. Returns Type Description bool true if the location's value is changed by applying the result of the transformer function; false if the location's value remained the same because the last invocation of transformer returned the existing value. Type Parameters Name Description T The type of data. TArg The type of argument passed to the transformer."
  },
  "api/System.Collections.Immutable.ImmutableList-1.Builder.html": {
    "href": "api/System.Collections.Immutable.ImmutableList-1.Builder.html",
    "title": "Class ImmutableList<T>.Builder | CodeFactory for Windows",
    "keywords": "Class ImmutableList<T>.Builder Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableList<T>.Builder Implements IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableList<T>.Builder : IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Properties Count Gets the number of elements in this immutable list. Declaration public int Count { get; } Property Value Type Description int The number of elements in this list. this[int] Gets or sets the value for a given index in the list. Declaration public T this[int index] { get; set; } Parameters Type Name Description int index The index of the item to get or set. Property Value Type Description T The value at the specified index. Methods Add(T) Adds an item to the immutable list. Declaration public void Add(T item) Parameters Type Name Description T item The item to add to the list. AddRange(IEnumerable<T>) Adds a series of elements to the end of this list. Declaration public void AddRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The elements to add to the end of the list. BinarySearch(int, int, T, IComparer<T>?) Searches the specified range of the ImmutableList<T>.Builder for an element using the specified comparer and returns the zero-based index of the element. Declaration public int BinarySearch(int index, int count, T item, IComparer<T>? comparer) Parameters Type Name Description int index The zero-based starting index of the range to search. int count The length of the range to search. T item The object to locate. This value can be null for reference types. IComparer<T> comparer The implementation to use when comparing elements, or null for the default comparer. Returns Type Description int The zero-based index of item in the ImmutableList<T>.Builder, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item. Exceptions Type Condition ArgumentOutOfRangeException <code class=\"paramref\">index</code> is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range in the List<T>. InvalidOperationException comparer is null, and the default comparer Default cannot find an implementation of the IComparable<T> generic interface or the IComparable interface for type T. BinarySearch(T) Searches the entire ImmutableList<T>.Builder for an element using the default comparer and returns the zero-based index of the element. Declaration public int BinarySearch(T item) Parameters Type Name Description T item The object to locate. The value can be null for reference types. Returns Type Description int The zero-based index of item in the ImmutableList<T>.Builder, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item. Exceptions Type Condition InvalidOperationException The default comparer Default cannot find an implementation of the IComparable<T> generic interface or the IComparable interface for type T. BinarySearch(T, IComparer<T>?) Searches the entire ImmutableList<T>.Builder for an element using the specified comparer and returns the zero-based index of the element. Declaration public int BinarySearch(T item, IComparer<T>? comparer) Parameters Type Name Description T item The object to locate. This value can be null for reference types. IComparer<T> comparer The implementation to use when comparing elements, or null for the default comparer. Returns Type Description int The zero-based index of item in the ImmutableList<T>.Builder, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item. Exceptions Type Condition InvalidOperationException comparer is null, and the default comparer Default cannot find an implementation of the IComparable<T> generic interface or the IComparable interface for type T. Clear() Removes all items from the immutable list. Declaration public void Clear() Contains(T) Determines whether the immutable list contains a specific value. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the list. Returns Type Description bool true if item is found in the list; otherwise, false. ConvertAll<TOutput>(Func<T, TOutput>) Creates a new immutable list from the list represented by this builder by using the converter function. Declaration public ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter) Parameters Type Name Description Func<T, TOutput> converter The converter function. Returns Type Description ImmutableList<TOutput> A new immutable list from the list represented by this builder. Type Parameters Name Description TOutput The type of the output of the delegate converter function. CopyTo(int, T[], int, int) Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(int index, T[] array, int arrayIndex, int count) Parameters Type Name Description int index The zero-based index in the source immutable list at which copying begins. T[] array The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. int count The number of elements to copy. CopyTo(T[]) Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array. Declaration public void CopyTo(T[] array) Parameters Type Name Description T[] array The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing. CopyTo(T[], int) Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exists(Predicate<T>) Determines whether the immutable list contains elements that match the conditions defined by the specified predicate. Declaration public bool Exists(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the elements to search for. Returns Type Description bool true if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, false. Find(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list. Declaration public T? Find(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description T The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T. FindAll(Predicate<T>) Retrieves all the elements that match the conditions defined by the specified predicate. Declaration public ImmutableList<T> FindAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the elements to search for. Returns Type Description ImmutableList<T> An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list. FindIndex(int, int, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements. Declaration public int FindIndex(int startIndex, int count, Predicate<T> match) Parameters Type Name Description int startIndex The zero-based starting index of the search. int count The number of elements in the section to search. Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1. FindIndex(int, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element. Declaration public int FindIndex(int startIndex, Predicate<T> match) Parameters Type Name Description int startIndex The zero-based starting index of the search. Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1. FindIndex(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list. Declaration public int FindIndex(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1. FindLast(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list. Declaration public T? FindLast(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description T The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type T. FindLastIndex(int, int, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index. Declaration public int FindLastIndex(int startIndex, int count, Predicate<T> match) Parameters Type Name Description int startIndex The zero-based starting index of the backward search. int count The number of elements in the section to search. Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, -1. FindLastIndex(int, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index. Declaration public int FindLastIndex(int startIndex, Predicate<T> match) Parameters Type Name Description int startIndex The zero-based starting index of the backward search. Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, -1. FindLastIndex(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list. Declaration public int FindLastIndex(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, -1. ForEach(Action<T>) Performs the specified action on each element of the list. Declaration public void ForEach(Action<T> action) Parameters Type Name Description Action<T> action The delegate to perform on each element of the list. GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public ImmutableList<T>.Enumerator GetEnumerator() Returns Type Description ImmutableList<T>.Enumerator An enumerator that can be used to iterate through the list. GetRange(int, int) Creates a shallow copy of a range of elements in the source immutable list. Declaration public ImmutableList<T> GetRange(int index, int count) Parameters Type Name Description int index The zero-based index at which the range starts. int count The number of elements in the range. Returns Type Description ImmutableList<T> A shallow copy of a range of elements in the source immutable list. IndexOf(T) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list. Declaration public int IndexOf(T item) Parameters Type Name Description T item The object to locate in the immutable list. The value can be null for reference types. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the immutable list, if found; otherwise, -1. IndexOf(T, int) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element. Declaration public int IndexOf(T item, int index) Parameters Type Name Description T item The object to locate in the immutable list. The value can be null for reference types. int index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1. IndexOf(T, int, int) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements. Declaration public int IndexOf(T item, int index, int count) Parameters Type Name Description T item The object to locate in the immutable list. The value can be null for reference types. int index The zero-based starting index of the search. 0 (zero) is valid in an empty list. int count The number of elements in the section to search. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at index and contains count number of elements, if found; otherwise, -1. IndexOf(T, int, int, IEqualityComparer<T>?) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the ImmutableList<T>.Builder that starts at the specified index and contains the specified number of elements. Declaration public int IndexOf(T item, int index, int count, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The object to locate in the immutable list. The value can be null for reference types. int index The zero-based starting index of the search. 0 (zero) is valid in an empty list. int count The number of elements to search. IEqualityComparer<T> equalityComparer The value comparer to use for comparing elements for equality. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at index and contains count number of elements, if found; otherwise, -1 Insert(int, T) Inserts an item to the immutable list at the specified index. Declaration public void Insert(int index, T item) Parameters Type Name Description int index The zero-based index at which item should be inserted. T item The object to insert into the immutable list. InsertRange(int, IEnumerable<T>) Inserts the elements of a collection into the immutable list at the specified index. Declaration public void InsertRange(int index, IEnumerable<T> items) Parameters Type Name Description int index The zero-based index at which the new elements should be inserted. IEnumerable<T> items The collection whose elements should be inserted into the immutable list. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type. ItemRef(int) Gets a read-only reference to the value for a given index into the list. Declaration public ref readonly T ItemRef(int index) Parameters Type Name Description int index The index of the desired element. Returns Type Description T A read-only reference to the value at the specified index. LastIndexOf(T) Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list. Declaration public int LastIndexOf(T item) Parameters Type Name Description T item The object to locate in the immutable list. The value can be null for reference types. Returns Type Description int The zero-based index of the last occurrence of item within the entire immutable list, if found; otherwise, -1. LastIndexOf(T, int) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index. Declaration public int LastIndexOf(T item, int startIndex) Parameters Type Name Description T item The object to locate in the immutable list. The value can be null for reference types. int startIndex The zero-based starting index of the backward search. Returns Type Description int The zero-based index of the last occurrence of item within the range of elements in the immutable list that extends from the first element to index, if found; otherwise, -1. LastIndexOf(T, int, int) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index. Declaration public int LastIndexOf(T item, int startIndex, int count) Parameters Type Name Description T item The object to locate in the immutable list. The value can be null for reference types. int startIndex The zero-based starting index of the backward search. int count The number of elements in the section to search. Returns Type Description int The zero-based index of the last occurrence of item within the range of elements in the immutable list that contains count number of elements and ends at index, if found; otherwise, -1. LastIndexOf(T, int, int, IEqualityComparer<T>?) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index. Declaration public int LastIndexOf(T item, int startIndex, int count, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The object to locate in the immutable list. The value can be null for reference types. int startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty list. int count The number of elements to search. IEqualityComparer<T> equalityComparer The value comparer to use for comparing elements for equality. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at index and contains count number of elements, if found; otherwise, -1 Remove(T) Removes the first occurrence of a specific object from the immutable list. Declaration public bool Remove(T item) Parameters Type Name Description T item The object to remove from the list. Returns Type Description bool true if item was successfully removed from the list; otherwise, false. This method also returns false if item is not found in the list. RemoveAll(Predicate<T>) Removes all the elements that match the conditions defined by the specified predicate. Declaration public int RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the elements to remove. Returns Type Description int The number of elements removed from the immutable list. RemoveAt(int) Removes the item at the specified index of the immutable list. Declaration public void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the item to remove from the list. Reverse() Reverses the order of the elements in the entire immutable list. Declaration public void Reverse() Reverse(int, int) Reverses the order of the elements in the specified range of the immutable list. Declaration public void Reverse(int index, int count) Parameters Type Name Description int index The zero-based starting index of the range to reverse. int count The number of elements in the range to reverse. Sort() Sorts the elements in the entire immutable list by using the default comparer. Declaration public void Sort() Sort(IComparer<T>?) Sorts the elements in the entire immutable list by using the specified comparer. Declaration public void Sort(IComparer<T>? comparer) Parameters Type Name Description IComparer<T> comparer The implementation to use when comparing elements, or null to use the default comparer (Default). Sort(Comparison<T>) Sorts the elements in the entire immutable list by using the specified comparison object. Declaration public void Sort(Comparison<T> comparison) Parameters Type Name Description Comparison<T> comparison The object to use when comparing elements. Exceptions Type Condition ArgumentNullException comparison is null. Sort(int, int, IComparer<T>?) Sorts the elements in a range of elements in the immutable list by using the specified comparer. Declaration public void Sort(int index, int count, IComparer<T>? comparer) Parameters Type Name Description int index The zero-based starting index of the range to sort. int count The length of the range to sort. IComparer<T> comparer The implementation to use when comparing elements, or null to use the default comparer (Default). ToImmutable() Creates an immutable list based on the contents of this instance. Declaration public ImmutableList<T> ToImmutable() Returns Type Description ImmutableList<T> An immutable list. TrueForAll(Predicate<T>) Determines whether every element in the immutable list matches the conditions defined by the specified predicate. Declaration public bool TrueForAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions to check against the elements. Returns Type Description bool true if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true. Implements IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(ImmutableList<TSource>.Builder)"
  },
  "api/System.Collections.Immutable.ImmutableList-1.Enumerator.html": {
    "href": "api/System.Collections.Immutable.ImmutableList-1.Enumerator.html",
    "title": "Struct ImmutableList<T>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ImmutableList<T>.Enumerator Enumerates the contents of a binary tree. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Implements IEnumerator<T> IDisposable IEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public struct ImmutableList<T>.Enumerator : IEnumerator<T>, IDisposable, IEnumerator Properties Current Gets the element at the current position of the enumerator. Declaration public T Current { get; } Property Value Type Description T The element at the current position of the enumerator. Methods Dispose() Releases the resources used by the current instance of the ImmutableList<T>.Enumerator class. Declaration public void Dispose() MoveNext() Advances enumeration to the next element of the immutable list. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the list. Reset() Sets the enumerator to its initial position, which is before the first element in the immutable list. Declaration public void Reset() Implements IEnumerator<T> IDisposable IEnumerator"
  },
  "api/System.Collections.Immutable.ImmutableList-1.html": {
    "href": "api/System.Collections.Immutable.ImmutableList-1.html",
    "title": "Class ImmutableList<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableList<T> Represents an immutable list, which is a strongly typed list of objects that can be accessed by index. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableList<T> Implements IImmutableList<T> IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableList<T> : IImmutableList<T>, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the list. Fields Empty Gets an empty set with the default sort comparer. Declaration public static readonly ImmutableList<T> Empty Field Value Type Description ImmutableList<T> Properties Count Gets the number of elements contained in the list. Declaration public int Count { get; } Property Value Type Description int The number of elements in the list. IsEmpty Gets a value that indicates whether this list is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool true if the list is empty; otherwise, false. this[int] Gets the element at the specified index of the list. Declaration public T this[int index] { get; } Parameters Type Name Description int index The index of the element to retrieve. Property Value Type Description T The element at the specified index. Exceptions Type Condition IndexOutOfRangeException In a get operation, index is negative or not less than Count. Methods Add(T) Adds the specified object to the end of the immutable list. Declaration public ImmutableList<T> Add(T value) Parameters Type Name Description T value The object to add. Returns Type Description ImmutableList<T> A new immutable list with the object added. AddRange(IEnumerable<T>) Adds the elements of the specified collection to the end of the immutable list. Declaration public ImmutableList<T> AddRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The collection whose elements will be added to the end of the list. Returns Type Description ImmutableList<T> A new immutable list with the elements added. BinarySearch(int, int, T, IComparer<T>?) Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element. Declaration public int BinarySearch(int index, int count, T item, IComparer<T>? comparer) Parameters Type Name Description int index The zero-based starting index of the range to search. int count The length of the range to search. T item The object to locate. The value can be null for reference types. IComparer<T> comparer The comparer implementation to use when comparing elements, or null to use the default comparer. Returns Type Description int The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of count. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0 or count is less than 0. ArgumentException index and count do not denote a valid range in the list. InvalidOperationException comparer is null, and the default comparer cannot find an comparer implementation for type T. BinarySearch(T) Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element. Declaration public int BinarySearch(T item) Parameters Type Name Description T item The object to locate. The value can be null for reference types. Returns Type Description int The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of Count. Exceptions Type Condition InvalidOperationException The default comparer cannot find a comparer implementation of the for type T. BinarySearch(T, IComparer<T>?) Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element. Declaration public int BinarySearch(T item, IComparer<T>? comparer) Parameters Type Name Description T item The object to locate. The value can be null for reference types. IComparer<T> comparer The comparer implementation to use when comparing elements or null to use the default comparer. Returns Type Description int The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of Count. Exceptions Type Condition InvalidOperationException comparer is null, and the default comparer cannot find an comparer implementation for type T. Clear() Removes all elements from the immutable list. Declaration public ImmutableList<T> Clear() Returns Type Description ImmutableList<T> An empty list that retains the same sort or unordered semantics that this instance has. Contains(T) Determines whether this immutable list contains the specified value. Declaration public bool Contains(T value) Parameters Type Name Description T value The value to locate. Returns Type Description bool true if the list contains the specified value; otherwise, false. ConvertAll<TOutput>(Func<T, TOutput>) Converts the elements in the current immutable list to another type, and returns a list containing the converted elements. Declaration public ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter) Parameters Type Name Description Func<T, TOutput> converter A delegate that converts each element from one type to another type. Returns Type Description ImmutableList<TOutput> A list of the target type containing the converted elements from the current ImmutableList<T>. Type Parameters Name Description TOutput The type of the elements of the target array. CopyTo(int, T[], int, int) Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(int index, T[] array, int arrayIndex, int count) Parameters Type Name Description int index The zero-based index in the source immutable list at which copying begins. T[] array The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. int count The number of elements to copy. CopyTo(T[]) Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array. Declaration public void CopyTo(T[] array) Parameters Type Name Description T[] array The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing. CopyTo(T[], int) Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exists(Predicate<T>) Determines whether the immutable list contains elements that match the conditions defined by the specified predicate. Declaration public bool Exists(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the elements to search for. Returns Type Description bool true if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, false. Find(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list. Declaration public T? Find(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description T The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T. FindAll(Predicate<T>) Retrieves all the elements that match the conditions defined by the specified predicate. Declaration public ImmutableList<T> FindAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the elements to search for. Returns Type Description ImmutableList<T> An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list. FindIndex(int, int, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements. Declaration public int FindIndex(int startIndex, int count, Predicate<T> match) Parameters Type Name Description int startIndex The zero-based starting index of the search. int count The number of elements in the section to search. Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1. FindIndex(int, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element. Declaration public int FindIndex(int startIndex, Predicate<T> match) Parameters Type Name Description int startIndex The zero-based starting index of the search. Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1. FindIndex(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list. Declaration public int FindIndex(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1. FindLast(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list. Declaration public T? FindLast(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description T The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T. FindLastIndex(int, int, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index. Declaration public int FindLastIndex(int startIndex, int count, Predicate<T> match) Parameters Type Name Description int startIndex The zero-based starting index of the backward search. int count The number of elements in the section to search. Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1. FindLastIndex(int, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index. Declaration public int FindLastIndex(int startIndex, Predicate<T> match) Parameters Type Name Description int startIndex The zero-based starting index of the backward search. Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1. FindLastIndex(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list. Declaration public int FindLastIndex(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the element to search for. Returns Type Description int The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1. ForEach(Action<T>) Performs the specified action on each element of the immutable list. Declaration public void ForEach(Action<T> action) Parameters Type Name Description Action<T> action The delegate to perform on each element of the immutable list. GetEnumerator() Returns an enumerator that iterates through the immutable list. Declaration public ImmutableList<T>.Enumerator GetEnumerator() Returns Type Description ImmutableList<T>.Enumerator An enumerator that can be used to iterate through the immutable list. GetRange(int, int) Creates a shallow copy of a range of elements in the source immutable list. Declaration public ImmutableList<T> GetRange(int index, int count) Parameters Type Name Description int index The zero-based index at which the range starts. int count The number of elements in the range. Returns Type Description ImmutableList<T> A shallow copy of a range of elements in the source immutable list. IndexOf(T) Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list. Declaration public int IndexOf(T value) Parameters Type Name Description T value The object to locate in the immutable list. The value can be null for reference types. Returns Type Description int The zero-based index of the first occurrence of value within the entire immutable list, if found; otherwise, ?1. IndexOf(T, int, int, IEqualityComparer<T>?) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements. Declaration public int IndexOf(T item, int index, int count, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The object to locate in the list The value can be null for reference types. int index The zero-based starting index of the search. 0 (zero) is valid in an empty list. int count The number of elements in the section to search. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1. Insert(int, T) Inserts the specified object into the immutable list at the specified index. Declaration public ImmutableList<T> Insert(int index, T item) Parameters Type Name Description int index The zero-based index at which to insert the object. T item The object to insert. Returns Type Description ImmutableList<T> The new immutable list after the object is inserted. InsertRange(int, IEnumerable<T>) Inserts the elements of a collection into the immutable list at the specified index. Declaration public ImmutableList<T> InsertRange(int index, IEnumerable<T> items) Parameters Type Name Description int index The zero-based index at which to insert the elements. IEnumerable<T> items The collection whose elements should be inserted. Returns Type Description ImmutableList<T> The new immutable list after the elements are inserted. ItemRef(int) Gets a read-only reference to the element of the set at the given index. Declaration public ref readonly T ItemRef(int index) Parameters Type Name Description int index The 0-based index of the element in the set to return. Returns Type Description T A read-only reference to the element at the given position. Exceptions Type Condition IndexOutOfRangeException index is negative or not less than Count. LastIndexOf(T, int, int, IEqualityComparer<T>?) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index. Declaration public int LastIndexOf(T item, int index, int count, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T item The object to locate in the list. The value can be null for reference types. int index The zero-based starting index of the backward search. int count The number of elements in the section to search. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1. Remove(T) Removes the first occurrence of the specified object from this immutable list. Declaration public ImmutableList<T> Remove(T value) Parameters Type Name Description T value The object to remove. Returns Type Description ImmutableList<T> A new list with the object removed, or this list if the specified object is not in this list. Remove(T, IEqualityComparer<T>?) Removes the first occurrence of the object that matches the specified value from this immutable list. Declaration public ImmutableList<T> Remove(T value, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T value The value of the element to remove from the list. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description ImmutableList<T> A new list with the object removed, or this list if the specified object is not in this list. RemoveAll(Predicate<T>) Removes all the elements that match the conditions defined by the specified predicate. Declaration public ImmutableList<T> RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions of the elements to remove. Returns Type Description ImmutableList<T> The new list with the elements removed. RemoveAt(int) Removes the element at the specified index. Declaration public ImmutableList<T> RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the element to remove. Returns Type Description ImmutableList<T> A new list with the element removed. RemoveRange(IEnumerable<T>) Removes a range of elements from this immutable list. Declaration public ImmutableList<T> RemoveRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The collection whose elements should be removed if matches are found in this list. Returns Type Description ImmutableList<T> A new list with the elements removed. RemoveRange(IEnumerable<T>, IEqualityComparer<T>?) Removes the specified values from this list. Declaration public ImmutableList<T> RemoveRange(IEnumerable<T> items, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description IEnumerable<T> items The items to remove if matches are found in this list. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description ImmutableList<T> A new list with the elements removed. RemoveRange(int, int) Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list. Declaration public ImmutableList<T> RemoveRange(int index, int count) Parameters Type Name Description int index The starting index to begin removal. int count The number of elements to remove. Returns Type Description ImmutableList<T> A new list with the elements removed. Replace(T, T) Replaces the specified element in the immutable list with a new element. Declaration public ImmutableList<T> Replace(T oldValue, T newValue) Parameters Type Name Description T oldValue The element to replace. T newValue The element to replace oldValue with. Returns Type Description ImmutableList<T> The new list with the replaced element, even if it is equal to the old element. Exceptions Type Condition ArgumentException oldValue does not exist in the immutable list. Replace(T, T, IEqualityComparer<T>?) Replaces the specified element in the immutable list with a new element. Declaration public ImmutableList<T> Replace(T oldValue, T newValue, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description T oldValue The element to replace in the list. T newValue The element to replace oldValue with. IEqualityComparer<T> equalityComparer The comparer to use to check for equality. Returns Type Description ImmutableList<T> A new list with the object replaced, or this list if the specified object is not in this list. Reverse() Reverses the order of the elements in the entire immutable list. Declaration public ImmutableList<T> Reverse() Returns Type Description ImmutableList<T> The reversed list. Reverse(int, int) Reverses the order of the elements in the specified range of the immutable list. Declaration public ImmutableList<T> Reverse(int index, int count) Parameters Type Name Description int index The zero-based starting index of the range to reverse. int count The number of elements in the range to reverse. Returns Type Description ImmutableList<T> The reversed list. SetItem(int, T) Replaces an element at a given position in the immutable list with the specified element. Declaration public ImmutableList<T> SetItem(int index, T value) Parameters Type Name Description int index The position in the list of the element to replace. T value The element to replace the old element with. Returns Type Description ImmutableList<T> The new list with the replaced element, even if it is equal to the old element at that position. Sort() Sorts the elements in the entire immutable list using the default comparer. Declaration public ImmutableList<T> Sort() Returns Type Description ImmutableList<T> The sorted list. Sort(IComparer<T>?) Sorts the elements in the entire immutable list using the specified comparer. Declaration public ImmutableList<T> Sort(IComparer<T>? comparer) Parameters Type Name Description IComparer<T> comparer The implementation to use when comparing elements, or null to use the default comparer (Default). Returns Type Description ImmutableList<T> The sorted list. Sort(Comparison<T>) Sorts the elements in the entire immutable list using the specified comparer. Declaration public ImmutableList<T> Sort(Comparison<T> comparison) Parameters Type Name Description Comparison<T> comparison The delegate to use when comparing elements. Returns Type Description ImmutableList<T> The sorted list. Exceptions Type Condition ArgumentNullException comparison is null. Sort(int, int, IComparer<T>?) Sorts a range of elements in the immutable list using the specified comparer. Declaration public ImmutableList<T> Sort(int index, int count, IComparer<T>? comparer) Parameters Type Name Description int index The zero-based starting index of the range to sort. int count The length of the range to sort. IComparer<T> comparer The implementation to use when comparing elements, or null to use the default comparer (Default). Returns Type Description ImmutableList<T> The sorted list. ToBuilder() Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces. Declaration public ImmutableList<T>.Builder ToBuilder() Returns Type Description ImmutableList<T>.Builder The created list with the same contents as this list. TrueForAll(Predicate<T>) Determines whether every element in the immutable list matches the conditions defined by the specified predicate. Declaration public bool TrueForAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The delegate that defines the conditions to check against the elements. Returns Type Description bool true if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true. Implements IImmutableList<T> IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableList.IndexOf<T>(IImmutableList<T>, T) ImmutableList.IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?) ImmutableList.IndexOf<T>(IImmutableList<T>, T, int) ImmutableList.IndexOf<T>(IImmutableList<T>, T, int, int) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, int) ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, int, int) ImmutableList.RemoveRange<T>(IImmutableList<T>, IEnumerable<T>) ImmutableList.Remove<T>(IImmutableList<T>, T) ImmutableList.Replace<T>(IImmutableList<T>, T, T)"
  },
  "api/System.Collections.Immutable.ImmutableList.html": {
    "href": "api/System.Collections.Immutable.ImmutableList.html",
    "title": "Class ImmutableList | CodeFactory for Windows",
    "keywords": "Class ImmutableList Provides a set of initialization methods for instances of the ImmutableList<T> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableList Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public static class ImmutableList Methods CreateBuilder<T>() Creates a new immutable list builder. Declaration public static ImmutableList<T>.Builder CreateBuilder<T>() Returns Type Description ImmutableList<T>.Builder The immutable collection builder. Type Parameters Name Description T The type of items stored by the collection. CreateRange<T>(IEnumerable<T>) Creates a new immutable list that contains the specified items. Declaration public static ImmutableList<T> CreateRange<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The items to add to the list. Returns Type Description ImmutableList<T> An immutable list that contains the specified items. Type Parameters Name Description T The type of items in the . Create<T>() Creates an empty immutable list. Declaration public static ImmutableList<T> Create<T>() Returns Type Description ImmutableList<T> An empty immutable list. Type Parameters Name Description T The type of items to be stored in the . Create<T>(T) Creates a new immutable list that contains the specified item. Declaration public static ImmutableList<T> Create<T>(T item) Parameters Type Name Description T item The item to prepopulate the list with. Returns Type Description ImmutableList<T> A new that contains the specified item. Type Parameters Name Description T The type of items in the . Create<T>(params T[]) Creates a new immutable list that contains the specified array of items. Declaration public static ImmutableList<T> Create<T>(params T[] items) Parameters Type Name Description T[] items An array that contains the items to prepopulate the list with. Returns Type Description ImmutableList<T> A new immutable list that contains the specified items. Type Parameters Name Description T The type of items in the . IndexOf<T>(IImmutableList<T>, T) Searches for the specified object and returns the zero-based index of the first occurrence within the list. Declaration public static int IndexOf<T>(this IImmutableList<T> list, T item) Parameters Type Name Description IImmutableList<T> list The list to search. T item The object to locate in the list. The value can be null for reference types. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1. Type Parameters Name Description T The type of items in the list. IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?) Searches for the specified object and returns the zero-based index of the first occurrence within the list. Declaration public static int IndexOf<T>(this IImmutableList<T> list, T item, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description IImmutableList<T> list The list to search. T item The object to locate in the Immutable list. The value can be null for reference types. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1. Type Parameters Name Description T The type of items in the list. IndexOf<T>(IImmutableList<T>, T, int) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element. Declaration public static int IndexOf<T>(this IImmutableList<T> list, T item, int startIndex) Parameters Type Name Description IImmutableList<T> list The list to search. T item The object to locate in the Immutable list. The value can be null for reference types. int startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1. Type Parameters Name Description T The type of items in the list. IndexOf<T>(IImmutableList<T>, T, int, int) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element. Declaration public static int IndexOf<T>(this IImmutableList<T> list, T item, int startIndex, int count) Parameters Type Name Description IImmutableList<T> list The list to search. T item The object to locate in the Immutable list. The value can be null for reference types. int startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty list. int count The number of elements in the section to search. Returns Type Description int The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1. Type Parameters Name Description T The type of items in the list. LastIndexOf<T>(IImmutableList<T>, T) Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list. Declaration public static int LastIndexOf<T>(this IImmutableList<T> list, T item) Parameters Type Name Description IImmutableList<T> list The list to search. T item The object to locate in the Immutable list. The value can be null for reference types. Returns Type Description int The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1. Type Parameters Name Description T The type of items in the list. LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>?) Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list. Declaration public static int LastIndexOf<T>(this IImmutableList<T> list, T item, IEqualityComparer<T>? equalityComparer) Parameters Type Name Description IImmutableList<T> list The list to search. T item The object to locate in the Immutable list. The value can be null for reference types. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1. Type Parameters Name Description T The type of items in the list. LastIndexOf<T>(IImmutableList<T>, T, int) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index. Declaration public static int LastIndexOf<T>(this IImmutableList<T> list, T item, int startIndex) Parameters Type Name Description IImmutableList<T> list The list to search. T item The object to locate in the Immutable list. The value can be null for reference types. int startIndex The zero-based starting index of the backward search. Returns Type Description int The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1. Type Parameters Name Description T The type of items in the list. LastIndexOf<T>(IImmutableList<T>, T, int, int) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index. Declaration public static int LastIndexOf<T>(this IImmutableList<T> list, T item, int startIndex, int count) Parameters Type Name Description IImmutableList<T> list The list to search. T item The object to locate in the Immutable list. The value can be null for reference types. int startIndex The zero-based starting index of the backward search. int count The number of elements in the section to search. Returns Type Description int The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1. Type Parameters Name Description T The type of items in the list. RemoveRange<T>(IImmutableList<T>, IEnumerable<T>) Removes the specified values from this list. Declaration public static IImmutableList<T> RemoveRange<T>(this IImmutableList<T> list, IEnumerable<T> items) Parameters Type Name Description IImmutableList<T> list The list to search. IEnumerable<T> items The items to remove if matches are found in this list. Returns Type Description IImmutableList<T> A new immutable list with the elements removed. Type Parameters Name Description T The type of items in the list. Remove<T>(IImmutableList<T>, T) Removes the specified value from this list. Declaration public static IImmutableList<T> Remove<T>(this IImmutableList<T> list, T value) Parameters Type Name Description IImmutableList<T> list The list to search. T value The value to remove. Returns Type Description IImmutableList<T> A new immutable list with the element removed, or this list if the element is not in this list. Type Parameters Name Description T The type of items in the list. Replace<T>(IImmutableList<T>, T, T) Replaces the first equal element in the list with the specified element. Declaration public static IImmutableList<T> Replace<T>(this IImmutableList<T> list, T oldValue, T newValue) Parameters Type Name Description IImmutableList<T> list The list to search. T oldValue The element to replace. T newValue The element to replace the old element with. Returns Type Description IImmutableList<T> The new list -- even if the value being replaced is equal to the new value for that position. Type Parameters Name Description T The type of items in the list. Exceptions Type Condition ArgumentException Thrown when the old value does not exist in the list. ToImmutableList<TSource>(IEnumerable<TSource>) Enumerates a sequence and produces an immutable list of its contents. Declaration public static ImmutableList<TSource> ToImmutableList<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate. Returns Type Description ImmutableList<TSource> An immutable list that contains the items in the specified sequence. Type Parameters Name Description TSource The type of the elements in the sequence. ToImmutableList<TSource>(Builder) Creates an immutable list from the current contents of the builder's collection. Declaration public static ImmutableList<TSource> ToImmutableList<TSource>(this ImmutableList<TSource>.Builder builder) Parameters Type Name Description ImmutableList<TSource>.Builder builder The builder to create the immutable list from. Returns Type Description ImmutableList<TSource> An immutable list that contains the current contents in the builder's collection. Type Parameters Name Description TSource The type of the elements in the list."
  },
  "api/System.Collections.Immutable.ImmutableQueue-1.Enumerator.html": {
    "href": "api/System.Collections.Immutable.ImmutableQueue-1.Enumerator.html",
    "title": "Struct ImmutableQueue<T>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ImmutableQueue<T>.Enumerator Enumerates the contents of an immutable queue without allocating any memory. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public struct ImmutableQueue<T>.Enumerator Properties Current Gets the element at the current position of the enumerator. Declaration public T Current { get; } Property Value Type Description T The element at the current position of the enumerator. Methods MoveNext() Advances the enumerator to the next element of the immutable queue. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the queue."
  },
  "api/System.Collections.Immutable.ImmutableQueue-1.html": {
    "href": "api/System.Collections.Immutable.ImmutableQueue-1.html",
    "title": "Class ImmutableQueue<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableQueue<T> Represents an immutable queue. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableQueue<T> Implements IImmutableQueue<T> IEnumerable<T> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableQueue<T> : IImmutableQueue<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the queue. Properties Empty Gets an empty immutable queue. Declaration public static ImmutableQueue<T> Empty { get; } Property Value Type Description ImmutableQueue<T> An empty immutable queue. IsEmpty Gets a value that indicates whether this immutable queue is empty. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Declaration public bool IsEmpty { get; } Property Value Type Description bool true if this queue is empty; otherwise, false. Methods Clear() Removes all objects from the immutable queue. Declaration public ImmutableQueue<T> Clear() Returns Type Description ImmutableQueue<T> The empty immutable queue. Dequeue() Removes the element at the beginning of the immutable queue, and returns the new queue. Declaration public ImmutableQueue<T> Dequeue() Returns Type Description ImmutableQueue<T> The new immutable queue; never null. Exceptions Type Condition InvalidOperationException The queue is empty. Dequeue(out T) Removes the item at the beginning of the immutable queue, and returns the new queue. Declaration public ImmutableQueue<T> Dequeue(out T value) Parameters Type Name Description T value When this method returns, contains the element from the beginning of the queue. Returns Type Description ImmutableQueue<T> The new immutable queue with the beginning element removed. Exceptions Type Condition InvalidOperationException The queue is empty. Enqueue(T) Adds an element to the end of the immutable queue, and returns the new queue. Declaration public ImmutableQueue<T> Enqueue(T value) Parameters Type Name Description T value The element to add. Returns Type Description ImmutableQueue<T> The new immutable queue. GetEnumerator() Returns an enumerator that iterates through the immutable queue. Declaration public ImmutableQueue<T>.Enumerator GetEnumerator() Returns Type Description ImmutableQueue<T>.Enumerator An enumerator that can be used to iterate through the queue. Peek() Returns the element at the beginning of the immutable queue without removing it. Declaration public T Peek() Returns Type Description T The element at the beginning of the queue. Exceptions Type Condition InvalidOperationException The queue is empty. PeekRef() Gets a read-only reference to the element at the front of the queue. Declaration public ref readonly T PeekRef() Returns Type Description T Read-only reference to the element at the front of the queue. Exceptions Type Condition InvalidOperationException The queue is empty. Implements IImmutableQueue<T> IEnumerable<T> IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableQueue.Dequeue<T>(IImmutableQueue<T>, out T)"
  },
  "api/System.Collections.Immutable.ImmutableQueue.html": {
    "href": "api/System.Collections.Immutable.ImmutableQueue.html",
    "title": "Class ImmutableQueue | CodeFactory for Windows",
    "keywords": "Class ImmutableQueue Provides a set of initialization methods for instances of the ImmutableQueue<T> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableQueue Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public static class ImmutableQueue Methods CreateRange<T>(IEnumerable<T>) Creates a new immutable queue that contains the specified items. Declaration public static ImmutableQueue<T> CreateRange<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The items to add to the queue before immutability is applied. Returns Type Description ImmutableQueue<T> An immutable queue that contains the specified items. Type Parameters Name Description T The type of elements in the queue. Create<T>() Creates an empty immutable queue. Declaration public static ImmutableQueue<T> Create<T>() Returns Type Description ImmutableQueue<T> An empty immutable queue. Type Parameters Name Description T The type of items to be stored in the immutable queue. Create<T>(T) Creates a new immutable queue that contains the specified item. Declaration public static ImmutableQueue<T> Create<T>(T item) Parameters Type Name Description T item The item to prepopulate the queue with. Returns Type Description ImmutableQueue<T> A new immutable queue that contains the specified item. Type Parameters Name Description T The type of items in the immutable queue. Create<T>(params T[]) Creates a new immutable queue that contains the specified array of items. Declaration public static ImmutableQueue<T> Create<T>(params T[] items) Parameters Type Name Description T[] items An array that contains the items to prepopulate the queue with. Returns Type Description ImmutableQueue<T> A new immutable queue that contains the specified items. Type Parameters Name Description T The type of items in the immutable queue. Dequeue<T>(IImmutableQueue<T>, out T) Removes the item at the beginning of the immutable queue, and returns the new queue. Declaration public static IImmutableQueue<T> Dequeue<T>(this IImmutableQueue<T> queue, out T value) Parameters Type Name Description IImmutableQueue<T> queue The queue to remove the item from. T value When this method returns, contains the item from the beginning of the queue. Returns Type Description IImmutableQueue<T> The new queue with the item removed. Type Parameters Name Description T The type of elements in the immutable queue. Exceptions Type Condition InvalidOperationException The stack is empty."
  },
  "api/System.Collections.Immutable.ImmutableSortedDictionary-2.Builder.html": {
    "href": "api/System.Collections.Immutable.ImmutableSortedDictionary-2.Builder.html",
    "title": "Class ImmutableSortedDictionary<TKey, TValue>.Builder | CodeFactory for Windows",
    "keywords": "Class ImmutableSortedDictionary<TKey, TValue>.Builder Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableSortedDictionary<TKey, TValue>.Builder Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IDictionary ICollection IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableSortedDictionary<TKey, TValue>.Builder : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable Properties Count Gets the number of elements in this immutable sorted dictionary. Declaration public int Count { get; } Property Value Type Description int The number of elements in this dictionary. this[TKey] Gets or sets the value for a specified key in the immutable sorted dictionary. Declaration public TValue this[TKey key] { get; set; } Parameters Type Name Description TKey key The key to retrieve the value for. Property Value Type Description TValue The value associated with the given key. KeyComparer Gets or sets the key comparer. Declaration public IComparer<TKey> KeyComparer { get; set; } Property Value Type Description IComparer<TKey> The key comparer. Keys Gets a strongly typed, read-only collection of elements. Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description IEnumerable<TKey> A strongly typed, read-only collection of elements. ValueComparer Gets or sets the value comparer. Declaration public IEqualityComparer<TValue> ValueComparer { get; set; } Property Value Type Description IEqualityComparer<TValue> The value comparer. Values Gets a collection that contains the values of the immutable sorted dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description IEnumerable<TValue> A collection that contains the values of the object that implements the dictionary. Methods Add(KeyValuePair<TKey, TValue>) Adds the specified item to the immutable sorted dictionary. Declaration public void Add(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item The object to add to the dictionary. Add(TKey, TValue) Adds an element that has the specified key and value to the immutable sorted dictionary. Declaration public void Add(TKey key, TValue value) Parameters Type Name Description TKey key The key of the element to add. TValue value The value of the element to add. AddRange(IEnumerable<KeyValuePair<TKey, TValue>>) Adds a sequence of values to the immutable sorted dictionary. Declaration public void AddRange(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> items The items to add to the dictionary. Clear() Removes all items from the immutable sorted dictionary. Declaration public void Clear() Contains(KeyValuePair<TKey, TValue>) Determines whether the immutable sorted dictionary contains a specific value. Declaration public bool Contains(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item The object to locate in the dictionary. Returns Type Description bool true if item is found in the dictionary; otherwise, false. ContainsKey(TKey) Determines whether the immutable sorted dictionary contains an element with the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to locate in the dictionary. Returns Type Description bool true if the dictionary contains an element with the key; otherwise, false. ContainsValue(TValue) Determines whether the immutable sorted dictionary contains an element with the specified value. Declaration public bool ContainsValue(TValue value) Parameters Type Name Description TValue value The value to locate in the dictionary. The value can be null for reference types. Returns Type Description bool true if the immutable sorted dictionary contains an element with the specified value; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the immutable sorted dictionary. Declaration public ImmutableSortedDictionary<TKey, TValue>.Enumerator GetEnumerator() Returns Type Description ImmutableSortedDictionary<TKey, TValue>.Enumerator An enumerator that can be used to iterate through the dictionary. GetValueOrDefault(TKey) Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value. Declaration public TValue? GetValueOrDefault(TKey key) Parameters Type Name Description TKey key The key to search for. Returns Type Description TValue The value for the key, or default(TValue) if no matching key was found. GetValueOrDefault(TKey, TValue) Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value. Declaration public TValue GetValueOrDefault(TKey key, TValue defaultValue) Parameters Type Name Description TKey key The key to search for. TValue defaultValue The default value to return if no matching key is found in the dictionary. Returns Type Description TValue The value for the key, or defaultValue if no matching key was found. Remove(KeyValuePair<TKey, TValue>) Removes the first occurrence of a specific object from the immutable sorted dictionary. Declaration public bool Remove(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item The object to remove from the dictionary. Returns Type Description bool true if item was successfully removed from the dictionary; otherwise, false. This method also returns false if item is not found in the dictionary. Remove(TKey) Removes the element with the specified key from the immutable sorted dictionary. Declaration public bool Remove(TKey key) Parameters Type Name Description TKey key The key of the element to remove. Returns Type Description bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original dictionary. RemoveRange(IEnumerable<TKey>) Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary. Declaration public void RemoveRange(IEnumerable<TKey> keys) Parameters Type Name Description IEnumerable<TKey> keys The keys for entries to remove from the dictionary. ToImmutable() Creates an immutable sorted dictionary based on the contents of this instance. Declaration public ImmutableSortedDictionary<TKey, TValue> ToImmutable() Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable sorted dictionary. TryGetKey(TKey, out TKey) Determines whether this dictionary contains a specified key. Declaration public bool TryGetKey(TKey equalKey, out TKey actualKey) Parameters Type Name Description TKey equalKey The key to search for. TKey actualKey The matching key located in the dictionary if found, or equalkey if no match is found. Returns Type Description bool true if a match for equalKey is found; otherwise, false. TryGetValue(TKey, out TValue) Gets the value associated with the specified key. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key whose value will be retrieved. TValue value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements the dictionary contains an element with the specified key; otherwise, false. ValueRef(TKey) Returns a read-only reference to the value associated with the provided key. Declaration public ref readonly TValue ValueRef(TKey key) Parameters Type Name Description TKey key Key of the entry to be looked up. Returns Type Description TValue A read-only reference to the value associated with the provided key. Exceptions Type Condition KeyNotFoundException The key is not present. Implements IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(ImmutableSortedDictionary<TKey, TValue>.Builder)"
  },
  "api/System.Collections.Immutable.ImmutableSortedDictionary-2.Enumerator.html": {
    "href": "api/System.Collections.Immutable.ImmutableSortedDictionary-2.Enumerator.html",
    "title": "Struct ImmutableSortedDictionary<TKey, TValue>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ImmutableSortedDictionary<TKey, TValue>.Enumerator Enumerates the contents of a binary tree. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Implements IEnumerator<KeyValuePair<TKey, TValue>> IDisposable IEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public struct ImmutableSortedDictionary<TKey, TValue>.Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, IEnumerator Properties Current Gets the element at the current position of the enumerator. Declaration public KeyValuePair<TKey, TValue> Current { get; } Property Value Type Description KeyValuePair<TKey, TValue> The element at the current position of the enumerator. Methods Dispose() Releases the resources used by the current instance of the ImmutableSortedDictionary<TKey, TValue>.Enumerator class. Declaration public void Dispose() MoveNext() Advances the enumerator to the next element of the immutable sorted dictionary. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the sorted dictionary. Reset() Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary. Declaration public void Reset() Implements IEnumerator<T> IDisposable IEnumerator"
  },
  "api/System.Collections.Immutable.ImmutableSortedDictionary-2.html": {
    "href": "api/System.Collections.Immutable.ImmutableSortedDictionary-2.html",
    "title": "Class ImmutableSortedDictionary<TKey, TValue> | CodeFactory for Windows",
    "keywords": "Class ImmutableSortedDictionary<TKey, TValue> Represents an immutable sorted dictionary. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableSortedDictionary<TKey, TValue> Implements IImmutableDictionary<TKey, TValue> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IDictionary ICollection IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableSortedDictionary<TKey, TValue> : IImmutableDictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable where TKey : notnull Type Parameters Name Description TKey The type of the key contained in the dictionary. TValue The type of the value contained in the dictionary. Fields Empty Gets an empty immutable sorted dictionary. Declaration public static readonly ImmutableSortedDictionary<TKey, TValue> Empty Field Value Type Description ImmutableSortedDictionary<TKey, TValue> Properties Count Gets the number of key/value pairs in the immutable sorted dictionary. Declaration public int Count { get; } Property Value Type Description int The number of key/value pairs in the dictionary. IsEmpty Gets a value that indicates whether this instance of the immutable sorted dictionary is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool true if this instance is empty; otherwise, false. this[TKey] Gets the TValue associated with the specified key. Declaration public TValue this[TKey key] { get; } Parameters Type Name Description TKey key The key to retrieve the value for. Property Value Type Description TValue The value associated with the specified key. If no results are found, the operation throws an exception. KeyComparer Gets the key comparer for the immutable sorted dictionary. Declaration public IComparer<TKey> KeyComparer { get; } Property Value Type Description IComparer<TKey> The key comparer for the dictionary. Keys Gets the keys in the immutable sorted dictionary. Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description IEnumerable<TKey> The keys in the immutable dictionary. ValueComparer Gets the value comparer used to determine whether values are equal. Declaration public IEqualityComparer<TValue> ValueComparer { get; } Property Value Type Description IEqualityComparer<TValue> The value comparer used to determine whether values are equal. Values Gets the values in the immutable sorted dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description IEnumerable<TValue> The values in the dictionary. Methods Add(TKey, TValue) Adds an element with the specified key and value to the immutable sorted dictionary. Declaration public ImmutableSortedDictionary<TKey, TValue> Add(TKey key, TValue value) Parameters Type Name Description TKey key The key of the entry to add. TValue value The value of entry to add. Returns Type Description ImmutableSortedDictionary<TKey, TValue> A new immutable sorted dictionary that contains the additional key/value pair. Exceptions Type Condition ArgumentException The given key already exists in the dictionary but has a different value. AddRange(IEnumerable<KeyValuePair<TKey, TValue>>) Adds the specific key/value pairs to the immutable sorted dictionary. Declaration public ImmutableSortedDictionary<TKey, TValue> AddRange(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> items The key/value pairs to add. Returns Type Description ImmutableSortedDictionary<TKey, TValue> A new immutable dictionary that contains the additional key/value pairs. Exceptions Type Condition ArgumentException One of the given keys already exists in the dictionary but has a different value. Clear() Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance. Declaration public ImmutableSortedDictionary<TKey, TValue> Clear() Returns Type Description ImmutableSortedDictionary<TKey, TValue> An empty dictionary with equivalent ordering and key/value comparison rules. Contains(KeyValuePair<TKey, TValue>) Determines whether this immutable sorted dictionary contains the specified key/value pair. Declaration public bool Contains(KeyValuePair<TKey, TValue> pair) Parameters Type Name Description KeyValuePair<TKey, TValue> pair The key/value pair to locate. Returns Type Description bool true if the specified key/value pair is found in the dictionary; otherwise, false. ContainsKey(TKey) Determines whether this immutable sorted map contains the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to locate. Returns Type Description bool true if the immutable dictionary contains the specified key; otherwise, false. ContainsValue(TValue) Determines whether the immutable sorted dictionary contains an element with the specified value. Declaration public bool ContainsValue(TValue value) Parameters Type Name Description TValue value The value to locate. The value can be null for reference types. Returns Type Description bool true if the dictionary contains an element with the specified value; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the immutable sorted dictionary. Declaration public ImmutableSortedDictionary<TKey, TValue>.Enumerator GetEnumerator() Returns Type Description ImmutableSortedDictionary<TKey, TValue>.Enumerator An enumerator that can be used to iterate through the dictionary. Remove(TKey) Removes the element with the specified value from the immutable sorted dictionary. Declaration public ImmutableSortedDictionary<TKey, TValue> Remove(TKey value) Parameters Type Name Description TKey value The value of the element to remove. Returns Type Description ImmutableSortedDictionary<TKey, TValue> A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary. RemoveRange(IEnumerable<TKey>) Removes the elements with the specified keys from the immutable sorted dictionary. Declaration public ImmutableSortedDictionary<TKey, TValue> RemoveRange(IEnumerable<TKey> keys) Parameters Type Name Description IEnumerable<TKey> keys The keys of the elements to remove. Returns Type Description ImmutableSortedDictionary<TKey, TValue> A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary. SetItem(TKey, TValue) Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key. Declaration public ImmutableSortedDictionary<TKey, TValue> SetItem(TKey key, TValue value) Parameters Type Name Description TKey key The key of the entry to add. TValue value The key value to set. Returns Type Description ImmutableSortedDictionary<TKey, TValue> A new immutable sorted dictionary that contains the specified key/value pair. SetItems(IEnumerable<KeyValuePair<TKey, TValue>>) Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys. Declaration public ImmutableSortedDictionary<TKey, TValue> SetItems(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> items The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable dictionary that contains the specified key/value pairs. ToBuilder() Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces. Declaration public ImmutableSortedDictionary<TKey, TValue>.Builder ToBuilder() Returns Type Description ImmutableSortedDictionary<TKey, TValue>.Builder A collection with the same contents as this dictionary. TryGetKey(TKey, out TKey) Determines whether this dictionary contains a specified key. Declaration public bool TryGetKey(TKey equalKey, out TKey actualKey) Parameters Type Name Description TKey equalKey The key to search for. TKey actualKey The matching key located in the dictionary if found, or equalkey if no match is found. Returns Type Description bool true if a match for equalKey is found; otherwise, false. TryGetValue(TKey, out TValue) Gets the value associated with the specified key. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key whose value will be retrieved. TValue value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the value parameter. Returns Type Description bool true if the dictionary contains an element with the specified key; otherwise, false. ValueRef(TKey) Returns a read-only reference to the value associated with the provided key. Declaration public ref readonly TValue ValueRef(TKey key) Parameters Type Name Description TKey key Key of the entry to be looked up. Returns Type Description TValue A read-only reference to the value associated with the provided key. Exceptions Type Condition KeyNotFoundException The key is not present. WithComparers(IComparer<TKey>?) Gets an instance of the immutable sorted dictionary that uses the specified key comparer. Declaration public ImmutableSortedDictionary<TKey, TValue> WithComparers(IComparer<TKey>? keyComparer) Parameters Type Name Description IComparer<TKey> keyComparer The key comparer to use. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An instance of the immutable dictionary that uses the given comparer. WithComparers(IComparer<TKey>?, IEqualityComparer<TValue>?) Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers. Declaration public ImmutableSortedDictionary<TKey, TValue> WithComparers(IComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer) Parameters Type Name Description IComparer<TKey> keyComparer The key comparer to use. IEqualityComparer<TValue> valueComparer The value comparer to use. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An instance of the immutable dictionary that uses the given comparers. Implements IImmutableDictionary<TKey, TValue> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IDictionary ICollection IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableDictionary.Contains<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey, TValue) ImmutableDictionary.GetValueOrDefault<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey) ImmutableDictionary.GetValueOrDefault<TKey, TValue>(IImmutableDictionary<TKey, TValue>, TKey, TValue)"
  },
  "api/System.Collections.Immutable.ImmutableSortedDictionary.html": {
    "href": "api/System.Collections.Immutable.ImmutableSortedDictionary.html",
    "title": "Class ImmutableSortedDictionary | CodeFactory for Windows",
    "keywords": "Class ImmutableSortedDictionary Provides a set of initialization methods for instances of the ImmutableSortedDictionary<TKey, TValue> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableSortedDictionary Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public static class ImmutableSortedDictionary Methods CreateBuilder<TKey, TValue>() Creates a new immutable sorted dictionary builder. Declaration public static ImmutableSortedDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>() where TKey : notnull Returns Type Description ImmutableSortedDictionary<TKey, TValue>.Builder The immutable collection builder. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. CreateBuilder<TKey, TValue>(IComparer<TKey>?) Creates a new immutable sorted dictionary builder. Declaration public static ImmutableSortedDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(IComparer<TKey>? keyComparer) where TKey : notnull Parameters Type Name Description IComparer<TKey> keyComparer The key comparer. Returns Type Description ImmutableSortedDictionary<TKey, TValue>.Builder The immutable collection builder. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. CreateBuilder<TKey, TValue>(IComparer<TKey>?, IEqualityComparer<TValue>?) Creates a new immutable sorted dictionary builder. Declaration public static ImmutableSortedDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(IComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer) where TKey : notnull Parameters Type Name Description IComparer<TKey> keyComparer The key comparer. IEqualityComparer<TValue> valueComparer The value comparer. Returns Type Description ImmutableSortedDictionary<TKey, TValue>.Builder The immutable collection builder. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. CreateRange<TKey, TValue>(IComparer<TKey>?, IEnumerable<KeyValuePair<TKey, TValue>>) Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer. Declaration public static ImmutableSortedDictionary<TKey, TValue> CreateRange<TKey, TValue>(IComparer<TKey>? keyComparer, IEnumerable<KeyValuePair<TKey, TValue>> items) where TKey : notnull Parameters Type Name Description IComparer<TKey> keyComparer The comparer implementation to use to evaluate keys for equality and sorting. IEnumerable<KeyValuePair<TKey, TValue>> items The items to add to the sorted dictionary. Returns Type Description ImmutableSortedDictionary<TKey, TValue> The new immutable sorted dictionary that contains the specified items and uses the specified key comparer. Type Parameters Name Description TKey The type of keys stored in the dictionary. TValue The type of values stored in the dictionary. CreateRange<TKey, TValue>(IComparer<TKey>?, IEqualityComparer<TValue>?, IEnumerable<KeyValuePair<TKey, TValue>>) Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers. Declaration public static ImmutableSortedDictionary<TKey, TValue> CreateRange<TKey, TValue>(IComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer, IEnumerable<KeyValuePair<TKey, TValue>> items) where TKey : notnull Parameters Type Name Description IComparer<TKey> keyComparer The comparer implementation to use to compare keys for equality and sorting. IEqualityComparer<TValue> valueComparer The comparer implementation to use to compare values for equality. IEnumerable<KeyValuePair<TKey, TValue>> items The items to add to the sorted dictionary before it's immutable. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable sorted dictionary that contains the specified items and uses the specified comparers. Type Parameters Name Description TKey The type of keys stored in the dictionary. TValue The type of values stored in the dictionary. CreateRange<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Creates an immutable sorted dictionary that contains the specified items and uses the default comparer. Declaration public static ImmutableSortedDictionary<TKey, TValue> CreateRange<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>> items) where TKey : notnull Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> items The items to add to the sorted dictionary before it's immutable. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable sorted dictionary that contains the specified items. Type Parameters Name Description TKey The type of keys stored in the dictionary. TValue The type of values stored in the dictionary. Create<TKey, TValue>() Creates an empty immutable sorted dictionary. Declaration public static ImmutableSortedDictionary<TKey, TValue> Create<TKey, TValue>() where TKey : notnull Returns Type Description ImmutableSortedDictionary<TKey, TValue> An empty immutable sorted dictionary. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. Create<TKey, TValue>(IComparer<TKey>?) Creates an empty immutable sorted dictionary that uses the specified key comparer. Declaration public static ImmutableSortedDictionary<TKey, TValue> Create<TKey, TValue>(IComparer<TKey>? keyComparer) where TKey : notnull Parameters Type Name Description IComparer<TKey> keyComparer The implementation to use to determine the equality of keys in the dictionary. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An empty immutable sorted dictionary. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. Create<TKey, TValue>(IComparer<TKey>?, IEqualityComparer<TValue>?) Creates an empty immutable sorted dictionary that uses the specified key and value comparers. Declaration public static ImmutableSortedDictionary<TKey, TValue> Create<TKey, TValue>(IComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer) where TKey : notnull Parameters Type Name Description IComparer<TKey> keyComparer The implementation to use to determine the equality of keys in the dictionary. IEqualityComparer<TValue> valueComparer The implementation to use to determine the equality of values in the dictionary. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An empty immutable sorted dictionary. Type Parameters Name Description TKey The type of keys stored by the dictionary. TValue The type of values stored by the dictionary. ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents. Declaration public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source) where TKey : notnull Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> source The sequence of key/value pairs to enumerate. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable sorted dictionary that contains the key/value pairs in the specified sequence. Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?) Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer. Declaration public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, IComparer<TKey>? keyComparer) where TKey : notnull Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> source The sequence of key/value pairs to enumerate. IComparer<TKey> keyComparer The key comparer to use when building the immutable dictionary. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable sorted dictionary that contains the key/value pairs in the specified sequence. Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. ToImmutableSortedDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IComparer<TKey>?, IEqualityComparer<TValue>?) Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers. Declaration public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, IComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer) where TKey : notnull Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> source The sequence of key/value pairs to enumerate. IComparer<TKey> keyComparer The key comparer to use when building the immutable dictionary. IEqualityComparer<TValue> valueComparer The value comparer to use for the immutable dictionary. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable sorted dictionary that contains the key/value pairs in the specified sequence. Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. ToImmutableSortedDictionary<TKey, TValue>(Builder) Creates an immutable sorted dictionary from the current contents of the builder's dictionary. Declaration public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this ImmutableSortedDictionary<TKey, TValue>.Builder builder) where TKey : notnull Parameters Type Name Description ImmutableSortedDictionary<TKey, TValue>.Builder builder The builder to create the immutable sorted dictionary from. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable sorted dictionary that contains the current contents in the builder's dictionary. Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents. Declaration public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector) where TKey : notnull Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate to generate the dictionary. Func<TSource, TKey> keySelector The function that will produce the key for the dictionary from each sequence element. Func<TSource, TValue> elementSelector The function that will produce the value for the dictionary from each sequence element. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable sorted dictionary that contains the items in the specified sequence. Type Parameters Name Description TSource The type of the elements in the sequence. TKey The type of the keys in the resulting dictionary. TValue The type of the values in the resulting dictionary. ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer. Declaration public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, IComparer<TKey>? keyComparer) where TKey : notnull Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate to generate the dictionary. Func<TSource, TKey> keySelector The function that will produce the key for the dictionary from each sequence element. Func<TSource, TValue> elementSelector The function that will produce the value for the dictionary from each sequence element. IComparer<TKey> keyComparer The key comparer to use for the dictionary. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable dictionary that contains the items in the specified sequence. Type Parameters Name Description TSource The type of the elements in the sequence. TKey The type of the keys in the resulting dictionary. TValue The type of the values in the resulting dictionary. ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers. Declaration public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, IComparer<TKey>? keyComparer, IEqualityComparer<TValue>? valueComparer) where TKey : notnull Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate to generate the dictionary. Func<TSource, TKey> keySelector The function that will produce the key for the dictionary from each sequence element. Func<TSource, TValue> elementSelector The function that will produce the value for the dictionary from each sequence element. IComparer<TKey> keyComparer The key comparer to use for the dictionary. IEqualityComparer<TValue> valueComparer The value comparer to use for the dictionary. Returns Type Description ImmutableSortedDictionary<TKey, TValue> An immutable sorted dictionary that contains the items in the specified sequence. Type Parameters Name Description TSource The type of the elements in the sequence. TKey The type of the keys in the resulting dictionary. TValue The type of the values in the resulting dictionary."
  },
  "api/System.Collections.Immutable.ImmutableSortedSet-1.Builder.html": {
    "href": "api/System.Collections.Immutable.ImmutableSortedSet-1.Builder.html",
    "title": "Class ImmutableSortedSet<T>.Builder | CodeFactory for Windows",
    "keywords": "Class ImmutableSortedSet<T>.Builder Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableSortedSet<T>.Builder Implements IReadOnlyCollection<T> ISet<T> ICollection<T> IEnumerable<T> ICollection IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableSortedSet<T>.Builder : IReadOnlyCollection<T>, ISet<T>, ICollection<T>, IEnumerable<T>, ICollection, IEnumerable Properties Count Gets the number of elements in the immutable sorted set. Declaration public int Count { get; } Property Value Type Description int The number of elements in this set. this[int] Gets the element of the set at the given index. Declaration public T this[int index] { get; } Parameters Type Name Description int index The 0-based index of the element in the set to return. Property Value Type Description T The element at the given position. KeyComparer Gets or sets the object that is used to determine equality for the values in the immutable sorted set. Declaration public IComparer<T> KeyComparer { get; set; } Property Value Type Description IComparer<T> The comparer that is used to determine equality for the values in the set. Max Gets the maximum value in the immutable sorted set, as defined by the comparer. Declaration public T? Max { get; } Property Value Type Description T The maximum value in the set. Min Gets the minimum value in the immutable sorted set, as defined by the comparer. Declaration public T? Min { get; } Property Value Type Description T The minimum value in the set. Methods Add(T) Adds an element to the current set and returns a value to indicate whether the element was successfully added. Declaration public bool Add(T item) Parameters Type Name Description T item The element to add to the set. Returns Type Description bool true if the element is added to the set; false if the element is already in the set. Clear() Removes all elements from this set. Declaration public void Clear() Contains(T) Determines whether the set contains the specified object. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the set. Returns Type Description bool true if item is found in the set; otherwise, false. ExceptWith(IEnumerable<T>) Removes the specified set of items from the current set. Declaration public void ExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection of items to remove from the set. GetEnumerator() Returns an enumerator that iterates through the set. Declaration public ImmutableSortedSet<T>.Enumerator GetEnumerator() Returns Type Description ImmutableSortedSet<T>.Enumerator A enumerator that can be used to iterate through the set. IntersectWith(IEnumerable<T>) Modifies the current set so that it contains only elements that are also in a specified collection. Declaration public void IntersectWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. IsProperSubsetOf(IEnumerable<T>) Determines whether the current set is a proper (strict) subset of a specified collection. Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper subset of other; otherwise, false. IsProperSupersetOf(IEnumerable<T>) Determines whether the current set is a proper (strict) superset of a specified collection. Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper superset of other; otherwise, false. IsSubsetOf(IEnumerable<T>) Determines whether the current set is a subset of a specified collection. Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection is compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise, false. IsSupersetOf(IEnumerable<T>) Determines whether the current set is a superset of a specified collection. Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a superset of other; otherwise, false. ItemRef(int) Gets a read-only reference to the element of the set at the given index. Declaration public ref readonly T ItemRef(int index) Parameters Type Name Description int index The 0-based index of the element in the set to return. Returns Type Description T A read-only reference to the element at the given position. Overlaps(IEnumerable<T>) Determines whether the current set overlaps with the specified collection. Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set and other share at least one common element; otherwise, false. Remove(T) Removes the first occurrence of the specified object from the set. Declaration public bool Remove(T item) Parameters Type Name Description T item The object to remove from the set. Returns Type Description bool true if item was removed from the set; false if item was not found in the set. Reverse() Returns an enumerator that iterates over the immutable sorted set in reverse order. Declaration public IEnumerable<T> Reverse() Returns Type Description IEnumerable<T> An enumerator that iterates over the set in reverse order. SetEquals(IEnumerable<T>) Determines whether the current set and the specified collection contain the same elements. Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is equal to other; otherwise, false. SymmetricExceptWith(IEnumerable<T>) Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both. Declaration public void SymmetricExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. ToImmutable() Creates an immutable sorted set based on the contents of this instance. Declaration public ImmutableSortedSet<T> ToImmutable() Returns Type Description ImmutableSortedSet<T> An immutable set. TryGetValue(T, out T) Searches the set for a given value and returns the equal value it finds, if any. Declaration public bool TryGetValue(T equalValue, out T actualValue) Parameters Type Name Description T equalValue The value for which to search. T actualValue The value from the set that the search found, or the original value if the search yielded no match. Returns Type Description bool A value indicating whether the search was successful. UnionWith(IEnumerable<T>) Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection. Declaration public void UnionWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current state. Implements IReadOnlyCollection<T> ISet<T> ICollection<T> IEnumerable<T> ICollection IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(ImmutableSortedSet<TSource>.Builder)"
  },
  "api/System.Collections.Immutable.ImmutableSortedSet-1.Enumerator.html": {
    "href": "api/System.Collections.Immutable.ImmutableSortedSet-1.Enumerator.html",
    "title": "Struct ImmutableSortedSet<T>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ImmutableSortedSet<T>.Enumerator Enumerates the contents of a binary tree. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Implements IEnumerator<T> IDisposable IEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public struct ImmutableSortedSet<T>.Enumerator : IEnumerator<T>, IDisposable, IEnumerator Properties Current Gets the element at the current position of the enumerator. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Declaration public T Current { get; } Property Value Type Description T The element at the current position of the enumerator. Methods Dispose() Releases the resources used by the current instance of the ImmutableSortedSet<T>.Enumerator class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Declaration public void Dispose() MoveNext() Advances the enumerator to the next element of the immutable sorted set. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the sorted set. Reset() Sets the enumerator to its initial position, which is before the first element in the immutable sorted set. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Declaration public void Reset() Implements IEnumerator<T> IDisposable IEnumerator"
  },
  "api/System.Collections.Immutable.ImmutableSortedSet-1.html": {
    "href": "api/System.Collections.Immutable.ImmutableSortedSet-1.html",
    "title": "Class ImmutableSortedSet<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableSortedSet<T> Represents an immutable sorted set implementation. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableSortedSet<T> Implements IImmutableSet<T> IReadOnlyList<T> IReadOnlyCollection<T> IList<T> ISet<T> ICollection<T> IEnumerable<T> IList ICollection IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableSortedSet<T> : IImmutableSet<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IList<T>, ISet<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable Type Parameters Name Description T The type of elements in the set. Fields Empty Gets an empty immutable sorted set. Declaration public static readonly ImmutableSortedSet<T> Empty Field Value Type Description ImmutableSortedSet<T> Properties Count Gets the number of elements in the immutable sorted set. Declaration public int Count { get; } Property Value Type Description int The number of elements in the immutable sorted set. IsEmpty Gets a value that indicates whether this immutable sorted set is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool true if this set is empty; otherwise, false. this[int] Gets the element of the immutable sorted set at the given index. Declaration public T this[int index] { get; } Parameters Type Name Description int index The index of the element to retrieve from the sorted set. Property Value Type Description T The element at the given index. KeyComparer Gets the comparer used to sort keys in the immutable sorted set. Declaration public IComparer<T> KeyComparer { get; } Property Value Type Description IComparer<T> The comparer used to sort keys. Max Gets the maximum value in the immutable sorted set, as defined by the comparer. Declaration public T? Max { get; } Property Value Type Description T The maximum value in the set. Min Gets the minimum value in the immutable sorted set, as defined by the comparer. Declaration public T? Min { get; } Property Value Type Description T The minimum value in the set. Methods Add(T) Adds the specified value to this immutable sorted set. Declaration public ImmutableSortedSet<T> Add(T value) Parameters Type Name Description T value The value to add. Returns Type Description ImmutableSortedSet<T> A new set with the element added, or this set if the element is already in this set. Clear() Removes all elements from the immutable sorted set. Declaration public ImmutableSortedSet<T> Clear() Returns Type Description ImmutableSortedSet<T> An empty set with the elements removed. Contains(T) Determines whether this immutable sorted set contains the specified value. Declaration public bool Contains(T value) Parameters Type Name Description T value The value to check for. Returns Type Description bool true if the set contains the specified value; otherwise, false. Except(IEnumerable<T>) Removes a specified set of items from this immutable sorted set. Declaration public ImmutableSortedSet<T> Except(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The items to remove from this set. Returns Type Description ImmutableSortedSet<T> A new set with the items removed; or the original set if none of the items were in the set. GetEnumerator() Returns an enumerator that iterates through the immutable sorted set. Declaration public ImmutableSortedSet<T>.Enumerator GetEnumerator() Returns Type Description ImmutableSortedSet<T>.Enumerator An enumerator that can be used to iterate through the set. IndexOf(T) Gets the position within this immutable sorted set that the specified value appears in. Declaration public int IndexOf(T item) Parameters Type Name Description T item The value whose position is being sought. Returns Type Description int The index of the specified item in the sorted set, if item is found. If item is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If item is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1. Intersect(IEnumerable<T>) Creates an immutable sorted set that contains elements that exist both in this set and in the specified set. Declaration public ImmutableSortedSet<T> Intersect(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The set to intersect with this one. Returns Type Description ImmutableSortedSet<T> A new immutable sorted set that contains any elements that exist in both sets. IsProperSubsetOf(IEnumerable<T>) Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection. Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper subset of other; otherwise, false. IsProperSupersetOf(IEnumerable<T>) Determines whether the current immutable sorted set is a proper superset of a specified collection. Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper superset of other; otherwise, false. IsSubsetOf(IEnumerable<T>) Determines whether the current immutable sorted set is a subset of a specified collection. Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise, false. IsSupersetOf(IEnumerable<T>) Determines whether the current immutable sorted set is a superset of a specified collection. Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set is a superset of other; otherwise, false. ItemRef(int) Gets a read-only reference of the element of the set at the given index. Declaration public ref readonly T ItemRef(int index) Parameters Type Name Description int index The 0-based index of the element in the set to return. Returns Type Description T A read-only reference of the element at the given position. Overlaps(IEnumerable<T>) Determines whether the current immutable sorted set and a specified collection share common elements. Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the current set and other share at least one common element; otherwise, false. Remove(T) Removes the specified value from this immutable sorted set. Declaration public ImmutableSortedSet<T> Remove(T value) Parameters Type Name Description T value The element to remove. Returns Type Description ImmutableSortedSet<T> A new immutable sorted set with the element removed, or this set if the element was not found in the set. Reverse() Returns an IEnumerable<T> that iterates over this immutable sorted set in reverse order. Declaration public IEnumerable<T> Reverse() Returns Type Description IEnumerable<T> An enumerator that iterates over the immutable sorted set in reverse order. SetEquals(IEnumerable<T>) Determines whether the current immutable sorted set and the specified collection contain the same elements. Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The collection to compare to the current set. Returns Type Description bool true if the sets are equal; otherwise, false. SymmetricExcept(IEnumerable<T>) Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both. Declaration public ImmutableSortedSet<T> SymmetricExcept(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The other sequence of items. Returns Type Description ImmutableSortedSet<T> The new immutable sorted set. ToBuilder() Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces. Declaration public ImmutableSortedSet<T>.Builder ToBuilder() Returns Type Description ImmutableSortedSet<T>.Builder The sorted set builder. TryGetValue(T, out T) Searches the set for a given value and returns the equal value it finds, if any. Declaration public bool TryGetValue(T equalValue, out T actualValue) Parameters Type Name Description T equalValue The value to search for. T actualValue The value from the set that the search found, or the original value if the search yielded no match. Returns Type Description bool A value indicating whether the search was successful. Union(IEnumerable<T>) Adds a given set of items to this immutable sorted set. Declaration public ImmutableSortedSet<T> Union(IEnumerable<T> other) Parameters Type Name Description IEnumerable<T> other The items to add. Returns Type Description ImmutableSortedSet<T> The new set with the items added; or the original set if all the items were already in the set. WithComparer(IComparer<T>?) Returns the immutable sorted set that has the specified key comparer. Declaration public ImmutableSortedSet<T> WithComparer(IComparer<T>? comparer) Parameters Type Name Description IComparer<T> comparer The comparer to check for. Returns Type Description ImmutableSortedSet<T> The immutable sorted set that has the specified key comparer. Implements IImmutableSet<T> IReadOnlyList<T> IReadOnlyCollection<T> IList<T> ISet<T> ICollection<T> IEnumerable<T> IList ICollection IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?)"
  },
  "api/System.Collections.Immutable.ImmutableSortedSet.html": {
    "href": "api/System.Collections.Immutable.ImmutableSortedSet.html",
    "title": "Class ImmutableSortedSet | CodeFactory for Windows",
    "keywords": "Class ImmutableSortedSet Provides a set of initialization methods for instances of the ImmutableSortedSet<T> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableSortedSet Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public static class ImmutableSortedSet Methods CreateBuilder<T>() Returns a collection that can be used to build an immutable sorted set. Declaration public static ImmutableSortedSet<T>.Builder CreateBuilder<T>() Returns Type Description ImmutableSortedSet<T>.Builder The immutable collection builder. Type Parameters Name Description T The type of items stored by the collection. CreateBuilder<T>(IComparer<T>?) Returns a collection that can be used to build an immutable sorted set. Declaration public static ImmutableSortedSet<T>.Builder CreateBuilder<T>(IComparer<T>? comparer) Parameters Type Name Description IComparer<T> comparer The comparer used to compare items in the set for equality. Returns Type Description ImmutableSortedSet<T>.Builder The immutable collection. Type Parameters Name Description T The type of items stored by the collection. CreateRange<T>(IComparer<T>?, IEnumerable<T>) Creates a new immutable collection that contains the specified items. Declaration public static ImmutableSortedSet<T> CreateRange<T>(IComparer<T>? comparer, IEnumerable<T> items) Parameters Type Name Description IComparer<T> comparer The comparer to use to compare elements in this set. IEnumerable<T> items The items to add to the set before it's immutable. Returns Type Description ImmutableSortedSet<T> The new immutable set that contains the specified items. Type Parameters Name Description T The type of items stored by the collection. CreateRange<T>(IEnumerable<T>) Creates a new immutable collection that contains the specified items. Declaration public static ImmutableSortedSet<T> CreateRange<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The items to add to the set with before it's immutable. Returns Type Description ImmutableSortedSet<T> The new immutable set that contains the specified items. Type Parameters Name Description T The type of items stored by the collection. Create<T>() Creates an empty immutable sorted set. Declaration public static ImmutableSortedSet<T> Create<T>() Returns Type Description ImmutableSortedSet<T> An empty immutable sorted set. Type Parameters Name Description T The type of items to be stored in the immutable set. Create<T>(IComparer<T>?) Creates an empty immutable sorted set that uses the specified comparer. Declaration public static ImmutableSortedSet<T> Create<T>(IComparer<T>? comparer) Parameters Type Name Description IComparer<T> comparer The implementation to use when comparing items in the set. Returns Type Description ImmutableSortedSet<T> An empty immutable set. Type Parameters Name Description T The type of items in the immutable set. Create<T>(IComparer<T>?, T) Creates a new immutable sorted set that contains the specified item and uses the specified comparer. Declaration public static ImmutableSortedSet<T> Create<T>(IComparer<T>? comparer, T item) Parameters Type Name Description IComparer<T> comparer The implementation to use when comparing items in the set. T item The item to prepopulate the set with. Returns Type Description ImmutableSortedSet<T> A new immutable set that contains the specified item. Type Parameters Name Description T The type of items stored in the immutable set. Create<T>(IComparer<T>?, params T[]) Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer. Declaration public static ImmutableSortedSet<T> Create<T>(IComparer<T>? comparer, params T[] items) Parameters Type Name Description IComparer<T> comparer The implementation to use when comparing items in the set. T[] items An array that contains the items to prepopulate the set with. Returns Type Description ImmutableSortedSet<T> A new immutable set that contains the specified items. Type Parameters Name Description T The type of items in the immutable set. Create<T>(T) Creates a new immutable sorted set that contains the specified item. Declaration public static ImmutableSortedSet<T> Create<T>(T item) Parameters Type Name Description T item The item to prepopulate the set with. Returns Type Description ImmutableSortedSet<T> A new immutable set that contains the specified item. Type Parameters Name Description T The type of items in the immutable set. Create<T>(params T[]) Creates a new immutable sorted set that contains the specified array of items. Declaration public static ImmutableSortedSet<T> Create<T>(params T[] items) Parameters Type Name Description T[] items An array that contains the items to prepopulate the set with. Returns Type Description ImmutableSortedSet<T> A new immutable set that contains the specified items. Type Parameters Name Description T The type of items in the immutable set. ToImmutableSortedSet<TSource>(IEnumerable<TSource>) Enumerates a sequence and produces an immutable sorted set of its contents. Declaration public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate. Returns Type Description ImmutableSortedSet<TSource> An immutable sorted set that contains the items in the specified sequence. Type Parameters Name Description TSource The type of the elements in the sequence. ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer. Declaration public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this IEnumerable<TSource> source, IComparer<TSource>? comparer) Parameters Type Name Description IEnumerable<TSource> source The sequence to enumerate. IComparer<TSource> comparer The comparer to use for initializing and adding members to the sorted set. Returns Type Description ImmutableSortedSet<TSource> An immutable sorted set that contains the items in the specified sequence. Type Parameters Name Description TSource The type of the elements in the sequence. ToImmutableSortedSet<TSource>(Builder) Creates an immutable sorted set from the current contents of the builder's set. Declaration public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this ImmutableSortedSet<TSource>.Builder builder) Parameters Type Name Description ImmutableSortedSet<TSource>.Builder builder The builder to create the immutable sorted set from. Returns Type Description ImmutableSortedSet<TSource> An immutable sorted set that contains the current contents in the builder's set. Type Parameters Name Description TSource The type of the elements in the immutable sorted set."
  },
  "api/System.Collections.Immutable.ImmutableStack-1.Enumerator.html": {
    "href": "api/System.Collections.Immutable.ImmutableStack-1.Enumerator.html",
    "title": "Struct ImmutableStack<T>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ImmutableStack<T>.Enumerator Enumerates the contents of an immutable stack without allocating any memory. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public struct ImmutableStack<T>.Enumerator Properties Current Gets the element at the current position of the enumerator. Declaration public T Current { get; } Property Value Type Description T The element at the current position of the enumerator. Methods MoveNext() Advances the enumerator to the next element of the immutable stack. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the stack."
  },
  "api/System.Collections.Immutable.ImmutableStack-1.html": {
    "href": "api/System.Collections.Immutable.ImmutableStack-1.html",
    "title": "Class ImmutableStack<T> | CodeFactory for Windows",
    "keywords": "Class ImmutableStack<T> Represents an immutable stack. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableStack<T> Implements IImmutableStack<T> IEnumerable<T> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public sealed class ImmutableStack<T> : IImmutableStack<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of element on the stack. Properties Empty Gets an empty immutable stack. Declaration public static ImmutableStack<T> Empty { get; } Property Value Type Description ImmutableStack<T> An empty immutable stack. IsEmpty Gets a value that indicates whether this instance of the immutable stack is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool true if this instance is empty; otherwise, false. Methods Clear() Removes all objects from the immutable stack. Declaration public ImmutableStack<T> Clear() Returns Type Description ImmutableStack<T> An empty immutable stack. GetEnumerator() Returns an enumerator that iterates through the immutable stack. Declaration public ImmutableStack<T>.Enumerator GetEnumerator() Returns Type Description ImmutableStack<T>.Enumerator An enumerator that can be used to iterate through the stack. Peek() Returns the object at the top of the stack without removing it. Declaration public T Peek() Returns Type Description T The object at the top of the stack. Exceptions Type Condition InvalidOperationException The stack is empty. PeekRef() Gets a read-only reference to the element on the top of the stack. Declaration public ref readonly T PeekRef() Returns Type Description T A read-only reference to the element on the top of the stack. Exceptions Type Condition InvalidOperationException Thrown when the stack is empty. Pop() Removes the element at the top of the immutable stack and returns the stack after the removal. Declaration public ImmutableStack<T> Pop() Returns Type Description ImmutableStack<T> A stack; never null. Exceptions Type Condition InvalidOperationException The stack is empty. Pop(out T) Removes the specified element from the immutable stack and returns the stack after the removal. Declaration public ImmutableStack<T> Pop(out T value) Parameters Type Name Description T value The value to remove from the stack. Returns Type Description ImmutableStack<T> A stack; never null. Push(T) Inserts an object at the top of the immutable stack and returns the new stack. Declaration public ImmutableStack<T> Push(T value) Parameters Type Name Description T value The object to push onto the stack. Returns Type Description ImmutableStack<T> The new stack. Implements IImmutableStack<T> IEnumerable<T> IEnumerable Extension Methods ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?) ImmutableDictionary.ToImmutableDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IEqualityComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>) ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>?) ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?) ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>, IComparer<TKey>?, IEqualityComparer<TValue>?) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>) ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>?) ImmutableStack.Pop<T>(IImmutableStack<T>, out T)"
  },
  "api/System.Collections.Immutable.ImmutableStack.html": {
    "href": "api/System.Collections.Immutable.ImmutableStack.html",
    "title": "Class ImmutableStack | CodeFactory for Windows",
    "keywords": "Class ImmutableStack Provides a set of initialization methods for instances of the ImmutableStack<T> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableStack Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Collections.Immutable Assembly: System.Collections.Immutable.dll Syntax public static class ImmutableStack Methods CreateRange<T>(IEnumerable<T>) Creates a new immutable stack that contains the specified items. Declaration public static ImmutableStack<T> CreateRange<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The items to add to the stack before it's immutable. Returns Type Description ImmutableStack<T> An immutable stack that contains the specified items. Type Parameters Name Description T The type of items in the stack. Create<T>() Creates an empty immutable stack. Declaration public static ImmutableStack<T> Create<T>() Returns Type Description ImmutableStack<T> An empty immutable stack. Type Parameters Name Description T The type of items to be stored in the immutable stack. Create<T>(T) Creates a new immutable stack that contains the specified item. Declaration public static ImmutableStack<T> Create<T>(T item) Parameters Type Name Description T item The item to prepopulate the stack with. Returns Type Description ImmutableStack<T> A new immutable collection that contains the specified item. Type Parameters Name Description T The type of items in the immutable stack. Create<T>(params T[]) Creates a new immutable stack that contains the specified array of items. Declaration public static ImmutableStack<T> Create<T>(params T[] items) Parameters Type Name Description T[] items An array that contains the items to prepopulate the stack with. Returns Type Description ImmutableStack<T> A new immutable stack that contains the specified items. Type Parameters Name Description T The type of items in the immutable stack. Pop<T>(IImmutableStack<T>, out T) Removes the specified item from an immutable stack. Declaration public static IImmutableStack<T> Pop<T>(this IImmutableStack<T> stack, out T value) Parameters Type Name Description IImmutableStack<T> stack The stack to modify. T value The item to remove from the stack. Returns Type Description IImmutableStack<T> A stack; never null. Type Parameters Name Description T The type of items contained in the stack. Exceptions Type Condition InvalidOperationException The stack is empty."
  },
  "api/System.Collections.Immutable.html": {
    "href": "api/System.Collections.Immutable.html",
    "title": "Namespace System.Collections.Immutable | CodeFactory for Windows",
    "keywords": "Namespace System.Collections.Immutable Classes ImmutableArray Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableArray<T>.Builder A writable array accessor that can be converted into an ImmutableArray<T> instance without allocating extra memory. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableDictionary Provides a set of initialization methods for instances of the ImmutableDictionary<TKey, TValue> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableDictionary<TKey, TValue> Represents an immutable, unordered collection of keys and values. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableDictionary<TKey, TValue>.Builder Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableHashSet Provides a set of initialization methods for instances of the ImmutableHashSet<T> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableHashSet<T> Represents an immutable, unordered hash set. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableHashSet<T>.Builder Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableInterlocked Contains interlocked exchange mechanisms for immutable collections. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableList Provides a set of initialization methods for instances of the ImmutableList<T> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableList<T> Represents an immutable list, which is a strongly typed list of objects that can be accessed by index. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableList<T>.Builder Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableQueue Provides a set of initialization methods for instances of the ImmutableQueue<T> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableQueue<T> Represents an immutable queue. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableSortedDictionary Provides a set of initialization methods for instances of the ImmutableSortedDictionary<TKey, TValue> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableSortedDictionary<TKey, TValue> Represents an immutable sorted dictionary. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableSortedDictionary<TKey, TValue>.Builder Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableSortedSet Provides a set of initialization methods for instances of the ImmutableSortedSet<T> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableSortedSet<T> Represents an immutable sorted set implementation. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableSortedSet<T>.Builder Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableStack Provides a set of initialization methods for instances of the ImmutableStack<T> class. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableStack<T> Represents an immutable stack. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Structs ImmutableArray<T> Represents an array that is immutable; meaning it cannot be changed once it is created. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableArray<T>.Enumerator An array enumerator. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableDictionary<TKey, TValue>.Enumerator Enumerates the contents of the immutable dictionary without allocating any memory. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableHashSet<T>.Enumerator Enumerates the contents of the immutable hash set without allocating any memory. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableList<T>.Enumerator Enumerates the contents of a binary tree. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableQueue<T>.Enumerator Enumerates the contents of an immutable queue without allocating any memory. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableSortedDictionary<TKey, TValue>.Enumerator Enumerates the contents of a binary tree. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableSortedSet<T>.Enumerator Enumerates the contents of a binary tree. NuGet package: System.Collections.Immutable (about immutable collections and how to install) ImmutableStack<T>.Enumerator Enumerates the contents of an immutable stack without allocating any memory. NuGet package: System.Collections.Immutable (about immutable collections and how to install) Interfaces IImmutableDictionary<TKey, TValue> Represents an immutable collection of key/value pairs. NuGet package: System.Collections.Immutable (about immutable collections and how to install) IImmutableList<T> Represents a list of elements that cannot be modified. NuGet package: System.Collections.Immutable (about immutable collections and how to install) IImmutableQueue<T> Represents an immutable first-in, first-out collection of objects. NuGet package: System.Collections.Immutable (about immutable collections and how to install) IImmutableSet<T> Represents a set of elements that can only be modified by creating a new instance of the set. NuGet package: System.Collections.Immutable (about immutable collections and how to install) IImmutableStack<T> Represents an immutable last-in-first-out (LIFO) collection. NuGet package: System.Collections.Immutable (about immutable collections and how to install)"
  },
  "api/System.IAsyncDisposable.html": {
    "href": "api/System.IAsyncDisposable.html",
    "title": "Interface IAsyncDisposable | CodeFactory for Windows",
    "keywords": "Interface IAsyncDisposable Provides a mechanism for releasing unmanaged resources asynchronously. Namespace: System Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax public interface IAsyncDisposable Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration ValueTask DisposeAsync() Returns Type Description ValueTask Extension Methods TaskAsyncEnumerableExtensions.ConfigureAwait(IAsyncDisposable, bool)"
  },
  "api/System.Linq.ImmutableArrayExtensions.html": {
    "href": "api/System.Linq.ImmutableArrayExtensions.html",
    "title": "Class ImmutableArrayExtensions | CodeFactory for Windows",
    "keywords": "Class ImmutableArrayExtensions LINQ extension method overrides that offer greater efficiency for ImmutableArray<T> than the standard LINQ methods NuGet package: System.Collections.Immutable (about immutable collections and how to install) Inheritance object ImmutableArrayExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Linq Assembly: System.Collections.Immutable.dll Syntax public static class ImmutableArrayExtensions Methods Aggregate<T>(ImmutableArray<T>, Func<T, T, T>) Applies a function to a sequence of elements in a cumulative way. Declaration public static T? Aggregate<T>(this ImmutableArray<T> immutableArray, Func<T, T, T> func) Parameters Type Name Description ImmutableArray<T> immutableArray The collection to apply the function to. Func<T, T, T> func A function to be invoked on each element, in a cumulative way. Returns Type Description T The final value after the cumulative function has been applied to all elements. Type Parameters Name Description T The type of element contained by the collection. Aggregate<TAccumulate, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>) Applies a function to a sequence of elements in a cumulative way. Declaration public static TAccumulate Aggregate<TAccumulate, T>(this ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func) Parameters Type Name Description ImmutableArray<T> immutableArray The collection to apply the function to. TAccumulate seed The initial accumulator value. Func<TAccumulate, T, TAccumulate> func A function to be invoked on each element, in a cumulative way. Returns Type Description TAccumulate The final accumulator value. Type Parameters Name Description TAccumulate The type of the accumulated value. T The type of element contained by the collection. Aggregate<TAccumulate, TResult, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>, Func<TAccumulate, TResult>) Applies a function to a sequence of elements in a cumulative way. Declaration public static TResult Aggregate<TAccumulate, TResult, T>(this ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func, Func<TAccumulate, TResult> resultSelector) Parameters Type Name Description ImmutableArray<T> immutableArray The collection to apply the function to. TAccumulate seed The initial accumulator value. Func<TAccumulate, T, TAccumulate> func A function to be invoked on each element, in a cumulative way. Func<TAccumulate, TResult> resultSelector A function to transform the final accumulator value into the result type. Returns Type Description TResult The final accumulator value. Type Parameters Name Description TAccumulate The type of the accumulated value. TResult The type of result returned by the result selector. T The type of element contained by the collection. All<T>(ImmutableArray<T>, Func<T, bool>) Gets a value indicating whether all elements in this array match a given condition. Declaration public static bool All<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate) Parameters Type Name Description ImmutableArray<T> immutableArray The array to check for matches. Func<T, bool> predicate The predicate. Returns Type Description bool true if every element of the source sequence passes the test in the specified predicate; otherwise, false. Type Parameters Name Description T The type of element contained by the collection. Any<T>(ImmutableArray<T>) Gets a value indicating whether the array contains any elements. Declaration public static bool Any<T>(this ImmutableArray<T> immutableArray) Parameters Type Name Description ImmutableArray<T> immutableArray The array to check for elements. Returns Type Description bool true if the array contains an elements; otherwise, false. Type Parameters Name Description T The type of element contained by the collection. Any<T>(ImmutableArray<T>, Func<T, bool>) Gets a value indicating whether the array contains any elements that match a specified condition. Declaration public static bool Any<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate) Parameters Type Name Description ImmutableArray<T> immutableArray The array to check for elements. Func<T, bool> predicate The delegate that defines the condition to match to an element. Returns Type Description bool true if an element matches the specified condition; otherwise, false. Type Parameters Name Description T The type of element contained by the collection. Any<T>(Builder) Returns a value indicating whether this collection contains any elements. Declaration public static bool Any<T>(this ImmutableArray<T>.Builder builder) Parameters Type Name Description ImmutableArray<T>.Builder builder The builder to check for matches. Returns Type Description bool true if the array builder contains any elements; otherwise, false. Type Parameters Name Description T The type of elements in the array. ElementAtOrDefault<T>(ImmutableArray<T>, int) Returns the element at a specified index in a sequence or a default value if the index is out of range. Declaration public static T? ElementAtOrDefault<T>(this ImmutableArray<T> immutableArray, int index) Parameters Type Name Description ImmutableArray<T> immutableArray The array to find an element in. int index The index for the element to retrieve. Returns Type Description T The item at the specified index, or the default value if the index is not found. Type Parameters Name Description T The type of element contained by the collection. ElementAt<T>(ImmutableArray<T>, int) Returns the element at a specified index in the array. Declaration public static T ElementAt<T>(this ImmutableArray<T> immutableArray, int index) Parameters Type Name Description ImmutableArray<T> immutableArray The array to find an element in. int index The index for the element to retrieve. Returns Type Description T The item at the specified index. Type Parameters Name Description T The type of element contained by the collection. FirstOrDefault<T>(ImmutableArray<T>) Returns the first element of a sequence, or a default value if the sequence contains no elements. Declaration public static T? FirstOrDefault<T>(this ImmutableArray<T> immutableArray) Parameters Type Name Description ImmutableArray<T> immutableArray The array to retrieve items from. Returns Type Description T The first item in the list, if found; otherwise the default value for the item type. Type Parameters Name Description T The type of element contained by the collection. FirstOrDefault<T>(ImmutableArray<T>, Func<T, bool>) Returns the first element of the sequence that satisfies a condition or a default value if no such element is found. Declaration public static T? FirstOrDefault<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate) Parameters Type Name Description ImmutableArray<T> immutableArray The array to retrieve elements from. Func<T, bool> predicate The delegate that defines the conditions of the element to search for. Returns Type Description T The first item in the list, if found; otherwise the default value for the item type. Type Parameters Name Description T The type of element contained by the collection. FirstOrDefault<T>(Builder) Returns the first element in the collection, or the default value if the collection is empty. Declaration public static T? FirstOrDefault<T>(this ImmutableArray<T>.Builder builder) Parameters Type Name Description ImmutableArray<T>.Builder builder The builder to retrieve an element from. Returns Type Description T The first item in the list, if found; otherwise the default value for the item type. Type Parameters Name Description T The type of item in the builder. First<T>(ImmutableArray<T>) Returns the first element in an array. Declaration public static T First<T>(this ImmutableArray<T> immutableArray) Parameters Type Name Description ImmutableArray<T> immutableArray The array to get an item from. Returns Type Description T The first item in the array. Type Parameters Name Description T The type of element contained by the collection. Exceptions Type Condition InvalidOperationException If the array is empty. First<T>(ImmutableArray<T>, Func<T, bool>) Returns the first element in a sequence that satisfies a specified condition. Declaration public static T First<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate) Parameters Type Name Description ImmutableArray<T> immutableArray The array to get an item from. Func<T, bool> predicate The delegate that defines the conditions of the element to search for. Returns Type Description T The first item in the list if it meets the condition specified by predicate. Type Parameters Name Description T The type of element contained by the collection. Exceptions Type Condition InvalidOperationException If the array is empty. First<T>(Builder) Returns the first element in the collection. Declaration public static T First<T>(this ImmutableArray<T>.Builder builder) Parameters Type Name Description ImmutableArray<T>.Builder builder The builder to retrieve an item from. Returns Type Description T The first item in the list. Type Parameters Name Description T The type of items in the array. Exceptions Type Condition InvalidOperationException If the array is empty. LastOrDefault<T>(ImmutableArray<T>) Returns the last element of a sequence, or a default value if the sequence contains no elements. Declaration public static T? LastOrDefault<T>(this ImmutableArray<T> immutableArray) Parameters Type Name Description ImmutableArray<T> immutableArray The array to retrieve items from. Returns Type Description T The last element of a sequence, or a default value if the sequence contains no elements. Type Parameters Name Description T The type of element contained by the collection. LastOrDefault<T>(ImmutableArray<T>, Func<T, bool>) Returns the last element of a sequence that satisfies a condition or a default value if no such element is found. Declaration public static T? LastOrDefault<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate) Parameters Type Name Description ImmutableArray<T> immutableArray The array to retrieve an element from. Func<T, bool> predicate The delegate that defines the conditions of the element to search for. Returns Type Description T The last element of a sequence, or a default value if the sequence contains no elements. Type Parameters Name Description T The type of element contained by the collection. LastOrDefault<T>(Builder) Returns the last element in the collection, or the default value if the collection is empty. Declaration public static T? LastOrDefault<T>(this ImmutableArray<T>.Builder builder) Parameters Type Name Description ImmutableArray<T>.Builder builder The builder to retrieve an element from. Returns Type Description T The last element of a sequence, or a default value if the sequence contains no elements. Type Parameters Name Description T The type of item in the builder. Last<T>(ImmutableArray<T>) Returns the last element of the array. Declaration public static T Last<T>(this ImmutableArray<T> immutableArray) Parameters Type Name Description ImmutableArray<T> immutableArray The array to retrieve items from. Returns Type Description T The last element in the array. Type Parameters Name Description T The type of element contained by the array. Exceptions Type Condition InvalidOperationException Thrown if the collection is empty. Last<T>(ImmutableArray<T>, Func<T, bool>) Returns the last element of a sequence that satisfies a specified condition. Declaration public static T Last<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate) Parameters Type Name Description ImmutableArray<T> immutableArray The array to retrieve elements from. Func<T, bool> predicate The delegate that defines the conditions of the element to retrieve. Returns Type Description T The last element of the array that satisfies the predicate condition. Type Parameters Name Description T The type of element contained by the collection. Exceptions Type Condition InvalidOperationException Thrown if the collection is empty. Last<T>(Builder) Returns the last element in the collection. Declaration public static T Last<T>(this ImmutableArray<T>.Builder builder) Parameters Type Name Description ImmutableArray<T>.Builder builder The builder to retrieve elements from. Returns Type Description T The last element in the builder. Type Parameters Name Description T The type of item in the builder. Exceptions Type Condition InvalidOperationException Thrown if the collection is empty. SelectMany<TSource, TCollection, TResult>(ImmutableArray<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>) Projects each element of a sequence to an IEnumerable<T>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. Declaration public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this ImmutableArray<TSource> immutableArray, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector) Parameters Type Name Description ImmutableArray<TSource> immutableArray The immutable array. Func<TSource, IEnumerable<TCollection>> collectionSelector A transform function to apply to each element of the input sequence. Func<TSource, TCollection, TResult> resultSelector A transform function to apply to each element of the intermediate sequence. Returns Type Description IEnumerable<TResult> An IEnumerable<T> whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of immutableArray and then mapping each of those sequence elements and their corresponding source element to a result element. Type Parameters Name Description TSource The type of the elements of immutableArray. TCollection The type of the intermediate elements collected by collectionSelector. TResult The type of the elements of the resulting sequence. Select<T, TResult>(ImmutableArray<T>, Func<T, TResult>) Projects each element of a sequence into a new form. Declaration public static IEnumerable<TResult> Select<T, TResult>(this ImmutableArray<T> immutableArray, Func<T, TResult> selector) Parameters Type Name Description ImmutableArray<T> immutableArray The immutable array to select items from. Func<T, TResult> selector A transform function to apply to each element. Returns Type Description IEnumerable<TResult> An IEnumerable<T> whose elements are the result of invoking the transform function on each element of source. Type Parameters Name Description T The type of element contained by the collection. TResult The type of the result element. SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, IEnumerable<TDerived>, IEqualityComparer<TBase>?) Determines whether two sequences are equal according to an equality comparer. Declaration public static bool SequenceEqual<TDerived, TBase>(this ImmutableArray<TBase> immutableArray, IEnumerable<TDerived> items, IEqualityComparer<TBase>? comparer = null) where TDerived : TBase Parameters Type Name Description ImmutableArray<TBase> immutableArray The array to use for comparison. IEnumerable<TDerived> items The items to use for comparison. IEqualityComparer<TBase> comparer The comparer to use to check for equality. Returns Type Description bool true to indicate the sequences are equal; otherwise, false. Type Parameters Name Description TDerived The type of element in the compared array. TBase The type of element contained by the collection. SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, IEqualityComparer<TBase>?) Determines whether two sequences are equal according to an equality comparer. Declaration public static bool SequenceEqual<TDerived, TBase>(this ImmutableArray<TBase> immutableArray, ImmutableArray<TDerived> items, IEqualityComparer<TBase>? comparer = null) where TDerived : TBase Parameters Type Name Description ImmutableArray<TBase> immutableArray The array to use for comparison. ImmutableArray<TDerived> items The items to use for comparison. IEqualityComparer<TBase> comparer The comparer to use to check for equality. Returns Type Description bool true to indicate the sequences are equal; otherwise, false. Type Parameters Name Description TDerived The type of element in the compared array. TBase The type of element contained by the collection. SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, Func<TBase, TBase, bool>) Determines whether two sequences are equal according to an equality comparer. Declaration public static bool SequenceEqual<TDerived, TBase>(this ImmutableArray<TBase> immutableArray, ImmutableArray<TDerived> items, Func<TBase, TBase, bool> predicate) where TDerived : TBase Parameters Type Name Description ImmutableArray<TBase> immutableArray The array to use for comparison. ImmutableArray<TDerived> items The items to use for comparison. Func<TBase, TBase, bool> predicate The comparer to use to check for equality. Returns Type Description bool true to indicate the sequences are equal; otherwise, false. Type Parameters Name Description TDerived The type of element in the compared array. TBase The type of element contained by the collection. SingleOrDefault<T>(ImmutableArray<T>) Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence. Declaration public static T? SingleOrDefault<T>(this ImmutableArray<T> immutableArray) Parameters Type Name Description ImmutableArray<T> immutableArray The array. Returns Type Description T The element in the array, or the default value if the array is empty. Type Parameters Name Description T The type of element contained by the collection. Exceptions Type Condition InvalidOperationException source contains more than one element. SingleOrDefault<T>(ImmutableArray<T>, Func<T, bool>) Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition. Declaration public static T? SingleOrDefault<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate) Parameters Type Name Description ImmutableArray<T> immutableArray The array to get the element from. Func<T, bool> predicate The condition the element must satisfy. Returns Type Description T The element if it satisfies the specified condition; otherwise the default element. Type Parameters Name Description T The type of element contained by the collection. Exceptions Type Condition InvalidOperationException More than one element satisfies the condition in predicate. Single<T>(ImmutableArray<T>) Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence. Declaration public static T Single<T>(this ImmutableArray<T> immutableArray) Parameters Type Name Description ImmutableArray<T> immutableArray The array to retrieve the element from. Returns Type Description T The element in the sequence. Type Parameters Name Description T The type of element contained by the collection. Single<T>(ImmutableArray<T>, Func<T, bool>) Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists. Declaration public static T Single<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate) Parameters Type Name Description ImmutableArray<T> immutableArray The immutable array to return a single element from. Func<T, bool> predicate The function to test whether an element should be returned. Returns Type Description T Returns bool. Type Parameters Name Description T The type of element contained by the collection. ToArray<T>(ImmutableArray<T>) Copies the contents of this array to a mutable array. Declaration public static T[] ToArray<T>(this ImmutableArray<T> immutableArray) Parameters Type Name Description ImmutableArray<T> immutableArray The immutable array to copy into a mutable one. Returns Type Description T[] The newly instantiated array. Type Parameters Name Description T The type of element contained by the collection. ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>) Creates a dictionary based on the contents of this array. Declaration public static Dictionary<TKey, T> ToDictionary<TKey, T>(this ImmutableArray<T> immutableArray, Func<T, TKey> keySelector) where TKey : notnull Parameters Type Name Description ImmutableArray<T> immutableArray The array to create a dictionary from. Func<T, TKey> keySelector The key selector. Returns Type Description Dictionary<TKey, T> The newly initialized dictionary. Type Parameters Name Description TKey The type of the key. T The type of element contained by the collection. ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>, IEqualityComparer<TKey>?) Creates a dictionary based on the contents of this array. Declaration public static Dictionary<TKey, T> ToDictionary<TKey, T>(this ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, IEqualityComparer<TKey>? comparer) where TKey : notnull Parameters Type Name Description ImmutableArray<T> immutableArray The array to create a dictionary from. Func<T, TKey> keySelector The key selector. IEqualityComparer<TKey> comparer The comparer to initialize the dictionary with. Returns Type Description Dictionary<TKey, T> The newly initialized dictionary. Type Parameters Name Description TKey The type of the key. T The type of element contained by the collection. ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>) Creates a dictionary based on the contents of this array. Declaration public static Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(this ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector) where TKey : notnull Parameters Type Name Description ImmutableArray<T> immutableArray The array to create a dictionary from. Func<T, TKey> keySelector The key selector. Func<T, TElement> elementSelector The element selector. Returns Type Description Dictionary<TKey, TElement> The newly initialized dictionary. Type Parameters Name Description TKey The type of the key. TElement The type of the element. T The type of element contained by the collection. ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>?) Creates a dictionary based on the contents of this array. Declaration public static Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(this ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector, IEqualityComparer<TKey>? comparer) where TKey : notnull Parameters Type Name Description ImmutableArray<T> immutableArray The array to create a dictionary from. Func<T, TKey> keySelector The key selector. Func<T, TElement> elementSelector The element selector. IEqualityComparer<TKey> comparer The comparer to initialize the dictionary with. Returns Type Description Dictionary<TKey, TElement> The newly initialized dictionary. Type Parameters Name Description TKey The type of the key. TElement The type of the element. T The type of element contained by the collection. Where<T>(ImmutableArray<T>, Func<T, bool>) Filters a sequence of values based on a predicate. Declaration public static IEnumerable<T> Where<T>(this ImmutableArray<T> immutableArray, Func<T, bool> predicate) Parameters Type Name Description ImmutableArray<T> immutableArray The array to filter. Func<T, bool> predicate The condition to use for filtering the array content. Returns Type Description IEnumerable<T> Returns IEnumerable<T> that contains elements that meet the condition. Type Parameters Name Description T The type of element contained by the collection."
  },
  "api/System.Linq.html": {
    "href": "api/System.Linq.html",
    "title": "Namespace System.Linq | CodeFactory for Windows",
    "keywords": "Namespace System.Linq Classes ImmutableArrayExtensions LINQ extension method overrides that offer greater efficiency for ImmutableArray<T> than the standard LINQ methods NuGet package: System.Collections.Immutable (about immutable collections and how to install)"
  },
  "api/System.Memory-1.html": {
    "href": "api/System.Memory-1.html",
    "title": "Struct Memory<T> | CodeFactory for Windows",
    "keywords": "Struct Memory<T> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System Assembly: System.Memory.dll Syntax public readonly struct Memory<T> Type Parameters Name Description T Constructors Memory(T[]) Declaration public Memory(T[] array) Parameters Type Name Description T[] array Memory(T[], int, int) Declaration public Memory(T[] array, int start, int length) Parameters Type Name Description T[] array int start int length Properties Empty Declaration public static Memory<T> Empty { get; } Property Value Type Description Memory<T> IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description bool Length Declaration public int Length { get; } Property Value Type Description int Span Declaration public Span<T> Span { get; } Property Value Type Description Span<T> Methods CopyTo(Memory<T>) Declaration public void CopyTo(Memory<T> destination) Parameters Type Name Description Memory<T> destination Equals(Memory<T>) Declaration public bool Equals(Memory<T> other) Parameters Type Name Description Memory<T> other Returns Type Description bool Pin() Declaration public MemoryHandle Pin() Returns Type Description MemoryHandle Slice(int) Declaration public Memory<T> Slice(int start) Parameters Type Name Description int start Returns Type Description Memory<T> Slice(int, int) Declaration public Memory<T> Slice(int start, int length) Parameters Type Name Description int start int length Returns Type Description Memory<T> ToArray() Declaration public T[] ToArray() Returns Type Description T[] ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() TryCopyTo(Memory<T>) Declaration public bool TryCopyTo(Memory<T> destination) Parameters Type Name Description Memory<T> destination Returns Type Description bool Operators implicit operator Memory<T>(ArraySegment<T>) Declaration public static implicit operator Memory<T>(ArraySegment<T> segment) Parameters Type Name Description ArraySegment<T> segment Returns Type Description Memory<T> implicit operator ReadOnlyMemory<T>(Memory<T>) Declaration public static implicit operator ReadOnlyMemory<T>(Memory<T> memory) Parameters Type Name Description Memory<T> memory Returns Type Description ReadOnlyMemory<T> implicit operator Memory<T>(T[]) Declaration public static implicit operator Memory<T>(T[] array) Parameters Type Name Description T[] array Returns Type Description Memory<T>"
  },
  "api/System.MemoryExtensions.html": {
    "href": "api/System.MemoryExtensions.html",
    "title": "Class MemoryExtensions | CodeFactory for Windows",
    "keywords": "Class MemoryExtensions Inheritance object MemoryExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System Assembly: System.Memory.dll Syntax public static class MemoryExtensions Methods AsMemory(string) Declaration public static ReadOnlyMemory<char> AsMemory(this string text) Parameters Type Name Description string text Returns Type Description ReadOnlyMemory<char> AsMemory(string, int) Declaration public static ReadOnlyMemory<char> AsMemory(this string text, int start) Parameters Type Name Description string text int start Returns Type Description ReadOnlyMemory<char> AsMemory(string, int, int) Declaration public static ReadOnlyMemory<char> AsMemory(this string text, int start, int length) Parameters Type Name Description string text int start int length Returns Type Description ReadOnlyMemory<char> AsMemory<T>(ArraySegment<T>) Declaration public static Memory<T> AsMemory<T>(this ArraySegment<T> segment) Parameters Type Name Description ArraySegment<T> segment Returns Type Description Memory<T> Type Parameters Name Description T AsMemory<T>(ArraySegment<T>, int) Declaration public static Memory<T> AsMemory<T>(this ArraySegment<T> segment, int start) Parameters Type Name Description ArraySegment<T> segment int start Returns Type Description Memory<T> Type Parameters Name Description T AsMemory<T>(ArraySegment<T>, int, int) Declaration public static Memory<T> AsMemory<T>(this ArraySegment<T> segment, int start, int length) Parameters Type Name Description ArraySegment<T> segment int start int length Returns Type Description Memory<T> Type Parameters Name Description T AsMemory<T>(T[]) Declaration public static Memory<T> AsMemory<T>(this T[] array) Parameters Type Name Description T[] array Returns Type Description Memory<T> Type Parameters Name Description T AsMemory<T>(T[], int) Declaration public static Memory<T> AsMemory<T>(this T[] array, int start) Parameters Type Name Description T[] array int start Returns Type Description Memory<T> Type Parameters Name Description T AsMemory<T>(T[], int, int) Declaration public static Memory<T> AsMemory<T>(this T[] array, int start, int length) Parameters Type Name Description T[] array int start int length Returns Type Description Memory<T> Type Parameters Name Description T AsSpan(string) Declaration public static ReadOnlySpan<char> AsSpan(this string text) Parameters Type Name Description string text Returns Type Description ReadOnlySpan<char> AsSpan(string, int) Declaration public static ReadOnlySpan<char> AsSpan(this string text, int start) Parameters Type Name Description string text int start Returns Type Description ReadOnlySpan<char> AsSpan(string, int, int) Declaration public static ReadOnlySpan<char> AsSpan(this string text, int start, int length) Parameters Type Name Description string text int start int length Returns Type Description ReadOnlySpan<char> AsSpan<T>(ArraySegment<T>) Declaration public static Span<T> AsSpan<T>(this ArraySegment<T> segment) Parameters Type Name Description ArraySegment<T> segment Returns Type Description Span<T> Type Parameters Name Description T AsSpan<T>(ArraySegment<T>, int) Declaration public static Span<T> AsSpan<T>(this ArraySegment<T> segment, int start) Parameters Type Name Description ArraySegment<T> segment int start Returns Type Description Span<T> Type Parameters Name Description T AsSpan<T>(ArraySegment<T>, int, int) Declaration public static Span<T> AsSpan<T>(this ArraySegment<T> segment, int start, int length) Parameters Type Name Description ArraySegment<T> segment int start int length Returns Type Description Span<T> Type Parameters Name Description T AsSpan<T>(T[]) Declaration public static Span<T> AsSpan<T>(this T[] array) Parameters Type Name Description T[] array Returns Type Description Span<T> Type Parameters Name Description T AsSpan<T>(T[], int) Declaration public static Span<T> AsSpan<T>(this T[] array, int start) Parameters Type Name Description T[] array int start Returns Type Description Span<T> Type Parameters Name Description T AsSpan<T>(T[], int, int) Declaration public static Span<T> AsSpan<T>(this T[] array, int start, int length) Parameters Type Name Description T[] array int start int length Returns Type Description Span<T> Type Parameters Name Description T BinarySearch<T>(ReadOnlySpan<T>, IComparable<T>) Declaration public static int BinarySearch<T>(this ReadOnlySpan<T> span, IComparable<T> comparable) Parameters Type Name Description ReadOnlySpan<T> span IComparable<T> comparable Returns Type Description int Type Parameters Name Description T BinarySearch<T>(Span<T>, IComparable<T>) Declaration public static int BinarySearch<T>(this Span<T> span, IComparable<T> comparable) Parameters Type Name Description Span<T> span IComparable<T> comparable Returns Type Description int Type Parameters Name Description T BinarySearch<T, TComparer>(ReadOnlySpan<T>, T, TComparer) Declaration public static int BinarySearch<T, TComparer>(this ReadOnlySpan<T> span, T value, TComparer comparer) where TComparer : IComparer<T> Parameters Type Name Description ReadOnlySpan<T> span T value TComparer comparer Returns Type Description int Type Parameters Name Description T TComparer BinarySearch<T, TComparable>(ReadOnlySpan<T>, TComparable) Declaration public static int BinarySearch<T, TComparable>(this ReadOnlySpan<T> span, TComparable comparable) where TComparable : IComparable<T> Parameters Type Name Description ReadOnlySpan<T> span TComparable comparable Returns Type Description int Type Parameters Name Description T TComparable BinarySearch<T, TComparer>(Span<T>, T, TComparer) Declaration public static int BinarySearch<T, TComparer>(this Span<T> span, T value, TComparer comparer) where TComparer : IComparer<T> Parameters Type Name Description Span<T> span T value TComparer comparer Returns Type Description int Type Parameters Name Description T TComparer BinarySearch<T, TComparable>(Span<T>, TComparable) Declaration public static int BinarySearch<T, TComparable>(this Span<T> span, TComparable comparable) where TComparable : IComparable<T> Parameters Type Name Description Span<T> span TComparable comparable Returns Type Description int Type Parameters Name Description T TComparable CompareTo(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison) Declaration public static int CompareTo(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType) Parameters Type Name Description ReadOnlySpan<char> span ReadOnlySpan<char> other StringComparison comparisonType Returns Type Description int Contains(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison) Declaration public static bool Contains(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) Parameters Type Name Description ReadOnlySpan<char> span ReadOnlySpan<char> value StringComparison comparisonType Returns Type Description bool CopyTo<T>(T[], Memory<T>) Declaration public static void CopyTo<T>(this T[] source, Memory<T> destination) Parameters Type Name Description T[] source Memory<T> destination Type Parameters Name Description T CopyTo<T>(T[], Span<T>) Declaration public static void CopyTo<T>(this T[] source, Span<T> destination) Parameters Type Name Description T[] source Span<T> destination Type Parameters Name Description T EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison) Declaration public static bool EndsWith(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) Parameters Type Name Description ReadOnlySpan<char> span ReadOnlySpan<char> value StringComparison comparisonType Returns Type Description bool EndsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static bool EndsWith<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span ReadOnlySpan<T> value Returns Type Description bool Type Parameters Name Description T EndsWith<T>(Span<T>, ReadOnlySpan<T>) Declaration public static bool EndsWith<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> Parameters Type Name Description Span<T> span ReadOnlySpan<T> value Returns Type Description bool Type Parameters Name Description T Equals(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison) Declaration public static bool Equals(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType) Parameters Type Name Description ReadOnlySpan<char> span ReadOnlySpan<char> other StringComparison comparisonType Returns Type Description bool IndexOf(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison) Declaration public static int IndexOf(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) Parameters Type Name Description ReadOnlySpan<char> span ReadOnlySpan<char> value StringComparison comparisonType Returns Type Description int IndexOfAny<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static int IndexOfAny<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> values) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span ReadOnlySpan<T> values Returns Type Description int Type Parameters Name Description T IndexOfAny<T>(ReadOnlySpan<T>, T, T) Declaration public static int IndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span T value0 T value1 Returns Type Description int Type Parameters Name Description T IndexOfAny<T>(ReadOnlySpan<T>, T, T, T) Declaration public static int IndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1, T value2) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span T value0 T value1 T value2 Returns Type Description int Type Parameters Name Description T IndexOfAny<T>(Span<T>, ReadOnlySpan<T>) Declaration public static int IndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values) where T : IEquatable<T> Parameters Type Name Description Span<T> span ReadOnlySpan<T> values Returns Type Description int Type Parameters Name Description T IndexOfAny<T>(Span<T>, T, T) Declaration public static int IndexOfAny<T>(this Span<T> span, T value0, T value1) where T : IEquatable<T> Parameters Type Name Description Span<T> span T value0 T value1 Returns Type Description int Type Parameters Name Description T IndexOfAny<T>(Span<T>, T, T, T) Declaration public static int IndexOfAny<T>(this Span<T> span, T value0, T value1, T value2) where T : IEquatable<T> Parameters Type Name Description Span<T> span T value0 T value1 T value2 Returns Type Description int Type Parameters Name Description T IndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static int IndexOf<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span ReadOnlySpan<T> value Returns Type Description int Type Parameters Name Description T IndexOf<T>(ReadOnlySpan<T>, T) Declaration public static int IndexOf<T>(this ReadOnlySpan<T> span, T value) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span T value Returns Type Description int Type Parameters Name Description T IndexOf<T>(Span<T>, ReadOnlySpan<T>) Declaration public static int IndexOf<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> Parameters Type Name Description Span<T> span ReadOnlySpan<T> value Returns Type Description int Type Parameters Name Description T IndexOf<T>(Span<T>, T) Declaration public static int IndexOf<T>(this Span<T> span, T value) where T : IEquatable<T> Parameters Type Name Description Span<T> span T value Returns Type Description int Type Parameters Name Description T IsWhiteSpace(ReadOnlySpan<char>) Declaration public static bool IsWhiteSpace(this ReadOnlySpan<char> span) Parameters Type Name Description ReadOnlySpan<char> span Returns Type Description bool LastIndexOfAny<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> values) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span ReadOnlySpan<T> values Returns Type Description int Type Parameters Name Description T LastIndexOfAny<T>(ReadOnlySpan<T>, T, T) Declaration public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span T value0 T value1 Returns Type Description int Type Parameters Name Description T LastIndexOfAny<T>(ReadOnlySpan<T>, T, T, T) Declaration public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1, T value2) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span T value0 T value1 T value2 Returns Type Description int Type Parameters Name Description T LastIndexOfAny<T>(Span<T>, ReadOnlySpan<T>) Declaration public static int LastIndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values) where T : IEquatable<T> Parameters Type Name Description Span<T> span ReadOnlySpan<T> values Returns Type Description int Type Parameters Name Description T LastIndexOfAny<T>(Span<T>, T, T) Declaration public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1) where T : IEquatable<T> Parameters Type Name Description Span<T> span T value0 T value1 Returns Type Description int Type Parameters Name Description T LastIndexOfAny<T>(Span<T>, T, T, T) Declaration public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1, T value2) where T : IEquatable<T> Parameters Type Name Description Span<T> span T value0 T value1 T value2 Returns Type Description int Type Parameters Name Description T LastIndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static int LastIndexOf<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span ReadOnlySpan<T> value Returns Type Description int Type Parameters Name Description T LastIndexOf<T>(ReadOnlySpan<T>, T) Declaration public static int LastIndexOf<T>(this ReadOnlySpan<T> span, T value) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span T value Returns Type Description int Type Parameters Name Description T LastIndexOf<T>(Span<T>, ReadOnlySpan<T>) Declaration public static int LastIndexOf<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> Parameters Type Name Description Span<T> span ReadOnlySpan<T> value Returns Type Description int Type Parameters Name Description T LastIndexOf<T>(Span<T>, T) Declaration public static int LastIndexOf<T>(this Span<T> span, T value) where T : IEquatable<T> Parameters Type Name Description Span<T> span T value Returns Type Description int Type Parameters Name Description T Overlaps<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static bool Overlaps<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other) Parameters Type Name Description ReadOnlySpan<T> span ReadOnlySpan<T> other Returns Type Description bool Type Parameters Name Description T Overlaps<T>(ReadOnlySpan<T>, ReadOnlySpan<T>, out int) Declaration public static bool Overlaps<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other, out int elementOffset) Parameters Type Name Description ReadOnlySpan<T> span ReadOnlySpan<T> other int elementOffset Returns Type Description bool Type Parameters Name Description T Overlaps<T>(Span<T>, ReadOnlySpan<T>) Declaration public static bool Overlaps<T>(this Span<T> span, ReadOnlySpan<T> other) Parameters Type Name Description Span<T> span ReadOnlySpan<T> other Returns Type Description bool Type Parameters Name Description T Overlaps<T>(Span<T>, ReadOnlySpan<T>, out int) Declaration public static bool Overlaps<T>(this Span<T> span, ReadOnlySpan<T> other, out int elementOffset) Parameters Type Name Description Span<T> span ReadOnlySpan<T> other int elementOffset Returns Type Description bool Type Parameters Name Description T Reverse<T>(Span<T>) Declaration public static void Reverse<T>(this Span<T> span) Parameters Type Name Description Span<T> span Type Parameters Name Description T SequenceCompareTo<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static int SequenceCompareTo<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other) where T : IComparable<T> Parameters Type Name Description ReadOnlySpan<T> span ReadOnlySpan<T> other Returns Type Description int Type Parameters Name Description T SequenceCompareTo<T>(Span<T>, ReadOnlySpan<T>) Declaration public static int SequenceCompareTo<T>(this Span<T> span, ReadOnlySpan<T> other) where T : IComparable<T> Parameters Type Name Description Span<T> span ReadOnlySpan<T> other Returns Type Description int Type Parameters Name Description T SequenceEqual<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static bool SequenceEqual<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span ReadOnlySpan<T> other Returns Type Description bool Type Parameters Name Description T SequenceEqual<T>(Span<T>, ReadOnlySpan<T>) Declaration public static bool SequenceEqual<T>(this Span<T> span, ReadOnlySpan<T> other) where T : IEquatable<T> Parameters Type Name Description Span<T> span ReadOnlySpan<T> other Returns Type Description bool Type Parameters Name Description T StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison) Declaration public static bool StartsWith(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) Parameters Type Name Description ReadOnlySpan<char> span ReadOnlySpan<char> value StringComparison comparisonType Returns Type Description bool StartsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static bool StartsWith<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan<T> span ReadOnlySpan<T> value Returns Type Description bool Type Parameters Name Description T StartsWith<T>(Span<T>, ReadOnlySpan<T>) Declaration public static bool StartsWith<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> Parameters Type Name Description Span<T> span ReadOnlySpan<T> value Returns Type Description bool Type Parameters Name Description T ToLower(ReadOnlySpan<char>, Span<char>, CultureInfo) Declaration public static int ToLower(this ReadOnlySpan<char> source, Span<char> destination, CultureInfo culture) Parameters Type Name Description ReadOnlySpan<char> source Span<char> destination CultureInfo culture Returns Type Description int ToLowerInvariant(ReadOnlySpan<char>, Span<char>) Declaration public static int ToLowerInvariant(this ReadOnlySpan<char> source, Span<char> destination) Parameters Type Name Description ReadOnlySpan<char> source Span<char> destination Returns Type Description int ToUpper(ReadOnlySpan<char>, Span<char>, CultureInfo) Declaration public static int ToUpper(this ReadOnlySpan<char> source, Span<char> destination, CultureInfo culture) Parameters Type Name Description ReadOnlySpan<char> source Span<char> destination CultureInfo culture Returns Type Description int ToUpperInvariant(ReadOnlySpan<char>, Span<char>) Declaration public static int ToUpperInvariant(this ReadOnlySpan<char> source, Span<char> destination) Parameters Type Name Description ReadOnlySpan<char> source Span<char> destination Returns Type Description int Trim(ReadOnlySpan<char>) Declaration public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span) Parameters Type Name Description ReadOnlySpan<char> span Returns Type Description ReadOnlySpan<char> Trim(ReadOnlySpan<char>, char) Declaration public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span, char trimChar) Parameters Type Name Description ReadOnlySpan<char> span char trimChar Returns Type Description ReadOnlySpan<char> Trim(ReadOnlySpan<char>, ReadOnlySpan<char>) Declaration public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars) Parameters Type Name Description ReadOnlySpan<char> span ReadOnlySpan<char> trimChars Returns Type Description ReadOnlySpan<char> TrimEnd(ReadOnlySpan<char>) Declaration public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span) Parameters Type Name Description ReadOnlySpan<char> span Returns Type Description ReadOnlySpan<char> TrimEnd(ReadOnlySpan<char>, char) Declaration public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span, char trimChar) Parameters Type Name Description ReadOnlySpan<char> span char trimChar Returns Type Description ReadOnlySpan<char> TrimEnd(ReadOnlySpan<char>, ReadOnlySpan<char>) Declaration public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars) Parameters Type Name Description ReadOnlySpan<char> span ReadOnlySpan<char> trimChars Returns Type Description ReadOnlySpan<char> TrimStart(ReadOnlySpan<char>) Declaration public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span) Parameters Type Name Description ReadOnlySpan<char> span Returns Type Description ReadOnlySpan<char> TrimStart(ReadOnlySpan<char>, char) Declaration public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span, char trimChar) Parameters Type Name Description ReadOnlySpan<char> span char trimChar Returns Type Description ReadOnlySpan<char> TrimStart(ReadOnlySpan<char>, ReadOnlySpan<char>) Declaration public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars) Parameters Type Name Description ReadOnlySpan<char> span ReadOnlySpan<char> trimChars Returns Type Description ReadOnlySpan<char>"
  },
  "api/System.Numerics.Vector-1.html": {
    "href": "api/System.Numerics.Vector-1.html",
    "title": "Struct Vector<T> | CodeFactory for Windows",
    "keywords": "Struct Vector<T> Represents a single vector of a specified numeric type that is suitable for low-level optimization of parallel algorithms. Implements IEquatable<Vector<T>> IFormattable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Numerics Assembly: System.Numerics.Vectors.dll Syntax public struct Vector<T> : IEquatable<Vector<T>>, IFormattable where T : struct Type Parameters Name Description T The vector type. T can be any primitive numeric type. Constructors Vector(T) Creates a vector whose components are of a specified type. Declaration public Vector(T value) Parameters Type Name Description T value The numeric type that defines the type of the components in the vector. Vector(T[]) Creates a vector from a specified array. Declaration public Vector(T[] values) Parameters Type Name Description T[] values A numeric array. Exceptions Type Condition ArgumentNullException values is null. Vector(T[], int) Creates a vector from a specified array starting at a specified index position. Declaration public Vector(T[] values, int index) Parameters Type Name Description T[] values A numeric array. int index The starting index position from which to create the vector. Exceptions Type Condition ArgumentNullException values is null. IndexOutOfRangeException index is less than zero. -or- The length of values minus index is less than . Properties Count Returns the number of elements stored in the vector. Declaration public static int Count { get; } Property Value Type Description int The number of elements stored in the vector. Exceptions Type Condition NotSupportedException Access to the property getter via reflection is not supported. this[int] Gets the element at a specified index. Declaration public T this[int index] { get; } Parameters Type Name Description int index The index of the element to return. Property Value Type Description T The element at index index. Exceptions Type Condition IndexOutOfRangeException index is less than zero. -or- index is greater than or equal to . One Returns a vector containing all ones. Declaration public static Vector<T> One { get; } Property Value Type Description Vector<T> A vector containing all ones. Zero Returns a vector containing all zeroes. Declaration public static Vector<T> Zero { get; } Property Value Type Description Vector<T> A vector containing all zeroes. Methods CopyTo(T[]) Copies the vector instance to a specified destination array. Declaration public void CopyTo(T[] destination) Parameters Type Name Description T[] destination The array to receive a copy of the vector values. Exceptions Type Condition ArgumentNullException destination is null. ArgumentException The number of elements in the current vector is greater than the number of elements available in the destination array. CopyTo(T[], int) Copies the vector instance to a specified destination array starting at a specified index position. Declaration public void CopyTo(T[] destination, int startIndex) Parameters Type Name Description T[] destination The array to receive a copy of the vector values. int startIndex The starting index in destination at which to begin the copy operation. Exceptions Type Condition ArgumentNullException destination is null. ArgumentException The number of elements in the current instance is greater than the number of elements available from startIndex to the end of the destination array. ArgumentOutOfRangeException index is less than zero or greater than the last index in destination. Equals(Vector<T>) Returns a value that indicates whether this instance is equal to a specified vector. Declaration public bool Equals(Vector<T> other) Parameters Type Name Description Vector<T> other The vector to compare with this instance. Returns Type Description bool true if the current instance and other are equal; otherwise, false. Equals(object) Returns a value that indicates whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the current instance and obj are equal; otherwise, false. The method returns false if obj is null, or if obj is a vector of a different type than the current instance. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int The hash code. Overrides ValueType.GetHashCode() ToString() Returns the string representation of this vector using default formatting. Declaration public override string ToString() Returns Type Description string The string representation of this vector. Overrides ValueType.ToString() ToString(string) Returns the string representation of this vector using the specified format string to format individual elements. Declaration public string ToString(string format) Parameters Type Name Description string format A or that defines the format of individual elements. Returns Type Description string The string representation of the current instance. ToString(string, IFormatProvider) Returns the string representation of this vector using the specified format string to format individual elements and the specified format provider to define culture-specific formatting. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description string format A or that defines the format of individual elements. IFormatProvider formatProvider A format provider that supplies culture-specific formatting information. Returns Type Description string The string representation of the current instance. Operators operator +(Vector<T>, Vector<T>) Adds two vectors together. Declaration public static Vector<T> operator +(Vector<T> left, Vector<T> right) Parameters Type Name Description Vector<T> left The first vector to add. Vector<T> right The second vector to add. Returns Type Description Vector<T> The summed vector. operator &(Vector<T>, Vector<T>) Returns a new vector by performing a bitwise And operation on each of the elements in two vectors. Declaration public static Vector<T> operator &(Vector<T> left, Vector<T> right) Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The vector that results from the bitwise And of left and right. operator |(Vector<T>, Vector<T>) Returns a new vector by performing a bitwise Or operation on each of the elements in two vectors. Declaration public static Vector<T> operator |(Vector<T> left, Vector<T> right) Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The vector that results from the bitwise Or of the elements in left and right. operator /(Vector<T>, Vector<T>) Divides the first vector by the second. Declaration public static Vector<T> operator /(Vector<T> left, Vector<T> right) Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The vector that results from dividing left by right. operator ==(Vector<T>, Vector<T>) Returns a value that indicates whether each pair of elements in two specified vectors are equal. Declaration public static bool operator ==(Vector<T> left, Vector<T> right) Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if left and right are equal; otherwise, false. operator ^(Vector<T>, Vector<T>) Returns a new vector by performing a bitwise XOr operation on each of the elements in two vectors. Declaration public static Vector<T> operator ^(Vector<T> left, Vector<T> right) Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The vector that results from the bitwise XOr of the elements in left and right. explicit operator Vector<byte>(Vector<T>) Declaration public static explicit operator Vector<byte>(Vector<T> value) Parameters Type Name Description Vector<T> value Returns Type Description Vector<byte> explicit operator Vector<double>(Vector<T>) Declaration public static explicit operator Vector<double>(Vector<T> value) Parameters Type Name Description Vector<T> value Returns Type Description Vector<double> explicit operator Vector<short>(Vector<T>) Declaration public static explicit operator Vector<short>(Vector<T> value) Parameters Type Name Description Vector<T> value Returns Type Description Vector<short> explicit operator Vector<int>(Vector<T>) Declaration public static explicit operator Vector<int>(Vector<T> value) Parameters Type Name Description Vector<T> value Returns Type Description Vector<int> explicit operator Vector<long>(Vector<T>) Declaration public static explicit operator Vector<long>(Vector<T> value) Parameters Type Name Description Vector<T> value Returns Type Description Vector<long> explicit operator Vector<sbyte>(Vector<T>) Declaration [CLSCompliant(false)] public static explicit operator Vector<sbyte>(Vector<T> value) Parameters Type Name Description Vector<T> value Returns Type Description Vector<sbyte> explicit operator Vector<float>(Vector<T>) Declaration public static explicit operator Vector<float>(Vector<T> value) Parameters Type Name Description Vector<T> value Returns Type Description Vector<float> explicit operator Vector<ushort>(Vector<T>) Declaration [CLSCompliant(false)] public static explicit operator Vector<ushort>(Vector<T> value) Parameters Type Name Description Vector<T> value Returns Type Description Vector<ushort> explicit operator Vector<uint>(Vector<T>) Declaration [CLSCompliant(false)] public static explicit operator Vector<uint>(Vector<T> value) Parameters Type Name Description Vector<T> value Returns Type Description Vector<uint> explicit operator Vector<ulong>(Vector<T>) Declaration [CLSCompliant(false)] public static explicit operator Vector<ulong>(Vector<T> value) Parameters Type Name Description Vector<T> value Returns Type Description Vector<ulong> operator !=(Vector<T>, Vector<T>) Returns a value that indicates whether any single pair of elements in the specified vectors is equal. Declaration public static bool operator !=(Vector<T> left, Vector<T> right) Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if any element pairs in left and right are equal. false if no element pairs are equal. operator *(Vector<T>, Vector<T>) Multiplies two vectors together. Declaration public static Vector<T> operator *(Vector<T> left, Vector<T> right) Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The product vector. operator *(Vector<T>, T) Multiplies a vector by a specified scalar value. Declaration public static Vector<T> operator *(Vector<T> value, T factor) Parameters Type Name Description Vector<T> value The source vector. T factor A scalar value. Returns Type Description Vector<T> The scaled vector. operator *(T, Vector<T>) Multiplies a vector by the given scalar. Declaration public static Vector<T> operator *(T factor, Vector<T> value) Parameters Type Name Description T factor The scalar value. Vector<T> value The source vector. Returns Type Description Vector<T> The scaled vector. operator ~(Vector<T>) Returns a new vector whose elements are obtained by taking the one&#39;s complement of a specified vector&#39;s elements. Declaration public static Vector<T> operator ~(Vector<T> value) Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<T> The one&#39;s complement vector. operator -(Vector<T>, Vector<T>) Subtracts the second vector from the first. Declaration public static Vector<T> operator -(Vector<T> left, Vector<T> right) Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The vector that results from subtracting right from left. operator -(Vector<T>) Negates a given vector. Declaration public static Vector<T> operator -(Vector<T> value) Parameters Type Name Description Vector<T> value The vector to negate. Returns Type Description Vector<T> The negated vector. Implements IEquatable<T> IFormattable"
  },
  "api/System.Numerics.Vector.html": {
    "href": "api/System.Numerics.Vector.html",
    "title": "Class Vector | CodeFactory for Windows",
    "keywords": "Class Vector Provides a collection of static convenience methods for creating, manipulating, combining, and converting generic vectors. Inheritance object Vector Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Numerics Assembly: System.Numerics.Vectors.dll Syntax public static class Vector Properties IsHardwareAccelerated Gets a value that indicates whether vector operations are subject to hardware acceleration through JIT intrinsic support. Declaration public static bool IsHardwareAccelerated { get; } Property Value Type Description bool true if vector operations are subject to hardware acceleration; otherwise, false. Methods Abs<T>(Vector<T>) Returns a new vector whose elements are the absolute values of the given vector&#39;s elements. Declaration public static Vector<T> Abs<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<T> The absolute value vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Add<T>(Vector<T>, Vector<T>) Returns a new vector whose values are the sum of each pair of elements from two given vectors. Declaration public static Vector<T> Add<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The summed vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AndNot<T>(Vector<T>, Vector<T>) Returns a new vector by performing a bitwise And Not operation on each pair of corresponding elements in two vectors. Declaration public static Vector<T> AndNot<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The resulting vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AsVectorByte<T>(Vector<T>) Reinterprets the bits of a specified vector into those of a vector of unsigned bytes. Declaration public static Vector<byte> AsVectorByte<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<byte> The reinterpreted vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AsVectorDouble<T>(Vector<T>) Reinterprets the bits of a specified vector into those of a double-precision floating-point vector. Declaration public static Vector<double> AsVectorDouble<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<double> The reinterpreted vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AsVectorInt16<T>(Vector<T>) Reinterprets the bits of a specified vector into those of a vector of 16-bit integers. Declaration public static Vector<short> AsVectorInt16<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<short> The reinterpreted vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AsVectorInt32<T>(Vector<T>) Reinterprets the bits of a specified vector into those of a vector of integers. Declaration public static Vector<int> AsVectorInt32<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<int> The reinterpreted vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AsVectorInt64<T>(Vector<T>) Reinterprets the bits of a specified vector into those of a vector of long integers. Declaration public static Vector<long> AsVectorInt64<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<long> The reinterpreted vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AsVectorSByte<T>(Vector<T>) Reinterprets the bits of a specified vector into those of a vector of signed bytes. Declaration [CLSCompliant(false)] public static Vector<sbyte> AsVectorSByte<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<sbyte> The reinterpreted vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AsVectorSingle<T>(Vector<T>) Reinterprets the bits of a specified vector into those of a single-precision floating-point vector. Declaration public static Vector<float> AsVectorSingle<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<float> The reinterpreted vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AsVectorUInt16<T>(Vector<T>) Reinterprets the bits of a specified vector into those of a vector of unsigned 16-bit integers. Declaration [CLSCompliant(false)] public static Vector<ushort> AsVectorUInt16<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<ushort> The reinterpreted vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AsVectorUInt32<T>(Vector<T>) Reinterprets the bits of a specified vector into those of a vector of unsigned integers. Declaration [CLSCompliant(false)] public static Vector<uint> AsVectorUInt32<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<uint> The reinterpreted vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. AsVectorUInt64<T>(Vector<T>) Reinterprets the bits of a specified vector into those of a vector of unsigned long integers. Declaration [CLSCompliant(false)] public static Vector<ulong> AsVectorUInt64<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<ulong> The reinterpreted vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. BitwiseAnd<T>(Vector<T>, Vector<T>) Returns a new vector by performing a bitwise And operation on each pair of elements in two vectors. Declaration public static Vector<T> BitwiseAnd<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The resulting vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. BitwiseOr<T>(Vector<T>, Vector<T>) Returns a new vector by performing a bitwise Or operation on each pair of elements in two vectors. Declaration public static Vector<T> BitwiseOr<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The resulting vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. ConditionalSelect(Vector<int>, Vector<float>, Vector<float>) Creates a new single-precision vector with elements selected between two specified single-precision source vectors based on an integral mask vector. Declaration public static Vector<float> ConditionalSelect(Vector<int> condition, Vector<float> left, Vector<float> right) Parameters Type Name Description Vector<int> condition The integral mask vector used to drive selection. Vector<float> left The first source vector. Vector<float> right The second source vector. Returns Type Description Vector<float> The new vector with elements selected based on the mask. ConditionalSelect(Vector<long>, Vector<double>, Vector<double>) Creates a new double-precision vector with elements selected between two specified double-precision source vectors based on an integral mask vector. Declaration public static Vector<double> ConditionalSelect(Vector<long> condition, Vector<double> left, Vector<double> right) Parameters Type Name Description Vector<long> condition The integral mask vector used to drive selection. Vector<double> left The first source vector. Vector<double> right The second source vector. Returns Type Description Vector<double> The new vector with elements selected based on the mask. ConditionalSelect<T>(Vector<T>, Vector<T>, Vector<T>) Creates a new vector of a specified type with elements selected between two specified source vectors of the same type based on an integral mask vector. Declaration public static Vector<T> ConditionalSelect<T>(Vector<T> condition, Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> condition The integral mask vector used to drive selection. Vector<T> left The first source vector. Vector<T> right The second source vector. Returns Type Description Vector<T> The new vector with elements selected based on the mask. Type Parameters Name Description T The vector type. T can be any primitive numeric type. ConvertToDouble(Vector<long>) Declaration public static Vector<double> ConvertToDouble(Vector<long> value) Parameters Type Name Description Vector<long> value Returns Type Description Vector<double> ConvertToDouble(Vector<ulong>) Declaration [CLSCompliant(false)] public static Vector<double> ConvertToDouble(Vector<ulong> value) Parameters Type Name Description Vector<ulong> value Returns Type Description Vector<double> ConvertToInt32(Vector<float>) Declaration public static Vector<int> ConvertToInt32(Vector<float> value) Parameters Type Name Description Vector<float> value Returns Type Description Vector<int> ConvertToInt64(Vector<double>) Declaration public static Vector<long> ConvertToInt64(Vector<double> value) Parameters Type Name Description Vector<double> value Returns Type Description Vector<long> ConvertToSingle(Vector<int>) Declaration public static Vector<float> ConvertToSingle(Vector<int> value) Parameters Type Name Description Vector<int> value Returns Type Description Vector<float> ConvertToSingle(Vector<uint>) Declaration [CLSCompliant(false)] public static Vector<float> ConvertToSingle(Vector<uint> value) Parameters Type Name Description Vector<uint> value Returns Type Description Vector<float> ConvertToUInt32(Vector<float>) Declaration [CLSCompliant(false)] public static Vector<uint> ConvertToUInt32(Vector<float> value) Parameters Type Name Description Vector<float> value Returns Type Description Vector<uint> ConvertToUInt64(Vector<double>) Declaration [CLSCompliant(false)] public static Vector<ulong> ConvertToUInt64(Vector<double> value) Parameters Type Name Description Vector<double> value Returns Type Description Vector<ulong> Divide<T>(Vector<T>, Vector<T>) Returns a new vector whose values are the result of dividing the first vector&#39;s elements by the corresponding elements in the second vector. Declaration public static Vector<T> Divide<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The divided vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Dot<T>(Vector<T>, Vector<T>) Returns the dot product of two vectors. Declaration public static T Dot<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description T The dot product. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Equals(Vector<double>, Vector<double>) Returns a new integral vector whose elements signal whether the elements in two specified double-precision vectors are equal. Declaration public static Vector<long> Equals(Vector<double> left, Vector<double> right) Parameters Type Name Description Vector<double> left The first vector to compare. Vector<double> right The second vector to compare. Returns Type Description Vector<long> The resulting integral vector. Equals(Vector<int>, Vector<int>) Returns a new integral vector whose elements signal whether the elements in two specified integral vectors are equal. Declaration public static Vector<int> Equals(Vector<int> left, Vector<int> right) Parameters Type Name Description Vector<int> left The first vector to compare. Vector<int> right The second vector to compare. Returns Type Description Vector<int> The resulting integral vector. Equals(Vector<long>, Vector<long>) Returns a new vector whose elements signal whether the elements in two specified long integer vectors are equal. Declaration public static Vector<long> Equals(Vector<long> left, Vector<long> right) Parameters Type Name Description Vector<long> left The first vector to compare. Vector<long> right The second vector to compare. Returns Type Description Vector<long> The resulting long integer vector. Equals(Vector<float>, Vector<float>) Returns a new integral vector whose elements signal whether the elements in two specified single-precision vectors are equal. Declaration public static Vector<int> Equals(Vector<float> left, Vector<float> right) Parameters Type Name Description Vector<float> left The first vector to compare. Vector<float> right The second vector to compare. Returns Type Description Vector<int> The resulting integral vector. EqualsAll<T>(Vector<T>, Vector<T>) Returns a value that indicates whether each pair of elements in the given vectors is equal. Declaration public static bool EqualsAll<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if all elements in left and right are equal; otherwise, false. Type Parameters Name Description T The vector type. T can be any primitive numeric type. EqualsAny<T>(Vector<T>, Vector<T>) Returns a value that indicates whether any single pair of elements in the given vectors is equal. Declaration public static bool EqualsAny<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if any element pair in left and right is equal; otherwise, false. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Equals<T>(Vector<T>, Vector<T>) Returns a new vector of a specified type whose elements signal whether the elements in two specified vectors of the same type are equal. Declaration public static Vector<T> Equals<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description Vector<T> The resulting vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. GreaterThan(Vector<double>, Vector<double>) Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are greater than their corresponding elements in a second double-precision floating-point vector. Declaration public static Vector<long> GreaterThan(Vector<double> left, Vector<double> right) Parameters Type Name Description Vector<double> left The first vector to compare. Vector<double> right The second vector to compare. Returns Type Description Vector<long> The resulting integral vector. GreaterThan(Vector<int>, Vector<int>) Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than their corresponding elements in a second integral vector. Declaration public static Vector<int> GreaterThan(Vector<int> left, Vector<int> right) Parameters Type Name Description Vector<int> left The first vector to compare. Vector<int> right The second vector to compare. Returns Type Description Vector<int> The resulting integral vector. GreaterThan(Vector<long>, Vector<long>) Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than their corresponding elements in a second long integer vector. Declaration public static Vector<long> GreaterThan(Vector<long> left, Vector<long> right) Parameters Type Name Description Vector<long> left The first vector to compare. Vector<long> right The second vector to compare. Returns Type Description Vector<long> The resulting long integer vector. GreaterThan(Vector<float>, Vector<float>) Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are greater than their corresponding elements in a second single-precision floating-point vector. Declaration public static Vector<int> GreaterThan(Vector<float> left, Vector<float> right) Parameters Type Name Description Vector<float> left The first vector to compare. Vector<float> right The second vector to compare. Returns Type Description Vector<int> The resulting integral vector. GreaterThanAll<T>(Vector<T>, Vector<T>) Returns a value that indicates whether all elements in the first vector are greater than the corresponding elements in the second vector. Declaration public static bool GreaterThanAll<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if all elements in left are greater than the corresponding elements in right; otherwise, false. Type Parameters Name Description T The vector type. T can be any primitive numeric type. GreaterThanAny<T>(Vector<T>, Vector<T>) Returns a value that indicates whether any element in the first vector is greater than the corresponding element in the second vector. Declaration public static bool GreaterThanAny<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if any element in left is greater than the corresponding element in right; otherwise, false. Type Parameters Name Description T The vector type. T can be any primitive numeric type. GreaterThanOrEqual(Vector<double>, Vector<double>) Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the second double-precision floating-point vector. Declaration public static Vector<long> GreaterThanOrEqual(Vector<double> left, Vector<double> right) Parameters Type Name Description Vector<double> left The first vector to compare. Vector<double> right The second vector to compare. Returns Type Description Vector<long> The resulting integral vector. GreaterThanOrEqual(Vector<int>, Vector<int>) Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than or equal to their corresponding elements in the second integral vector. Declaration public static Vector<int> GreaterThanOrEqual(Vector<int> left, Vector<int> right) Parameters Type Name Description Vector<int> left The first vector to compare. Vector<int> right The second vector to compare. Returns Type Description Vector<int> The resulting integral vector. GreaterThanOrEqual(Vector<long>, Vector<long>) Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than or equal to their corresponding elements in the second long integer vector. Declaration public static Vector<long> GreaterThanOrEqual(Vector<long> left, Vector<long> right) Parameters Type Name Description Vector<long> left The first vector to compare. Vector<long> right The second vector to compare. Returns Type Description Vector<long> The resulting long integer vector. GreaterThanOrEqual(Vector<float>, Vector<float>) Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the single-precision floating-point second vector. Declaration public static Vector<int> GreaterThanOrEqual(Vector<float> left, Vector<float> right) Parameters Type Name Description Vector<float> left The first vector to compare. Vector<float> right The second vector to compare. Returns Type Description Vector<int> The resulting integral vector. GreaterThanOrEqualAll<T>(Vector<T>, Vector<T>) Returns a value that indicates whether all elements in the first vector are greater than or equal to all the corresponding elements in the second vector. Declaration public static bool GreaterThanOrEqualAll<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if all elements in left are greater than or equal to the corresponding elements in right; otherwise, false. Type Parameters Name Description T The vector type. T can be any primitive numeric type. GreaterThanOrEqualAny<T>(Vector<T>, Vector<T>) Returns a value that indicates whether any element in the first vector is greater than or equal to the corresponding element in the second vector. Declaration public static bool GreaterThanOrEqualAny<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if any element in left is greater than or equal to the corresponding element in right; otherwise, false. Type Parameters Name Description T The vector type. T can be any primitive numeric type. GreaterThanOrEqual<T>(Vector<T>, Vector<T>) Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than or equal to their corresponding elements in the second vector of the same type. Declaration public static Vector<T> GreaterThanOrEqual<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description Vector<T> The resulting vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. GreaterThan<T>(Vector<T>, Vector<T>) Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than their corresponding elements in the second vector of the same time. Declaration public static Vector<T> GreaterThan<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description Vector<T> The resulting vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. LessThan(Vector<double>, Vector<double>) Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than their corresponding elements in a second double-precision floating-point vector. Declaration public static Vector<long> LessThan(Vector<double> left, Vector<double> right) Parameters Type Name Description Vector<double> left The first vector to compare. Vector<double> right The second vector to compare. Returns Type Description Vector<long> The resulting integral vector. LessThan(Vector<int>, Vector<int>) Returns a new integral vector whose elements signal whether the elements in one integral vector are less than their corresponding elements in a second integral vector. Declaration public static Vector<int> LessThan(Vector<int> left, Vector<int> right) Parameters Type Name Description Vector<int> left The first vector to compare. Vector<int> right The second vector to compare. Returns Type Description Vector<int> The resulting integral vector LessThan(Vector<long>, Vector<long>) Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less than their corresponding elements in a second long integer vector. Declaration public static Vector<long> LessThan(Vector<long> left, Vector<long> right) Parameters Type Name Description Vector<long> left The first vector to compare. Vector<long> right The second vector to compare. Returns Type Description Vector<long> The resulting long integer vector. LessThan(Vector<float>, Vector<float>) Returns a new integral vector whose elements signal whether the elements in one single-precision vector are less than their corresponding elements in a second single-precision vector. Declaration public static Vector<int> LessThan(Vector<float> left, Vector<float> right) Parameters Type Name Description Vector<float> left The first vector to compare. Vector<float> right The second vector to compare. Returns Type Description Vector<int> The resulting integral vector. LessThanAll<T>(Vector<T>, Vector<T>) Returns a value that indicates whether all of the elements in the first vector are less than their corresponding elements in the second vector. Declaration public static bool LessThanAll<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if all of the elements in left are less than the corresponding elements in right; otherwise, false. Type Parameters Name Description T The vector type. T can be any primitive numeric type. LessThanAny<T>(Vector<T>, Vector<T>) Returns a value that indicates whether any element in the first vector is less than the corresponding element in the second vector. Declaration public static bool LessThanAny<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if any element in left is less than the corresponding element in right; otherwise, false. Type Parameters Name Description T The vector type. T can be any primitive numeric type. LessThanOrEqual(Vector<double>, Vector<double>) Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than or equal to their corresponding elements in a second double-precision floating-point vector. Declaration public static Vector<long> LessThanOrEqual(Vector<double> left, Vector<double> right) Parameters Type Name Description Vector<double> left The first vector to compare. Vector<double> right The second vector to compare. Returns Type Description Vector<long> The resulting integral vector. LessThanOrEqual(Vector<int>, Vector<int>) Returns a new integral vector whose elements signal whether the elements in one integral vector are less than or equal to their corresponding elements in a second integral vector. Declaration public static Vector<int> LessThanOrEqual(Vector<int> left, Vector<int> right) Parameters Type Name Description Vector<int> left The first vector to compare. Vector<int> right The second vector to compare. Returns Type Description Vector<int> The resulting integral vector. LessThanOrEqual(Vector<long>, Vector<long>) Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less or equal to their corresponding elements in a second long integer vector. Declaration public static Vector<long> LessThanOrEqual(Vector<long> left, Vector<long> right) Parameters Type Name Description Vector<long> left The first vector to compare. Vector<long> right The second vector to compare. Returns Type Description Vector<long> The resulting long integer vector. LessThanOrEqual(Vector<float>, Vector<float>) Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are less than or equal to their corresponding elements in a second single-precision floating-point vector. Declaration public static Vector<int> LessThanOrEqual(Vector<float> left, Vector<float> right) Parameters Type Name Description Vector<float> left The first vector to compare. Vector<float> right The second vector to compare. Returns Type Description Vector<int> The resulting integral vector. LessThanOrEqualAll<T>(Vector<T>, Vector<T>) Returns a value that indicates whether all elements in the first vector are less than or equal to their corresponding elements in the second vector. Declaration public static bool LessThanOrEqualAll<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if all of the elements in left are less than or equal to the corresponding elements in right; otherwise, false. Type Parameters Name Description T The vector type. T can be any primitive numeric type. LessThanOrEqualAny<T>(Vector<T>, Vector<T>) Returns a value that indicates whether any element in the first vector is less than or equal to the corresponding element in the second vector. Declaration public static bool LessThanOrEqualAny<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description bool true if any element in left is less than or equal to the corresponding element in right; otherwise, false. Type Parameters Name Description T The vector type. T can be any primitive numeric type. LessThanOrEqual<T>(Vector<T>, Vector<T>) Returns a new vector whose elements signal whether the elements in one vector are less than or equal to their corresponding elements in the second vector. Declaration public static Vector<T> LessThanOrEqual<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description Vector<T> The resulting vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. LessThan<T>(Vector<T>, Vector<T>) Returns a new vector of a specified type whose elements signal whether the elements in one vector are less than their corresponding elements in the second vector. Declaration public static Vector<T> LessThan<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description Vector<T> The resulting vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Max<T>(Vector<T>, Vector<T>) Returns a new vector whose elements are the maximum of each pair of elements in the two given vectors. Declaration public static Vector<T> Max<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description Vector<T> The maximum vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Min<T>(Vector<T>, Vector<T>) Returns a new vector whose elements are the minimum of each pair of elements in the two given vectors. Declaration public static Vector<T> Min<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector to compare. Vector<T> right The second vector to compare. Returns Type Description Vector<T> The minimum vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Multiply<T>(Vector<T>, Vector<T>) Returns a new vector whose values are the product of each pair of elements in two specified vectors. Declaration public static Vector<T> Multiply<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The product vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Multiply<T>(Vector<T>, T) Returns a new vector whose values are the values of a specified vector each multiplied by a scalar value. Declaration public static Vector<T> Multiply<T>(Vector<T> left, T right) where T : struct Parameters Type Name Description Vector<T> left The vector. T right The scalar value. Returns Type Description Vector<T> The scaled vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Multiply<T>(T, Vector<T>) Returns a new vector whose values are a scalar value multiplied by each of the values of a specified vector. Declaration public static Vector<T> Multiply<T>(T left, Vector<T> right) where T : struct Parameters Type Name Description T left The scalar value. Vector<T> right The vector. Returns Type Description Vector<T> The scaled vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Narrow(Vector<double>, Vector<double>) Declaration public static Vector<float> Narrow(Vector<double> low, Vector<double> high) Parameters Type Name Description Vector<double> low Vector<double> high Returns Type Description Vector<float> Narrow(Vector<short>, Vector<short>) Declaration [CLSCompliant(false)] public static Vector<sbyte> Narrow(Vector<short> low, Vector<short> high) Parameters Type Name Description Vector<short> low Vector<short> high Returns Type Description Vector<sbyte> Narrow(Vector<int>, Vector<int>) Declaration public static Vector<short> Narrow(Vector<int> low, Vector<int> high) Parameters Type Name Description Vector<int> low Vector<int> high Returns Type Description Vector<short> Narrow(Vector<long>, Vector<long>) Declaration public static Vector<int> Narrow(Vector<long> low, Vector<long> high) Parameters Type Name Description Vector<long> low Vector<long> high Returns Type Description Vector<int> Narrow(Vector<ushort>, Vector<ushort>) Declaration [CLSCompliant(false)] public static Vector<byte> Narrow(Vector<ushort> low, Vector<ushort> high) Parameters Type Name Description Vector<ushort> low Vector<ushort> high Returns Type Description Vector<byte> Narrow(Vector<uint>, Vector<uint>) Declaration [CLSCompliant(false)] public static Vector<ushort> Narrow(Vector<uint> low, Vector<uint> high) Parameters Type Name Description Vector<uint> low Vector<uint> high Returns Type Description Vector<ushort> Narrow(Vector<ulong>, Vector<ulong>) Declaration [CLSCompliant(false)] public static Vector<uint> Narrow(Vector<ulong> low, Vector<ulong> high) Parameters Type Name Description Vector<ulong> low Vector<ulong> high Returns Type Description Vector<uint> Negate<T>(Vector<T>) Returns a new vector whose elements are the negation of the corresponding element in the specified vector. Declaration public static Vector<T> Negate<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<T> The negated vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. OnesComplement<T>(Vector<T>) Returns a new vector whose elements are obtained by taking the one&#39;s complement of a specified vector&#39;s elements. Declaration public static Vector<T> OnesComplement<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<T> The resulting vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. SquareRoot<T>(Vector<T>) Returns a new vector whose elements are the square roots of a specified vector&#39;s elements. Declaration public static Vector<T> SquareRoot<T>(Vector<T> value) where T : struct Parameters Type Name Description Vector<T> value The source vector. Returns Type Description Vector<T> The square root vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Subtract<T>(Vector<T>, Vector<T>) Returns a new vector whose values are the difference between the elements in the second vector and their corresponding elements in the first vector. Declaration public static Vector<T> Subtract<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The difference vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type. Widen(Vector<byte>, out Vector<ushort>, out Vector<ushort>) Declaration [CLSCompliant(false)] public static void Widen(Vector<byte> source, out Vector<ushort> low, out Vector<ushort> high) Parameters Type Name Description Vector<byte> source Vector<ushort> low Vector<ushort> high Widen(Vector<short>, out Vector<int>, out Vector<int>) Declaration public static void Widen(Vector<short> source, out Vector<int> low, out Vector<int> high) Parameters Type Name Description Vector<short> source Vector<int> low Vector<int> high Widen(Vector<int>, out Vector<long>, out Vector<long>) Declaration public static void Widen(Vector<int> source, out Vector<long> low, out Vector<long> high) Parameters Type Name Description Vector<int> source Vector<long> low Vector<long> high Widen(Vector<sbyte>, out Vector<short>, out Vector<short>) Declaration [CLSCompliant(false)] public static void Widen(Vector<sbyte> source, out Vector<short> low, out Vector<short> high) Parameters Type Name Description Vector<sbyte> source Vector<short> low Vector<short> high Widen(Vector<float>, out Vector<double>, out Vector<double>) Declaration public static void Widen(Vector<float> source, out Vector<double> low, out Vector<double> high) Parameters Type Name Description Vector<float> source Vector<double> low Vector<double> high Widen(Vector<ushort>, out Vector<uint>, out Vector<uint>) Declaration [CLSCompliant(false)] public static void Widen(Vector<ushort> source, out Vector<uint> low, out Vector<uint> high) Parameters Type Name Description Vector<ushort> source Vector<uint> low Vector<uint> high Widen(Vector<uint>, out Vector<ulong>, out Vector<ulong>) Declaration [CLSCompliant(false)] public static void Widen(Vector<uint> source, out Vector<ulong> low, out Vector<ulong> high) Parameters Type Name Description Vector<uint> source Vector<ulong> low Vector<ulong> high Xor<T>(Vector<T>, Vector<T>) Returns a new vector by performing a bitwise exclusive Or (XOr) operation on each pair of elements in two vectors. Declaration public static Vector<T> Xor<T>(Vector<T> left, Vector<T> right) where T : struct Parameters Type Name Description Vector<T> left The first vector. Vector<T> right The second vector. Returns Type Description Vector<T> The resulting vector. Type Parameters Name Description T The vector type. T can be any primitive numeric type."
  },
  "api/System.Numerics.html": {
    "href": "api/System.Numerics.html",
    "title": "Namespace System.Numerics | CodeFactory for Windows",
    "keywords": "Namespace System.Numerics Classes Vector Provides a collection of static convenience methods for creating, manipulating, combining, and converting generic vectors. Structs Vector<T> Represents a single vector of a specified numeric type that is suitable for low-level optimization of parallel algorithms."
  },
  "api/System.ReadOnlyMemory-1.html": {
    "href": "api/System.ReadOnlyMemory-1.html",
    "title": "Struct ReadOnlyMemory<T> | CodeFactory for Windows",
    "keywords": "Struct ReadOnlyMemory<T> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System Assembly: System.Memory.dll Syntax public readonly struct ReadOnlyMemory<T> Type Parameters Name Description T Constructors ReadOnlyMemory(T[]) Declaration public ReadOnlyMemory(T[] array) Parameters Type Name Description T[] array ReadOnlyMemory(T[], int, int) Declaration public ReadOnlyMemory(T[] array, int start, int length) Parameters Type Name Description T[] array int start int length Properties Empty Declaration public static ReadOnlyMemory<T> Empty { get; } Property Value Type Description ReadOnlyMemory<T> IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description bool Length Declaration public int Length { get; } Property Value Type Description int Span Declaration public ReadOnlySpan<T> Span { get; } Property Value Type Description ReadOnlySpan<T> Methods CopyTo(Memory<T>) Declaration public void CopyTo(Memory<T> destination) Parameters Type Name Description Memory<T> destination Equals(ReadOnlyMemory<T>) Declaration public bool Equals(ReadOnlyMemory<T> other) Parameters Type Name Description ReadOnlyMemory<T> other Returns Type Description bool Pin() Declaration public MemoryHandle Pin() Returns Type Description MemoryHandle Slice(int) Declaration public ReadOnlyMemory<T> Slice(int start) Parameters Type Name Description int start Returns Type Description ReadOnlyMemory<T> Slice(int, int) Declaration public ReadOnlyMemory<T> Slice(int start, int length) Parameters Type Name Description int start int length Returns Type Description ReadOnlyMemory<T> ToArray() Declaration public T[] ToArray() Returns Type Description T[] ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() TryCopyTo(Memory<T>) Declaration public bool TryCopyTo(Memory<T> destination) Parameters Type Name Description Memory<T> destination Returns Type Description bool Operators implicit operator ReadOnlyMemory<T>(ArraySegment<T>) Declaration public static implicit operator ReadOnlyMemory<T>(ArraySegment<T> segment) Parameters Type Name Description ArraySegment<T> segment Returns Type Description ReadOnlyMemory<T> implicit operator ReadOnlyMemory<T>(T[]) Declaration public static implicit operator ReadOnlyMemory<T>(T[] array) Parameters Type Name Description T[] array Returns Type Description ReadOnlyMemory<T>"
  },
  "api/System.ReadOnlySpan-1.Enumerator.html": {
    "href": "api/System.ReadOnlySpan-1.Enumerator.html",
    "title": "Struct ReadOnlySpan<T>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ReadOnlySpan<T>.Enumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System Assembly: System.Memory.dll Syntax public ref struct ReadOnlySpan<T>.Enumerator Properties Current Declaration public ref readonly T Current { get; } Property Value Type Description T Methods MoveNext() Declaration public bool MoveNext() Returns Type Description bool"
  },
  "api/System.ReadOnlySpan-1.html": {
    "href": "api/System.ReadOnlySpan-1.html",
    "title": "Struct ReadOnlySpan<T> | CodeFactory for Windows",
    "keywords": "Struct ReadOnlySpan<T> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System Assembly: System.Memory.dll Syntax public readonly ref struct ReadOnlySpan<T> Type Parameters Name Description T Constructors ReadOnlySpan(void*, int) Declaration [CLSCompliant(false)] public ReadOnlySpan(void* pointer, int length) Parameters Type Name Description void* pointer int length ReadOnlySpan(T[]) Declaration public ReadOnlySpan(T[] array) Parameters Type Name Description T[] array ReadOnlySpan(T[], int, int) Declaration public ReadOnlySpan(T[] array, int start, int length) Parameters Type Name Description T[] array int start int length Properties Empty Declaration public static ReadOnlySpan<T> Empty { get; } Property Value Type Description ReadOnlySpan<T> IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description bool this[int] Declaration public ref readonly T this[int index] { get; } Parameters Type Name Description int index Property Value Type Description T Length Declaration public int Length { get; } Property Value Type Description int Methods CopyTo(Span<T>) Declaration public void CopyTo(Span<T> destination) Parameters Type Name Description Span<T> destination GetEnumerator() Declaration public ReadOnlySpan<T>.Enumerator GetEnumerator() Returns Type Description ReadOnlySpan<T>.Enumerator Slice(int) Declaration public ReadOnlySpan<T> Slice(int start) Parameters Type Name Description int start Returns Type Description ReadOnlySpan<T> Slice(int, int) Declaration public ReadOnlySpan<T> Slice(int start, int length) Parameters Type Name Description int start int length Returns Type Description ReadOnlySpan<T> ToArray() Declaration public T[] ToArray() Returns Type Description T[] ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() TryCopyTo(Span<T>) Declaration public bool TryCopyTo(Span<T> destination) Parameters Type Name Description Span<T> destination Returns Type Description bool Operators operator ==(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static bool operator ==(ReadOnlySpan<T> left, ReadOnlySpan<T> right) Parameters Type Name Description ReadOnlySpan<T> left ReadOnlySpan<T> right Returns Type Description bool implicit operator ReadOnlySpan<T>(ArraySegment<T>) Declaration public static implicit operator ReadOnlySpan<T>(ArraySegment<T> segment) Parameters Type Name Description ArraySegment<T> segment Returns Type Description ReadOnlySpan<T> implicit operator ReadOnlySpan<T>(T[]) Declaration public static implicit operator ReadOnlySpan<T>(T[] array) Parameters Type Name Description T[] array Returns Type Description ReadOnlySpan<T> operator !=(ReadOnlySpan<T>, ReadOnlySpan<T>) Declaration public static bool operator !=(ReadOnlySpan<T> left, ReadOnlySpan<T> right) Parameters Type Name Description ReadOnlySpan<T> left ReadOnlySpan<T> right Returns Type Description bool Extension Methods MemoryExtensions.BinarySearch<T>(ReadOnlySpan<T>, IComparable<T>) MemoryExtensions.BinarySearch<T, TComparable>(ReadOnlySpan<T>, TComparable) MemoryExtensions.BinarySearch<T, TComparer>(ReadOnlySpan<T>, T, TComparer) MemoryExtensions.Overlaps<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) MemoryExtensions.Overlaps<T>(ReadOnlySpan<T>, ReadOnlySpan<T>, out int)"
  },
  "api/System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.html": {
    "href": "api/System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.html",
    "title": "Struct AsyncIteratorMethodBuilder | CodeFactory for Windows",
    "keywords": "Struct AsyncIteratorMethodBuilder Represents a builder for asynchronous iterators. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax public struct AsyncIteratorMethodBuilder Methods AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) Schedules the state machine to proceed to the next action when the specified awaiter completes. Declaration public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine Parameters Type Name Description TAwaiter awaiter The awaiter. TStateMachine stateMachine The state machine. Type Parameters Name Description TAwaiter The type of the awaiter. TStateMachine The type of the state machine. AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) Schedules the state machine to proceed to the next action when the specified awaiter completes. Declaration public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine Parameters Type Name Description TAwaiter awaiter The awaiter. TStateMachine stateMachine The state machine. Type Parameters Name Description TAwaiter The type of the awaiter. TStateMachine The type of the state machine. Complete() Marks iteration as being completed, whether successfully or otherwise. Declaration public void Complete() Create() Creates an instance of the AsyncIteratorMethodBuilder struct. Declaration public static AsyncIteratorMethodBuilder Create() Returns Type Description AsyncIteratorMethodBuilder The initialized instance. MoveNext<TStateMachine>(ref TStateMachine) Invokes MoveNext() on the state machine while guarding the ExecutionContext. Declaration public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine Parameters Type Name Description TStateMachine stateMachine The state machine instance, passed by reference. Type Parameters Name Description TStateMachine The type of the state machine."
  },
  "api/System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute.html",
    "title": "Class AsyncIteratorStateMachineAttribute | CodeFactory for Windows",
    "keywords": "Class AsyncIteratorStateMachineAttribute Indicates whether a method is an asynchronous iterator. Inheritance object Attribute StateMachineAttribute AsyncIteratorStateMachineAttribute Implements _Attribute Inherited Members StateMachineAttribute.StateMachineType Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)] public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute, _Attribute Constructors AsyncIteratorStateMachineAttribute(Type) Initializes a new instance of the AsyncIteratorStateMachineAttribute class. Declaration public AsyncIteratorStateMachineAttribute(Type stateMachineType) Parameters Type Name Description Type stateMachineType The type object for the underlying state machine type that's used to implement a state machine method. Implements _Attribute"
  },
  "api/System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.html",
    "title": "Class AsyncMethodBuilderAttribute | CodeFactory for Windows",
    "keywords": "Class AsyncMethodBuilderAttribute Inheritance object Attribute AsyncMethodBuilderAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: System.Threading.Tasks.Extensions.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Enum|AttributeTargets.Interface|AttributeTargets.Delegate, Inherited = false, AllowMultiple = false)] public sealed class AsyncMethodBuilderAttribute : Attribute, _Attribute Constructors AsyncMethodBuilderAttribute(Type) Declaration public AsyncMethodBuilderAttribute(Type builderType) Parameters Type Name Description Type builderType Properties BuilderType Declaration public Type BuilderType { get; } Property Value Type Description Type Implements _Attribute"
  },
  "api/System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder-1.html": {
    "href": "api/System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder-1.html",
    "title": "Struct AsyncValueTaskMethodBuilder<TResult> | CodeFactory for Windows",
    "keywords": "Struct AsyncValueTaskMethodBuilder<TResult> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: System.Threading.Tasks.Extensions.dll Syntax public struct AsyncValueTaskMethodBuilder<TResult> Type Parameters Name Description TResult Properties Task Declaration public ValueTask<TResult> Task { get; } Property Value Type Description ValueTask<TResult> Methods AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) Declaration public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine Parameters Type Name Description TAwaiter awaiter TStateMachine stateMachine Type Parameters Name Description TAwaiter TStateMachine AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) Declaration public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine Parameters Type Name Description TAwaiter awaiter TStateMachine stateMachine Type Parameters Name Description TAwaiter TStateMachine Create() Declaration public static AsyncValueTaskMethodBuilder<TResult> Create() Returns Type Description AsyncValueTaskMethodBuilder<TResult> SetException(Exception) Declaration public void SetException(Exception exception) Parameters Type Name Description Exception exception SetResult(TResult) Declaration public void SetResult(TResult result) Parameters Type Name Description TResult result SetStateMachine(IAsyncStateMachine) Declaration public void SetStateMachine(IAsyncStateMachine stateMachine) Parameters Type Name Description IAsyncStateMachine stateMachine Start<TStateMachine>(ref TStateMachine) Declaration public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine Parameters Type Name Description TStateMachine stateMachine Type Parameters Name Description TStateMachine"
  },
  "api/System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.html": {
    "href": "api/System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.html",
    "title": "Struct AsyncValueTaskMethodBuilder | CodeFactory for Windows",
    "keywords": "Struct AsyncValueTaskMethodBuilder Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: System.Threading.Tasks.Extensions.dll Syntax public struct AsyncValueTaskMethodBuilder Properties Task Declaration public ValueTask Task { get; } Property Value Type Description ValueTask Methods AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) Declaration public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine Parameters Type Name Description TAwaiter awaiter TStateMachine stateMachine Type Parameters Name Description TAwaiter TStateMachine AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) Declaration public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine Parameters Type Name Description TAwaiter awaiter TStateMachine stateMachine Type Parameters Name Description TAwaiter TStateMachine Create() Declaration public static AsyncValueTaskMethodBuilder Create() Returns Type Description AsyncValueTaskMethodBuilder SetException(Exception) Declaration public void SetException(Exception exception) Parameters Type Name Description Exception exception SetResult() Declaration public void SetResult() SetStateMachine(IAsyncStateMachine) Declaration public void SetStateMachine(IAsyncStateMachine stateMachine) Parameters Type Name Description IAsyncStateMachine stateMachine Start<TStateMachine>(ref TStateMachine) Declaration public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine Parameters Type Name Description TStateMachine stateMachine Type Parameters Name Description TStateMachine"
  },
  "api/System.Runtime.CompilerServices.ConfiguredAsyncDisposable.html": {
    "href": "api/System.Runtime.CompilerServices.ConfiguredAsyncDisposable.html",
    "title": "Struct ConfiguredAsyncDisposable | CodeFactory for Windows",
    "keywords": "Struct ConfiguredAsyncDisposable Provides a type that can be used to configure how awaits on an IAsyncDisposable are performed. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax public readonly struct ConfiguredAsyncDisposable Methods DisposeAsync() Declaration public ConfiguredValueTaskAwaitable DisposeAsync() Returns Type Description ConfiguredValueTaskAwaitable"
  },
  "api/System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable-1.Enumerator.html": {
    "href": "api/System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable-1.Enumerator.html",
    "title": "Struct ConfiguredCancelableAsyncEnumerable<T>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct ConfiguredCancelableAsyncEnumerable<T>.Enumerator Provides an awaitable async enumerator that enables cancelable iteration and configured awaits. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax public readonly struct ConfiguredCancelableAsyncEnumerable<T>.Enumerator Properties Current Gets the element in the collection at the current position of the enumerator. Declaration public T Current { get; } Property Value Type Description T Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration public ConfiguredValueTaskAwaitable DisposeAsync() Returns Type Description ConfiguredValueTaskAwaitable MoveNextAsync() Advances the enumerator asynchronously to the next element of the collection. Declaration public ConfiguredValueTaskAwaitable<bool> MoveNextAsync() Returns Type Description ConfiguredValueTaskAwaitable<bool> A ConfiguredValueTaskAwaitable<TResult> that will complete with a result of true if the enumerator was successfully advanced to the next element, or false if the enumerator has passed the end of the collection."
  },
  "api/System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable-1.html": {
    "href": "api/System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable-1.html",
    "title": "Struct ConfiguredCancelableAsyncEnumerable<T> | CodeFactory for Windows",
    "keywords": "Struct ConfiguredCancelableAsyncEnumerable<T> Provides an awaitable async enumerable that enables cancelable iteration and configured awaits. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax public readonly struct ConfiguredCancelableAsyncEnumerable<T> Type Parameters Name Description T Methods ConfigureAwait(bool) Configures how awaits on the tasks returned from an async iteration will be performed. Declaration public ConfiguredCancelableAsyncEnumerable<T> ConfigureAwait(bool continueOnCapturedContext) Parameters Type Name Description bool continueOnCapturedContext Whether to capture and marshal back to the current context. Returns Type Description ConfiguredCancelableAsyncEnumerable<T> The configured enumerable. Remarks This will replace any previous value set by ConfigureAwait(bool) for this iteration. GetAsyncEnumerator() Declaration public ConfiguredCancelableAsyncEnumerable<T>.Enumerator GetAsyncEnumerator() Returns Type Description ConfiguredCancelableAsyncEnumerable<T>.Enumerator WithCancellation(CancellationToken) Sets the CancellationToken to be passed to GetAsyncEnumerator(CancellationToken) when iterating. Declaration public ConfiguredCancelableAsyncEnumerable<T> WithCancellation(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The CancellationToken to use. Returns Type Description ConfiguredCancelableAsyncEnumerable<T> The configured enumerable. Remarks This will replace any previous CancellationToken set by WithCancellation(CancellationToken) for this iteration."
  },
  "api/System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable-1.ConfiguredValueTaskAwaiter.html": {
    "href": "api/System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable-1.ConfiguredValueTaskAwaiter.html",
    "title": "Struct ConfiguredValueTaskAwaitable<TResult>.ConfiguredValueTaskAwaiter | CodeFactory for Windows",
    "keywords": "Struct ConfiguredValueTaskAwaitable<TResult>.ConfiguredValueTaskAwaiter Implements ICriticalNotifyCompletion INotifyCompletion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: System.Threading.Tasks.Extensions.dll Syntax public readonly struct ConfiguredValueTaskAwaitable<TResult>.ConfiguredValueTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description bool Methods GetResult() Declaration public TResult GetResult() Returns Type Description TResult OnCompleted(Action) Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation UnsafeOnCompleted(Action) Declaration public void UnsafeOnCompleted(Action continuation) Parameters Type Name Description Action continuation Implements ICriticalNotifyCompletion INotifyCompletion"
  },
  "api/System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable-1.html": {
    "href": "api/System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable-1.html",
    "title": "Struct ConfiguredValueTaskAwaitable<TResult> | CodeFactory for Windows",
    "keywords": "Struct ConfiguredValueTaskAwaitable<TResult> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: System.Threading.Tasks.Extensions.dll Syntax public readonly struct ConfiguredValueTaskAwaitable<TResult> Type Parameters Name Description TResult Methods GetAwaiter() Declaration public ConfiguredValueTaskAwaitable<TResult>.ConfiguredValueTaskAwaiter GetAwaiter() Returns Type Description ConfiguredValueTaskAwaitable<TResult>.ConfiguredValueTaskAwaiter"
  },
  "api/System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.html": {
    "href": "api/System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.html",
    "title": "Struct ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter | CodeFactory for Windows",
    "keywords": "Struct ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter Implements ICriticalNotifyCompletion INotifyCompletion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: System.Threading.Tasks.Extensions.dll Syntax public readonly struct ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description bool Methods GetResult() Declaration public void GetResult() OnCompleted(Action) Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation UnsafeOnCompleted(Action) Declaration public void UnsafeOnCompleted(Action continuation) Parameters Type Name Description Action continuation Implements ICriticalNotifyCompletion INotifyCompletion"
  },
  "api/System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.html": {
    "href": "api/System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.html",
    "title": "Struct ConfiguredValueTaskAwaitable | CodeFactory for Windows",
    "keywords": "Struct ConfiguredValueTaskAwaitable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: System.Threading.Tasks.Extensions.dll Syntax public readonly struct ConfiguredValueTaskAwaitable Methods GetAwaiter() Declaration public ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter GetAwaiter() Returns Type Description ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter"
  },
  "api/System.Runtime.CompilerServices.EnumeratorCancellationAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.EnumeratorCancellationAttribute.html",
    "title": "Class EnumeratorCancellationAttribute | CodeFactory for Windows",
    "keywords": "Class EnumeratorCancellationAttribute Inheritance object Attribute EnumeratorCancellationAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax [AttributeUsage(AttributeTargets.Parameter, Inherited = false)] public sealed class EnumeratorCancellationAttribute : Attribute, _Attribute Constructors EnumeratorCancellationAttribute() Declaration public EnumeratorCancellationAttribute() Implements _Attribute"
  },
  "api/System.Runtime.CompilerServices.Unsafe.html": {
    "href": "api/System.Runtime.CompilerServices.Unsafe.html",
    "title": "Class Unsafe | CodeFactory for Windows",
    "keywords": "Class Unsafe Contains generic, low-level functionality for manipulating pointers. Inheritance object Unsafe Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Runtime.CompilerServices Assembly: System.Runtime.CompilerServices.Unsafe.dll Syntax public static class Unsafe Methods AddByteOffset<T>(ref T, IntPtr) Adds a byte offset to the given reference. Declaration public static ref T AddByteOffset<T>(ref T source, IntPtr byteOffset) Parameters Type Name Description T source The reference to add the offset to. IntPtr byteOffset The offset to add. Returns Type Description T A new reference that reflects the addition of byte offset to pointer. Type Parameters Name Description T The type of reference. AddByteOffset<T>(ref T, nuint) Adds a byte offset to the given reference. Declaration public static ref T AddByteOffset<T>(ref T source, nuint byteOffset) Parameters Type Name Description T source The reference to add the offset to. UIntPtr byteOffset The offset to add. Returns Type Description T A new reference that reflects the addition of byte offset to pointer. Type Parameters Name Description T The type of reference. Add<T>(void*, int) Adds an element offset to the given void pointer. Declaration public static void* Add<T>(void* source, int elementOffset) Parameters Type Name Description void* source The void pointer to add the offset to. int elementOffset The offset to add. Returns Type Description void* A new void pointer that reflects the addition of offset to the specified pointer. Type Parameters Name Description T The type of void pointer. Add<T>(ref T, int) Adds an element offset to the given reference. Declaration public static ref T Add<T>(ref T source, int elementOffset) Parameters Type Name Description T source The reference to add the offset to. int elementOffset The offset to add. Returns Type Description T A new reference that reflects the addition of offset to pointer. Type Parameters Name Description T The type of reference. Add<T>(ref T, IntPtr) Adds an element offset to the given reference. Declaration public static ref T Add<T>(ref T source, IntPtr elementOffset) Parameters Type Name Description T source The reference to add the offset to. IntPtr elementOffset The offset to add. Returns Type Description T A new reference that reflects the addition of offset to pointer. Type Parameters Name Description T The type of reference. Add<T>(ref T, nuint) Adds an element offset to the given reference. Declaration public static ref T Add<T>(ref T source, nuint elementOffset) Parameters Type Name Description T source The reference to add the offset to. UIntPtr elementOffset The offset to add. Returns Type Description T A new reference that reflects the addition of offset to pointer. Type Parameters Name Description T The type of reference. AreSame<T>(ref T, ref T) Determines whether the specified references point to the same location. Declaration public static bool AreSame<T>(ref T left, ref T right) Parameters Type Name Description T left The first reference to compare. T right The second reference to compare. Returns Type Description bool true if left and right point to the same location; otherwise, false. Type Parameters Name Description T The type of reference. AsPointer<T>(ref T) Returns a pointer to the given by-ref parameter. Declaration public static void* AsPointer<T>(ref T value) Parameters Type Name Description T value The object whose pointer is obtained. Returns Type Description void* A pointer to the given value. Type Parameters Name Description T The type of object. AsRef<T>(void*) Reinterprets the given location as a reference to a value of type T. Declaration public static ref T AsRef<T>(void* source) Parameters Type Name Description void* source The location of the value to reference. Returns Type Description T A reference to a value of type T. Type Parameters Name Description T The type of the interpreted location. AsRef<T>(in T) Reinterprets the given read-only reference as a reference. Declaration public static ref T AsRef<T>(in T source) Parameters Type Name Description T source The read-only reference to reinterpret. Returns Type Description T A reference to a value of type T. Type Parameters Name Description T The type of reference. As<T>(object) Casts the given object to the specified type. Declaration public static T As<T>(object o) where T : class Parameters Type Name Description object o The object to cast. Returns Type Description T The original object, casted to the given type. Type Parameters Name Description T The type which the object will be cast to. As<TFrom, TTo>(ref TFrom) Reinterprets the given reference as a reference to a value of type TTo. Declaration public static ref TTo As<TFrom, TTo>(ref TFrom source) Parameters Type Name Description TFrom source The reference to reinterpret. Returns Type Description TTo A reference to a value of type TTo. Type Parameters Name Description TFrom The type of reference to reinterpret. TTo The desired type of the reference. ByteOffset<T>(ref T, ref T) Determines the byte offset from origin to target from the given references. Declaration public static IntPtr ByteOffset<T>(ref T origin, ref T target) Parameters Type Name Description T origin The reference to origin. T target The reference to target. Returns Type Description IntPtr Byte offset from origin to target i.e. target - origin. Type Parameters Name Description T The type of reference. CopyBlock(ref byte, ref byte, uint) Copies bytes from the source address to the destination address. Declaration public static void CopyBlock(ref byte destination, ref byte source, uint byteCount) Parameters Type Name Description byte destination The destination address to copy to. byte source The source address to copy from. uint byteCount The number of bytes to copy. CopyBlock(void*, void*, uint) Copies bytes from the source address to the destination address. Declaration public static void CopyBlock(void* destination, void* source, uint byteCount) Parameters Type Name Description void* destination The destination address to copy to. void* source The source address to copy from. uint byteCount The number of bytes to copy. CopyBlockUnaligned(ref byte, ref byte, uint) Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses. Declaration public static void CopyBlockUnaligned(ref byte destination, ref byte source, uint byteCount) Parameters Type Name Description byte destination The destination address to copy to. byte source The source address to copy from. uint byteCount The number of bytes to copy. CopyBlockUnaligned(void*, void*, uint) Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses. Declaration public static void CopyBlockUnaligned(void* destination, void* source, uint byteCount) Parameters Type Name Description void* destination The destination address to copy to. void* source The source address to copy from. uint byteCount The number of bytes to copy. Copy<T>(void*, ref T) Copies a value of type T to the given location. Declaration public static void Copy<T>(void* destination, ref T source) Parameters Type Name Description void* destination The location to copy to. T source A reference to the value to copy. Type Parameters Name Description T The type of value to copy. Copy<T>(ref T, void*) Copies a value of type T to the given location. Declaration public static void Copy<T>(ref T destination, void* source) Parameters Type Name Description T destination The location to copy to. void* source A pointer to the value to copy. Type Parameters Name Description T The type of value to copy. InitBlock(ref byte, byte, uint) Initializes a block of memory at the given location with a given initial value. Declaration public static void InitBlock(ref byte startAddress, byte value, uint byteCount) Parameters Type Name Description byte startAddress The address of the start of the memory block to initialize. byte value The value to initialize the block to. uint byteCount The number of bytes to initialize. InitBlock(void*, byte, uint) Initializes a block of memory at the given location with a given initial value. Declaration public static void InitBlock(void* startAddress, byte value, uint byteCount) Parameters Type Name Description void* startAddress The address of the start of the memory block to initialize. byte value The value to initialize the block to. uint byteCount The number of bytes to initialize. InitBlockUnaligned(ref byte, byte, uint) Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address. Declaration public static void InitBlockUnaligned(ref byte startAddress, byte value, uint byteCount) Parameters Type Name Description byte startAddress The address of the start of the memory block to initialize. byte value The value to initialize the block to. uint byteCount The number of bytes to initialize. InitBlockUnaligned(void*, byte, uint) Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address. Declaration public static void InitBlockUnaligned(void* startAddress, byte value, uint byteCount) Parameters Type Name Description void* startAddress The address of the start of the memory block to initialize. byte value The value to initialize the block to. uint byteCount The number of bytes to initialize. IsAddressGreaterThan<T>(ref T, ref T) Returns a value that indicates whether a specified reference is greater than another specified reference. Declaration public static bool IsAddressGreaterThan<T>(ref T left, ref T right) Parameters Type Name Description T left The first value to compare. T right The second value to compare. Returns Type Description bool true if left is greater than right; otherwise, false. Type Parameters Name Description T The type of the reference. IsAddressLessThan<T>(ref T, ref T) Returns a value that indicates whether a specified reference is less than another specified reference. Declaration public static bool IsAddressLessThan<T>(ref T left, ref T right) Parameters Type Name Description T left The first value to compare. T right The second value to compare. Returns Type Description bool true if left is less than right; otherwise, false. Type Parameters Name Description T The type of the reference. IsNullRef<T>(ref T) Determines if a given reference to a value of type T is a null reference. Declaration public static bool IsNullRef<T>(ref T source) Parameters Type Name Description T source The reference to check. Returns Type Description bool true if source is a null reference; otherwise, false. Type Parameters Name Description T The type of the reference. NullRef<T>() Returns a reference to a value of type T that is a null reference. Declaration public static ref T NullRef<T>() Returns Type Description T A reference to a value of type T that is a null reference. Type Parameters Name Description T The type of the reference. ReadUnaligned<T>(ref byte) Reads a value of type T from the given location without assuming architecture dependent alignment of the addresses. Declaration public static T ReadUnaligned<T>(ref byte source) Parameters Type Name Description byte source The location to read from. Returns Type Description T An object of type T read from the given location. Type Parameters Name Description T The type to read. ReadUnaligned<T>(void*) Reads a value of type T from the given location without assuming architecture dependent alignment of the addresses. Declaration public static T ReadUnaligned<T>(void* source) Parameters Type Name Description void* source The location to read from. Returns Type Description T An object of type T read from the given location. Type Parameters Name Description T The type to read. Read<T>(void*) Reads a value of type T from the given location. Declaration public static T Read<T>(void* source) Parameters Type Name Description void* source The location to read from. Returns Type Description T An object of type T read from the given location. Type Parameters Name Description T The type to read. SizeOf<T>() Returns the size of an object of the given type parameter. Declaration public static int SizeOf<T>() Returns Type Description int The size of an object of type T. Type Parameters Name Description T The type of object whose size is retrieved. SkipInit<T>(out T) Bypasses definite assignment rules for a given value. Declaration public static void SkipInit<T>(out T value) Parameters Type Name Description T value The uninitialized object. Type Parameters Name Description T The type of the uninitialized object. SubtractByteOffset<T>(ref T, IntPtr) Subtracts a byte offset from the given reference. Declaration public static ref T SubtractByteOffset<T>(ref T source, IntPtr byteOffset) Parameters Type Name Description T source The reference to subtract the offset from. IntPtr byteOffset The offset to subtract. Returns Type Description T A new reference that reflects the subtraction of byte offset from pointer. Type Parameters Name Description T The type of reference. SubtractByteOffset<T>(ref T, nuint) Subtracts a byte offset from the given reference. Declaration public static ref T SubtractByteOffset<T>(ref T source, nuint byteOffset) Parameters Type Name Description T source The reference to subtract the offset from. UIntPtr byteOffset The offset to subtract. Returns Type Description T A new reference that reflects the subraction of byte offset from pointer. Type Parameters Name Description T The type of reference. Subtract<T>(void*, int) Subtracts an element offset from the given void pointer. Declaration public static void* Subtract<T>(void* source, int elementOffset) Parameters Type Name Description void* source The void pointer to subtract the offset from. int elementOffset The offset to subtract. Returns Type Description void* A new void pointer that reflects the subtraction of offset from the specified pointer. Type Parameters Name Description T The type of the void pointer. Subtract<T>(ref T, int) Subtracts an element offset from the given reference. Declaration public static ref T Subtract<T>(ref T source, int elementOffset) Parameters Type Name Description T source The reference to subtract the offset from. int elementOffset The offset to subtract. Returns Type Description T A new reference that reflects the subtraction of offset from pointer. Type Parameters Name Description T The type of reference. Subtract<T>(ref T, IntPtr) Subtracts an element offset from the given reference. Declaration public static ref T Subtract<T>(ref T source, IntPtr elementOffset) Parameters Type Name Description T source The reference to subtract the offset from. IntPtr elementOffset The offset to subtract. Returns Type Description T A new reference that reflects the subtraction of offset from pointer. Type Parameters Name Description T The type of reference. Subtract<T>(ref T, nuint) Subtracts an element offset from the given reference. Declaration public static ref T Subtract<T>(ref T source, nuint elementOffset) Parameters Type Name Description T source The reference to subtract the offset from. UIntPtr elementOffset The offset to subtract. Returns Type Description T A new reference that reflects the subraction of offset from pointer. Type Parameters Name Description T The type of reference. Unbox<T>(object) Returns a mutable ref to a boxed value. Declaration public static ref T Unbox<T>(object box) where T : struct Parameters Type Name Description object box The value to unbox. Returns Type Description T A mutable ref to the boxed value box. Type Parameters Name Description T The type to be unboxed. Exceptions Type Condition NullReferenceException box is null, and T is a non-nullable value type. InvalidCastException <code class=\"paramref\">box</code> is not a boxed value type. -or- box is not a boxed T. TypeLoadException T cannot be found. WriteUnaligned<T>(ref byte, T) Writes a value of type T to the given location without assuming architecture dependent alignment of the addresses. Declaration public static void WriteUnaligned<T>(ref byte destination, T value) Parameters Type Name Description byte destination The location to write to. T value The value to write. Type Parameters Name Description T The type of value to write. WriteUnaligned<T>(void*, T) Writes a value of type T to the given location without assuming architecture dependent alignment of the addresses. Declaration public static void WriteUnaligned<T>(void* destination, T value) Parameters Type Name Description void* destination The location to write to. T value The value to write. Type Parameters Name Description T The type of value to write. Write<T>(void*, T) Writes a value of type T to the given location. Declaration public static void Write<T>(void* destination, T value) Parameters Type Name Description void* destination The location to write to. T value The value to write. Type Parameters Name Description T The type of value to write."
  },
  "api/System.Runtime.CompilerServices.ValueTaskAwaiter-1.html": {
    "href": "api/System.Runtime.CompilerServices.ValueTaskAwaiter-1.html",
    "title": "Struct ValueTaskAwaiter<TResult> | CodeFactory for Windows",
    "keywords": "Struct ValueTaskAwaiter<TResult> Implements ICriticalNotifyCompletion INotifyCompletion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: System.Threading.Tasks.Extensions.dll Syntax public readonly struct ValueTaskAwaiter<TResult> : ICriticalNotifyCompletion, INotifyCompletion Type Parameters Name Description TResult Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description bool Methods GetResult() Declaration public TResult GetResult() Returns Type Description TResult OnCompleted(Action) Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation UnsafeOnCompleted(Action) Declaration public void UnsafeOnCompleted(Action continuation) Parameters Type Name Description Action continuation Implements ICriticalNotifyCompletion INotifyCompletion"
  },
  "api/System.Runtime.CompilerServices.ValueTaskAwaiter.html": {
    "href": "api/System.Runtime.CompilerServices.ValueTaskAwaiter.html",
    "title": "Struct ValueTaskAwaiter | CodeFactory for Windows",
    "keywords": "Struct ValueTaskAwaiter Implements ICriticalNotifyCompletion INotifyCompletion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Runtime.CompilerServices Assembly: System.Threading.Tasks.Extensions.dll Syntax public readonly struct ValueTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description bool Methods GetResult() Declaration public void GetResult() OnCompleted(Action) Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation UnsafeOnCompleted(Action) Declaration public void UnsafeOnCompleted(Action continuation) Parameters Type Name Description Action continuation Implements ICriticalNotifyCompletion INotifyCompletion"
  },
  "api/System.Runtime.CompilerServices.html": {
    "href": "api/System.Runtime.CompilerServices.html",
    "title": "Namespace System.Runtime.CompilerServices | CodeFactory for Windows",
    "keywords": "Namespace System.Runtime.CompilerServices Classes AsyncIteratorStateMachineAttribute Indicates whether a method is an asynchronous iterator. AsyncMethodBuilderAttribute EnumeratorCancellationAttribute Unsafe Contains generic, low-level functionality for manipulating pointers. Structs AsyncIteratorMethodBuilder Represents a builder for asynchronous iterators. AsyncValueTaskMethodBuilder AsyncValueTaskMethodBuilder<TResult> ConfiguredAsyncDisposable Provides a type that can be used to configure how awaits on an IAsyncDisposable are performed. ConfiguredCancelableAsyncEnumerable<T> Provides an awaitable async enumerable that enables cancelable iteration and configured awaits. ConfiguredCancelableAsyncEnumerable<T>.Enumerator Provides an awaitable async enumerator that enables cancelable iteration and configured awaits. ConfiguredValueTaskAwaitable ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter ConfiguredValueTaskAwaitable<TResult> ConfiguredValueTaskAwaitable<TResult>.ConfiguredValueTaskAwaiter ValueTaskAwaiter ValueTaskAwaiter<TResult>"
  },
  "api/System.Runtime.InteropServices.MemoryMarshal.html": {
    "href": "api/System.Runtime.InteropServices.MemoryMarshal.html",
    "title": "Class MemoryMarshal | CodeFactory for Windows",
    "keywords": "Class MemoryMarshal Inheritance object MemoryMarshal Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Runtime.InteropServices Assembly: System.Memory.dll Syntax public static class MemoryMarshal Methods AsBytes<T>(ReadOnlySpan<T>) Declaration public static ReadOnlySpan<byte> AsBytes<T>(ReadOnlySpan<T> span) where T : struct Parameters Type Name Description ReadOnlySpan<T> span Returns Type Description ReadOnlySpan<byte> Type Parameters Name Description T AsBytes<T>(Span<T>) Declaration public static Span<byte> AsBytes<T>(Span<T> span) where T : struct Parameters Type Name Description Span<T> span Returns Type Description Span<byte> Type Parameters Name Description T AsMemory<T>(ReadOnlyMemory<T>) Declaration public static Memory<T> AsMemory<T>(ReadOnlyMemory<T> memory) Parameters Type Name Description ReadOnlyMemory<T> memory Returns Type Description Memory<T> Type Parameters Name Description T Cast<TFrom, TTo>(ReadOnlySpan<TFrom>) Declaration public static ReadOnlySpan<TTo> Cast<TFrom, TTo>(ReadOnlySpan<TFrom> span) where TFrom : struct where TTo : struct Parameters Type Name Description ReadOnlySpan<TFrom> span Returns Type Description ReadOnlySpan<TTo> Type Parameters Name Description TFrom TTo Cast<TFrom, TTo>(Span<TFrom>) Declaration public static Span<TTo> Cast<TFrom, TTo>(Span<TFrom> span) where TFrom : struct where TTo : struct Parameters Type Name Description Span<TFrom> span Returns Type Description Span<TTo> Type Parameters Name Description TFrom TTo CreateFromPinnedArray<T>(T[], int, int) Declaration public static Memory<T> CreateFromPinnedArray<T>(T[] array, int start, int length) Parameters Type Name Description T[] array int start int length Returns Type Description Memory<T> Type Parameters Name Description T GetReference<T>(ReadOnlySpan<T>) Declaration public static ref T GetReference<T>(ReadOnlySpan<T> span) Parameters Type Name Description ReadOnlySpan<T> span Returns Type Description T Type Parameters Name Description T GetReference<T>(Span<T>) Declaration public static ref T GetReference<T>(Span<T> span) Parameters Type Name Description Span<T> span Returns Type Description T Type Parameters Name Description T Read<T>(ReadOnlySpan<byte>) Declaration public static T Read<T>(ReadOnlySpan<byte> source) where T : struct Parameters Type Name Description ReadOnlySpan<byte> source Returns Type Description T Type Parameters Name Description T ToEnumerable<T>(ReadOnlyMemory<T>) Declaration public static IEnumerable<T> ToEnumerable<T>(ReadOnlyMemory<T> memory) Parameters Type Name Description ReadOnlyMemory<T> memory Returns Type Description IEnumerable<T> Type Parameters Name Description T TryGetArray<T>(ReadOnlyMemory<T>, out ArraySegment<T>) Declaration public static bool TryGetArray<T>(ReadOnlyMemory<T> memory, out ArraySegment<T> segment) Parameters Type Name Description ReadOnlyMemory<T> memory ArraySegment<T> segment Returns Type Description bool Type Parameters Name Description T TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T>, out TManager) Declaration public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager) where TManager : MemoryManager<T> Parameters Type Name Description ReadOnlyMemory<T> memory TManager manager Returns Type Description bool Type Parameters Name Description T TManager TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T>, out TManager, out int, out int) Declaration public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager, out int start, out int length) where TManager : MemoryManager<T> Parameters Type Name Description ReadOnlyMemory<T> memory TManager manager int start int length Returns Type Description bool Type Parameters Name Description T TManager TryGetString(ReadOnlyMemory<char>, out string, out int, out int) Declaration public static bool TryGetString(ReadOnlyMemory<char> memory, out string text, out int start, out int length) Parameters Type Name Description ReadOnlyMemory<char> memory string text int start int length Returns Type Description bool TryRead<T>(ReadOnlySpan<byte>, out T) Declaration public static bool TryRead<T>(ReadOnlySpan<byte> source, out T value) where T : struct Parameters Type Name Description ReadOnlySpan<byte> source T value Returns Type Description bool Type Parameters Name Description T TryWrite<T>(Span<byte>, ref T) Declaration public static bool TryWrite<T>(Span<byte> destination, ref T value) where T : struct Parameters Type Name Description Span<byte> destination T value Returns Type Description bool Type Parameters Name Description T Write<T>(Span<byte>, ref T) Declaration public static void Write<T>(Span<byte> destination, ref T value) where T : struct Parameters Type Name Description Span<byte> destination T value Type Parameters Name Description T"
  },
  "api/System.Runtime.InteropServices.SequenceMarshal.html": {
    "href": "api/System.Runtime.InteropServices.SequenceMarshal.html",
    "title": "Class SequenceMarshal | CodeFactory for Windows",
    "keywords": "Class SequenceMarshal Inheritance object SequenceMarshal Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Runtime.InteropServices Assembly: System.Memory.dll Syntax public static class SequenceMarshal Methods TryGetArray<T>(ReadOnlySequence<T>, out ArraySegment<T>) Declaration public static bool TryGetArray<T>(ReadOnlySequence<T> sequence, out ArraySegment<T> segment) Parameters Type Name Description ReadOnlySequence<T> sequence ArraySegment<T> segment Returns Type Description bool Type Parameters Name Description T TryGetReadOnlyMemory<T>(ReadOnlySequence<T>, out ReadOnlyMemory<T>) Declaration public static bool TryGetReadOnlyMemory<T>(ReadOnlySequence<T> sequence, out ReadOnlyMemory<T> memory) Parameters Type Name Description ReadOnlySequence<T> sequence ReadOnlyMemory<T> memory Returns Type Description bool Type Parameters Name Description T TryGetReadOnlySequenceSegment<T>(ReadOnlySequence<T>, out ReadOnlySequenceSegment<T>, out int, out ReadOnlySequenceSegment<T>, out int) Declaration public static bool TryGetReadOnlySequenceSegment<T>(ReadOnlySequence<T> sequence, out ReadOnlySequenceSegment<T> startSegment, out int startIndex, out ReadOnlySequenceSegment<T> endSegment, out int endIndex) Parameters Type Name Description ReadOnlySequence<T> sequence ReadOnlySequenceSegment<T> startSegment int startIndex ReadOnlySequenceSegment<T> endSegment int endIndex Returns Type Description bool Type Parameters Name Description T"
  },
  "api/System.Runtime.InteropServices.html": {
    "href": "api/System.Runtime.InteropServices.html",
    "title": "Namespace System.Runtime.InteropServices | CodeFactory for Windows",
    "keywords": "Namespace System.Runtime.InteropServices Classes MemoryMarshal SequenceMarshal"
  },
  "api/System.SequencePosition.html": {
    "href": "api/System.SequencePosition.html",
    "title": "Struct SequencePosition | CodeFactory for Windows",
    "keywords": "Struct SequencePosition Implements IEquatable<SequencePosition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System Assembly: System.Memory.dll Syntax public readonly struct SequencePosition : IEquatable<SequencePosition> Constructors SequencePosition(object, int) Declaration public SequencePosition(object @object, int integer) Parameters Type Name Description object object int integer Methods Equals(SequencePosition) Declaration public bool Equals(SequencePosition other) Parameters Type Name Description SequencePosition other Returns Type Description bool Implements IEquatable<T>"
  },
  "api/System.Span-1.Enumerator.html": {
    "href": "api/System.Span-1.Enumerator.html",
    "title": "Struct Span<T>.Enumerator | CodeFactory for Windows",
    "keywords": "Struct Span<T>.Enumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System Assembly: System.Memory.dll Syntax public ref struct Span<T>.Enumerator Properties Current Declaration public ref T Current { get; } Property Value Type Description T Methods MoveNext() Declaration public bool MoveNext() Returns Type Description bool"
  },
  "api/System.Span-1.html": {
    "href": "api/System.Span-1.html",
    "title": "Struct Span<T> | CodeFactory for Windows",
    "keywords": "Struct Span<T> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System Assembly: System.Memory.dll Syntax public readonly ref struct Span<T> Type Parameters Name Description T Constructors Span(void*, int) Declaration [CLSCompliant(false)] public Span(void* pointer, int length) Parameters Type Name Description void* pointer int length Span(T[]) Declaration public Span(T[] array) Parameters Type Name Description T[] array Span(T[], int, int) Declaration public Span(T[] array, int start, int length) Parameters Type Name Description T[] array int start int length Properties Empty Declaration public static Span<T> Empty { get; } Property Value Type Description Span<T> IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description bool this[int] Declaration public ref T this[int index] { get; } Parameters Type Name Description int index Property Value Type Description T Length Declaration public int Length { get; } Property Value Type Description int Methods Clear() Declaration public void Clear() CopyTo(Span<T>) Declaration public void CopyTo(Span<T> destination) Parameters Type Name Description Span<T> destination Fill(T) Declaration public void Fill(T value) Parameters Type Name Description T value GetEnumerator() Declaration public Span<T>.Enumerator GetEnumerator() Returns Type Description Span<T>.Enumerator Slice(int) Declaration public Span<T> Slice(int start) Parameters Type Name Description int start Returns Type Description Span<T> Slice(int, int) Declaration public Span<T> Slice(int start, int length) Parameters Type Name Description int start int length Returns Type Description Span<T> ToArray() Declaration public T[] ToArray() Returns Type Description T[] ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() TryCopyTo(Span<T>) Declaration public bool TryCopyTo(Span<T> destination) Parameters Type Name Description Span<T> destination Returns Type Description bool Operators operator ==(Span<T>, Span<T>) Declaration public static bool operator ==(Span<T> left, Span<T> right) Parameters Type Name Description Span<T> left Span<T> right Returns Type Description bool implicit operator Span<T>(ArraySegment<T>) Declaration public static implicit operator Span<T>(ArraySegment<T> segment) Parameters Type Name Description ArraySegment<T> segment Returns Type Description Span<T> implicit operator ReadOnlySpan<T>(Span<T>) Declaration public static implicit operator ReadOnlySpan<T>(Span<T> span) Parameters Type Name Description Span<T> span Returns Type Description ReadOnlySpan<T> implicit operator Span<T>(T[]) Declaration public static implicit operator Span<T>(T[] array) Parameters Type Name Description T[] array Returns Type Description Span<T> operator !=(Span<T>, Span<T>) Declaration public static bool operator !=(Span<T> left, Span<T> right) Parameters Type Name Description Span<T> left Span<T> right Returns Type Description bool Extension Methods MemoryExtensions.BinarySearch<T>(Span<T>, IComparable<T>) MemoryExtensions.BinarySearch<T, TComparable>(Span<T>, TComparable) MemoryExtensions.BinarySearch<T, TComparer>(Span<T>, T, TComparer) MemoryExtensions.Overlaps<T>(Span<T>, ReadOnlySpan<T>) MemoryExtensions.Overlaps<T>(Span<T>, ReadOnlySpan<T>, out int) MemoryExtensions.Reverse<T>(Span<T>)"
  },
  "api/System.Text.Encodings.Web.HtmlEncoder.html": {
    "href": "api/System.Text.Encodings.Web.HtmlEncoder.html",
    "title": "Class HtmlEncoder | CodeFactory for Windows",
    "keywords": "Class HtmlEncoder Represents an HTML character encoding. Inheritance object TextEncoder HtmlEncoder Inherited Members TextEncoder.Encode(string) TextEncoder.Encode(TextWriter, string) TextEncoder.Encode(TextWriter, string, int, int) TextEncoder.Encode(TextWriter, char[], int, int) TextEncoder.EncodeUtf8(ReadOnlySpan<byte>, Span<byte>, out int, out int, bool) TextEncoder.Encode(ReadOnlySpan<char>, Span<char>, out int, out int, bool) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Encodings.Web Assembly: System.Text.Encodings.Web.dll Syntax public abstract class HtmlEncoder : TextEncoder Constructors HtmlEncoder() Initializes a new instance of the HtmlEncoder class. Declaration protected HtmlEncoder() Properties Default Gets a built-in instance of the HtmlEncoder class. Declaration public static HtmlEncoder Default { get; } Property Value Type Description HtmlEncoder A built-in instance of the HtmlEncoder class. Methods Create(TextEncoderSettings) Creates a new instance of the HtmlEncoder class with the specified settings. Declaration public static HtmlEncoder Create(TextEncoderSettings settings) Parameters Type Name Description TextEncoderSettings settings Settings that control how the HtmlEncoder instance encodes, primarily which characters to encode. Returns Type Description HtmlEncoder A new instance of the HtmlEncoder class. Exceptions Type Condition ArgumentNullException settings is null. Create(params UnicodeRange[]) Creates a new instance of the HtmlEncoder class that specifies characters the encoder is allowed to not encode. Declaration public static HtmlEncoder Create(params UnicodeRange[] allowedRanges) Parameters Type Name Description UnicodeRange[] allowedRanges The set of characters that the encoder is allowed to not encode. Returns Type Description HtmlEncoder A new instance of the HtmlEncoder class. Exceptions Type Condition ArgumentNullException allowedRanges is null."
  },
  "api/System.Text.Encodings.Web.JavaScriptEncoder.html": {
    "href": "api/System.Text.Encodings.Web.JavaScriptEncoder.html",
    "title": "Class JavaScriptEncoder | CodeFactory for Windows",
    "keywords": "Class JavaScriptEncoder Represents a JavaScript character encoding. Inheritance object TextEncoder JavaScriptEncoder Inherited Members TextEncoder.Encode(string) TextEncoder.Encode(TextWriter, string) TextEncoder.Encode(TextWriter, string, int, int) TextEncoder.Encode(TextWriter, char[], int, int) TextEncoder.EncodeUtf8(ReadOnlySpan<byte>, Span<byte>, out int, out int, bool) TextEncoder.Encode(ReadOnlySpan<char>, Span<char>, out int, out int, bool) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Encodings.Web Assembly: System.Text.Encodings.Web.dll Syntax public abstract class JavaScriptEncoder : TextEncoder Constructors JavaScriptEncoder() Initializes a new instance of the JavaScriptEncoder class. Declaration protected JavaScriptEncoder() Properties Default Gets a built-in instance of the JavaScriptEncoder class. Declaration public static JavaScriptEncoder Default { get; } Property Value Type Description JavaScriptEncoder A built-in instance of the JavaScriptEncoder class. UnsafeRelaxedJsonEscaping Gets a built-in JavaScript encoder instance that is less strict about what is encoded. Declaration public static JavaScriptEncoder UnsafeRelaxedJsonEscaping { get; } Property Value Type Description JavaScriptEncoder A JavaScript encoder instance. Methods Create(TextEncoderSettings) Creates a new instance of JavaScriptEncoder class with the specified settings. Declaration public static JavaScriptEncoder Create(TextEncoderSettings settings) Parameters Type Name Description TextEncoderSettings settings Settings that control how the JavaScriptEncoder instance encodes, primarily which characters to encode. Returns Type Description JavaScriptEncoder A new instance of the JavaScriptEncoder class. Exceptions Type Condition ArgumentNullException settings is null. Create(params UnicodeRange[]) Creates a new instance of the JavaScriptEncoder class that specifies characters the encoder is allowed to not encode. Declaration public static JavaScriptEncoder Create(params UnicodeRange[] allowedRanges) Parameters Type Name Description UnicodeRange[] allowedRanges The set of characters that the encoder is allowed to not encode. Returns Type Description JavaScriptEncoder A new instance of the JavaScriptEncoder class. Exceptions Type Condition ArgumentNullException allowedRanges is null."
  },
  "api/System.Text.Encodings.Web.TextEncoder.html": {
    "href": "api/System.Text.Encodings.Web.TextEncoder.html",
    "title": "Class TextEncoder | CodeFactory for Windows",
    "keywords": "Class TextEncoder The base class of web encoders. Inheritance object TextEncoder HtmlEncoder JavaScriptEncoder UrlEncoder Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Encodings.Web Assembly: System.Text.Encodings.Web.dll Syntax public abstract class TextEncoder Constructors TextEncoder() Initializes a new instance of the TextEncoder class. Declaration protected TextEncoder() Methods Encode(TextWriter, char[], int, int) Encodes characters from an array and writes them to a TextWriter object. Declaration public virtual void Encode(TextWriter output, char[] value, int startIndex, int characterCount) Parameters Type Name Description TextWriter output The stream to which to write the encoded text. char[] value The array of characters to encode. int startIndex The array index of the first character to encode. int characterCount The number of characters in the array to encode. Exceptions Type Condition ArgumentNullException output is null. ArgumentException The TryEncodeUnicodeScalar(int, char*, int, out int) method failed. The encoder does not implement System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter correctly. ArgumentNullException value is null. ArgumentOutOfRangeException startIndex is out of range. ArgumentOutOfRangeException characterCount is out of range. Encode(TextWriter, string) Encodes the specified string to a TextWriter object. Declaration public void Encode(TextWriter output, string value) Parameters Type Name Description TextWriter output The stream to which to write the encoded text. string value The string to encode. Encode(TextWriter, string, int, int) Encodes a substring and writes it to a TextWriter object. Declaration public virtual void Encode(TextWriter output, string value, int startIndex, int characterCount) Parameters Type Name Description TextWriter output The stream to which to write the encoded text. string value The string whose substring is to be encoded. int startIndex The index where the substring starts. int characterCount The number of characters in the substring. Exceptions Type Condition ArgumentNullException output is null. ArgumentException The TryEncodeUnicodeScalar(int, char*, int, out int) method failed. The encoder does not implement System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter correctly. ArgumentNullException value is null. ArgumentOutOfRangeException startIndex is out of range. ArgumentOutOfRangeException characterCount is out of range. Encode(ReadOnlySpan<char>, Span<char>, out int, out int, bool) Encodes the supplied characters. Declaration public virtual OperationStatus Encode(ReadOnlySpan<char> source, Span<char> destination, out int charsConsumed, out int charsWritten, bool isFinalBlock = true) Parameters Type Name Description ReadOnlySpan<char> source A source buffer containing the characters to encode. Span<char> destination The destination buffer to which the encoded form of source will be written. int charsConsumed The number of characters consumed from the source buffer. int charsWritten The number of characters written to the destination buffer. bool isFinalBlock true to indicate there is no further source data that needs to be encoded; otherwise, false. Returns Type Description OperationStatus An enumeration value that describes the result of the encoding operation. Encode(string) Encodes the supplied string and returns the encoded text as a new string. Declaration public virtual string Encode(string value) Parameters Type Name Description string value The string to encode. Returns Type Description string The encoded string. Exceptions Type Condition ArgumentNullException value is null. ArgumentException The TryEncodeUnicodeScalar(int, char*, int, out int) method failed. The encoder does not implement System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter correctly. EncodeUtf8(ReadOnlySpan<byte>, Span<byte>, out int, out int, bool) Encodes the supplied UTF-8 text. Declaration public virtual OperationStatus EncodeUtf8(ReadOnlySpan<byte> utf8Source, Span<byte> utf8Destination, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true) Parameters Type Name Description ReadOnlySpan<byte> utf8Source A source buffer containing the UTF-8 text to encode. Span<byte> utf8Destination The destination buffer to which the encoded form of utf8Source will be written. int bytesConsumed The number of bytes consumed from the utf8Source buffer. int bytesWritten The number of bytes written to the utf8Destination buffer. bool isFinalBlock true to indicate there is no further source data that needs to be encoded; otherwise, false. Returns Type Description OperationStatus A status code that describes the result of the encoding operation."
  },
  "api/System.Text.Encodings.Web.TextEncoderSettings.html": {
    "href": "api/System.Text.Encodings.Web.TextEncoderSettings.html",
    "title": "Class TextEncoderSettings | CodeFactory for Windows",
    "keywords": "Class TextEncoderSettings Represents a filter that allows only certain Unicode code points. Inheritance object TextEncoderSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Encodings.Web Assembly: System.Text.Encodings.Web.dll Syntax public class TextEncoderSettings Constructors TextEncoderSettings() Instantiates an empty filter (allows no code points through by default). Declaration public TextEncoderSettings() TextEncoderSettings(TextEncoderSettings) Instantiates a filter by cloning the allowed list of another TextEncoderSettings object. Declaration public TextEncoderSettings(TextEncoderSettings other) Parameters Type Name Description TextEncoderSettings other The other TextEncoderSettings object to be cloned. TextEncoderSettings(params UnicodeRange[]) Instantiates a filter where only the character ranges specified by allowedRanges are allowed by the filter. Declaration public TextEncoderSettings(params UnicodeRange[] allowedRanges) Parameters Type Name Description UnicodeRange[] allowedRanges The allowed character ranges. Exceptions Type Condition ArgumentNullException allowedRanges is null. Methods AllowCharacter(char) Allows the character specified by character through the filter. Declaration public virtual void AllowCharacter(char character) Parameters Type Name Description char character The allowed character. AllowCharacters(params char[]) Allows all characters specified by characters through the filter. Declaration public virtual void AllowCharacters(params char[] characters) Parameters Type Name Description char[] characters The allowed characters. Exceptions Type Condition ArgumentNullException characters is null. AllowCodePoints(IEnumerable<int>) Allows all code points specified by codePoints. Declaration public virtual void AllowCodePoints(IEnumerable<int> codePoints) Parameters Type Name Description IEnumerable<int> codePoints The allowed code points. Exceptions Type Condition ArgumentNullException codePoints is null. AllowRange(UnicodeRange) Allows all characters specified by range through the filter. Declaration public virtual void AllowRange(UnicodeRange range) Parameters Type Name Description UnicodeRange range The range of characters to be allowed. Exceptions Type Condition ArgumentNullException range is null. AllowRanges(params UnicodeRange[]) Allows all characters specified by ranges through the filter. Declaration public virtual void AllowRanges(params UnicodeRange[] ranges) Parameters Type Name Description UnicodeRange[] ranges The ranges of characters to be allowed. Exceptions Type Condition ArgumentNullException ranges is null. Clear() Resets this object by disallowing all characters. Declaration public virtual void Clear() ForbidCharacter(char) Disallows the character character through the filter. Declaration public virtual void ForbidCharacter(char character) Parameters Type Name Description char character The disallowed character. ForbidCharacters(params char[]) Disallows all characters specified by characters through the filter. Declaration public virtual void ForbidCharacters(params char[] characters) Parameters Type Name Description char[] characters The disallowed characters. Exceptions Type Condition ArgumentNullException characters is null. ForbidRange(UnicodeRange) Disallows all characters specified by range through the filter. Declaration public virtual void ForbidRange(UnicodeRange range) Parameters Type Name Description UnicodeRange range The range of characters to be disallowed. Exceptions Type Condition ArgumentNullException range is null. ForbidRanges(params UnicodeRange[]) Disallows all characters specified by ranges through the filter. Declaration public virtual void ForbidRanges(params UnicodeRange[] ranges) Parameters Type Name Description UnicodeRange[] ranges The ranges of characters to be disallowed. Exceptions Type Condition ArgumentNullException ranges is null. GetAllowedCodePoints() Gets an enumerator of all allowed code points. Declaration public virtual IEnumerable<int> GetAllowedCodePoints() Returns Type Description IEnumerable<int> The enumerator of allowed code points."
  },
  "api/System.Text.Encodings.Web.UrlEncoder.html": {
    "href": "api/System.Text.Encodings.Web.UrlEncoder.html",
    "title": "Class UrlEncoder | CodeFactory for Windows",
    "keywords": "Class UrlEncoder Represents a URL character encoding. Inheritance object TextEncoder UrlEncoder Inherited Members TextEncoder.Encode(string) TextEncoder.Encode(TextWriter, string) TextEncoder.Encode(TextWriter, string, int, int) TextEncoder.Encode(TextWriter, char[], int, int) TextEncoder.EncodeUtf8(ReadOnlySpan<byte>, Span<byte>, out int, out int, bool) TextEncoder.Encode(ReadOnlySpan<char>, Span<char>, out int, out int, bool) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Encodings.Web Assembly: System.Text.Encodings.Web.dll Syntax public abstract class UrlEncoder : TextEncoder Constructors UrlEncoder() Initializes a new instance of the UrlEncoder class. Declaration protected UrlEncoder() Properties Default Gets a built-in instance of the UrlEncoder class. Declaration public static UrlEncoder Default { get; } Property Value Type Description UrlEncoder A built-in instance of the UrlEncoder class. Methods Create(TextEncoderSettings) Creates a new instance of UrlEncoder class with the specified settings. Declaration public static UrlEncoder Create(TextEncoderSettings settings) Parameters Type Name Description TextEncoderSettings settings Settings that control how the UrlEncoder instance encodes, primarily which characters to encode. Returns Type Description UrlEncoder A new instance of the UrlEncoder class. Exceptions Type Condition ArgumentNullException settings is null. Create(params UnicodeRange[]) Creates a new instance of the UrlEncoder class that specifies characters the encoder is allowed to not encode. Declaration public static UrlEncoder Create(params UnicodeRange[] allowedRanges) Parameters Type Name Description UnicodeRange[] allowedRanges The set of characters that the encoder is allowed to not encode. Returns Type Description UrlEncoder A new instance of the UrlEncoder class. Exceptions Type Condition ArgumentNullException allowedRanges is null."
  },
  "api/System.Text.Encodings.Web.html": {
    "href": "api/System.Text.Encodings.Web.html",
    "title": "Namespace System.Text.Encodings.Web | CodeFactory for Windows",
    "keywords": "Namespace System.Text.Encodings.Web Classes HtmlEncoder Represents an HTML character encoding. JavaScriptEncoder Represents a JavaScript character encoding. TextEncoder The base class of web encoders. TextEncoderSettings Represents a filter that allows only certain Unicode code points. UrlEncoder Represents a URL character encoding."
  },
  "api/System.Text.Json.JsonCommentHandling.html": {
    "href": "api/System.Text.Json.JsonCommentHandling.html",
    "title": "Enum JsonCommentHandling | CodeFactory for Windows",
    "keywords": "Enum JsonCommentHandling Defines how the Utf8JsonReader struct handles comments. Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public enum JsonCommentHandling : byte Fields Name Description Allow Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values. Disallow Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a JsonException is thrown. This is the default value. Skip Allows comments within the JSON input and ignores them. The Utf8JsonReader behaves as if no comments are present."
  },
  "api/System.Text.Json.JsonDocument.html": {
    "href": "api/System.Text.Json.JsonDocument.html",
    "title": "Class JsonDocument | CodeFactory for Windows",
    "keywords": "Class JsonDocument Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values. Inheritance object JsonDocument Implements IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public sealed class JsonDocument : IDisposable Properties RootElement Gets the root element of this JSON document. Declaration public JsonElement RootElement { get; } Property Value Type Description JsonElement A JsonElement representing the value of the document. Methods Dispose() Releases the resources used by this JsonDocument instance. Declaration public void Dispose() Parse(ReadOnlySequence<byte>, JsonDocumentOptions) Parses a sequence as UTF-8-encoded text representing a single JSON byte value into a JsonDocument. Declaration public static JsonDocument Parse(ReadOnlySequence<byte> utf8Json, JsonDocumentOptions options = default) Parameters Type Name Description ReadOnlySequence<byte> utf8Json The JSON text to parse. JsonDocumentOptions options Options to control the reader behavior during parsing. Returns Type Description JsonDocument A JsonDocument representation of the JSON value. Exceptions Type Condition JsonException utf8Json does not represent a valid single JSON value. ArgumentException options contains unsupported options. Parse(Stream, JsonDocumentOptions) Parses a Stream as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion. Declaration public static JsonDocument Parse(Stream utf8Json, JsonDocumentOptions options = default) Parameters Type Name Description Stream utf8Json The JSON data to parse. JsonDocumentOptions options Options to control the reader behavior during parsing. Returns Type Description JsonDocument A JsonDocument representation of the JSON value. Exceptions Type Condition JsonException utf8Json does not represent a valid single JSON value. ArgumentException options contains unsupported options. Parse(ReadOnlyMemory<byte>, JsonDocumentOptions) Parses memory as UTF-8-encoded text representing a single JSON byte value into a JsonDocument. Declaration public static JsonDocument Parse(ReadOnlyMemory<byte> utf8Json, JsonDocumentOptions options = default) Parameters Type Name Description ReadOnlyMemory<byte> utf8Json The JSON text to parse. JsonDocumentOptions options Options to control the reader behavior during parsing. Returns Type Description JsonDocument A JsonDocument representation of the JSON value. Exceptions Type Condition JsonException utf8Json does not represent a valid single JSON value. ArgumentException options contains unsupported options. Parse(ReadOnlyMemory<char>, JsonDocumentOptions) Parses text representing a single JSON value into a JsonDocument. Declaration public static JsonDocument Parse(ReadOnlyMemory<char> json, JsonDocumentOptions options = default) Parameters Type Name Description ReadOnlyMemory<char> json The JSON text to parse. JsonDocumentOptions options Options to control the reader behavior during parsing. Returns Type Description JsonDocument A JsonDocument representation of the JSON value. Exceptions Type Condition JsonException json does not represent a valid single JSON value. ArgumentException options contains unsupported options. Parse(string, JsonDocumentOptions) Parses text representing a single JSON string value into a JsonDocument. Declaration public static JsonDocument Parse(string json, JsonDocumentOptions options = default) Parameters Type Name Description string json The JSON text to parse. JsonDocumentOptions options Options to control the reader behavior during parsing. Returns Type Description JsonDocument A JsonDocument representation of the JSON value. Exceptions Type Condition JsonException json does not represent a valid single JSON value. ArgumentException options contains unsupported options. ParseAsync(Stream, JsonDocumentOptions, CancellationToken) Parses a Stream as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion. Declaration public static Task<JsonDocument> ParseAsync(Stream utf8Json, JsonDocumentOptions options = default, CancellationToken cancellationToken = default) Parameters Type Name Description Stream utf8Json The JSON data to parse. JsonDocumentOptions options Options to control the reader behavior during parsing. CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description Task<JsonDocument> A task to produce a JsonDocument representation of the JSON value. Exceptions Type Condition JsonException utf8Json does not represent a valid single JSON value. ArgumentException options contains unsupported options. ParseValue(ref Utf8JsonReader) Parses one JSON value (including objects or arrays) from the provided reader. Declaration public static JsonDocument ParseValue(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader The reader to read. Returns Type Description JsonDocument A JsonDocument representing the value (and nested values) read from the reader. Exceptions Type Condition ArgumentException <code class=\"paramref\">reader</code> contains unsupported options. -or- The current reader token does not start or represent a value. JsonException A value could not be read from the reader. TryParseValue(ref Utf8JsonReader, out JsonDocument?) Attempts to parse one JSON value (including objects or arrays) from the provided reader. Declaration public static bool TryParseValue(ref Utf8JsonReader reader, out JsonDocument? document) Parameters Type Name Description Utf8JsonReader reader The reader to read. JsonDocument document When the method returns, contains the parsed document. Returns Type Description bool true if a value was read and parsed into a JsonDocument; false if the reader ran out of data while parsing. All other situations result in an exception being thrown. Exceptions Type Condition ArgumentException <code class=\"paramref\">reader</code> contains unsupported options. -or- The current reader token does not start or represent a value. JsonException A value could not be read from the reader. WriteTo(Utf8JsonWriter) Writes the document to the provided writer as a JSON value. Declaration public void WriteTo(Utf8JsonWriter writer) Parameters Type Name Description Utf8JsonWriter writer The writer to which to write the document. Exceptions Type Condition ArgumentNullException The writer parameter is null. InvalidOperationException The ValueKind of this RootElement would result in invalid JSON. ObjectDisposedException The parent JsonDocument has been disposed. Implements IDisposable Extension Methods JsonSerializer.Deserialize(JsonDocument, Type, JsonSerializerOptions?) JsonSerializer.Deserialize(JsonDocument, Type, JsonSerializerContext) JsonSerializer.Deserialize<TValue>(JsonDocument, JsonSerializerOptions?) JsonSerializer.Deserialize<TValue>(JsonDocument, JsonTypeInfo<TValue>)"
  },
  "api/System.Text.Json.JsonDocumentOptions.html": {
    "href": "api/System.Text.Json.JsonDocumentOptions.html",
    "title": "Struct JsonDocumentOptions | CodeFactory for Windows",
    "keywords": "Struct JsonDocumentOptions Provides the ability for the user to define custom behavior when parsing JSON to create a JsonDocument. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public struct JsonDocumentOptions Properties AllowTrailingCommas Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read. Declaration public bool AllowTrailingCommas { readonly get; set; } Property Value Type Description bool true if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, false. Default is false CommentHandling Gets or sets a value that determines how the JsonDocument handles comments when reading through the JSON data. Declaration public JsonCommentHandling CommentHandling { readonly get; set; } Property Value Type Description JsonCommentHandling One of the enumeration values that indicates how comments are handled. Exceptions Type Condition ArgumentOutOfRangeException The comment handling enum is set to a value that is not supported (or not within the JsonCommentHandling enum range). MaxDepth Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64. Declaration public int MaxDepth { readonly get; set; } Property Value Type Description int The maximum depth allowed when parsing JSON data. Exceptions Type Condition ArgumentOutOfRangeException The max depth is set to a negative value."
  },
  "api/System.Text.Json.JsonElement.ArrayEnumerator.html": {
    "href": "api/System.Text.Json.JsonElement.ArrayEnumerator.html",
    "title": "Struct JsonElement.ArrayEnumerator | CodeFactory for Windows",
    "keywords": "Struct JsonElement.ArrayEnumerator Represents an enumerator for the contents of a JSON array. Implements IEnumerable<JsonElement> IEnumerable IEnumerator<JsonElement> IDisposable IEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public struct JsonElement.ArrayEnumerator : IEnumerable<JsonElement>, IEnumerable, IEnumerator<JsonElement>, IDisposable, IEnumerator Properties Current Gets the element in the collection at the current position of the enumerator. Declaration public JsonElement Current { get; } Property Value Type Description JsonElement The element in the collection at the current position of the enumerator. Methods Dispose() Releases the resources used by this JsonElement.ArrayEnumerator instance. Declaration public void Dispose() GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public JsonElement.ArrayEnumerator GetEnumerator() Returns Type Description JsonElement.ArrayEnumerator An enumerator that can be used to iterate through the array. MoveNext() Advances the enumerator to the next element of the collection. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. Declaration public void Reset() Implements IEnumerable<T> IEnumerable IEnumerator<T> IDisposable IEnumerator"
  },
  "api/System.Text.Json.JsonElement.ObjectEnumerator.html": {
    "href": "api/System.Text.Json.JsonElement.ObjectEnumerator.html",
    "title": "Struct JsonElement.ObjectEnumerator | CodeFactory for Windows",
    "keywords": "Struct JsonElement.ObjectEnumerator Represents an enumerator for the properties of a JSON object. Implements IEnumerable<JsonProperty> IEnumerable IEnumerator<JsonProperty> IDisposable IEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public struct JsonElement.ObjectEnumerator : IEnumerable<JsonProperty>, IEnumerable, IEnumerator<JsonProperty>, IDisposable, IEnumerator Properties Current Gets the element in the collection at the current position of the enumerator. Declaration public JsonProperty Current { get; } Property Value Type Description JsonProperty The element in the collection at the current position of the enumerator. Methods Dispose() Releases the resources used by this JsonElement.ObjectEnumerator instance. Declaration public void Dispose() GetEnumerator() Returns an enumerator that iterates the properties of an object. Declaration public JsonElement.ObjectEnumerator GetEnumerator() Returns Type Description JsonElement.ObjectEnumerator An enumerator that can be used to iterate through the object. MoveNext() Advances the enumerator to the next element of the collection. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. Declaration public void Reset() Implements IEnumerable<T> IEnumerable IEnumerator<T> IDisposable IEnumerator"
  },
  "api/System.Text.Json.JsonElement.html": {
    "href": "api/System.Text.Json.JsonElement.html",
    "title": "Struct JsonElement | CodeFactory for Windows",
    "keywords": "Struct JsonElement Represents a specific JSON value within a JsonDocument. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public readonly struct JsonElement Properties this[int] Gets the value at the specified index if the current value is an Array. Declaration public JsonElement this[int index] { get; } Parameters Type Name Description int index The item index. Property Value Type Description JsonElement The value at the specified index. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Array. IndexOutOfRangeException index is not in the range [0, GetArrayLength()()). ObjectDisposedException The parent JsonDocument has been disposed. ValueKind Gets the type of the current JSON value. Declaration public JsonValueKind ValueKind { get; } Property Value Type Description JsonValueKind The type of the current JSON value. Exceptions Type Condition ObjectDisposedException The parent JsonDocument has been disposed. Methods Clone() Gets a JsonElement that can be safely stored beyond the lifetime of the original JsonDocument. Declaration public JsonElement Clone() Returns Type Description JsonElement A JsonElement that can be safely stored beyond the lifetime of the original JsonDocument. EnumerateArray() Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement. Declaration public JsonElement.ArrayEnumerator EnumerateArray() Returns Type Description JsonElement.ArrayEnumerator An enumerator to enumerate the values in the JSON array represented by this JsonElement. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Array. ObjectDisposedException The parent JsonDocument has been disposed. EnumerateObject() Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement. Declaration public JsonElement.ObjectEnumerator EnumerateObject() Returns Type Description JsonElement.ObjectEnumerator An enumerator to enumerate the properties in the JSON object represented by this JsonElement. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Object. ObjectDisposedException The parent JsonDocument has been disposed. GetArrayLength() Gets the number of values contained within the current array value. Declaration public int GetArrayLength() Returns Type Description int The number of values contained within the current array value. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Array. ObjectDisposedException The parent JsonDocument has been disposed. GetBoolean() Gets the value of the element as a bool. Declaration public bool GetBoolean() Returns Type Description bool The value of the element as a bool. Exceptions Type Condition InvalidOperationException This value's ValueKind is neither True nor False. ObjectDisposedException The parent JsonDocument has been disposed. GetByte() Gets the current JSON number as a byte. Declaration public byte GetByte() Returns Type Description byte The current JSON number as a byte. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as a byte. ObjectDisposedException The parent JsonDocument has been disposed. GetBytesFromBase64() Gets the value of the element as a byte array. Declaration public byte[] GetBytesFromBase64() Returns Type Description byte[] The value decoded as a byte array. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. FormatException The value is not encoded as Base64 text and hence cannot be decoded to bytes. ObjectDisposedException The parent JsonDocument has been disposed. GetDateTime() Gets the value of the element as a DateTime. Declaration public DateTime GetDateTime() Returns Type Description DateTime The value of the element as a DateTime. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. FormatException The value cannot be read as a DateTime. ObjectDisposedException The parent JsonDocument has been disposed. GetDateTimeOffset() Gets the value of the element as a DateTimeOffset. Declaration public DateTimeOffset GetDateTimeOffset() Returns Type Description DateTimeOffset The value of the element as a DateTimeOffset. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. FormatException The value cannot be read as a DateTimeOffset. ObjectDisposedException The parent JsonDocument has been disposed. GetDecimal() Gets the current JSON number as a decimal. Declaration public decimal GetDecimal() Returns Type Description decimal The current JSON number as a decimal. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as a decimal. ObjectDisposedException The parent JsonDocument has been disposed. GetDouble() Gets the current JSON number as a double. Declaration public double GetDouble() Returns Type Description double The current JSON number as a double. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as a double. ObjectDisposedException The parent JsonDocument has been disposed. GetGuid() Gets the value of the element as a Guid. Declaration public Guid GetGuid() Returns Type Description Guid The value of the element as a Guid. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. FormatException The value cannot be represented as a Guid. ObjectDisposedException The parent JsonDocument has been disposed. GetInt16() Gets the current JSON number as an short. Declaration public short GetInt16() Returns Type Description short The current JSON number as an short. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as an short. ObjectDisposedException The parent JsonDocument has been disposed. GetInt32() Gets the current JSON number as an int. Declaration public int GetInt32() Returns Type Description int The current JSON number as an int. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as an int. ObjectDisposedException The parent JsonDocument has been disposed. GetInt64() Gets the current JSON number as an long. Declaration public long GetInt64() Returns Type Description long The current JSON number as an long. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as a long. ObjectDisposedException The parent JsonDocument has been disposed. GetProperty(ReadOnlySpan<byte>) Gets a JsonElement representing the value of a required property identified by utf8PropertyName. Declaration public JsonElement GetProperty(ReadOnlySpan<byte> utf8PropertyName) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return. Returns Type Description JsonElement A JsonElement representing the value of the requested property. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Object. KeyNotFoundException No property was found with the requested name. ObjectDisposedException The parent JsonDocument has been disposed. GetProperty(ReadOnlySpan<char>) Gets a JsonElement representing the value of a required property identified by propertyName. Declaration public JsonElement GetProperty(ReadOnlySpan<char> propertyName) Parameters Type Name Description ReadOnlySpan<char> propertyName The name of the property whose value is to be returned. Returns Type Description JsonElement A JsonElement representing the value of the requested property. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Object. KeyNotFoundException No property was found with the requested name. ObjectDisposedException The parent JsonDocument has been disposed. GetProperty(string) Gets a JsonElement representing the value of a required property identified by propertyName. Declaration public JsonElement GetProperty(string propertyName) Parameters Type Name Description string propertyName The name of the property whose value is to be returned. Returns Type Description JsonElement A JsonElement representing the value of the requested property. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Object. KeyNotFoundException No property was found with the requested name. ArgumentNullException propertyName is null. ObjectDisposedException The parent JsonDocument has been disposed. GetRawText() Gets a string that represents the original input data backing this value. Declaration public string GetRawText() Returns Type Description string The original input data backing this value. Exceptions Type Condition ObjectDisposedException The parent JsonDocument has been disposed. GetSByte() Gets the current JSON number as an sbyte. Declaration [CLSCompliant(false)] public sbyte GetSByte() Returns Type Description sbyte The current JSON number as an sbyte. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as an sbyte. ObjectDisposedException The parent JsonDocument has been disposed. GetSingle() Gets the current JSON number as a float. Declaration public float GetSingle() Returns Type Description float The current JSON number as a float. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as a float. ObjectDisposedException The parent JsonDocument has been disposed. GetString() Gets the value of the element as a string. Declaration public string? GetString() Returns Type Description string The value of the element as a string. Exceptions Type Condition InvalidOperationException This value's ValueKind is neither String nor Null. ObjectDisposedException The parent JsonDocument has been disposed. GetUInt16() Gets the current JSON number as a ushort. Declaration [CLSCompliant(false)] public ushort GetUInt16() Returns Type Description ushort The current JSON number as a ushort. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as a ushort. ObjectDisposedException The parent JsonDocument has been disposed. GetUInt32() Gets the current JSON number as a uint. Declaration [CLSCompliant(false)] public uint GetUInt32() Returns Type Description uint The current JSON number as a uint. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as a uint. ObjectDisposedException The parent JsonDocument has been disposed. GetUInt64() Gets the current JSON number as a ulong. Declaration [CLSCompliant(false)] public ulong GetUInt64() Returns Type Description ulong The current JSON number as a ulong. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. FormatException The value cannot be represented as a ulong. ObjectDisposedException The parent JsonDocument has been disposed. ParseValue(ref Utf8JsonReader) Parses one JSON value (including objects or arrays) from the provided reader. Declaration public static JsonElement ParseValue(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader The reader to read. Returns Type Description JsonElement A JsonElement representing the value (and nested values) read from the reader. Exceptions Type Condition ArgumentException reader is using unsupported options. ArgumentException The current reader token does not start or represent a value. JsonException A value could not be read from the reader. ToString() Gets a string representation for the current value appropriate to the value type. Declaration public override string ToString() Returns Type Description string A string representation for the current value appropriate to the value type. Overrides ValueType.ToString() Exceptions Type Condition ObjectDisposedException The parent JsonDocument has been disposed. TryGetByte(out byte) Attempts to represent the current JSON number as a byte. Declaration public bool TryGetByte(out byte value) Parameters Type Name Description byte value When the method returns, contains the byte equivalent of the current JSON number if the conversion succeeded. Returns Type Description bool true if the number can be represented as a byte; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryGetBytesFromBase64(out byte[]?) Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded. Declaration public bool TryGetBytesFromBase64(out byte[]? value) Parameters Type Name Description byte[] value If the method succeeds, contains the decoded binary representation of the Base64 text. Returns Type Description bool true if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. ObjectDisposedException The parent JsonDocument has been disposed. TryGetDateTime(out DateTime) Attempts to represent the current JSON string as a DateTime. Declaration public bool TryGetDateTime(out DateTime value) Parameters Type Name Description DateTime value When this method returns, contains the date and time value equivalent to the current JSON string. Returns Type Description bool true if the string can be represented as a DateTime; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. ObjectDisposedException The parent JsonDocument has been disposed. TryGetDateTimeOffset(out DateTimeOffset) Attempts to represent the current JSON string as a DateTimeOffset. Declaration public bool TryGetDateTimeOffset(out DateTimeOffset value) Parameters Type Name Description DateTimeOffset value When this method returns, contains the date and time equivalent to the current JSON string. Returns Type Description bool true if the string can be represented as a DateTimeOffset; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. ObjectDisposedException The parent JsonDocument has been disposed. TryGetDecimal(out decimal) Attempts to represent the current JSON number as a decimal. Declaration public bool TryGetDecimal(out decimal value) Parameters Type Name Description decimal value When this method returns, contains the decimal equivalent of the current JSON number. Returns Type Description bool true if the number can be represented as a decimal; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryGetDouble(out double) Attempts to represent the current JSON number as a double. Declaration public bool TryGetDouble(out double value) Parameters Type Name Description double value When this method returns, contains a double-precision floating point value equivalent to the current JSON number. Returns Type Description bool true if the number can be represented as a double; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryGetGuid(out Guid) Attempts to represent the current JSON string as a Guid. Declaration public bool TryGetGuid(out Guid value) Parameters Type Name Description Guid value When this method returns, contains the GUID equivalent to the current JSON string. Returns Type Description bool true if the string can be represented as a Guid; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. ObjectDisposedException The parent JsonDocument has been disposed. TryGetInt16(out short) Attempts to represent the current JSON number as an short. Declaration public bool TryGetInt16(out short value) Parameters Type Name Description short value When the method returns, contains the 16-bit integer equivalent of the current JSON number if the conversion succeeded. Returns Type Description bool true if the number can be represented as an short; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryGetInt32(out int) Attempts to represent the current JSON number as an int. Declaration public bool TryGetInt32(out int value) Parameters Type Name Description int value When this method returns, contains the 32-bit integer value equivalent to the current JSON number. Returns Type Description bool true if the number can be represented as an int; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryGetInt64(out long) Attempts to represent the current JSON number as a long. Declaration public bool TryGetInt64(out long value) Parameters Type Name Description long value When this method returns, contains the 64-bit integer value equivalent to the current JSON number. Returns Type Description bool true if the number can be represented as a long; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryGetProperty(ReadOnlySpan<byte>, out JsonElement) Looks for a property named utf8PropertyName in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the value argument. Declaration public bool TryGetProperty(ReadOnlySpan<byte> utf8PropertyName, out JsonElement value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return. JsonElement value Receives the value of the located property. Returns Type Description bool true if the property was found; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Object. ObjectDisposedException The parent JsonDocument has been disposed. TryGetProperty(ReadOnlySpan<char>, out JsonElement) Looks for a property named propertyName in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the value argument. Declaration public bool TryGetProperty(ReadOnlySpan<char> propertyName, out JsonElement value) Parameters Type Name Description ReadOnlySpan<char> propertyName The name of the property to find. JsonElement value When this method returns, contains the value of the specified property. Returns Type Description bool true if the property was found; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Object. ObjectDisposedException The parent JsonDocument has been disposed. TryGetProperty(string, out JsonElement) Looks for a property named propertyName in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the value argument. Declaration public bool TryGetProperty(string propertyName, out JsonElement value) Parameters Type Name Description string propertyName The name of the property to find. JsonElement value When this method returns, contains the value of the specified property. Returns Type Description bool true if the property was found; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Object. ArgumentNullException propertyName is null. ObjectDisposedException The parent JsonDocument has been disposed. TryGetSByte(out sbyte) Attempts to represent the current JSON number as an sbyte. Declaration [CLSCompliant(false)] public bool TryGetSByte(out sbyte value) Parameters Type Name Description sbyte value When the method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded. Returns Type Description bool true if the number can be represented as an sbyte; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryGetSingle(out float) Attempts to represent the current JSON number as a float. Declaration public bool TryGetSingle(out float value) Parameters Type Name Description float value When this method returns, contains the single-precision floating point value equivalent to the current JSON number. Returns Type Description bool true if the number can be represented as a float; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryGetUInt16(out ushort) Attempts to represent the current JSON number as a ushort. Declaration [CLSCompliant(false)] public bool TryGetUInt16(out ushort value) Parameters Type Name Description ushort value When the method returns, contains the unsigned 16-bit integer equivalent of the current JSON number if the conversion succeeded. Returns Type Description bool true if the number can be represented as a ushort; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryGetUInt32(out uint) Attempts to represent the current JSON number as a uint. Declaration [CLSCompliant(false)] public bool TryGetUInt32(out uint value) Parameters Type Name Description uint value When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number. Returns Type Description bool true if the number can be represented as a uint; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryGetUInt64(out ulong) Attempts to represent the current JSON number as a ulong. Declaration [CLSCompliant(false)] public bool TryGetUInt64(out ulong value) Parameters Type Name Description ulong value When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number. Returns Type Description bool true if the number can be represented as a ulong; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not Number. ObjectDisposedException The parent JsonDocument has been disposed. TryParseValue(ref Utf8JsonReader, out JsonElement?) Attempts to parse one JSON value (including objects or arrays) from the provided reader. Declaration public static bool TryParseValue(ref Utf8JsonReader reader, out JsonElement? element) Parameters Type Name Description Utf8JsonReader reader The reader to read. JsonElement? element Receives the parsed element. Returns Type Description bool true if a value was read and parsed into a JsonElement; false if the reader ran out of data while parsing. All other situations result in an exception being thrown. Exceptions Type Condition ArgumentException reader is using unsupported options. ArgumentException The current reader token does not start or represent a value. JsonException A value could not be read from the reader. ValueEquals(ReadOnlySpan<byte>) Compares the text represented by a UTF8-encoded byte span to the string value of this element. Declaration public bool ValueEquals(ReadOnlySpan<byte> utf8Text) Parameters Type Name Description ReadOnlySpan<byte> utf8Text The UTF-8 encoded text to compare against. Returns Type Description bool true if the string value of this element has the same UTF-8 encoding as utf8Text; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. ValueEquals(ReadOnlySpan<char>) Compares a specified read-only character span to the string value of this element. Declaration public bool ValueEquals(ReadOnlySpan<char> text) Parameters Type Name Description ReadOnlySpan<char> text The text to compare against. Returns Type Description bool true if the string value of this element matches text; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. ValueEquals(string?) Compares a specified string to the string value of this element. Declaration public bool ValueEquals(string? text) Parameters Type Name Description string text The text to compare against. Returns Type Description bool true if the string value of this element matches text; otherwise, false. Exceptions Type Condition InvalidOperationException This value's ValueKind is not String. WriteTo(Utf8JsonWriter) Writes the element to the specified writer as a JSON value. Declaration public void WriteTo(Utf8JsonWriter writer) Parameters Type Name Description Utf8JsonWriter writer The writer to which to write the element. Exceptions Type Condition ArgumentNullException The writer parameter is null. InvalidOperationException The ValueKind of this value is Undefined. ObjectDisposedException The parent JsonDocument has been disposed. Extension Methods JsonSerializer.Deserialize(JsonElement, Type, JsonSerializerOptions?) JsonSerializer.Deserialize(JsonElement, Type, JsonSerializerContext) JsonSerializer.Deserialize<TValue>(JsonElement, JsonSerializerOptions?) JsonSerializer.Deserialize<TValue>(JsonElement, JsonTypeInfo<TValue>)"
  },
  "api/System.Text.Json.JsonEncodedText.html": {
    "href": "api/System.Text.Json.JsonEncodedText.html",
    "title": "Struct JsonEncodedText | CodeFactory for Windows",
    "keywords": "Struct JsonEncodedText Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON. Implements IEquatable<JsonEncodedText> Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public readonly struct JsonEncodedText : IEquatable<JsonEncodedText> Properties EncodedUtf8Bytes Gets the UTF-8 encoded representation of the pre-encoded JSON text. Declaration public ReadOnlySpan<byte> EncodedUtf8Bytes { get; } Property Value Type Description ReadOnlySpan<byte> The UTF-8 encoded representation of the pre-encoded JSON text. Methods Encode(ReadOnlySpan<byte>, JavaScriptEncoder?) Encodes a UTF-8 text value as a JSON string. Declaration public static JsonEncodedText Encode(ReadOnlySpan<byte> utf8Value, JavaScriptEncoder? encoder = null) Parameters Type Name Description ReadOnlySpan<byte> utf8Value The UTF-8 encoded text to convert to JSON encoded text. JavaScriptEncoder encoder The encoder to use when escaping the string, or null to use the default encoder. Returns Type Description JsonEncodedText The encoded JSON text. Exceptions Type Condition ArgumentException <code class=\"paramref\">utf8Value</code> is too large. -or- utf8Value contains invalid UTF-8 bytes. Encode(ReadOnlySpan<char>, JavaScriptEncoder?) Encodes a specified text value as a JSON string. Declaration public static JsonEncodedText Encode(ReadOnlySpan<char> value, JavaScriptEncoder? encoder = null) Parameters Type Name Description ReadOnlySpan<char> value The value to convert to JSON encoded text. JavaScriptEncoder encoder The encoder to use when escaping the string, or null to use the default encoder. Returns Type Description JsonEncodedText The encoded JSON text. Exceptions Type Condition ArgumentException <code class=\"paramref\">value</code> is too large. -or- value contains invalid UTF-16 characters. Encode(string, JavaScriptEncoder?) Encodes the string text value as a JSON string. Declaration public static JsonEncodedText Encode(string value, JavaScriptEncoder? encoder = null) Parameters Type Name Description string value The value to convert to JSON encoded text. JavaScriptEncoder encoder The encoder to use when escaping the string, or null to use the default encoder. Returns Type Description JsonEncodedText The encoded JSON text. Exceptions Type Condition ArgumentNullException value is null. ArgumentException <code class=\"paramref\">value</code> is too large. -or- value contains invalid UTF-16 characters. Equals(object?) Determines whether this instance and a specified object, which must also be a JsonEncodedText instance, have the same value. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare to this instance. Returns Type Description bool true if the current instance and obj are equal; otherwise, false. Overrides ValueType.Equals(object) Equals(JsonEncodedText) Determines whether this instance and another specified JsonEncodedText instance have the same value. Declaration public bool Equals(JsonEncodedText other) Parameters Type Name Description JsonEncodedText other The object to compare to this instance. Returns Type Description bool true if this instance and other have the same value; otherwise, false. GetHashCode() Returns the hash code for this JsonEncodedText. Declaration public override int GetHashCode() Returns Type Description int The hash code for this instance. Overrides ValueType.GetHashCode() ToString() Converts the value of this instance to a string. Declaration public override string ToString() Returns Type Description string The underlying UTF-16 encoded string. Overrides ValueType.ToString() Implements IEquatable<T>"
  },
  "api/System.Text.Json.JsonException.html": {
    "href": "api/System.Text.Json.JsonException.html",
    "title": "Class JsonException | CodeFactory for Windows",
    "keywords": "Class JsonException Defines a custom exception object that is thrown when invalid JSON text is encountered, when the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object. Inheritance object Exception JsonException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public class JsonException : Exception, ISerializable, _Exception Constructors JsonException() Initializes a new instance of the JsonException class. Declaration public JsonException() JsonException(SerializationInfo, StreamingContext) Creates a new exception object with serialized data. Declaration protected JsonException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialized object data about the exception being thrown. StreamingContext context An object that contains contextual information about the source or destination. Exceptions Type Condition ArgumentNullException info is null. JsonException(string?) Initializes a new instance of the JsonException class with a specified error message. Declaration public JsonException(string? message) Parameters Type Name Description string message The context-specific error message. JsonException(string?, Exception?) Initializes a new instance of the JsonException class, with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public JsonException(string? message, Exception? innerException) Parameters Type Name Description string message The context-specific error message. Exception innerException The exception that caused the current exception. JsonException(string?, string?, long?, long?) Creates a new exception object to relay error information to the user. Declaration public JsonException(string? message, string? path, long? lineNumber, long? bytePositionInLine) Parameters Type Name Description string message The context-specific error message. string path The path where the invalid JSON was encountered. Nullable lineNumber The line number (starting at 0) at which the invalid JSON was encountered when deserializing. Nullable bytePositionInLine The byte count within the current line (starting at 0) where the invalid JSON was encountered. JsonException(string?, string?, long?, long?, Exception?) Creates a new exception object to relay error information to the user that includes a specified inner exception. Declaration public JsonException(string? message, string? path, long? lineNumber, long? bytePositionInLine, Exception? innerException) Parameters Type Name Description string message The context-specific error message. string path The path where the invalid JSON was encountered. Nullable lineNumber The line number (starting at 0) at which the invalid JSON was encountered when deserializing. Nullable bytePositionInLine The byte count (starting at 0) within the current line where the invalid JSON was encountered. Exception innerException The exception that caused the current exception. Properties BytePositionInLine Gets the zero-based number of bytes read within the current line before the exception. Declaration public long? BytePositionInLine { get; } Property Value Type Description Nullable The zero-based number of bytes read within the current line before the exception. LineNumber Gets the zero-based number of lines read before the exception. Declaration public long? LineNumber { get; } Property Value Type Description Nullable The zero-based number of lines read before the exception. Message Gets a message that describes the current exception. Declaration public override string Message { get; } Property Value Type Description string The error message that describes the current exception. Overrides Exception.Message Path Gets The path within the JSON where the exception was encountered. Declaration public string? Path { get; } Property Value Type Description string The path within the JSON where the exception was encountered. Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialized object data about the exception being thrown. StreamingContext context An object that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements ISerializable _Exception"
  },
  "api/System.Text.Json.JsonNamingPolicy.html": {
    "href": "api/System.Text.Json.JsonNamingPolicy.html",
    "title": "Class JsonNamingPolicy | CodeFactory for Windows",
    "keywords": "Class JsonNamingPolicy Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format. Inheritance object JsonNamingPolicy Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public abstract class JsonNamingPolicy Constructors JsonNamingPolicy() Initializes a new instance of JsonNamingPolicy. Declaration protected JsonNamingPolicy() Properties CamelCase Gets the naming policy for camel-casing. Declaration public static JsonNamingPolicy CamelCase { get; } Property Value Type Description JsonNamingPolicy The naming policy for camel-casing. Methods ConvertName(string) When overridden in a derived class, converts the specified name according to the policy. Declaration public abstract string ConvertName(string name) Parameters Type Name Description string name The name to convert. Returns Type Description string The converted name."
  },
  "api/System.Text.Json.JsonProperty.html": {
    "href": "api/System.Text.Json.JsonProperty.html",
    "title": "Struct JsonProperty | CodeFactory for Windows",
    "keywords": "Struct JsonProperty Represents a single property for a JSON object. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public readonly struct JsonProperty Properties Name Gets the name of this property. Declaration public string Name { get; } Property Value Type Description string The name of this property. Value Gets the value of this property. Declaration public JsonElement Value { get; } Property Value Type Description JsonElement The value of this property. Methods NameEquals(ReadOnlySpan<byte>) Compares the specified UTF-8 encoded text to the name of this property. Declaration public bool NameEquals(ReadOnlySpan<byte> utf8Text) Parameters Type Name Description ReadOnlySpan<byte> utf8Text The UTF-8 encoded text to compare against. Returns Type Description bool true if the name of this property has the same UTF-8 encoding as utf8Text; otherwise, false. Exceptions Type Condition InvalidOperationException This value's Type is not PropertyName. NameEquals(ReadOnlySpan<char>) Compares the specified text as a character span to the name of this property. Declaration public bool NameEquals(ReadOnlySpan<char> text) Parameters Type Name Description ReadOnlySpan<char> text The text to compare against. Returns Type Description bool true if the name of this property matches text; otherwise, false. Exceptions Type Condition InvalidOperationException This value's Type is not PropertyName. NameEquals(string?) Compares the specified string to the name of this property. Declaration public bool NameEquals(string? text) Parameters Type Name Description string text The text to compare against. Returns Type Description bool true if the name of this property matches text; otherwise false. Exceptions Type Condition InvalidOperationException This value's Type is not PropertyName. ToString() Provides a string representation of the property for debugging purposes. Declaration public override string ToString() Returns Type Description string A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value. Overrides ValueType.ToString() WriteTo(Utf8JsonWriter) Writes the property to the provided writer as a named JSON object property. Declaration public void WriteTo(Utf8JsonWriter writer) Parameters Type Name Description Utf8JsonWriter writer The writer to which to write the property. Exceptions Type Condition ArgumentNullException writer is null. ArgumentException Name is too large to be a JSON object property. InvalidOperationException The ValueKind of this JSON property's Value would result in invalid JSON. ObjectDisposedException The parent JsonDocument has been disposed."
  },
  "api/System.Text.Json.JsonReaderOptions.html": {
    "href": "api/System.Text.Json.JsonReaderOptions.html",
    "title": "Struct JsonReaderOptions | CodeFactory for Windows",
    "keywords": "Struct JsonReaderOptions Provides the ability for the user to define custom behavior when reading JSON. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public struct JsonReaderOptions Properties AllowTrailingCommas Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read. Declaration public bool AllowTrailingCommas { readonly get; set; } Property Value Type Description bool true if an extra comma is allowed; otherwise, false. CommentHandling Gets or sets a value that determines how the Utf8JsonReader handles comments when reading through the JSON data. Declaration public JsonCommentHandling CommentHandling { readonly get; set; } Property Value Type Description JsonCommentHandling One of the enumeration values that indicates how comments are handled. Exceptions Type Condition ArgumentOutOfRangeException The property is being set to a value that is not a member of the JsonCommentHandling enumeration. MaxDepth Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64. Declaration public int MaxDepth { readonly get; set; } Property Value Type Description int The maximum depth allowed when reading JSON. Exceptions Type Condition ArgumentOutOfRangeException The maximum depth is being set to a negative value."
  },
  "api/System.Text.Json.JsonReaderState.html": {
    "href": "api/System.Text.Json.JsonReaderState.html",
    "title": "Struct JsonReaderState | CodeFactory for Windows",
    "keywords": "Struct JsonReaderState Defines an opaque type that holds and saves all the relevant state information, which must be provided to the Utf8JsonReader to continue reading after processing incomplete data. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public struct JsonReaderState Constructors JsonReaderState(JsonReaderOptions) Constructs a new JsonReaderState instance. Declaration public JsonReaderState(JsonReaderOptions options = default) Parameters Type Name Description JsonReaderOptions options Defines the customized behavior of the Utf8JsonReader that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the Utf8JsonReader follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64. Exceptions Type Condition ArgumentException The maximum depth is set to a non-positive value (< 0). Properties Options Gets the custom behavior to use when reading JSON data using the Utf8JsonReader struct that may deviate from strict adherence to the JSON specification, which is the default behavior. Declaration public JsonReaderOptions Options { get; } Property Value Type Description JsonReaderOptions The custom behavior to use when reading JSON data."
  },
  "api/System.Text.Json.JsonSerializer.html": {
    "href": "api/System.Text.Json.JsonSerializer.html",
    "title": "Class JsonSerializer | CodeFactory for Windows",
    "keywords": "Class JsonSerializer Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types. Inheritance object JsonSerializer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public static class JsonSerializer Methods Deserialize(Stream, Type, JsonSerializerOptions?) Reads the UTF-8 encoded text representing a single JSON value into a returnType. The Stream will be read to completion. Declaration public static object? Deserialize(Stream utf8Json, Type returnType, JsonSerializerOptions? options = null) Parameters Type Name Description Stream utf8Json JSON data to parse. Type returnType The type of the object to convert to and return. JsonSerializerOptions options Options to control the behavior during reading. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException utf8Json or returnType is null. JsonException The JSON is invalid, the returnType is not compatible with the JSON, or there is remaining data in the Stream. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. Deserialize(Stream, Type, JsonSerializerContext) Reads the UTF-8 encoded text representing a single JSON value into a returnType. The Stream will be read to completion. Declaration public static object? Deserialize(Stream utf8Json, Type returnType, JsonSerializerContext context) Parameters Type Name Description Stream utf8Json JSON data to parse. Type returnType The type of the object to convert to and return. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException utf8Json, returnType, or context is null. JsonException The JSON is invalid, the returnType is not compatible with the JSON, or there is remaining data in the Stream. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method on the provided context did not return a compatible JsonTypeInfo for returnType. Deserialize(ReadOnlySpan<byte>, Type, JsonSerializerOptions?) Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type. Declaration public static object? Deserialize(ReadOnlySpan<byte> utf8Json, Type returnType, JsonSerializerOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> utf8Json The JSON text to parse. Type returnType The type of the object to convert to and return. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException returnType is null. JsonException The JSON is invalid. -or- returnType is not compatible with the JSON. -or- There is remaining data in the span beyond a single JSON value. NotSupportedException There is no compatible for returnType or its serializable members. Deserialize(ReadOnlySpan<byte>, Type, JsonSerializerContext) Parses the UTF-8 encoded text representing a single JSON value into a returnType. Declaration public static object? Deserialize(ReadOnlySpan<byte> utf8Json, Type returnType, JsonSerializerContext context) Parameters Type Name Description ReadOnlySpan<byte> utf8Json JSON text to parse. Type returnType The type of the object to convert to and return. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException returnType is null. JsonException The JSON is invalid, returnType is not compatible with the JSON, or there is remaining data in the Stream. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method on the provided context did not return a compatible JsonTypeInfo for returnType. Deserialize(ReadOnlySpan<char>, Type, JsonSerializerOptions?) Parses the text representing a single JSON value into an instance of a specified type. Declaration public static object? Deserialize(ReadOnlySpan<char> json, Type returnType, JsonSerializerOptions? options = null) Parameters Type Name Description ReadOnlySpan<char> json The JSON text to parse. Type returnType The type of the object to convert to and return. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException returnType is null. JsonException The JSON is invalid. -or- returnType is not compatible with the JSON. -or- There is remaining data in the span beyond a single JSON value. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. Deserialize(ReadOnlySpan<char>, Type, JsonSerializerContext) Parses the text representing a single JSON value into a returnType. Declaration public static object? Deserialize(ReadOnlySpan<char> json, Type returnType, JsonSerializerContext context) Parameters Type Name Description ReadOnlySpan<char> json JSON text to parse. Type returnType The type of the object to convert to and return. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException <code class=\"paramref\">json</code> or <code class=\"paramref\">returnType</code> is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>. -or- context is null. JsonException The JSON is invalid. -or- returnType is not compatible with the JSON. -or- There is remaining data in the string beyond a single JSON value. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. Deserialize(string, Type, JsonSerializerOptions?) Parses the text representing a single JSON value into an instance of a specified type. Declaration public static object? Deserialize(string json, Type returnType, JsonSerializerOptions? options = null) Parameters Type Name Description string json The JSON text to parse. Type returnType The type of the object to convert to and return. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException json or returnType is null. JsonException The JSON is invalid. -or- TValue is not compatible with the JSON. -or- There is remaining data in the string beyond a single JSON value. NotSupportedException There is no compatible for returnType or its serializable members. Deserialize(string, Type, JsonSerializerContext) Parses the text representing a single JSON value into a returnType. Declaration public static object? Deserialize(string json, Type returnType, JsonSerializerContext context) Parameters Type Name Description string json JSON text to parse. Type returnType The type of the object to convert to and return. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException <code class=\"paramref\">json</code> or <code class=\"paramref\">returnType</code> is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>. -or- context is null. JsonException The JSON is invalid. -or- returnType is not compatible with the JSON. -or- There is remaining data in the string beyond a single JSON value. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. Deserialize(JsonDocument, Type, JsonSerializerOptions?) Converts the JsonDocument representing a single JSON value into a returnType. Declaration public static object? Deserialize(this JsonDocument document, Type returnType, JsonSerializerOptions? options = null) Parameters Type Name Description JsonDocument document The JsonDocument to convert. Type returnType The type of the object to convert to and return. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException document or returnType is null. JsonException returnType is not compatible with the JSON. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. Deserialize(JsonDocument, Type, JsonSerializerContext) Converts the JsonDocument representing a single JSON value into a returnType. Declaration public static object? Deserialize(this JsonDocument document, Type returnType, JsonSerializerContext context) Parameters Type Name Description JsonDocument document The JsonDocument to convert. Type returnType The type of the object to convert to and return. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException <code class=\"paramref\">document</code> is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>. -or- returnType is null. -or- context is null. JsonException The JSON is invalid. -or- returnType is not compatible with the JSON. -or- There is remaining data in the string beyond a single JSON value. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. Deserialize(JsonElement, Type, JsonSerializerOptions?) Converts the JsonElement representing a single JSON value into a returnType. Declaration public static object? Deserialize(this JsonElement element, Type returnType, JsonSerializerOptions? options = null) Parameters Type Name Description JsonElement element The JsonElement to convert. Type returnType The type of the object to convert to and return. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException returnType is null. JsonException returnType is not compatible with the JSON. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. Deserialize(JsonElement, Type, JsonSerializerContext) Converts the JsonElement representing a single JSON value into a returnType. Declaration public static object? Deserialize(this JsonElement element, Type returnType, JsonSerializerContext context) Parameters Type Name Description JsonElement element The JsonElement to convert. Type returnType The type of the object to convert to and return. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException <code class=\"paramref\">returnType</code> is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>. -or- context is null. JsonException The JSON is invalid. -or- returnType is not compatible with the JSON. -or- There is remaining data in the string beyond a single JSON value. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. Deserialize(JsonNode?, Type, JsonSerializerOptions?) Converts the JsonNode representing a single JSON value into a returnType. Declaration public static object? Deserialize(this JsonNode? node, Type returnType, JsonSerializerOptions? options = null) Parameters Type Name Description JsonNode node The JsonNode to convert. Type returnType The type of the object to convert to and return. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition JsonException returnType is not compatible with the JSON. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. Deserialize(JsonNode?, Type, JsonSerializerContext) Converts the JsonNode representing a single JSON value into a returnType. Declaration public static object? Deserialize(this JsonNode? node, Type returnType, JsonSerializerContext context) Parameters Type Name Description JsonNode node The JsonNode to convert. Type returnType The type of the object to convert to and return. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException <code class=\"paramref\">returnType</code> is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>. -or- context is null. JsonException The JSON is invalid. -or- returnType is not compatible with the JSON. -or- There is remaining data in the string beyond a single JSON value. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. Deserialize(ref Utf8JsonReader, Type, JsonSerializerOptions?) Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of a specified type. Declaration public static object? Deserialize(ref Utf8JsonReader reader, Type returnType, JsonSerializerOptions? options = null) Parameters Type Name Description Utf8JsonReader reader The reader to read the JSON from. Type returnType The type of the object to convert to and return. JsonSerializerOptions options Options to control the serializer behavior during reading. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException returnType is null. JsonException The JSON is invalid. -or- returnType is not compatible with the JSON. -or- A value could not be read from the reader. ArgumentException reader is using unsupported options. NotSupportedException There is no compatible for returnType or its serializable members. Deserialize(ref Utf8JsonReader, Type, JsonSerializerContext) Reads one JSON value (including objects or arrays) from the provided reader into a returnType. Declaration public static object? Deserialize(ref Utf8JsonReader reader, Type returnType, JsonSerializerContext context) Parameters Type Name Description Utf8JsonReader reader The reader to read. Type returnType The type of the object to convert to and return. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description object A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException returnType or context is null. JsonException The JSON is invalid, returnType is not compatible with the JSON, or a value could not be read from the reader. ArgumentException reader is using unsupported options. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method on the provided context did not return a compatible JsonTypeInfo for returnType. DeserializeAsync(Stream, Type, JsonSerializerOptions?, CancellationToken) Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion. Declaration public static ValueTask<object?> DeserializeAsync(Stream utf8Json, Type returnType, JsonSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream utf8Json The JSON data to parse. Type returnType The type of the object to convert to and return. JsonSerializerOptions options Options to control the behavior during reading. CancellationToken cancellationToken A cancellation token that may be used to cancel the read operation. Returns Type Description ValueTask<object> A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException utf8Json or returnType is null. JsonException The JSON is invalid. -or- TValue is not compatible with the JSON. -or- There is remaining data in the stream. NotSupportedException There is no compatible for returnType or its serializable members. DeserializeAsync(Stream, Type, JsonSerializerContext, CancellationToken) Reads the UTF-8 encoded text representing a single JSON value into a returnType. The Stream will be read to completion. Declaration public static ValueTask<object?> DeserializeAsync(Stream utf8Json, Type returnType, JsonSerializerContext context, CancellationToken cancellationToken = default) Parameters Type Name Description Stream utf8Json JSON data to parse. Type returnType The type of the object to convert to and return. JsonSerializerContext context A metadata provider for serializable types. CancellationToken cancellationToken The CancellationToken that can be used to cancel the read operation. Returns Type Description ValueTask<object> A returnType representation of the JSON value. Exceptions Type Condition ArgumentNullException utf8Json, returnType, or context is null. JsonException The JSON is invalid, the returnType is not compatible with the JSON, or there is remaining data in the Stream. NotSupportedException There is no compatible JsonConverter for returnType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method on the provided context did not return a compatible JsonTypeInfo for returnType. DeserializeAsyncEnumerable<TValue>(Stream, JsonSerializerOptions?, CancellationToken) Wraps the UTF-8 encoded text into an IAsyncEnumerable<T> that can be used to deserialize root-level JSON arrays in a streaming manner. Declaration public static IAsyncEnumerable<TValue?> DeserializeAsyncEnumerable<TValue>(Stream utf8Json, JsonSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream utf8Json JSON data to parse. JsonSerializerOptions options Options to control the behavior during reading. CancellationToken cancellationToken The CancellationToken which may be used to cancel the read operation. Returns Type Description IAsyncEnumerable<TValue> An IAsyncEnumerable<T> representation of the provided JSON array. Type Parameters Name Description TValue The element type to deserialize asynchronously. Exceptions Type Condition ArgumentNullException utf8Json is null. DeserializeAsync<TValue>(Stream, JsonSerializerOptions?, CancellationToken) Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion. Declaration public static ValueTask<TValue?> DeserializeAsync<TValue>(Stream utf8Json, JsonSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream utf8Json The JSON data to parse. JsonSerializerOptions options Options to control the behavior during reading. CancellationToken cancellationToken A token that may be used to cancel the read operation. Returns Type Description ValueTask<TValue> A TValue representation of the JSON value. Type Parameters Name Description TValue The target type of the JSON value. Exceptions Type Condition JsonException The JSON is invalid. -or- TValue is not compatible with the JSON. -or- There is remaining data in the stream. NotSupportedException There is no compatible for TValue or its serializable members. ArgumentNullException utf8Jsonis null. DeserializeAsync<TValue>(Stream, JsonTypeInfo<TValue>, CancellationToken) Reads the UTF-8 encoded text representing a single JSON value into a TValue. The Stream will be read to completion. Declaration public static ValueTask<TValue?> DeserializeAsync<TValue>(Stream utf8Json, JsonTypeInfo<TValue> jsonTypeInfo, CancellationToken cancellationToken = default) Parameters Type Name Description Stream utf8Json JSON data to parse. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. CancellationToken cancellationToken The CancellationToken which may be used to cancel the read operation. Returns Type Description ValueTask<TValue> A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition ArgumentNullException utf8Json or jsonTypeInfo is null. JsonException The JSON is invalid, TValue is not compatible with the JSON, or there is remaining data in the Stream. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(Stream, JsonSerializerOptions?) Reads the UTF-8 encoded text representing a single JSON value into a TValue. The Stream will be read to completion. Declaration public static TValue? Deserialize<TValue>(Stream utf8Json, JsonSerializerOptions? options = null) Parameters Type Name Description Stream utf8Json JSON data to parse. JsonSerializerOptions options Options to control the behavior during reading. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition ArgumentNullException utf8Json is null. JsonException The JSON is invalid, TValue is not compatible with the JSON, or there is remaining data in the Stream. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(Stream, JsonTypeInfo<TValue>) Reads the UTF-8 encoded text representing a single JSON value into a TValue. The Stream will be read to completion. Declaration public static TValue? Deserialize<TValue>(Stream utf8Json, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description Stream utf8Json JSON data to parse. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition ArgumentNullException utf8Json or jsonTypeInfo is null. JsonException The JSON is invalid, TValue is not compatible with the JSON, or there is remaining data in the Stream. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(ReadOnlySpan<byte>, JsonSerializerOptions?) Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter. Declaration public static TValue? Deserialize<TValue>(ReadOnlySpan<byte> utf8Json, JsonSerializerOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> utf8Json The JSON text to parse. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The target type of the UTF-8 encoded text. Exceptions Type Condition JsonException The JSON is invalid. -or- TValue is not compatible with the JSON. -or- There is remaining data in the span beyond a single JSON value. NotSupportedException There is no compatible for TValue or its serializable members. Deserialize<TValue>(ReadOnlySpan<byte>, JsonTypeInfo<TValue>) Parses the UTF-8 encoded text representing a single JSON value into a TValue. Declaration public static TValue? Deserialize<TValue>(ReadOnlySpan<byte> utf8Json, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description ReadOnlySpan<byte> utf8Json JSON text to parse. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition JsonException The JSON is invalid, TValue is not compatible with the JSON, or there is remaining data in the Stream. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(ReadOnlySpan<char>, JsonSerializerOptions?) Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter. Declaration public static TValue? Deserialize<TValue>(ReadOnlySpan<char> json, JsonSerializerOptions? options = null) Parameters Type Name Description ReadOnlySpan<char> json The JSON text to parse. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition JsonException The JSON is invalid. -or- TValue is not compatible with the JSON. -or- There is remaining data in the span beyond a single JSON value. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(ReadOnlySpan<char>, JsonTypeInfo<TValue>) Parses the text representing a single JSON value into a TValue. Declaration public static TValue? Deserialize<TValue>(ReadOnlySpan<char> json, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description ReadOnlySpan<char> json JSON text to parse. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition ArgumentNullException <code class=\"paramref\">json</code> is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>. -or- jsonTypeInfo is null. JsonException The JSON is invalid. -or- TValue is not compatible with the JSON. -or- There is remaining data in the string beyond a single JSON value. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(string, JsonSerializerOptions?) Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter. Declaration public static TValue? Deserialize<TValue>(string json, JsonSerializerOptions? options = null) Parameters Type Name Description string json The JSON text to parse. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The target type of the JSON value. Exceptions Type Condition ArgumentNullException json is null. JsonException The JSON is invalid. -or- TValue is not compatible with the JSON. -or- There is remaining data in the string beyond a single JSON value. NotSupportedException There is no compatible for TValue or its serializable members. Deserialize<TValue>(string, JsonTypeInfo<TValue>) Parses the text representing a single JSON value into a TValue. Declaration public static TValue? Deserialize<TValue>(string json, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description string json JSON text to parse. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition ArgumentNullException <code class=\"paramref\">json</code> is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>. -or- jsonTypeInfo is null. JsonException The JSON is invalid. -or- TValue is not compatible with the JSON. -or- There is remaining data in the string beyond a single JSON value. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(JsonDocument, JsonSerializerOptions?) Converts the JsonDocument representing a single JSON value into a TValue. Declaration public static TValue? Deserialize<TValue>(this JsonDocument document, JsonSerializerOptions? options = null) Parameters Type Name Description JsonDocument document The JsonDocument to convert. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition ArgumentNullException document is null. JsonException TValue is not compatible with the JSON. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(JsonDocument, JsonTypeInfo<TValue>) Converts the JsonDocument representing a single JSON value into a TValue. Declaration public static TValue? Deserialize<TValue>(this JsonDocument document, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description JsonDocument document The JsonDocument to convert. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition ArgumentNullException <code class=\"paramref\">document</code> is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>. -or- jsonTypeInfo is null. JsonException TValue is not compatible with the JSON. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(JsonElement, JsonSerializerOptions?) Converts the JsonElement representing a single JSON value into a TValue. Declaration public static TValue? Deserialize<TValue>(this JsonElement element, JsonSerializerOptions? options = null) Parameters Type Name Description JsonElement element The JsonElement to convert. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition JsonException TValue is not compatible with the JSON. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(JsonElement, JsonTypeInfo<TValue>) Converts the JsonElement representing a single JSON value into a TValue. Declaration public static TValue? Deserialize<TValue>(this JsonElement element, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description JsonElement element The JsonElement to convert. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition ArgumentNullException jsonTypeInfo is null. JsonException TValue is not compatible with the JSON. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(JsonNode?, JsonSerializerOptions?) Converts the JsonNode representing a single JSON value into a TValue. Declaration public static TValue? Deserialize<TValue>(this JsonNode? node, JsonSerializerOptions? options = null) Parameters Type Name Description JsonNode node The JsonNode to convert. JsonSerializerOptions options Options to control the behavior during parsing. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition JsonException TValue is not compatible with the JSON. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(JsonNode?, JsonTypeInfo<TValue>) Converts the JsonNode representing a single JSON value into a TValue. Declaration public static TValue? Deserialize<TValue>(this JsonNode? node, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description JsonNode node The JsonNode to convert. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition ArgumentNullException jsonTypeInfo is null. JsonException TValue is not compatible with the JSON. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Deserialize<TValue>(ref Utf8JsonReader, JsonSerializerOptions?) Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter. Declaration public static TValue? Deserialize<TValue>(ref Utf8JsonReader reader, JsonSerializerOptions? options = null) Parameters Type Name Description Utf8JsonReader reader The reader to read the JSON from. JsonSerializerOptions options Options to control serializer behavior during reading. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The target type of the JSON value. Exceptions Type Condition JsonException The JSON is invalid. -or- TValue is not compatible with the JSON. -or- A value could not be read from the reader. ArgumentException reader uses unsupported options. NotSupportedException There is no compatible for TValue or its serializable members. Deserialize<TValue>(ref Utf8JsonReader, JsonTypeInfo<TValue>) Reads one JSON value (including objects or arrays) from the provided reader into a TValue. Declaration public static TValue? Deserialize<TValue>(ref Utf8JsonReader reader, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description Utf8JsonReader reader The reader to read. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description TValue A TValue representation of the JSON value. Type Parameters Name Description TValue The type to deserialize the JSON value into. Exceptions Type Condition JsonException The JSON is invalid, TValue is not compatible with the JSON, or a value could not be read from the reader. ArgumentException reader is using unsupported options. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Serialize(Stream, object?, Type, JsonSerializerOptions?) Converts the provided value to UTF-8 encoded JSON text and write it to the Stream. Declaration public static void Serialize(Stream utf8Json, object? value, Type inputType, JsonSerializerOptions? options = null) Parameters Type Name Description Stream utf8Json The UTF-8 Stream to write to. object value The value to convert. Type inputType The type of the value to convert. JsonSerializerOptions options Options to control the conversion behavior. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException utf8Json or inputType is null. NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. Serialize(Stream, object?, Type, JsonSerializerContext) Converts the provided value to UTF-8 encoded JSON text and write it to the Stream. Declaration public static void Serialize(Stream utf8Json, object? value, Type inputType, JsonSerializerContext context) Parameters Type Name Description Stream utf8Json The UTF-8 Stream to write to. object value The value to convert. Type inputType The type of the value to convert. JsonSerializerContext context A metadata provider for serializable types. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException utf8Json, inputType, or context is null. NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. Serialize(object?, Type, JsonSerializerOptions?) Converts the value of a specified type into a JSON string. Declaration public static string Serialize(object? value, Type inputType, JsonSerializerOptions? options = null) Parameters Type Name Description object value The value to convert. Type inputType The type of the value to convert. JsonSerializerOptions options Options to control the conversion behavior. Returns Type Description string The JSON string representation of the value. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException inputType is null. NotSupportedException There is no compatible for inputType or its serializable members. Serialize(object?, Type, JsonSerializerContext) Converts the provided value into a string. Declaration public static string Serialize(object? value, Type inputType, JsonSerializerContext context) Parameters Type Name Description object value The value to convert. Type inputType The type of the value to convert. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description string A string representation of the value. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. ArgumentNullException inputType or context is null. Serialize(Utf8JsonWriter, object?, Type, JsonSerializerOptions?) Writes the JSON representation of the specified type to the provided writer. Declaration public static void Serialize(Utf8JsonWriter writer, object? value, Type inputType, JsonSerializerOptions? options = null) Parameters Type Name Description Utf8JsonWriter writer The JSON writer to write to. object value The value to convert and write. Type inputType The type of the value to convert. JsonSerializerOptions options Options to control serialization behavior. Exceptions Type Condition ArgumentException inputType is not compatible with value ArgumentNullException writer or inputType is null. NotSupportedException There is no compatible for inputType or its serializable members. Serialize(Utf8JsonWriter, object?, Type, JsonSerializerContext) Writes one JSON value (including objects or arrays) to the provided writer. Declaration public static void Serialize(Utf8JsonWriter writer, object? value, Type inputType, JsonSerializerContext context) Parameters Type Name Description Utf8JsonWriter writer A JSON writer to write to. object value The value to convert and write. Type inputType The type of the value to convert. JsonSerializerContext context A metadata provider for serializable types. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException writer or inputType is null. NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. SerializeAsync(Stream, object?, Type, JsonSerializerOptions?, CancellationToken) Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream. Declaration public static Task SerializeAsync(Stream utf8Json, object? value, Type inputType, JsonSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream utf8Json The UTF-8 stream to write to. object value The value to convert. Type inputType The type of the value to convert. JsonSerializerOptions options Options to control serialization behavior. CancellationToken cancellationToken A token that may be used to cancel the write operation. Returns Type Description Task A task that represents the asynchronous write operation. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException utf8Json or inputType is null. NotSupportedException There is no compatible for inputType or its serializable members. SerializeAsync(Stream, object?, Type, JsonSerializerContext, CancellationToken) Converts the provided value to UTF-8 encoded JSON text and write it to the Stream. Declaration public static Task SerializeAsync(Stream utf8Json, object? value, Type inputType, JsonSerializerContext context, CancellationToken cancellationToken = default) Parameters Type Name Description Stream utf8Json The UTF-8 Stream to write to. object value The value to convert. Type inputType The type of the value to convert. JsonSerializerContext context A metadata provider for serializable types. CancellationToken cancellationToken The CancellationToken that can be used to cancel the write operation. Returns Type Description Task A task that represents the asynchronous write operation. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException utf8Json, inputType, or context is null. NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. SerializeAsync<TValue>(Stream, TValue, JsonSerializerOptions?, CancellationToken) Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream. Declaration public static Task SerializeAsync<TValue>(Stream utf8Json, TValue value, JsonSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream utf8Json The UTF-8 stream to write to. TValue value The value to convert. JsonSerializerOptions options Options to control serialization behavior. CancellationToken cancellationToken A token that may be used to cancel the write operation. Returns Type Description Task A task that represents the asynchronous write operation. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition ArgumentNullException utf8Json is null. NotSupportedException There is no compatible for TValue or its serializable members. SerializeAsync<TValue>(Stream, TValue, JsonTypeInfo<TValue>, CancellationToken) Converts the provided value to UTF-8 encoded JSON text and write it to the Stream. Declaration public static Task SerializeAsync<TValue>(Stream utf8Json, TValue value, JsonTypeInfo<TValue> jsonTypeInfo, CancellationToken cancellationToken = default) Parameters Type Name Description Stream utf8Json The UTF-8 Stream to write to. TValue value The value to convert. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. CancellationToken cancellationToken The CancellationToken that can be used to cancel the write operation. Returns Type Description Task A task that represents the asynchronous write operation. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition ArgumentNullException utf8Json is null. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. SerializeToDocument(object?, Type, JsonSerializerOptions?) Converts the provided value into a JsonDocument. Declaration public static JsonDocument SerializeToDocument(object? value, Type inputType, JsonSerializerOptions? options = null) Parameters Type Name Description object value The value to convert. Type inputType The type of the value to convert. JsonSerializerOptions options Options to control the conversion behavior. Returns Type Description JsonDocument A JsonDocument representation of the value. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException inputType is null. NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. SerializeToDocument(object?, Type, JsonSerializerContext) Converts the provided value into a JsonDocument. Declaration public static JsonDocument SerializeToDocument(object? value, Type inputType, JsonSerializerContext context) Parameters Type Name Description object value The value to convert. Type inputType The type of the value to convert. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description JsonDocument A JsonDocument representation of the value. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. ArgumentNullException inputType or context is null. SerializeToDocument<TValue>(TValue, JsonSerializerOptions?) Converts the provided value into a JsonDocument. Declaration public static JsonDocument SerializeToDocument<TValue>(TValue value, JsonSerializerOptions? options = null) Parameters Type Name Description TValue value The value to convert. JsonSerializerOptions options Options to control the conversion behavior. Returns Type Description JsonDocument A JsonDocument representation of the JSON value. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. SerializeToDocument<TValue>(TValue, JsonTypeInfo<TValue>) Converts the provided value into a JsonDocument. Declaration public static JsonDocument SerializeToDocument<TValue>(TValue value, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description TValue value The value to convert. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description JsonDocument A JsonDocument representation of the value. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. ArgumentNullException jsonTypeInfo is null. SerializeToElement(object?, Type, JsonSerializerOptions?) Converts the provided value into a JsonDocument. Declaration public static JsonElement SerializeToElement(object? value, Type inputType, JsonSerializerOptions? options = null) Parameters Type Name Description object value The value to convert. Type inputType The type of the value to convert. JsonSerializerOptions options Options to control the conversion behavior. Returns Type Description JsonElement A JsonDocument representation of the value. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException inputType is null. NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. SerializeToElement(object?, Type, JsonSerializerContext) Converts the provided value into a JsonDocument. Declaration public static JsonElement SerializeToElement(object? value, Type inputType, JsonSerializerContext context) Parameters Type Name Description object value The value to convert. Type inputType The type of the value to convert. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description JsonElement A JsonDocument representation of the value. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. ArgumentNullException inputType or context is null. SerializeToElement<TValue>(TValue, JsonSerializerOptions?) Converts the provided value into a JsonDocument. Declaration public static JsonElement SerializeToElement<TValue>(TValue value, JsonSerializerOptions? options = null) Parameters Type Name Description TValue value The value to convert. JsonSerializerOptions options Options to control the conversion behavior. Returns Type Description JsonElement A JsonDocument representation of the JSON value. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. SerializeToElement<TValue>(TValue, JsonTypeInfo<TValue>) Converts the provided value into a JsonDocument. Declaration public static JsonElement SerializeToElement<TValue>(TValue value, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description TValue value The value to convert. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description JsonElement A JsonDocument representation of the value. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. ArgumentNullException jsonTypeInfo is null. SerializeToNode(object?, Type, JsonSerializerOptions?) Converts the provided value into a JsonNode. Declaration public static JsonNode? SerializeToNode(object? value, Type inputType, JsonSerializerOptions? options = null) Parameters Type Name Description object value The value to convert. Type inputType The type of the value to convert. JsonSerializerOptions options Options to control the conversion behavior. Returns Type Description JsonNode A JsonNode representation of the value. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException inputType is null. NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. SerializeToNode(object?, Type, JsonSerializerContext) Converts the provided value into a JsonNode. Declaration public static JsonNode? SerializeToNode(object? value, Type inputType, JsonSerializerContext context) Parameters Type Name Description object value The value to convert. Type inputType The type of the value to convert. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description JsonNode A JsonNode representation of the value. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. ArgumentNullException inputType or context is null. SerializeToNode<TValue>(TValue, JsonSerializerOptions?) Converts the provided value into a JsonNode. Declaration public static JsonNode? SerializeToNode<TValue>(TValue value, JsonSerializerOptions? options = null) Parameters Type Name Description TValue value The value to convert. JsonSerializerOptions options Options to control the conversion behavior. Returns Type Description JsonNode A JsonNode representation of the JSON value. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. SerializeToNode<TValue>(TValue, JsonTypeInfo<TValue>) Converts the provided value into a JsonNode. Declaration public static JsonNode? SerializeToNode<TValue>(TValue value, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description TValue value The value to convert. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description JsonNode A JsonNode representation of the value. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. ArgumentNullException jsonTypeInfo is null. SerializeToUtf8Bytes(object?, Type, JsonSerializerOptions?) Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes. Declaration public static byte[] SerializeToUtf8Bytes(object? value, Type inputType, JsonSerializerOptions? options = null) Parameters Type Name Description object value The value to convert. Type inputType The type of the value to convert. JsonSerializerOptions options Options to control the conversion behavior. Returns Type Description byte[] A JSON string representation of the value, encoded as UTF-8 bytes. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException inputType is null. NotSupportedException There is no compatible for inputType or its serializable members. SerializeToUtf8Bytes(object?, Type, JsonSerializerContext) Converts the provided value into a byte array. Declaration public static byte[] SerializeToUtf8Bytes(object? value, Type inputType, JsonSerializerContext context) Parameters Type Name Description object value The value to convert. Type inputType The type of the value to convert. JsonSerializerContext context A metadata provider for serializable types. Returns Type Description byte[] A UTF-8 representation of the value. Exceptions Type Condition ArgumentException inputType is not compatible with value. ArgumentNullException inputType is null. NotSupportedException There is no compatible JsonConverter for inputType or its serializable members. InvalidOperationException The GetTypeInfo(Type) method of the provided context returns null for the type to convert. SerializeToUtf8Bytes<TValue>(TValue, JsonSerializerOptions?) Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes. Declaration public static byte[] SerializeToUtf8Bytes<TValue>(TValue value, JsonSerializerOptions? options = null) Parameters Type Name Description TValue value The value to convert. JsonSerializerOptions options Options to control the conversion behavior. Returns Type Description byte[] A JSON string representation of the value, encoded as UTF-8 bytes. Type Parameters Name Description TValue The type of the value. Exceptions Type Condition NotSupportedException There is no compatible for TValue or its serializable members. SerializeToUtf8Bytes<TValue>(TValue, JsonTypeInfo<TValue>) Converts the provided value into a byte array. Declaration public static byte[] SerializeToUtf8Bytes<TValue>(TValue value, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description TValue value The value to convert. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description byte[] A UTF-8 representation of the value. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. ArgumentNullException jsonTypeInfo is null. Serialize<TValue>(Stream, TValue, JsonSerializerOptions?) Converts the provided value to UTF-8 encoded JSON text and write it to the Stream. Declaration public static void Serialize<TValue>(Stream utf8Json, TValue value, JsonSerializerOptions? options = null) Parameters Type Name Description Stream utf8Json The UTF-8 Stream to write to. TValue value The value to convert. JsonSerializerOptions options Options to control the conversion behavior. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition ArgumentNullException utf8Json is null. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Serialize<TValue>(Stream, TValue, JsonTypeInfo<TValue>) Converts the provided value to UTF-8 encoded JSON text and write it to the Stream. Declaration public static void Serialize<TValue>(Stream utf8Json, TValue value, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description Stream utf8Json The UTF-8 Stream to write to. TValue value The value to convert. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition ArgumentNullException utf8Json is null. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Serialize<TValue>(Utf8JsonWriter, TValue, JsonSerializerOptions?) Writes the JSON representation of a type specified by a generic type parameter to the provided writer. Declaration public static void Serialize<TValue>(Utf8JsonWriter writer, TValue value, JsonSerializerOptions? options = null) Parameters Type Name Description Utf8JsonWriter writer A JSON writer to write to. TValue value The value to convert and write. JsonSerializerOptions options Options to control serialization behavior. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition ArgumentNullException writer is null. NotSupportedException There is no compatible for TValue or its serializable members. Serialize<TValue>(Utf8JsonWriter, TValue, JsonTypeInfo<TValue>) Writes one JSON value (including objects or arrays) to the provided writer. Declaration public static void Serialize<TValue>(Utf8JsonWriter writer, TValue value, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description Utf8JsonWriter writer The writer to write. TValue value The value to convert and write. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition ArgumentNullException writer or jsonTypeInfo is null. NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. Serialize<TValue>(TValue, JsonSerializerOptions?) Converts the value of a type specified by a generic type parameter into a JSON string. Declaration public static string Serialize<TValue>(TValue value, JsonSerializerOptions? options = null) Parameters Type Name Description TValue value The value to convert. JsonSerializerOptions options Options to control serialization behavior. Returns Type Description string A JSON string representation of the value. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition NotSupportedException There is no compatible for TValue or its serializable members. Serialize<TValue>(TValue, JsonTypeInfo<TValue>) Converts the provided value into a string. Declaration public static string Serialize<TValue>(TValue value, JsonTypeInfo<TValue> jsonTypeInfo) Parameters Type Name Description TValue value The value to convert. JsonTypeInfo<TValue> jsonTypeInfo Metadata about the type to convert. Returns Type Description string A string representation of the value. Type Parameters Name Description TValue The type of the value to serialize. Exceptions Type Condition NotSupportedException There is no compatible JsonConverter for TValue or its serializable members. ArgumentNullException jsonTypeInfo is null."
  },
  "api/System.Text.Json.JsonSerializerDefaults.html": {
    "href": "api/System.Text.Json.JsonSerializerDefaults.html",
    "title": "Enum JsonSerializerDefaults | CodeFactory for Windows",
    "keywords": "Enum JsonSerializerDefaults Specifies scenario-based default serialization options that can be used to construct a JsonSerializerOptions instance. Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public enum JsonSerializerDefaults Fields Name Description General General-purpose option values. These are the same settings that are applied if a JsonSerializerDefaults member isn't specified. For information about the default property values that are applied, see JsonSerializerOptions properties. Web Option values appropriate to Web-based scenarios. This member implies that: - Property names are treated as case-insensitive. - \"camelCase\" name formatting should be employed. - Quoted numbers (JSON strings for number properties) are allowed."
  },
  "api/System.Text.Json.JsonSerializerOptions.html": {
    "href": "api/System.Text.Json.JsonSerializerOptions.html",
    "title": "Class JsonSerializerOptions | CodeFactory for Windows",
    "keywords": "Class JsonSerializerOptions Provides options to be used with JsonSerializer. Inheritance object JsonSerializerOptions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public sealed class JsonSerializerOptions Constructors JsonSerializerOptions() Initializes a new instance of the JsonSerializerOptions class. Declaration public JsonSerializerOptions() JsonSerializerOptions(JsonSerializerDefaults) Constructs a new JsonSerializerOptions instance with a predefined set of options determined by the specified JsonSerializerDefaults. Declaration public JsonSerializerOptions(JsonSerializerDefaults defaults) Parameters Type Name Description JsonSerializerDefaults defaults The JsonSerializerDefaults to reason about. JsonSerializerOptions(JsonSerializerOptions) Copies the options from a JsonSerializerOptions instance to a new instance. Declaration public JsonSerializerOptions(JsonSerializerOptions options) Parameters Type Name Description JsonSerializerOptions options The options instance to copy options from. Exceptions Type Condition ArgumentNullException options is null. Properties AllowTrailingCommas Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized. Declaration public bool AllowTrailingCommas { get; set; } Property Value Type Description bool true if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); false otherwise. Exceptions Type Condition InvalidOperationException This property was set after serialization or deserialization has occurred. Converters Gets the list of user-defined converters that were registered. Declaration public IList<JsonConverter> Converters { get; } Property Value Type Description IList<JsonConverter> The list of custom converters. DefaultBufferSize Gets or sets the default buffer size, in bytes, to use when creating temporary buffers. Declaration public int DefaultBufferSize { get; set; } Property Value Type Description int The default buffer size in bytes. Exceptions Type Condition ArgumentException The buffer size is less than 1. InvalidOperationException This property was set after serialization or deserialization has occurred. DefaultIgnoreCondition Specifies a condition to determine when properties with default values are ignored during serialization or deserialization. The default value is Never. Declaration public JsonIgnoreCondition DefaultIgnoreCondition { get; set; } Property Value Type Description JsonIgnoreCondition Exceptions Type Condition ArgumentException This property is set to Always. InvalidOperationException This property is set after serialization or deserialization has occurred. -or- System.Text.Json.JsonSerializerOptions.IgnoreNullValues has been set to true. These properties cannot be used together. DictionaryKeyPolicy Gets or sets the policy used to convert a IDictionary key's name to another format, such as camel-casing. Declaration public JsonNamingPolicy? DictionaryKeyPolicy { get; set; } Property Value Type Description JsonNamingPolicy The policy used to convert a IDictionary key's name to another format. Encoder Gets or sets the encoder to use when escaping strings, or null to use the default encoder. Declaration public JavaScriptEncoder? Encoder { get; set; } Property Value Type Description JavaScriptEncoder The JavaScript character encoding. IgnoreReadOnlyFields Determines whether read-only fields are ignored during serialization. A field is read-only if it is marked with the readonly keyword. The default value is false. Declaration public bool IgnoreReadOnlyFields { get; set; } Property Value Type Description bool true if read-only fields should be ignored during serialization; false otherwise. Exceptions Type Condition InvalidOperationException This property is set after serialization or deserialization has occurred. IgnoreReadOnlyProperties Gets a value that determines whether read-only properties are ignored during serialization. The default value is false. Declaration public bool IgnoreReadOnlyProperties { get; set; } Property Value Type Description bool true to ignore read-only properties during serialization; otherwise, false. Exceptions Type Condition InvalidOperationException This property was set after serialization or deserialization has occurred. IncludeFields Determines whether fields are handled during serialization and deserialization. The default value is false. Declaration public bool IncludeFields { get; set; } Property Value Type Description bool Exceptions Type Condition InvalidOperationException This property is set after serialization or deserialization has occurred. MaxDepth Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64. Declaration public int MaxDepth { get; set; } Property Value Type Description int The maximum depth allowed when serializing or deserializing JSON. Exceptions Type Condition InvalidOperationException This property was set after serialization or deserialization has occurred. ArgumentOutOfRangeException The max depth is set to a negative value. NumberHandling Specifies how number types should be handled when serializing or deserializing. Declaration public JsonNumberHandling NumberHandling { get; set; } Property Value Type Description JsonNumberHandling Exceptions Type Condition InvalidOperationException This property is set after serialization or deserialization has occurred. PropertyNameCaseInsensitive Gets or sets a value that determines whether a property's name uses a case-insensitive comparison during deserialization. The default value is false. Declaration public bool PropertyNameCaseInsensitive { get; set; } Property Value Type Description bool true to compare property names using case-insensitive comparison; otherwise, false. PropertyNamingPolicy Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or null to leave property names unchanged. Declaration public JsonNamingPolicy? PropertyNamingPolicy { get; set; } Property Value Type Description JsonNamingPolicy A property naming policy, or null to leave property names unchanged. ReadCommentHandling Gets or sets a value that defines how comments are handled during deserialization. Declaration public JsonCommentHandling ReadCommentHandling { get; set; } Property Value Type Description JsonCommentHandling A value that indicates whether comments are allowed, disallowed, or skipped. Exceptions Type Condition InvalidOperationException This property was set after serialization or deserialization has occurred. ArgumentOutOfRangeException The comment handling enum is set to a value that is not supported (or not within the JsonCommentHandling enum range). ReferenceHandler Configures how object references are handled when reading and writing JSON. Declaration public ReferenceHandler? ReferenceHandler { get; set; } Property Value Type Description ReferenceHandler UnknownTypeHandling Defines how deserializing a type declared as an object is handled during deserialization. Declaration public JsonUnknownTypeHandling UnknownTypeHandling { get; set; } Property Value Type Description JsonUnknownTypeHandling WriteIndented Gets or sets a value that defines whether JSON should use pretty printing. By default, JSON is serialized without any extra white space. Declaration public bool WriteIndented { get; set; } Property Value Type Description bool true if JSON should pretty print on serialization; otherwise, false. The default is false. Exceptions Type Condition InvalidOperationException This property was set after serialization or deserialization has occurred. Methods AddContext<TContext>() Binds current JsonSerializerOptions instance with a new instance of the specified System.Text.Json.Serialization.JsonSerializerContext type. Declaration public void AddContext<TContext>() where TContext : JsonSerializerContext, new() Type Parameters Name Description TContext The generic definition of the specified context type. GetConverter(Type) Returns the converter for the specified type. Declaration public JsonConverter GetConverter(Type typeToConvert) Parameters Type Name Description Type typeToConvert The type to return a converter for. Returns Type Description JsonConverter The first converter that supports the given type, or null if there is no converter. Exceptions Type Condition InvalidOperationException The configured for typeToConvert returned an invalid converter. NotSupportedException There is no compatible for typeToConvert or its serializable members."
  },
  "api/System.Text.Json.JsonTokenType.html": {
    "href": "api/System.Text.Json.JsonTokenType.html",
    "title": "Enum JsonTokenType | CodeFactory for Windows",
    "keywords": "Enum JsonTokenType Defines the various JSON tokens that make up a JSON text. Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public enum JsonTokenType : byte Fields Name Description Comment The token type is a comment string. EndArray The token type is the end of a JSON array. EndObject The token type is the end of a JSON object. False The token type is the JSON literal false. None There is no value (as distinct from Null). This is the default token type if no data has been read by the Utf8JsonReader. Null The token type is the JSON literal null. Number The token type is a JSON number. PropertyName The token type is a JSON property name. StartArray The token type is the start of a JSON array. StartObject The token type is the start of a JSON object. String The token type is a JSON string. True The token type is the JSON literal true."
  },
  "api/System.Text.Json.JsonValueKind.html": {
    "href": "api/System.Text.Json.JsonValueKind.html",
    "title": "Enum JsonValueKind | CodeFactory for Windows",
    "keywords": "Enum JsonValueKind Specifies the data type of a JSON value. Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public enum JsonValueKind : byte Fields Name Description Array A JSON array. False The JSON value false. Null The JSON value null. Number A JSON number. Object A JSON object. String A JSON string. True The JSON value true. Undefined There is no value (as distinct from Null)."
  },
  "api/System.Text.Json.JsonWriterOptions.html": {
    "href": "api/System.Text.Json.JsonWriterOptions.html",
    "title": "Struct JsonWriterOptions | CodeFactory for Windows",
    "keywords": "Struct JsonWriterOptions Allows the user to define custom behavior when writing JSON using the Utf8JsonWriter. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public struct JsonWriterOptions Properties Encoder Gets or sets the encoder to use when escaping strings, or null to use the default encoder. Declaration public JavaScriptEncoder? Encoder { readonly get; set; } Property Value Type Description JavaScriptEncoder The JavaScript character encoder used to override the escaping behavior. Indented Gets or sets a value that indicates whether the Utf8JsonWriter should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values. Declaration public bool Indented { get; set; } Property Value Type Description bool true to format the JSON output; false to write without any extra white space. The default is false. SkipValidation Gets or sets a value that indicates whether the Utf8JsonWriter should skip structural validation and allow the user to write invalid JSON. Declaration public bool SkipValidation { get; set; } Property Value Type Description bool true to skip structural validation and allow invalid JSON; false to throw an InvalidOperationException on any attempt to write invalid JSON."
  },
  "api/System.Text.Json.Nodes.JsonArray.html": {
    "href": "api/System.Text.Json.Nodes.JsonArray.html",
    "title": "Class JsonArray | CodeFactory for Windows",
    "keywords": "Class JsonArray Represents a mutable JSON array. Inheritance object JsonNode JsonArray Implements IList<JsonNode> ICollection<JsonNode> IEnumerable<JsonNode> IEnumerable Inherited Members JsonNode.AsArray() JsonNode.AsObject() JsonNode.AsValue() JsonNode.GetPath() JsonNode.GetValue<T>() JsonNode.Parse(ref Utf8JsonReader, JsonNodeOptions?) JsonNode.Parse(string, JsonNodeOptions?, JsonDocumentOptions) JsonNode.Parse(ReadOnlySpan<byte>, JsonNodeOptions?, JsonDocumentOptions) JsonNode.Parse(Stream, JsonNodeOptions?, JsonDocumentOptions) JsonNode.ToJsonString(JsonSerializerOptions) JsonNode.ToString() JsonNode.Options JsonNode.Parent JsonNode.Root JsonNode.this[int] JsonNode.this[string] object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Json.Nodes Assembly: System.Text.Json.dll Syntax public sealed class JsonArray : JsonNode, IList<JsonNode?>, ICollection<JsonNode?>, IEnumerable<JsonNode?>, IEnumerable Constructors JsonArray(JsonNodeOptions?) Initializes a new instance of the JsonArray class that is empty. Declaration public JsonArray(JsonNodeOptions? options = null) Parameters Type Name Description JsonNodeOptions? options Options to control the behavior. JsonArray(JsonNodeOptions, params JsonNode?[]) Initializes a new instance of the JsonArray class that contains items from the specified params array. Declaration public JsonArray(JsonNodeOptions options, params JsonNode?[] items) Parameters Type Name Description JsonNodeOptions options Options to control the behavior. JsonNode[] items The items to add to the new JsonArray. JsonArray(params JsonNode?[]) Initializes a new instance of the JsonArray class that contains items from the specified array. Declaration public JsonArray(params JsonNode?[] items) Parameters Type Name Description JsonNode[] items The items to add to the new JsonArray. Properties Count Gets the number of elements contained in the JsonArray. Declaration public int Count { get; } Property Value Type Description int Methods Add(JsonNode?) Adds a JsonNode to the end of the JsonArray. Declaration public void Add(JsonNode? item) Parameters Type Name Description JsonNode item The JsonNode to be added to the end of the JsonArray. Add<T>(T?) Adds an object to the end of the JsonArray. Declaration public void Add<T>(T? value) Parameters Type Name Description T value The object to be added to the end of the JsonArray. Type Parameters Name Description T The type of object to be added. Clear() Removes all elements from the JsonArray. Declaration public void Clear() Contains(JsonNode?) Determines whether an element is in the JsonArray. Declaration public bool Contains(JsonNode? item) Parameters Type Name Description JsonNode item The object to locate in the JsonArray. Returns Type Description bool true if item is found in the JsonArray; otherwise, false. Create(JsonElement, JsonNodeOptions?) Initializes a new instance of the JsonArray class that contains items from the specified JsonElement. Declaration public static JsonArray? Create(JsonElement element, JsonNodeOptions? options = null) Parameters Type Name Description JsonElement element The JsonElement. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonArray The new instance of the JsonArray class that contains items from the specified JsonElement. Exceptions Type Condition InvalidOperationException The element is not a Array. GetEnumerator() Returns an enumerator that iterates through the JsonArray. Declaration public IEnumerator<JsonNode?> GetEnumerator() Returns Type Description IEnumerator<JsonNode> A IEnumerator<T> for the JsonNode. IndexOf(JsonNode?) The object to locate in the JsonArray. Declaration public int IndexOf(JsonNode? item) Parameters Type Name Description JsonNode item The JsonNode to locate in the JsonArray. Returns Type Description int The index of item if found in the list; otherwise, -1. Insert(int, JsonNode?) Inserts an element into the JsonArray at the specified index. Declaration public void Insert(int index, JsonNode? item) Parameters Type Name Description int index The zero-based index at which item should be inserted. JsonNode item The JsonNode to insert. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0 or index is greater than Count. Remove(JsonNode?) Removes the first occurrence of a specific JsonNode from the JsonArray. Declaration public bool Remove(JsonNode? item) Parameters Type Name Description JsonNode item The JsonNode to remove from the JsonArray. Returns Type Description bool true if item is successfully removed; otherwise, false. RemoveAt(int) Removes the element at the specified index of the JsonArray. Declaration public void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the element to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0 or index is greater than Count. WriteTo(Utf8JsonWriter, JsonSerializerOptions?) Writes the JsonNode into the provided Utf8JsonWriter as JSON. Declaration public override void WriteTo(Utf8JsonWriter writer, JsonSerializerOptions? options = null) Parameters Type Name Description Utf8JsonWriter writer The Utf8JsonWriter. JsonSerializerOptions options Options to control the serialization behavior. Overrides JsonNode.WriteTo(Utf8JsonWriter, JsonSerializerOptions?) Exceptions Type Condition ArgumentNullException The writer parameter is null. Implements IList<T> ICollection<T> IEnumerable<T> IEnumerable Extension Methods JsonSerializer.Deserialize(JsonNode?, Type, JsonSerializerOptions?) JsonSerializer.Deserialize(JsonNode?, Type, JsonSerializerContext) JsonSerializer.Deserialize<TValue>(JsonNode?, JsonSerializerOptions?) JsonSerializer.Deserialize<TValue>(JsonNode?, JsonTypeInfo<TValue>)"
  },
  "api/System.Text.Json.Nodes.JsonNode.html": {
    "href": "api/System.Text.Json.Nodes.JsonNode.html",
    "title": "Class JsonNode | CodeFactory for Windows",
    "keywords": "Class JsonNode The base class that represents a single node within a mutable JSON document. Inheritance object JsonNode JsonArray JsonObject JsonValue Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Nodes Assembly: System.Text.Json.dll Syntax public abstract class JsonNode Properties this[int] Gets or sets the element at the specified index. Declaration public JsonNode? this[int index] { get; set; } Parameters Type Name Description int index The zero-based index of the element to get or set. Property Value Type Description JsonNode Exceptions Type Condition ArgumentOutOfRangeException index is less than 0 or index is greater than the number of properties. InvalidOperationException The current JsonNode is not a JsonArray. this[string] Gets or sets the element with the specified property name. If the property is not found, null is returned. Declaration public JsonNode? this[string propertyName] { get; set; } Parameters Type Name Description string propertyName The name of the property to return. Property Value Type Description JsonNode Exceptions Type Condition ArgumentNullException propertyName is null. InvalidOperationException The current JsonNode is not a JsonObject. Options Options to control the behavior. Declaration public JsonNodeOptions? Options { get; } Property Value Type Description JsonNodeOptions? Parent Gets the parent JsonNode. If there is no parent, null is returned. A parent can either be a JsonObject or a JsonArray. Declaration public JsonNode? Parent { get; } Property Value Type Description JsonNode Root Gets the root JsonNode. If the current JsonNode is a root, null is returned. Declaration public JsonNode Root { get; } Property Value Type Description JsonNode Methods AsArray() Casts to the derived JsonArray type. Declaration public JsonArray AsArray() Returns Type Description JsonArray A JsonArray. Exceptions Type Condition InvalidOperationException The node is not a JsonArray. AsObject() Casts to the derived JsonObject type. Declaration public JsonObject AsObject() Returns Type Description JsonObject A JsonObject. Exceptions Type Condition InvalidOperationException The node is not a JsonObject. AsValue() Casts to the derived JsonValue type. Declaration public JsonValue AsValue() Returns Type Description JsonValue A JsonValue. Exceptions Type Condition InvalidOperationException The node is not a JsonValue. GetPath() Gets the JSON path. Declaration public string GetPath() Returns Type Description string The JSON Path value. GetValue<T>() Gets the value for the current JsonValue. Declaration public virtual T GetValue<T>() Returns Type Description T A value converted from the JsonValue instance. Type Parameters Name Description T The type of the value to obtain from the JsonValue. Exceptions Type Condition FormatException The current JsonNode cannot be represented as a {TValue}. InvalidOperationException The current JsonNode is not a JsonValue or is not compatible with {TValue}. Parse(Stream, JsonNodeOptions?, JsonDocumentOptions) Parse a Stream as UTF-8-encoded data representing a single JSON value into a JsonNode. The Stream will be read to completion. Declaration public static JsonNode? Parse(Stream utf8Json, JsonNodeOptions? nodeOptions = null, JsonDocumentOptions documentOptions = default) Parameters Type Name Description Stream utf8Json JSON text to parse. JsonNodeOptions? nodeOptions Options to control the node behavior after parsing. JsonDocumentOptions documentOptions Options to control the document behavior during parsing. Returns Type Description JsonNode A JsonNode representation of the JSON value. Exceptions Type Condition JsonException utf8Json does not represent a valid single JSON value. Parse(ReadOnlySpan<byte>, JsonNodeOptions?, JsonDocumentOptions) Parses text representing a single JSON value. Declaration public static JsonNode? Parse(ReadOnlySpan<byte> utf8Json, JsonNodeOptions? nodeOptions = null, JsonDocumentOptions documentOptions = default) Parameters Type Name Description ReadOnlySpan<byte> utf8Json JSON text to parse. JsonNodeOptions? nodeOptions Options to control the node behavior after parsing. JsonDocumentOptions documentOptions Options to control the document behavior during parsing. Returns Type Description JsonNode A JsonNode representation of the JSON value. Exceptions Type Condition JsonException utf8Json does not represent a valid single JSON value. Parse(string, JsonNodeOptions?, JsonDocumentOptions) Parses text representing a single JSON value. Declaration public static JsonNode? Parse(string json, JsonNodeOptions? nodeOptions = null, JsonDocumentOptions documentOptions = default) Parameters Type Name Description string json JSON text to parse. JsonNodeOptions? nodeOptions Options to control the node behavior after parsing. JsonDocumentOptions documentOptions Options to control the document behavior during parsing. Returns Type Description JsonNode A JsonNode representation of the JSON value. Exceptions Type Condition ArgumentNullException json is null. JsonException json does not represent a valid single JSON value. Parse(ref Utf8JsonReader, JsonNodeOptions?) Parses one JSON value (including objects or arrays) from the provided reader. Declaration public static JsonNode? Parse(ref Utf8JsonReader reader, JsonNodeOptions? nodeOptions = null) Parameters Type Name Description Utf8JsonReader reader The reader to read. JsonNodeOptions? nodeOptions Options to control the behavior. Returns Type Description JsonNode The JsonNode from the reader. Exceptions Type Condition ArgumentException reader is using unsupported options. ArgumentException The current reader token does not start or represent a value. JsonException A value could not be read from the reader. ToJsonString(JsonSerializerOptions?) Converts the current instance to string in JSON format. Declaration public string ToJsonString(JsonSerializerOptions? options = null) Parameters Type Name Description JsonSerializerOptions options Options to control the serialization behavior. Returns Type Description string JSON representation of current instance. ToString() Gets a string representation for the current value appropriate to the node type. Declaration public override string ToString() Returns Type Description string A string representation for the current value appropriate to the node type. Overrides object.ToString() WriteTo(Utf8JsonWriter, JsonSerializerOptions?) Write the JsonNode into the provided Utf8JsonWriter as JSON. Declaration public abstract void WriteTo(Utf8JsonWriter writer, JsonSerializerOptions? options = null) Parameters Type Name Description Utf8JsonWriter writer The Utf8JsonWriter. JsonSerializerOptions options Options to control the serialization behavior. Exceptions Type Condition ArgumentNullException The writer parameter is null. Operators explicit operator bool(JsonNode) Defines an explicit conversion of a given bool to a JsonNode. Declaration public static explicit operator bool(JsonNode value) Parameters Type Name Description JsonNode value A bool to implicitly convert. Returns Type Description bool A value converted from the JsonNode instance. explicit operator byte(JsonNode) Defines an explicit conversion of a given byte to a JsonNode. Declaration public static explicit operator byte(JsonNode value) Parameters Type Name Description JsonNode value A byte to implicitly convert. Returns Type Description byte A value converted from the JsonNode instance. explicit operator char(JsonNode) Defines an explicit conversion of a given char to a JsonNode. Declaration public static explicit operator char(JsonNode value) Parameters Type Name Description JsonNode value A char to implicitly convert. Returns Type Description char A value converted from the JsonNode instance. explicit operator DateTime(JsonNode) Defines an explicit conversion of a given DateTime to a JsonNode. Declaration public static explicit operator DateTime(JsonNode value) Parameters Type Name Description JsonNode value A DateTime to implicitly convert. Returns Type Description DateTime A value converted from the JsonNode instance. explicit operator DateTimeOffset(JsonNode) Defines an explicit conversion of a given DateTimeOffset to a JsonNode. Declaration public static explicit operator DateTimeOffset(JsonNode value) Parameters Type Name Description JsonNode value A DateTimeOffset to implicitly convert. Returns Type Description DateTimeOffset A value converted from the JsonNode instance. explicit operator decimal(JsonNode) Defines an explicit conversion of a given decimal to a JsonNode. Declaration public static explicit operator decimal(JsonNode value) Parameters Type Name Description JsonNode value A decimal to implicitly convert. Returns Type Description decimal A value converted from the JsonNode instance. explicit operator double(JsonNode) Defines an explicit conversion of a given double to a JsonNode. Declaration public static explicit operator double(JsonNode value) Parameters Type Name Description JsonNode value A double to implicitly convert. Returns Type Description double A value converted from the JsonNode instance. explicit operator Guid(JsonNode) Defines an explicit conversion of a given Guid to a JsonNode. Declaration public static explicit operator Guid(JsonNode value) Parameters Type Name Description JsonNode value A Guid to implicitly convert. Returns Type Description Guid A value converted from the JsonNode instance. explicit operator short(JsonNode) Defines an explicit conversion of a given short to a JsonNode. Declaration public static explicit operator short(JsonNode value) Parameters Type Name Description JsonNode value A short to implicitly convert. Returns Type Description short A value converted from the JsonNode instance. explicit operator int(JsonNode) Defines an explicit conversion of a given int to a JsonNode. Declaration public static explicit operator int(JsonNode value) Parameters Type Name Description JsonNode value A int to implicitly convert. Returns Type Description int A value converted from the JsonNode instance. explicit operator long(JsonNode) Defines an explicit conversion of a given long to a JsonNode. Declaration public static explicit operator long(JsonNode value) Parameters Type Name Description JsonNode value A long to implicitly convert. Returns Type Description long A value converted from the JsonNode instance. explicit operator bool?(JsonNode?) Defines an explicit conversion of a given bool to a JsonNode. Declaration public static explicit operator bool?(JsonNode? value) Parameters Type Name Description JsonNode value A bool to implicitly convert. Returns Type Description bool? A value converted from the JsonNode instance. explicit operator byte?(JsonNode?) Defines an explicit conversion of a given byte to a JsonNode. Declaration public static explicit operator byte?(JsonNode? value) Parameters Type Name Description JsonNode value A byte to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator char?(JsonNode?) Defines an explicit conversion of a given char to a JsonNode. Declaration public static explicit operator char?(JsonNode? value) Parameters Type Name Description JsonNode value A char to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator DateTimeOffset?(JsonNode?) Defines an explicit conversion of a given DateTimeOffset to a JsonNode. Declaration public static explicit operator DateTimeOffset?(JsonNode? value) Parameters Type Name Description JsonNode value A DateTimeOffset to implicitly convert. Returns Type Description DateTimeOffset? A value converted from the JsonNode instance. explicit operator DateTime?(JsonNode?) Defines an explicit conversion of a given DateTime to a JsonNode. Declaration public static explicit operator DateTime?(JsonNode? value) Parameters Type Name Description JsonNode value A DateTime to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator decimal?(JsonNode?) Defines an explicit conversion of a given decimal to a JsonNode. Declaration public static explicit operator decimal?(JsonNode? value) Parameters Type Name Description JsonNode value A decimal to implicitly convert. Returns Type Description decimal? A value converted from the JsonNode instance. explicit operator double?(JsonNode?) Defines an explicit conversion of a given double to a JsonNode. Declaration public static explicit operator double?(JsonNode? value) Parameters Type Name Description JsonNode value A double to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator Guid?(JsonNode?) Defines an explicit conversion of a given Guid to a JsonNode. Declaration public static explicit operator Guid?(JsonNode? value) Parameters Type Name Description JsonNode value A Guid to implicitly convert. Returns Type Description Guid? A value converted from the JsonNode instance. explicit operator short?(JsonNode?) Defines an explicit conversion of a given short to a JsonNode. Declaration public static explicit operator short?(JsonNode? value) Parameters Type Name Description JsonNode value A short to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator int?(JsonNode?) Defines an explicit conversion of a given int to a JsonNode. Declaration public static explicit operator int?(JsonNode? value) Parameters Type Name Description JsonNode value A int to implicitly convert. Returns Type Description int? A value converted from the JsonNode instance. explicit operator long?(JsonNode?) Defines an explicit conversion of a given long to a JsonNode. Declaration public static explicit operator long?(JsonNode? value) Parameters Type Name Description JsonNode value A long to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator sbyte?(JsonNode?) Defines an explicit conversion of a given sbyte to a JsonNode. Declaration [CLSCompliant(false)] public static explicit operator sbyte?(JsonNode? value) Parameters Type Name Description JsonNode value A sbyte to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator float?(JsonNode?) Defines an explicit conversion of a given float to a JsonNode. Declaration public static explicit operator float?(JsonNode? value) Parameters Type Name Description JsonNode value A float to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator ushort?(JsonNode?) Defines an explicit conversion of a given ushort to a JsonNode. Declaration [CLSCompliant(false)] public static explicit operator ushort?(JsonNode? value) Parameters Type Name Description JsonNode value A ushort to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator uint?(JsonNode?) Defines an explicit conversion of a given uint to a JsonNode. Declaration [CLSCompliant(false)] public static explicit operator uint?(JsonNode? value) Parameters Type Name Description JsonNode value A uint to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator ulong?(JsonNode?) Defines an explicit conversion of a given ulong to a JsonNode. Declaration [CLSCompliant(false)] public static explicit operator ulong?(JsonNode? value) Parameters Type Name Description JsonNode value A ulong to implicitly convert. Returns Type Description Nullable A value converted from the JsonNode instance. explicit operator sbyte(JsonNode) Defines an explicit conversion of a given sbyte to a JsonNode. Declaration [CLSCompliant(false)] public static explicit operator sbyte(JsonNode value) Parameters Type Name Description JsonNode value A sbyte to implicitly convert. Returns Type Description sbyte A value converted from the JsonNode instance. explicit operator float(JsonNode) Defines an explicit conversion of a given float to a JsonNode. Declaration public static explicit operator float(JsonNode value) Parameters Type Name Description JsonNode value A float to implicitly convert. Returns Type Description float A value converted from the JsonNode instance. explicit operator string?(JsonNode?) Defines an explicit conversion of a given string to a JsonNode. Declaration public static explicit operator string?(JsonNode? value) Parameters Type Name Description JsonNode value A string to implicitly convert. Returns Type Description string A value converted from the JsonNode instance. explicit operator ushort(JsonNode) Defines an explicit conversion of a given ushort to a JsonNode. Declaration [CLSCompliant(false)] public static explicit operator ushort(JsonNode value) Parameters Type Name Description JsonNode value A ushort to implicitly convert. Returns Type Description ushort A value converted from the JsonNode instance. explicit operator uint(JsonNode) Defines an explicit conversion of a given uint to a JsonNode. Declaration [CLSCompliant(false)] public static explicit operator uint(JsonNode value) Parameters Type Name Description JsonNode value A uint to implicitly convert. Returns Type Description uint A value converted from the JsonNode instance. explicit operator ulong(JsonNode) Defines an explicit conversion of a given ulong to a JsonNode. Declaration [CLSCompliant(false)] public static explicit operator ulong(JsonNode value) Parameters Type Name Description JsonNode value A ulong to implicitly convert. Returns Type Description ulong A value converted from the JsonNode instance. implicit operator JsonNode(bool) Defines an implicit conversion of a given bool to a JsonNode. Declaration public static implicit operator JsonNode(bool value) Parameters Type Name Description bool value A bool to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(byte) Defines an implicit conversion of a given byte to a JsonNode. Declaration public static implicit operator JsonNode(byte value) Parameters Type Name Description byte value A byte to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(char) Defines an implicit conversion of a given char to a JsonNode. Declaration public static implicit operator JsonNode(char value) Parameters Type Name Description char value A char to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(DateTime) Defines an implicit conversion of a given DateTime to a JsonNode. Declaration public static implicit operator JsonNode(DateTime value) Parameters Type Name Description DateTime value A DateTime to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(DateTimeOffset) Defines an implicit conversion of a given DateTimeOffset to a JsonNode. Declaration public static implicit operator JsonNode(DateTimeOffset value) Parameters Type Name Description DateTimeOffset value A DateTimeOffset to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(decimal) Defines an implicit conversion of a given decimal to a JsonNode. Declaration public static implicit operator JsonNode(decimal value) Parameters Type Name Description decimal value A decimal to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(double) Defines an implicit conversion of a given double to a JsonNode. Declaration public static implicit operator JsonNode(double value) Parameters Type Name Description double value A double to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(Guid) Defines an implicit conversion of a given Guid to a JsonNode. Declaration public static implicit operator JsonNode(Guid value) Parameters Type Name Description Guid value A Guid to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(short) Defines an implicit conversion of a given short to a JsonNode. Declaration public static implicit operator JsonNode(short value) Parameters Type Name Description short value A short to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(int) Defines an implicit conversion of a given int to a JsonNode. Declaration public static implicit operator JsonNode(int value) Parameters Type Name Description int value A int to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(long) Defines an implicit conversion of a given long to a JsonNode. Declaration public static implicit operator JsonNode(long value) Parameters Type Name Description long value A long to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(bool?) Defines an implicit conversion of a given bool to a JsonNode. Declaration public static implicit operator JsonNode?(bool? value) Parameters Type Name Description bool? value A bool to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(byte?) Defines an implicit conversion of a given byte to a JsonNode. Declaration public static implicit operator JsonNode?(byte? value) Parameters Type Name Description Nullable value A byte to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(char?) Defines an implicit conversion of a given char to a JsonNode. Declaration public static implicit operator JsonNode?(char? value) Parameters Type Name Description Nullable value A char to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(DateTimeOffset?) Defines an implicit conversion of a given DateTimeOffset to a JsonNode. Declaration public static implicit operator JsonNode?(DateTimeOffset? value) Parameters Type Name Description DateTimeOffset? value A DateTimeOffset to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(DateTime?) Defines an implicit conversion of a given DateTime to a JsonNode. Declaration public static implicit operator JsonNode?(DateTime? value) Parameters Type Name Description Nullable value A DateTime to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(decimal?) Defines an implicit conversion of a given decimal to a JsonNode. Declaration public static implicit operator JsonNode?(decimal? value) Parameters Type Name Description decimal? value A decimal to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(double?) Defines an implicit conversion of a given double to a JsonNode. Declaration public static implicit operator JsonNode?(double? value) Parameters Type Name Description Nullable value A double to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(Guid?) Defines an implicit conversion of a given Guid to a JsonNode. Declaration public static implicit operator JsonNode?(Guid? value) Parameters Type Name Description Guid? value A Guid to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(short?) Defines an implicit conversion of a given short to a JsonNode. Declaration public static implicit operator JsonNode?(short? value) Parameters Type Name Description Nullable value A short to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(int?) Defines an implicit conversion of a given int to a JsonNode. Declaration public static implicit operator JsonNode?(int? value) Parameters Type Name Description int? value A int to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(long?) Defines an implicit conversion of a given long to a JsonNode. Declaration public static implicit operator JsonNode?(long? value) Parameters Type Name Description Nullable value A long to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(sbyte?) Defines an implicit conversion of a given sbyte to a JsonNode. Declaration [CLSCompliant(false)] public static implicit operator JsonNode?(sbyte? value) Parameters Type Name Description Nullable value A sbyte to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(float?) Defines an implicit conversion of a given float to a JsonNode. Declaration public static implicit operator JsonNode?(float? value) Parameters Type Name Description Nullable value A float to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(ushort?) Defines an implicit conversion of a given ushort to a JsonNode. Declaration [CLSCompliant(false)] public static implicit operator JsonNode?(ushort? value) Parameters Type Name Description Nullable value A ushort to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(uint?) Defines an implicit conversion of a given uint to a JsonNode. Declaration [CLSCompliant(false)] public static implicit operator JsonNode?(uint? value) Parameters Type Name Description Nullable value A uint to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(ulong?) Defines an implicit conversion of a given ulong to a JsonNode. Declaration [CLSCompliant(false)] public static implicit operator JsonNode?(ulong? value) Parameters Type Name Description Nullable value A ulong to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(sbyte) Defines an implicit conversion of a given sbyte to a JsonNode. Declaration [CLSCompliant(false)] public static implicit operator JsonNode(sbyte value) Parameters Type Name Description sbyte value A sbyte to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(float) Defines an implicit conversion of a given float to a JsonNode. Declaration public static implicit operator JsonNode(float value) Parameters Type Name Description float value A float to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode?(string?) Defines an implicit conversion of a given string to a JsonNode. Declaration public static implicit operator JsonNode?(string? value) Parameters Type Name Description string value A string to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(ushort) Defines an implicit conversion of a given ushort to a JsonNode. Declaration [CLSCompliant(false)] public static implicit operator JsonNode(ushort value) Parameters Type Name Description ushort value A ushort to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(uint) Defines an implicit conversion of a given uint to a JsonNode. Declaration [CLSCompliant(false)] public static implicit operator JsonNode(uint value) Parameters Type Name Description uint value A uint to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. implicit operator JsonNode(ulong) Defines an implicit conversion of a given ulong to a JsonNode. Declaration [CLSCompliant(false)] public static implicit operator JsonNode(ulong value) Parameters Type Name Description ulong value A ulong to implicitly convert. Returns Type Description JsonNode A JsonNode instance converted from the value parameter. Extension Methods JsonSerializer.Deserialize(JsonNode?, Type, JsonSerializerOptions?) JsonSerializer.Deserialize(JsonNode?, Type, JsonSerializerContext) JsonSerializer.Deserialize<TValue>(JsonNode?, JsonSerializerOptions?) JsonSerializer.Deserialize<TValue>(JsonNode?, JsonTypeInfo<TValue>)"
  },
  "api/System.Text.Json.Nodes.JsonNodeOptions.html": {
    "href": "api/System.Text.Json.Nodes.JsonNodeOptions.html",
    "title": "Struct JsonNodeOptions | CodeFactory for Windows",
    "keywords": "Struct JsonNodeOptions Options to control JsonNode behavior. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json.Nodes Assembly: System.Text.Json.dll Syntax public struct JsonNodeOptions Properties PropertyNameCaseInsensitive Specifies whether property names on JsonObject are case insensitive. Declaration public bool PropertyNameCaseInsensitive { readonly get; set; } Property Value Type Description bool"
  },
  "api/System.Text.Json.Nodes.JsonObject.html": {
    "href": "api/System.Text.Json.Nodes.JsonObject.html",
    "title": "Class JsonObject | CodeFactory for Windows",
    "keywords": "Class JsonObject Represents a mutable JSON object. Inheritance object JsonNode JsonObject Implements IDictionary<string, JsonNode> ICollection<KeyValuePair<string, JsonNode>> IEnumerable<KeyValuePair<string, JsonNode>> IEnumerable Inherited Members JsonNode.AsArray() JsonNode.AsObject() JsonNode.AsValue() JsonNode.GetPath() JsonNode.GetValue<T>() JsonNode.Parse(ref Utf8JsonReader, JsonNodeOptions?) JsonNode.Parse(string, JsonNodeOptions?, JsonDocumentOptions) JsonNode.Parse(ReadOnlySpan<byte>, JsonNodeOptions?, JsonDocumentOptions) JsonNode.Parse(Stream, JsonNodeOptions?, JsonDocumentOptions) JsonNode.ToJsonString(JsonSerializerOptions) JsonNode.ToString() JsonNode.Options JsonNode.Parent JsonNode.Root JsonNode.this[int] JsonNode.this[string] object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Json.Nodes Assembly: System.Text.Json.dll Syntax public sealed class JsonObject : JsonNode, IDictionary<string, JsonNode?>, ICollection<KeyValuePair<string, JsonNode?>>, IEnumerable<KeyValuePair<string, JsonNode?>>, IEnumerable Constructors JsonObject(IEnumerable<KeyValuePair<string, JsonNode?>>, JsonNodeOptions?) Initializes a new instance of the JsonObject class that contains the specified properties. Declaration public JsonObject(IEnumerable<KeyValuePair<string, JsonNode?>> properties, JsonNodeOptions? options = null) Parameters Type Name Description IEnumerable<KeyValuePair<string, JsonNode>> properties The properties to be added. JsonNodeOptions? options Options to control the behavior. JsonObject(JsonNodeOptions?) Initializes a new instance of the JsonObject class that is empty. Declaration public JsonObject(JsonNodeOptions? options = null) Parameters Type Name Description JsonNodeOptions? options Options to control the behavior. Properties Count Gets the number of elements contained in JsonObject. Declaration public int Count { get; } Property Value Type Description int Methods Add(KeyValuePair<string, JsonNode?>) Adds the specified property to the JsonObject. Declaration public void Add(KeyValuePair<string, JsonNode?> property) Parameters Type Name Description KeyValuePair<string, JsonNode> property The KeyValuePair structure representing the property name and value to add to the JsonObject. Exceptions Type Condition ArgumentException An element with the same property name already exists in the JsonObject. ArgumentNullException The property name of property is null. Add(string, JsonNode?) Adds an element with the provided property name and value to the JsonObject. Declaration public void Add(string propertyName, JsonNode? value) Parameters Type Name Description string propertyName The property name of the element to add. JsonNode value The value of the element to add. Exceptions Type Condition ArgumentNullException propertyNameis null. ArgumentException An element with the same property name already exists in the JsonObject. Clear() Removes all elements from the JsonObject. Declaration public void Clear() ContainsKey(string) Determines whether the JsonObject contains an element with the specified property name. Declaration public bool ContainsKey(string propertyName) Parameters Type Name Description string propertyName The property name to locate in the JsonObject. Returns Type Description bool true if the JsonObject contains an element with the specified property name; otherwise, false. Exceptions Type Condition ArgumentNullException propertyName is null. Create(JsonElement, JsonNodeOptions?) Initializes a new instance of the JsonObject class that contains properties from the specified JsonElement. Declaration public static JsonObject? Create(JsonElement element, JsonNodeOptions? options = null) Parameters Type Name Description JsonElement element The JsonElement. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonObject The new instance of the JsonObject class that contains properties from the specified JsonElement. GetEnumerator() Returns an enumerator that iterates through the JsonObject. Declaration public IEnumerator<KeyValuePair<string, JsonNode?>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<string, JsonNode>> An enumerator that iterates through the JsonObject. Remove(string) Removes the element with the specified property name from the JsonObject. Declaration public bool Remove(string propertyName) Parameters Type Name Description string propertyName The property name of the element to remove. Returns Type Description bool true if the element is successfully removed; otherwise, false. Exceptions Type Condition ArgumentNullException propertyName is null. TryGetPropertyValue(string, out JsonNode?) Returns the value of a property with the specified name. Declaration public bool TryGetPropertyValue(string propertyName, out JsonNode? jsonNode) Parameters Type Name Description string propertyName The name of the property to return. JsonNode jsonNode The JSON value of the property with the specified name. Returns Type Description bool true if a property with the specified name was found; otherwise, false. WriteTo(Utf8JsonWriter, JsonSerializerOptions?) Write the JsonNode into the provided Utf8JsonWriter as JSON. Declaration public override void WriteTo(Utf8JsonWriter writer, JsonSerializerOptions? options = null) Parameters Type Name Description Utf8JsonWriter writer The Utf8JsonWriter. JsonSerializerOptions options Options to control the serialization behavior. Overrides JsonNode.WriteTo(Utf8JsonWriter, JsonSerializerOptions?) Exceptions Type Condition ArgumentNullException The writer parameter is null. Implements IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable Extension Methods JsonSerializer.Deserialize(JsonNode?, Type, JsonSerializerOptions?) JsonSerializer.Deserialize(JsonNode?, Type, JsonSerializerContext) JsonSerializer.Deserialize<TValue>(JsonNode?, JsonSerializerOptions?) JsonSerializer.Deserialize<TValue>(JsonNode?, JsonTypeInfo<TValue>)"
  },
  "api/System.Text.Json.Nodes.JsonValue.html": {
    "href": "api/System.Text.Json.Nodes.JsonValue.html",
    "title": "Class JsonValue | CodeFactory for Windows",
    "keywords": "Class JsonValue Represents a mutable JSON value. Inheritance object JsonNode JsonValue Inherited Members JsonNode.AsArray() JsonNode.AsObject() JsonNode.AsValue() JsonNode.GetPath() JsonNode.GetValue<T>() JsonNode.Parse(ref Utf8JsonReader, JsonNodeOptions?) JsonNode.Parse(string, JsonNodeOptions?, JsonDocumentOptions) JsonNode.Parse(ReadOnlySpan<byte>, JsonNodeOptions?, JsonDocumentOptions) JsonNode.Parse(Stream, JsonNodeOptions?, JsonDocumentOptions) JsonNode.ToJsonString(JsonSerializerOptions) JsonNode.ToString() JsonNode.WriteTo(Utf8JsonWriter, JsonSerializerOptions) JsonNode.Options JsonNode.Parent JsonNode.Root JsonNode.this[int] JsonNode.this[string] object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Nodes Assembly: System.Text.Json.dll Syntax public abstract class JsonValue : JsonNode Methods Create(bool, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(bool value, JsonNodeOptions? options = null) Parameters Type Name Description bool value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(byte, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(byte value, JsonNodeOptions? options = null) Parameters Type Name Description byte value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(char, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(char value, JsonNodeOptions? options = null) Parameters Type Name Description char value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(DateTime, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(DateTime value, JsonNodeOptions? options = null) Parameters Type Name Description DateTime value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(DateTimeOffset, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(DateTimeOffset value, JsonNodeOptions? options = null) Parameters Type Name Description DateTimeOffset value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(decimal, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(decimal value, JsonNodeOptions? options = null) Parameters Type Name Description decimal value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(double, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(double value, JsonNodeOptions? options = null) Parameters Type Name Description double value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(Guid, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(Guid value, JsonNodeOptions? options = null) Parameters Type Name Description Guid value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(short, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(short value, JsonNodeOptions? options = null) Parameters Type Name Description short value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(int, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(int value, JsonNodeOptions? options = null) Parameters Type Name Description int value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(long, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(long value, JsonNodeOptions? options = null) Parameters Type Name Description long value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(bool?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(bool? value, JsonNodeOptions? options = null) Parameters Type Name Description bool? value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(byte?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(byte? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(char?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(char? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(DateTimeOffset?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(DateTimeOffset? value, JsonNodeOptions? options = null) Parameters Type Name Description DateTimeOffset? value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(DateTime?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(DateTime? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(decimal?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(decimal? value, JsonNodeOptions? options = null) Parameters Type Name Description decimal? value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(double?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(double? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(Guid?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(Guid? value, JsonNodeOptions? options = null) Parameters Type Name Description Guid? value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(short?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(short? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(int?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(int? value, JsonNodeOptions? options = null) Parameters Type Name Description int? value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(long?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(long? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(sbyte?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration [CLSCompliant(false)] public static JsonValue? Create(sbyte? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(float?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(float? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(JsonElement?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(JsonElement? value, JsonNodeOptions? options = null) Parameters Type Name Description JsonElement? value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(ushort?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration [CLSCompliant(false)] public static JsonValue? Create(ushort? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(uint?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration [CLSCompliant(false)] public static JsonValue? Create(uint? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(ulong?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration [CLSCompliant(false)] public static JsonValue? Create(ulong? value, JsonNodeOptions? options = null) Parameters Type Name Description Nullable value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(sbyte, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration [CLSCompliant(false)] public static JsonValue Create(sbyte value, JsonNodeOptions? options = null) Parameters Type Name Description sbyte value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(float, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue Create(float value, JsonNodeOptions? options = null) Parameters Type Name Description float value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(string?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(string? value, JsonNodeOptions? options = null) Parameters Type Name Description string value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(JsonElement, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create(JsonElement value, JsonNodeOptions? options = null) Parameters Type Name Description JsonElement value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(ushort, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration [CLSCompliant(false)] public static JsonValue Create(ushort value, JsonNodeOptions? options = null) Parameters Type Name Description ushort value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(uint, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration [CLSCompliant(false)] public static JsonValue Create(uint value, JsonNodeOptions? options = null) Parameters Type Name Description uint value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create(ulong, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration [CLSCompliant(false)] public static JsonValue Create(ulong value, JsonNodeOptions? options = null) Parameters Type Name Description ulong value The underlying value of the new JsonValue instance. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Create<T>(T?, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create<T>(T? value, JsonNodeOptions? options = null) Parameters Type Name Description T value The value to create. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Type Parameters Name Description T The type of value to create. Create<T>(T?, JsonTypeInfo<T>, JsonNodeOptions?) Initializes a new instance of the JsonValue class that contains the specified value. Declaration public static JsonValue? Create<T>(T? value, JsonTypeInfo<T> jsonTypeInfo, JsonNodeOptions? options = null) Parameters Type Name Description T value The value to create. JsonTypeInfo<T> jsonTypeInfo The JsonTypeInfo that will be used to serialize the value. JsonNodeOptions? options Options to control the behavior. Returns Type Description JsonValue The new instance of the JsonValue class that contains the specified value. Type Parameters Name Description T The type of value to create. TryGetValue<T>(out T?) Tries to obtain the current JSON value and returns a value that indicates whether the operation succeeded. Declaration public abstract bool TryGetValue<T>(out T? value) Parameters Type Name Description T value When this method returns, contains the parsed value. Returns Type Description bool true if the value can be successfully obtained; otherwise, false. Type Parameters Name Description T The type of value to obtain. Extension Methods JsonSerializer.Deserialize(JsonNode?, Type, JsonSerializerOptions?) JsonSerializer.Deserialize(JsonNode?, Type, JsonSerializerContext) JsonSerializer.Deserialize<TValue>(JsonNode?, JsonSerializerOptions?) JsonSerializer.Deserialize<TValue>(JsonNode?, JsonTypeInfo<TValue>)"
  },
  "api/System.Text.Json.Nodes.html": {
    "href": "api/System.Text.Json.Nodes.html",
    "title": "Namespace System.Text.Json.Nodes | CodeFactory for Windows",
    "keywords": "Namespace System.Text.Json.Nodes Classes JsonArray Represents a mutable JSON array. JsonNode The base class that represents a single node within a mutable JSON document. JsonObject Represents a mutable JSON object. JsonValue Represents a mutable JSON value. Structs JsonNodeOptions Options to control JsonNode behavior."
  },
  "api/System.Text.Json.Serialization.IJsonOnDeserialized.html": {
    "href": "api/System.Text.Json.Serialization.IJsonOnDeserialized.html",
    "title": "Interface IJsonOnDeserialized | CodeFactory for Windows",
    "keywords": "Interface IJsonOnDeserialized Specifies that the JSON type should have its OnDeserialized() method called after deserialization occurs. Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public interface IJsonOnDeserialized Methods OnDeserialized() The method that is called after deserialization. Declaration void OnDeserialized()"
  },
  "api/System.Text.Json.Serialization.IJsonOnDeserializing.html": {
    "href": "api/System.Text.Json.Serialization.IJsonOnDeserializing.html",
    "title": "Interface IJsonOnDeserializing | CodeFactory for Windows",
    "keywords": "Interface IJsonOnDeserializing Specifies that the type should have its OnDeserializing() method called before deserialization occurs. Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public interface IJsonOnDeserializing Methods OnDeserializing() The method that is called before deserialization. Declaration void OnDeserializing()"
  },
  "api/System.Text.Json.Serialization.IJsonOnSerialized.html": {
    "href": "api/System.Text.Json.Serialization.IJsonOnSerialized.html",
    "title": "Interface IJsonOnSerialized | CodeFactory for Windows",
    "keywords": "Interface IJsonOnSerialized Specifies that the type should have its OnSerialized() method called after serialization occurs. Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public interface IJsonOnSerialized Methods OnSerialized() The method that is called after serialization. Declaration void OnSerialized()"
  },
  "api/System.Text.Json.Serialization.IJsonOnSerializing.html": {
    "href": "api/System.Text.Json.Serialization.IJsonOnSerializing.html",
    "title": "Interface IJsonOnSerializing | CodeFactory for Windows",
    "keywords": "Interface IJsonOnSerializing Specifies that the type should have its OnSerializing() method called before serialization occurs. Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public interface IJsonOnSerializing Methods OnSerializing() The method that is called before serialization. Declaration void OnSerializing()"
  },
  "api/System.Text.Json.Serialization.JsonAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonAttribute.html",
    "title": "Class JsonAttribute | CodeFactory for Windows",
    "keywords": "Class JsonAttribute Provides the base class for serialization attributes. Inheritance object Attribute JsonAttribute JsonConstructorAttribute JsonConverterAttribute JsonExtensionDataAttribute JsonIgnoreAttribute JsonIncludeAttribute JsonNumberHandlingAttribute JsonPropertyNameAttribute JsonPropertyOrderAttribute JsonSerializableAttribute JsonSourceGenerationOptionsAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public abstract class JsonAttribute : Attribute, _Attribute Constructors JsonAttribute() Creates a new instance of the JsonAttribute. Declaration protected JsonAttribute() Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonConstructorAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonConstructorAttribute.html",
    "title": "Class JsonConstructorAttribute | CodeFactory for Windows",
    "keywords": "Class JsonConstructorAttribute When placed on a constructor, indicates that the constructor should be used to create instances of the type on deserialization. Inheritance object Attribute JsonAttribute JsonConstructorAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [AttributeUsage(AttributeTargets.Constructor, AllowMultiple = false)] public sealed class JsonConstructorAttribute : JsonAttribute, _Attribute Constructors JsonConstructorAttribute() Initializes a new instance of JsonConstructorAttribute. Declaration public JsonConstructorAttribute() Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonConverter-1.html": {
    "href": "api/System.Text.Json.Serialization.JsonConverter-1.html",
    "title": "Class JsonConverter<T> | CodeFactory for Windows",
    "keywords": "Class JsonConverter<T> Converts an object or value to or from JSON. Inheritance object JsonConverter JsonConverter<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public abstract class JsonConverter<T> : JsonConverter Type Parameters Name Description T The type of object or value handled by the converter. Constructors JsonConverter() Initializes a new JsonConverter<T> instance. Declaration protected JsonConverter() Properties HandleNull Indicates whether null should be passed to the converter on serialization, and whether Null should be passed on deserialization. Declaration public virtual bool HandleNull { get; } Property Value Type Description bool Methods CanConvert(Type) Determines whether the specified type can be converted. Declaration public override bool CanConvert(Type typeToConvert) Parameters Type Name Description Type typeToConvert The type to compare against. Returns Type Description bool true if the type can be converted; otherwise, false. Overrides JsonConverter.CanConvert(Type) Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type T. Declaration public abstract T? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader The reader. Type typeToConvert The type to convert. JsonSerializerOptions options An object that specifies serialization options to use. Returns Type Description T The converted value. ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads a dictionary key from a JSON property name. Declaration public virtual T ReadAsPropertyName(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader The Utf8JsonReader to read from. Type typeToConvert The type to convert. JsonSerializerOptions options The options to use when reading the value. Returns Type Description T The value that was converted. Write(Utf8JsonWriter, T, JsonSerializerOptions) Writes a specified value as JSON. Declaration public abstract void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer The writer to write to. T value The value to convert to JSON. JsonSerializerOptions options An object that specifies serialization options to use. WriteAsPropertyName(Utf8JsonWriter, T, JsonSerializerOptions) Writes a dictionary key as a JSON property name. Declaration public virtual void WriteAsPropertyName(Utf8JsonWriter writer, T value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer The Utf8JsonWriter to write to. T value The value to convert. The value of HandleNull determines if the converter handles null values. JsonSerializerOptions options The options to use when writing the value."
  },
  "api/System.Text.Json.Serialization.JsonConverter.html": {
    "href": "api/System.Text.Json.Serialization.JsonConverter.html",
    "title": "Class JsonConverter | CodeFactory for Windows",
    "keywords": "Class JsonConverter Converts an object or value to or from JSON. Inheritance object JsonConverter JsonConverterFactory JsonConverter<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public abstract class JsonConverter Methods CanConvert(Type) When overridden in a derived class, determines whether the converter instance can convert the specified object type. Declaration public abstract bool CanConvert(Type typeToConvert) Parameters Type Name Description Type typeToConvert The type of the object to check whether it can be converted by this converter instance. Returns Type Description bool true if the instance can convert the specified object type; otherwise, false."
  },
  "api/System.Text.Json.Serialization.JsonConverterAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonConverterAttribute.html",
    "title": "Class JsonConverterAttribute | CodeFactory for Windows",
    "keywords": "Class JsonConverterAttribute When placed on a property or type, specifies the converter type to use. Inheritance object Attribute JsonAttribute JsonConverterAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Enum|AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Interface, AllowMultiple = false)] public class JsonConverterAttribute : JsonAttribute, _Attribute Constructors JsonConverterAttribute() Initializes a new instance of JsonConverterAttribute. Declaration protected JsonConverterAttribute() JsonConverterAttribute(Type) Initializes a new instance of JsonConverterAttribute with the specified converter type. Declaration public JsonConverterAttribute(Type converterType) Parameters Type Name Description Type converterType The type of the converter. Properties ConverterType Gets the type of the JsonConverterAttribute, or null if it was created without a type. Declaration public Type? ConverterType { get; } Property Value Type Description Type The type of the JsonConverterAttribute, or null if it was created without a type. Methods CreateConverter(Type) When overridden in a derived class and ConverterType is null, allows the derived class to create a JsonConverter in order to pass additional state. Declaration public virtual JsonConverter? CreateConverter(Type typeToConvert) Parameters Type Name Description Type typeToConvert The type of the converter. Returns Type Description JsonConverter The custom converter. Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonConverterFactory.html": {
    "href": "api/System.Text.Json.Serialization.JsonConverterFactory.html",
    "title": "Class JsonConverterFactory | CodeFactory for Windows",
    "keywords": "Class JsonConverterFactory Supports converting several types by using a factory pattern. Inheritance object JsonConverter JsonConverterFactory JsonStringEnumConverter Inherited Members JsonConverter.CanConvert(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public abstract class JsonConverterFactory : JsonConverter Constructors JsonConverterFactory() When overidden in a derived class, initializes a new instance of the JsonConverterFactory class. Declaration protected JsonConverterFactory() Methods CreateConverter(Type, JsonSerializerOptions) Creates a converter for a specified type. Declaration public abstract JsonConverter? CreateConverter(Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Type typeToConvert The type handled by the converter. JsonSerializerOptions options The serialization options to use. Returns Type Description JsonConverter A converter for which T is compatible with typeToConvert."
  },
  "api/System.Text.Json.Serialization.JsonExtensionDataAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonExtensionDataAttribute.html",
    "title": "Class JsonExtensionDataAttribute | CodeFactory for Windows",
    "keywords": "Class JsonExtensionDataAttribute When placed on a property of type IDictionary<TKey, TValue>, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization. Inheritance object Attribute JsonAttribute JsonExtensionDataAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class JsonExtensionDataAttribute : JsonAttribute, _Attribute Constructors JsonExtensionDataAttribute() Instantiates a new instance of the JsonExtensionDataAttribute class. Declaration public JsonExtensionDataAttribute() Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonIgnoreAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonIgnoreAttribute.html",
    "title": "Class JsonIgnoreAttribute | CodeFactory for Windows",
    "keywords": "Class JsonIgnoreAttribute Prevents a property from being serialized or deserialized. Inheritance object Attribute JsonAttribute JsonIgnoreAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class JsonIgnoreAttribute : JsonAttribute, _Attribute Constructors JsonIgnoreAttribute() Initializes a new instance of JsonIgnoreAttribute. Declaration public JsonIgnoreAttribute() Properties Condition Specifies the condition that must be met before a property will be ignored. Declaration public JsonIgnoreCondition Condition { get; set; } Property Value Type Description JsonIgnoreCondition Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonIgnoreCondition.html": {
    "href": "api/System.Text.Json.Serialization.JsonIgnoreCondition.html",
    "title": "Enum JsonIgnoreCondition | CodeFactory for Windows",
    "keywords": "Enum JsonIgnoreCondition Controls how the JsonIgnoreAttribute ignores properties on serialization and deserialization. Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public enum JsonIgnoreCondition Fields Name Description Always Property will always be ignored. Never Property will always be serialized and deserialized, regardless of System.Text.Json.JsonSerializerOptions.IgnoreNullValues configuration. WhenWritingDefault Property will only be ignored if it is null. WhenWritingNull If the value is null, the property is ignored during serialization. This is applied only to reference-type properties and fields."
  },
  "api/System.Text.Json.Serialization.JsonIncludeAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonIncludeAttribute.html",
    "title": "Class JsonIncludeAttribute | CodeFactory for Windows",
    "keywords": "Class JsonIncludeAttribute Indicates that the member should be included for serialization and deserialization. Inheritance object Attribute JsonAttribute JsonIncludeAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class JsonIncludeAttribute : JsonAttribute, _Attribute Constructors JsonIncludeAttribute() Initializes a new instance of JsonIncludeAttribute. Declaration public JsonIncludeAttribute() Exceptions Type Condition InvalidOperationException The attribute is applied to a non-public property. Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonKnownNamingPolicy.html": {
    "href": "api/System.Text.Json.Serialization.JsonKnownNamingPolicy.html",
    "title": "Enum JsonKnownNamingPolicy | CodeFactory for Windows",
    "keywords": "Enum JsonKnownNamingPolicy The JsonNamingPolicy to be used at run time. Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public enum JsonKnownNamingPolicy Fields Name Description CamelCase Specifies that the built-in CamelCase be used to convert JSON property names. Unspecified Specifies that JSON property names should not be converted."
  },
  "api/System.Text.Json.Serialization.JsonNumberHandling.html": {
    "href": "api/System.Text.Json.Serialization.JsonNumberHandling.html",
    "title": "Enum JsonNumberHandling | CodeFactory for Windows",
    "keywords": "Enum JsonNumberHandling Determines how JsonSerializer handles numbers when serializing and deserializing. Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [Flags] public enum JsonNumberHandling Fields Name Description AllowNamedFloatingPointLiterals The \"NaN\", \"Infinity\", and \"-Infinity\" String tokens can be read as floating-point constants, and the float and double values for these constants will be written as their corresponding JSON string representations. AllowReadingFromString Numbers can be read from String tokens. Does not prevent numbers from being read from Number token. Strict Numbers will only be read from Number tokens and will only be written as JSON numbers (without quotes). WriteAsString Numbers will be written as JSON strings (with quotes), not as JSON numbers."
  },
  "api/System.Text.Json.Serialization.JsonNumberHandlingAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonNumberHandlingAttribute.html",
    "title": "Class JsonNumberHandlingAttribute | CodeFactory for Windows",
    "keywords": "Class JsonNumberHandlingAttribute When placed on a type, property, or field, indicates what JsonNumberHandling settings should be used when serializing or deserializing numbers. Inheritance object Attribute JsonAttribute JsonNumberHandlingAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class JsonNumberHandlingAttribute : JsonAttribute, _Attribute Constructors JsonNumberHandlingAttribute(JsonNumberHandling) Initializes a new instance of JsonNumberHandlingAttribute. Declaration public JsonNumberHandlingAttribute(JsonNumberHandling handling) Parameters Type Name Description JsonNumberHandling handling A bitwise combination of the enumeration values that specify how number types should be handled when serializing or deserializing. Properties Handling Indicates what settings should be used when serializing or deserializing numbers. Declaration public JsonNumberHandling Handling { get; } Property Value Type Description JsonNumberHandling An object that determines the number serialization and deserialization settings. Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonPropertyNameAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonPropertyNameAttribute.html",
    "title": "Class JsonPropertyNameAttribute | CodeFactory for Windows",
    "keywords": "Class JsonPropertyNameAttribute Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by JsonNamingPolicy. Inheritance object Attribute JsonAttribute JsonPropertyNameAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class JsonPropertyNameAttribute : JsonAttribute, _Attribute Constructors JsonPropertyNameAttribute(string) Initializes a new instance of JsonPropertyNameAttribute with the specified property name. Declaration public JsonPropertyNameAttribute(string name) Parameters Type Name Description string name The name of the property. Properties Name Gets the name of the property. Declaration public string Name { get; } Property Value Type Description string The name of the property. Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonPropertyOrderAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonPropertyOrderAttribute.html",
    "title": "Class JsonPropertyOrderAttribute | CodeFactory for Windows",
    "keywords": "Class JsonPropertyOrderAttribute Specifies the property order that is present in the JSON when serializing. Lower values are serialized first. If the attribute is not specified, the default value is 0. Inheritance object Attribute JsonAttribute JsonPropertyOrderAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class JsonPropertyOrderAttribute : JsonAttribute, _Attribute Constructors JsonPropertyOrderAttribute(int) Initializes a new instance of JsonPropertyNameAttribute with the specified order. Declaration public JsonPropertyOrderAttribute(int order) Parameters Type Name Description int order The order of the property. Properties Order Gets the serialization order of the property. Declaration public int Order { get; } Property Value Type Description int Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonSerializableAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonSerializableAttribute.html",
    "title": "Class JsonSerializableAttribute | CodeFactory for Windows",
    "keywords": "Class JsonSerializableAttribute Instructs the System.Text.Json source generator to generate source code to help optimize performance when serializing and deserializing instances of the specified type and types in its object graph. Inheritance object Attribute JsonAttribute JsonSerializableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class JsonSerializableAttribute : JsonAttribute, _Attribute Constructors JsonSerializableAttribute(Type) Initializes a new instance of JsonSerializableAttribute with the specified type. Declaration public JsonSerializableAttribute(Type type) Parameters Type Name Description Type type The type to generate source code for. Properties GenerationMode Determines what the source generator should generate for the type. If the value is Default, then the setting specified on GenerationMode will be used. Declaration public JsonSourceGenerationMode GenerationMode { get; set; } Property Value Type Description JsonSourceGenerationMode TypeInfoPropertyName The name of the property for the generated System.Text.Json.Serialization.Metadata.JsonTypeInfo<T> for the type on the generated, derived System.Text.Json.Serialization.JsonSerializerContext type. Declaration public string? TypeInfoPropertyName { get; set; } Property Value Type Description string Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonSourceGenerationMode.html": {
    "href": "api/System.Text.Json.Serialization.JsonSourceGenerationMode.html",
    "title": "Enum JsonSourceGenerationMode | CodeFactory for Windows",
    "keywords": "Enum JsonSourceGenerationMode The generation mode for the System.Text.Json source generator. Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [Flags] public enum JsonSourceGenerationMode Fields Name Description Default When specified on GenerationMode, indicates that both type-metadata initialization logic and optimized serialization logic should be generated for all types. When specified on GenerationMode, indicates that the setting on GenerationMode should be used. Metadata Instructs the JSON source generator to generate type-metadata initialization logic. Serialization Instructs the JSON source generator to generate optimized serialization logic."
  },
  "api/System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.html": {
    "href": "api/System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.html",
    "title": "Class JsonSourceGenerationOptionsAttribute | CodeFactory for Windows",
    "keywords": "Class JsonSourceGenerationOptionsAttribute Instructs the System.Text.Json source generator to assume the specified options will be used at run time via JsonSerializerOptions. Inheritance object Attribute JsonAttribute JsonSourceGenerationOptionsAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class JsonSourceGenerationOptionsAttribute : JsonAttribute, _Attribute Constructors JsonSourceGenerationOptionsAttribute() Instructs the System.Text.Json source generator to assume the specified options will be used at run time via JsonSerializerOptions. Declaration public JsonSourceGenerationOptionsAttribute() Properties DefaultIgnoreCondition Gets or sets the default ignore condition. Declaration public JsonIgnoreCondition DefaultIgnoreCondition { get; set; } Property Value Type Description JsonIgnoreCondition GenerationMode Gets or sets the source generation mode for types that don't explicitly set the mode with GenerationMode. Declaration public JsonSourceGenerationMode GenerationMode { get; set; } Property Value Type Description JsonSourceGenerationMode IgnoreReadOnlyFields Gets or sets a value that indicates whether to ignore read-only fields. Declaration public bool IgnoreReadOnlyFields { get; set; } Property Value Type Description bool IgnoreReadOnlyProperties Gets or sets a value that indicates whether to ignore read-only properties. Declaration public bool IgnoreReadOnlyProperties { get; set; } Property Value Type Description bool IncludeFields Gets or sets a value that indicates whether to include fields for serialization and deserialization. Declaration public bool IncludeFields { get; set; } Property Value Type Description bool PropertyNamingPolicy Gets or sets a built-in naming policy to convert JSON property names with. Declaration public JsonKnownNamingPolicy PropertyNamingPolicy { get; set; } Property Value Type Description JsonKnownNamingPolicy WriteIndented Gets or sets a value that indicates whether JSON output should be pretty-printed. Declaration public bool WriteIndented { get; set; } Property Value Type Description bool Implements _Attribute"
  },
  "api/System.Text.Json.Serialization.JsonStringEnumConverter.html": {
    "href": "api/System.Text.Json.Serialization.JsonStringEnumConverter.html",
    "title": "Class JsonStringEnumConverter | CodeFactory for Windows",
    "keywords": "Class JsonStringEnumConverter Converts enumeration values to and from strings. Inheritance object JsonConverter JsonConverterFactory JsonStringEnumConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public class JsonStringEnumConverter : JsonConverterFactory Constructors JsonStringEnumConverter() Initializes an instance of the JsonStringEnumConverter class with the default naming policy that allows integer values. Declaration public JsonStringEnumConverter() JsonStringEnumConverter(JsonNamingPolicy?, bool) Initializes an instance of the JsonStringEnumConverter class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed. Declaration public JsonStringEnumConverter(JsonNamingPolicy? namingPolicy = null, bool allowIntegerValues = true) Parameters Type Name Description JsonNamingPolicy namingPolicy The optional naming policy for writing enum values. bool allowIntegerValues true to allow undefined enum values; otherwise, false. When true, if an enum value isn't defined, it will output as a number rather than a string. Methods CanConvert(Type) Determines whether the specified type can be converted to an enum. Declaration public override sealed bool CanConvert(Type typeToConvert) Parameters Type Name Description Type typeToConvert The type to be checked. Returns Type Description bool true if the type can be converted; otherwise, false. Overrides JsonConverter.CanConvert(Type) CreateConverter(Type, JsonSerializerOptions) Creates a converter for the specified type. Declaration public override sealed JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Type typeToConvert The type handled by the converter. JsonSerializerOptions options The serialization options to use. Returns Type Description JsonConverter A converter for which T is compatible with typeToConvert. Overrides JsonConverterFactory.CreateConverter(Type, JsonSerializerOptions)"
  },
  "api/System.Text.Json.Serialization.JsonUnknownTypeHandling.html": {
    "href": "api/System.Text.Json.Serialization.JsonUnknownTypeHandling.html",
    "title": "Enum JsonUnknownTypeHandling | CodeFactory for Windows",
    "keywords": "Enum JsonUnknownTypeHandling Defines how deserializing a type declared as an object is handled during deserialization. Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public enum JsonUnknownTypeHandling Fields Name Description JsonElement A type declared as object is deserialized as a JsonElement. JsonNode A type declared as object is deserialized as a JsonNode."
  },
  "api/System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues-1.html": {
    "href": "api/System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues-1.html",
    "title": "Class JsonCollectionInfoValues<TCollection> | CodeFactory for Windows",
    "keywords": "Class JsonCollectionInfoValues<TCollection> Inheritance object JsonCollectionInfoValues<TCollection> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Json.Serialization.Metadata Assembly: System.Text.Json.dll Syntax public sealed class JsonCollectionInfoValues<TCollection> Type Parameters Name Description TCollection Constructors JsonCollectionInfoValues() Declaration public JsonCollectionInfoValues() Properties ElementInfo Declaration public JsonTypeInfo ElementInfo { get; init; } Property Value Type Description JsonTypeInfo KeyInfo Declaration public JsonTypeInfo? KeyInfo { get; init; } Property Value Type Description JsonTypeInfo NumberHandling Declaration public JsonNumberHandling NumberHandling { get; init; } Property Value Type Description JsonNumberHandling ObjectCreator Declaration public Func<TCollection>? ObjectCreator { get; init; } Property Value Type Description Func<TCollection> SerializeHandler Declaration public Action<Utf8JsonWriter, TCollection>? SerializeHandler { get; init; } Property Value Type Description Action<Utf8JsonWriter, TCollection>"
  },
  "api/System.Text.Json.Serialization.Metadata.JsonObjectInfoValues-1.html": {
    "href": "api/System.Text.Json.Serialization.Metadata.JsonObjectInfoValues-1.html",
    "title": "Class JsonObjectInfoValues<T> | CodeFactory for Windows",
    "keywords": "Class JsonObjectInfoValues<T> Provides serialization metadata about an object type with constructors, properties, and fields. Inheritance object JsonObjectInfoValues<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Json.Serialization.Metadata Assembly: System.Text.Json.dll Syntax public sealed class JsonObjectInfoValues<T> Type Parameters Name Description T The object type to serialize or deserialize. Constructors JsonObjectInfoValues() Declaration public JsonObjectInfoValues() Properties ConstructorParameterMetadataInitializer Provides a mechanism to initialize metadata for a parameterized constructor of the class or struct to be used when deserializing. Declaration public Func<JsonParameterInfoValues[]>? ConstructorParameterMetadataInitializer { get; init; } Property Value Type Description Func<JsonParameterInfoValues[]> NumberHandling Gets or sets an object that specifies how number properties and fields should be processed when serializing and deserializing. Declaration public JsonNumberHandling NumberHandling { get; init; } Property Value Type Description JsonNumberHandling ObjectCreator Gets or sets a mechanism to create an instance of the class or struct using a parameterless constructor during deserialization. Declaration public Func<T>? ObjectCreator { get; init; } Property Value Type Description Func<T> ObjectWithParameterizedConstructorCreator Gets or sets a mechanism to create an instance of the class or struct using a parameterized constructor during deserialization. Declaration public Func<object[], T>? ObjectWithParameterizedConstructorCreator { get; init; } Property Value Type Description Func<object[], T> PropertyMetadataInitializer Gets or sets a mechanism to initialize metadata for properties and fields of the class or struct. Declaration public Func<JsonSerializerContext, JsonPropertyInfo[]>? PropertyMetadataInitializer { get; init; } Property Value Type Description Func<JsonSerializerContext, JsonPropertyInfo[]> SerializeHandler Gets or sets a serialization implementation for instances of the class or struct that assumes options specified by JsonSourceGenerationOptionsAttribute. Declaration public Action<Utf8JsonWriter, T>? SerializeHandler { get; init; } Property Value Type Description Action<Utf8JsonWriter, T>"
  },
  "api/System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.html": {
    "href": "api/System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.html",
    "title": "Class JsonParameterInfoValues | CodeFactory for Windows",
    "keywords": "Class JsonParameterInfoValues Provides information about a constructor parameter required for JSON deserialization. Inheritance object JsonParameterInfoValues Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Json.Serialization.Metadata Assembly: System.Text.Json.dll Syntax public sealed class JsonParameterInfoValues Constructors JsonParameterInfoValues() Declaration public JsonParameterInfoValues() Properties DefaultValue Gets or sets the default value of the parameter. Declaration public object? DefaultValue { get; init; } Property Value Type Description object HasDefaultValue Gets or sets a value that specifies whether a default value was specified for the parameter. Declaration public bool HasDefaultValue { get; init; } Property Value Type Description bool Name Gets or sets the name of the parameter. Declaration public string Name { get; init; } Property Value Type Description string ParameterType Gets or sets the type of the parameter. Declaration public Type ParameterType { get; init; } Property Value Type Description Type Position Gets or sets the zero-based position of the parameter in the formal parameter list. Declaration public int Position { get; init; } Property Value Type Description int"
  },
  "api/System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues-1.html": {
    "href": "api/System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues-1.html",
    "title": "Class JsonPropertyInfoValues<T> | CodeFactory for Windows",
    "keywords": "Class JsonPropertyInfoValues<T> Inheritance object JsonPropertyInfoValues<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Json.Serialization.Metadata Assembly: System.Text.Json.dll Syntax public sealed class JsonPropertyInfoValues<T> Type Parameters Name Description T Constructors JsonPropertyInfoValues() Declaration public JsonPropertyInfoValues() Properties Converter Declaration public JsonConverter<T>? Converter { get; init; } Property Value Type Description JsonConverter<T> DeclaringType Declaration public Type DeclaringType { get; init; } Property Value Type Description Type Getter Declaration public Func<object, T?>? Getter { get; init; } Property Value Type Description Func<object, T> HasJsonInclude Declaration public bool HasJsonInclude { get; init; } Property Value Type Description bool IgnoreCondition Declaration public JsonIgnoreCondition? IgnoreCondition { get; init; } Property Value Type Description JsonIgnoreCondition? IsExtensionData Declaration public bool IsExtensionData { get; init; } Property Value Type Description bool IsProperty Declaration public bool IsProperty { get; init; } Property Value Type Description bool IsPublic Declaration public bool IsPublic { get; init; } Property Value Type Description bool IsVirtual Declaration public bool IsVirtual { get; init; } Property Value Type Description bool JsonPropertyName Declaration public string? JsonPropertyName { get; init; } Property Value Type Description string NumberHandling Declaration public JsonNumberHandling? NumberHandling { get; init; } Property Value Type Description JsonNumberHandling? PropertyName Declaration public string PropertyName { get; init; } Property Value Type Description string PropertyTypeInfo Declaration public JsonTypeInfo PropertyTypeInfo { get; init; } Property Value Type Description JsonTypeInfo Setter Declaration public Action<object, T?>? Setter { get; init; } Property Value Type Description Action<object, T>"
  },
  "api/System.Text.Json.Serialization.Metadata.JsonTypeInfo.html": {
    "href": "api/System.Text.Json.Serialization.Metadata.JsonTypeInfo.html",
    "title": "Class JsonTypeInfo | CodeFactory for Windows",
    "keywords": "Class JsonTypeInfo Provides JSON serialization-related metadata about a type. Inheritance object JsonTypeInfo Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Serialization.Metadata Assembly: System.Text.Json.dll Syntax public class JsonTypeInfo"
  },
  "api/System.Text.Json.Serialization.Metadata.html": {
    "href": "api/System.Text.Json.Serialization.Metadata.html",
    "title": "Namespace System.Text.Json.Serialization.Metadata | CodeFactory for Windows",
    "keywords": "Namespace System.Text.Json.Serialization.Metadata Classes JsonCollectionInfoValues<TCollection> JsonObjectInfoValues<T> Provides serialization metadata about an object type with constructors, properties, and fields. JsonParameterInfoValues Provides information about a constructor parameter required for JSON deserialization. JsonPropertyInfoValues<T> JsonTypeInfo Provides JSON serialization-related metadata about a type."
  },
  "api/System.Text.Json.Serialization.ReferenceHandler-1.html": {
    "href": "api/System.Text.Json.Serialization.ReferenceHandler-1.html",
    "title": "Class ReferenceHandler<T> | CodeFactory for Windows",
    "keywords": "Class ReferenceHandler<T> This class defines how the JsonSerializer deals with references on serialization and deserialization. Inheritance object ReferenceHandler ReferenceHandler<T> Inherited Members ReferenceHandler.Preserve ReferenceHandler.IgnoreCycles object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public sealed class ReferenceHandler<T> : ReferenceHandler where T : ReferenceResolver, new() Type Parameters Name Description T The type of the ReferenceResolver to create on each serialization or deserialization call. Constructors ReferenceHandler() Initializes a new instance of the ReferenceHandler<T> generic class that can create a ReferenceResolver instance of the specified type. Declaration public ReferenceHandler() Methods CreateResolver() Creates a new ReferenceResolver of type T used for each serialization call. Declaration public override ReferenceResolver CreateResolver() Returns Type Description ReferenceResolver The new resolver to use for serialization and deserialization. Overrides ReferenceHandler.CreateResolver()"
  },
  "api/System.Text.Json.Serialization.ReferenceHandler.html": {
    "href": "api/System.Text.Json.Serialization.ReferenceHandler.html",
    "title": "Class ReferenceHandler | CodeFactory for Windows",
    "keywords": "Class ReferenceHandler This class defines how the JsonSerializer deals with references on serialization and deserialization. Inheritance object ReferenceHandler ReferenceHandler<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public abstract class ReferenceHandler Constructors ReferenceHandler() Initializes a new instance of the ReferenceHandler class. Declaration protected ReferenceHandler() Properties IgnoreCycles Ignores an object when a reference cycle is detected during serialization. Declaration public static ReferenceHandler IgnoreCycles { get; } Property Value Type Description ReferenceHandler Preserve Metadata properties will be honored when deserializing JSON objects and arrays into reference types and written when serializing reference types. This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references. Declaration public static ReferenceHandler Preserve { get; } Property Value Type Description ReferenceHandler Methods CreateResolver() Returns the ReferenceResolver used for each serialization call. Declaration public abstract ReferenceResolver CreateResolver() Returns Type Description ReferenceResolver The resolver to use for serialization and deserialization."
  },
  "api/System.Text.Json.Serialization.ReferenceResolver.html": {
    "href": "api/System.Text.Json.Serialization.ReferenceResolver.html",
    "title": "Class ReferenceResolver | CodeFactory for Windows",
    "keywords": "Class ReferenceResolver This class defines how the JsonSerializer deals with references on serialization and deserialization. Defines the core behavior of preserving references on serialization and deserialization. Inheritance object ReferenceResolver Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Json.Serialization Assembly: System.Text.Json.dll Syntax public abstract class ReferenceResolver Constructors ReferenceResolver() Initializes a new instance of the ReferenceResolver class. Declaration protected ReferenceResolver() Methods AddReference(string, object) Adds an entry to the bag of references using the specified id and value. This method gets called when an $id metadata property from a JSON object is read. Declaration public abstract void AddReference(string referenceId, object value) Parameters Type Name Description string referenceId The identifier of the JSON object or array. object value The value of the CLR reference type object that results from parsing the JSON object. GetReference(object, out bool) Gets the reference identifier of the specified value if exists; otherwise a new id is assigned. This method gets called before a CLR object is written so we can decide whether to write $id and enumerate the rest of its properties or $ref and step into the next object. Declaration public abstract string GetReference(object value, out bool alreadyExists) Parameters Type Name Description object value The value of the CLR reference type object to get an id for. bool alreadyExists When this method returns, true if a reference to value already exists; otherwise, false. Returns Type Description string The reference id for the specified object. ResolveReference(string) Returns the CLR reference type object related to the specified reference id. This method gets called when $ref metadata property is read. Declaration public abstract object ResolveReference(string referenceId) Parameters Type Name Description string referenceId The reference id related to the returned object. Returns Type Description object The reference type object related to the specified reference id."
  },
  "api/System.Text.Json.Serialization.html": {
    "href": "api/System.Text.Json.Serialization.html",
    "title": "Namespace System.Text.Json.Serialization | CodeFactory for Windows",
    "keywords": "Namespace System.Text.Json.Serialization Classes JsonAttribute Provides the base class for serialization attributes. JsonConstructorAttribute When placed on a constructor, indicates that the constructor should be used to create instances of the type on deserialization. JsonConverter Converts an object or value to or from JSON. JsonConverterAttribute When placed on a property or type, specifies the converter type to use. JsonConverterFactory Supports converting several types by using a factory pattern. JsonConverter<T> Converts an object or value to or from JSON. JsonExtensionDataAttribute When placed on a property of type IDictionary<TKey, TValue>, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization. JsonIgnoreAttribute Prevents a property from being serialized or deserialized. JsonIncludeAttribute Indicates that the member should be included for serialization and deserialization. JsonNumberHandlingAttribute When placed on a type, property, or field, indicates what JsonNumberHandling settings should be used when serializing or deserializing numbers. JsonPropertyNameAttribute Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by JsonNamingPolicy. JsonPropertyOrderAttribute Specifies the property order that is present in the JSON when serializing. Lower values are serialized first. If the attribute is not specified, the default value is 0. JsonSerializableAttribute Instructs the System.Text.Json source generator to generate source code to help optimize performance when serializing and deserializing instances of the specified type and types in its object graph. JsonSourceGenerationOptionsAttribute Instructs the System.Text.Json source generator to assume the specified options will be used at run time via JsonSerializerOptions. JsonStringEnumConverter Converts enumeration values to and from strings. ReferenceHandler This class defines how the JsonSerializer deals with references on serialization and deserialization. ReferenceHandler<T> This class defines how the JsonSerializer deals with references on serialization and deserialization. ReferenceResolver This class defines how the JsonSerializer deals with references on serialization and deserialization. Defines the core behavior of preserving references on serialization and deserialization. Interfaces IJsonOnDeserialized Specifies that the JSON type should have its OnDeserialized() method called after deserialization occurs. IJsonOnDeserializing Specifies that the type should have its OnDeserializing() method called before deserialization occurs. IJsonOnSerialized Specifies that the type should have its OnSerialized() method called after serialization occurs. IJsonOnSerializing Specifies that the type should have its OnSerializing() method called before serialization occurs. Enums JsonIgnoreCondition Controls how the JsonIgnoreAttribute ignores properties on serialization and deserialization. JsonKnownNamingPolicy The JsonNamingPolicy to be used at run time. JsonNumberHandling Determines how JsonSerializer handles numbers when serializing and deserializing. JsonSourceGenerationMode The generation mode for the System.Text.Json source generator. JsonUnknownTypeHandling Defines how deserializing a type declared as an object is handled during deserialization."
  },
  "api/System.Text.Json.Utf8JsonReader.html": {
    "href": "api/System.Text.Json.Utf8JsonReader.html",
    "title": "Struct Utf8JsonReader | CodeFactory for Windows",
    "keywords": "Struct Utf8JsonReader Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public ref struct Utf8JsonReader Constructors Utf8JsonReader(ReadOnlySequence<byte>, bool, JsonReaderState) Initializes a new instance of the Utf8JsonReader structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process. Declaration public Utf8JsonReader(ReadOnlySequence<byte> jsonData, bool isFinalBlock, JsonReaderState state) Parameters Type Name Description ReadOnlySequence<byte> jsonData The UTF-8 encoded JSON text to process. bool isFinalBlock true to indicate that the input sequence contains the entire data to process; false to indicate that the input span contains partial data with more data to follow. JsonReaderState state An object that contains the reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the CurrentState property from the previous instance of the Utf8JsonReader. Utf8JsonReader(ReadOnlySequence<byte>, JsonReaderOptions) Initializes a new instance of the Utf8JsonReader structure that processes a read-only sequence of UTF-8 encoded text using the specified options. Declaration public Utf8JsonReader(ReadOnlySequence<byte> jsonData, JsonReaderOptions options = default) Parameters Type Name Description ReadOnlySequence<byte> jsonData The UTF-8 encoded JSON text to process. JsonReaderOptions options Defines customized behavior of the Utf8JsonReader that differs from the JSON RFC (for example how to handle comments or maximum depth allowed when reading). By default, the Utf8JsonReader follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64. Utf8JsonReader(ReadOnlySpan<byte>, bool, JsonReaderState) Initializes a new instance of the Utf8JsonReader structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process. Declaration public Utf8JsonReader(ReadOnlySpan<byte> jsonData, bool isFinalBlock, JsonReaderState state) Parameters Type Name Description ReadOnlySpan<byte> jsonData The UTF-8 encoded JSON text to process. bool isFinalBlock true to indicate that the input sequence contains the entire data to process; false to indicate that the input span contains partial data with more data to follow. JsonReaderState state An object that contains the reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the CurrentState property from the previous instance of the Utf8JsonReader. Utf8JsonReader(ReadOnlySpan<byte>, JsonReaderOptions) Initializes a new instance of the Utf8JsonReader structure that processes a read-only span of UTF-8 encoded text using the specified options. Declaration public Utf8JsonReader(ReadOnlySpan<byte> jsonData, JsonReaderOptions options = default) Parameters Type Name Description ReadOnlySpan<byte> jsonData The UTF-8 encoded JSON text to process. JsonReaderOptions options Defines customized behavior of the Utf8JsonReader that differs from the JSON RFC (for example how to handle comments or maximum depth allowed when reading). By default, the Utf8JsonReader follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64. Properties BytesConsumed Gets the total number of bytes consumed so far by this instance of the Utf8JsonReader. Declaration public long BytesConsumed { get; } Property Value Type Description long The total number of bytes consumed so far. CurrentDepth Gets the depth of the current token. Declaration public int CurrentDepth { get; } Property Value Type Description int The depth of the current token. CurrentState Gets the current Utf8JsonReader state to pass to a Utf8JsonReader constructor with more data. Declaration public JsonReaderState CurrentState { get; } Property Value Type Description JsonReaderState The current reader state. HasValueSequence Gets a value that indicates which Value property to use to get the token value. Declaration public readonly bool HasValueSequence { get; } Property Value Type Description bool true if ValueSequence should be used to get the token value; false if ValueSpan should be used instead. IsFinalBlock Gets the mode of this instance of the Utf8JsonReader which indicates whether all the JSON data was provided or there is more data to come. Declaration public bool IsFinalBlock { get; } Property Value Type Description bool true if the reader was constructed with the input span or sequence containing the entire JSON data to process; false if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow. Position Gets the current SequencePosition within the provided UTF-8 encoded input ReadOnlySequence<byte> or a default SequencePosition if the Utf8JsonReader struct was constructed with a ReadOnlySpan<byte>. Declaration public SequencePosition Position { get; } Property Value Type Description SequencePosition The current SequencePosition within the provided UTF-8 encoded input ReadOnlySequence<byte> or a default SequencePosition if the Utf8JsonReader struct was constructed with a ReadOnlySpan<byte>. TokenStartIndex Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space. Declaration public readonly long TokenStartIndex { get; } Property Value Type Description long The starting index of the last processed JSON token within the given UTF-8 encoded input text. TokenType Gets the type of the last processed JSON token in the UTF-8 encoded JSON text. Declaration public JsonTokenType TokenType { get; } Property Value Type Description JsonTokenType The type of the last processed JSON token. ValueSequence Gets the raw value of the last processed token as a ReadOnlySequence<byte> slice of the input payload, only if the token is contained within multiple segments. Declaration public readonly ReadOnlySequence<byte> ValueSequence { get; } Property Value Type Description ReadOnlySequence<byte> A byte read-only sequence. ValueSpan Gets the raw value of the last processed token as a ReadOnlySpan<byte> slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan<byte>. Declaration public readonly ReadOnlySpan<byte> ValueSpan { get; } Property Value Type Description ReadOnlySpan<byte> A read-only span of bytes. Methods GetBoolean() Reads the next JSON token value from the source as a bool. Declaration public bool GetBoolean() Returns Type Description bool true if the TokenType is True; false if the TokenType is False. Exceptions Type Condition InvalidOperationException The value of the JSON token isn't a boolean value (that is, True or False). GetByte() Parses the current JSON token value from the source as a byte. Declaration public byte GetByte() Returns Type Description byte The value of the UTF-8 encoded token. Exceptions Type Condition InvalidOperationException The value of the JSON token is not a Number. FormatException The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation). -or- The JSON token value represents a number less than MinValue or greater than MaxValue. GetBytesFromBase64() Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array. Declaration public byte[] GetBytesFromBase64() Returns Type Description byte[] The byte array that represents the current JSON token value. Exceptions Type Condition InvalidOperationException The type of the JSON token is not a String. FormatException The value is not encoded as Base64 text, so it can't be decoded to bytes. -or- The value contains invalid or more than two padding characters. -or- The value is incomplete. That is, the JSON string length is not a multiple of 4. GetComment() Parses the current JSON token value from the source as a comment, transcoded it as a string. Declaration public string GetComment() Returns Type Description string The comment that represents the current JSON token value. Exceptions Type Condition InvalidOperationException The JSON token is not a comment. GetDateTime() Reads the next JSON token value from the source and parses it to a DateTime. Declaration public DateTime GetDateTime() Returns Type Description DateTime The date and time value, if the entire UTF-8 encoded token value can be successfully parsed. Exceptions Type Condition InvalidOperationException The value of the JSON token isn't a String. FormatException The JSON token value cannot be read as a DateTime. -or- The entire UTF-8 encoded token value cannot be parsed to a DateTime value. -or- The JSON token value is of an unsupported format. GetDateTimeOffset() Reads the next JSON token value from the source and parses it to a DateTimeOffset. Declaration public DateTimeOffset GetDateTimeOffset() Returns Type Description DateTimeOffset The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed. Exceptions Type Condition InvalidOperationException The value of the JSON token isn't a String. FormatException The JSON token value cannot be read as a DateTimeOffset. -or- The entire UTF-8 encoded token value cannot be parsed to a DateTimeOffset value. -or- The JSON token value is of an unsupported format. GetDecimal() Reads the next JSON token value from the source and parses it to a decimal. Declaration public decimal GetDecimal() Returns Type Description decimal The UTF-8 encoded token value parsed to a decimal. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. FormatException The JSON token value represents a number less than MinValue or greater than MaxValue. GetDouble() Reads the next JSON token value from the source and parses it to a double. Declaration public double GetDouble() Returns Type Description double The UTF-8 encoded token value parsed to a double. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. FormatException The JSON token value represents a number less than MinValue or greater than MaxValue. GetGuid() Reads the next JSON token value from the source and parses it to a Guid. Declaration public Guid GetGuid() Returns Type Description Guid The GUID value, if the entire UTF-8 encoded token value can be successfully parsed. Exceptions Type Condition InvalidOperationException The value of the JSON token isn't a String. FormatException The JSON token value is in an unsupported format for a Guid. -or- The entire UTF-8 encoded token value cannot be parsed to a Guid value. GetInt16() Parses the current JSON token value from the source as a short. Declaration public short GetInt16() Returns Type Description short The UTF-8 encoded token value parsed to an short. Exceptions Type Condition InvalidOperationException The value of the JSON token is not a Number. FormatException The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation). -or- The JSON token value represents a number less than MinValue or greater than MaxValue. GetInt32() Reads the next JSON token value from the source and parses it to an int. Declaration public int GetInt32() Returns Type Description int The UTF-8 encoded token value parsed to an int. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. FormatException The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation. -or- The JSON token value represents a number less than MinValue or greater than MaxValue. GetInt64() Reads the next JSON token value from the source and parses it to an long. Declaration public long GetInt64() Returns Type Description long The UTF-8 encoded token value parsed to an long. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. FormatException The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation. -or- The JSON token value represents a number less than MinValue or greater than MaxValue. GetSByte() Parses the current JSON token value from the source as an sbyte. Declaration [CLSCompliant(false)] public sbyte GetSByte() Returns Type Description sbyte The UTF-8 encoded token value parsed to an sbyte. Exceptions Type Condition InvalidOperationException The value of the JSON token is not a Number. FormatException The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation). -or- The JSON token value represents a number less than MinValue or greater than MaxValue. GetSingle() Reads the next JSON token value from the source and parses it to a float. Declaration public float GetSingle() Returns Type Description float The UTF-8 encoded token value parsed to a float. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. FormatException The JSON token value represents a number less than MinValue or greater than MaxValue. GetString() Reads the next JSON token value from the source, unescaped, and transcoded as a string. Declaration public string? GetString() Returns Type Description string The token value parsed to a string, or null if TokenType is Null. Exceptions Type Condition InvalidOperationException The JSON token value isn't a string (that is, not a String, PropertyName, or Null). -or- The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates. GetUInt16() Parses the current JSON token value from the source as a ushort. Declaration [CLSCompliant(false)] public ushort GetUInt16() Returns Type Description ushort The UTF-8 encoded token value parsed to a ushort. Exceptions Type Condition InvalidOperationException The value of the JSON token is not a Number. FormatException The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation). -or- The JSON token value represents a number less than MinValue or greater than MaxValue. GetUInt32() Reads the next JSON token value from the source and parses it to a uint. Declaration [CLSCompliant(false)] public uint GetUInt32() Returns Type Description uint The UTF-8 encoded token value parsed to a uint. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. FormatException The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation. -or- The JSON token value represents a number less than MinValue or greater than MaxValue. GetUInt64() Reads the next JSON token value from the source and parses it to a ulong. Declaration [CLSCompliant(false)] public ulong GetUInt64() Returns Type Description ulong The UTF-8 encoded token value parsed to a ulong. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. FormatException The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation. -or- The JSON token value represents a number less than MinValue or greater than MaxValue. Read() Reads the next JSON token from the input source. Declaration public bool Read() Returns Type Description bool true if the token was read successfully; otherwise, false. Exceptions Type Condition JsonException An invalid JSON token according to the JSON RFC is encountered. -or- The current depth exceeds the recursive limit set by the maximum depth. Skip() Skips the children of the current JSON token. Declaration public void Skip() Exceptions Type Condition InvalidOperationException The reader was given partial data with more data to follow (that is, IsFinalBlock is false). JsonException An invalid JSON token was encountered while skipping, according to the JSON RFC. -or- The current depth exceeds the recursive limit set by the maximum depth. TryGetByte(out byte) Tries to parse the current JSON token value from the source as a byte and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetByte(out byte value) Parameters Type Name Description byte value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to a byte value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TryGetBytesFromBase64(out byte[]?) Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetBytesFromBase64(out byte[]? value) Parameters Type Name Description byte[] value When this method returns, contains the decoded binary representation of the Base64 text. Returns Type Description bool true if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token is not a String. TryGetDateTime(out DateTime) Tries to parse the current JSON token value from the source as a DateTime and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetDateTime(out DateTime value) Parameters Type Name Description DateTime value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to a DateTime value; otherwise, false. Exceptions Type Condition InvalidOperationException The value of the JSON token isn't a String. TryGetDateTimeOffset(out DateTimeOffset) Tries to parse the current JSON token value from the source as a DateTimeOffset and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetDateTimeOffset(out DateTimeOffset value) Parameters Type Name Description DateTimeOffset value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to a DateTimeOffset value; otherwise, false. Exceptions Type Condition InvalidOperationException The value of the JSON token isn't a String. TryGetDecimal(out decimal) Tries to parse the current JSON token value from the source as a decimal and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetDecimal(out decimal value) Parameters Type Name Description decimal value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to a decimal value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TryGetDouble(out double) Tries to parse the current JSON token value from the source as a double and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetDouble(out double value) Parameters Type Name Description double value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to a double value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TryGetGuid(out Guid) Tries to parse the current JSON token value from the source as a Guid and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetGuid(out Guid value) Parameters Type Name Description Guid value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to a Guid value; otherwise, false. Exceptions Type Condition InvalidOperationException The value of the JSON token isn't a String. TryGetInt16(out short) Tries to parse the current JSON token value from the source as an short and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetInt16(out short value) Parameters Type Name Description short value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to a short value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TryGetInt32(out int) Tries to parse the current JSON token value from the source as an int and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetInt32(out int value) Parameters Type Name Description int value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to an int value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TryGetInt64(out long) Tries to parse the current JSON token value from the source as an long and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetInt64(out long value) Parameters Type Name Description long value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to an long value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TryGetSByte(out sbyte) Tries to parse the current JSON token value from the source as an sbyte and returns a value that indicates whether the operation succeeded. Declaration [CLSCompliant(false)] public bool TryGetSByte(out sbyte value) Parameters Type Name Description sbyte value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to an sbyte value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TryGetSingle(out float) Tries to parse the current JSON token value from the source as a float and returns a value that indicates whether the operation succeeded. Declaration public bool TryGetSingle(out float value) Parameters Type Name Description float value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to an float value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TryGetUInt16(out ushort) Tries to parse the current JSON token value from the source as a ushort and returns a value that indicates whether the operation succeeded. Declaration [CLSCompliant(false)] public bool TryGetUInt16(out ushort value) Parameters Type Name Description ushort value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to a ushort value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TryGetUInt32(out uint) Tries to parse the current JSON token value from the source as a uint and returns a value that indicates whether the operation succeeded. Declaration [CLSCompliant(false)] public bool TryGetUInt32(out uint value) Parameters Type Name Description uint value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to a uint value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TryGetUInt64(out ulong) Tries to parse the current JSON token value from the source as a ulong and returns a value that indicates whether the operation succeeded. Declaration [CLSCompliant(false)] public bool TryGetUInt64(out ulong value) Parameters Type Name Description ulong value When this method returns, contains the parsed value. Returns Type Description bool true if the entire UTF-8 encoded token value can be successfully parsed to a ulong value; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token value isn't a Number. TrySkip() Tries to skip the children of the current JSON token. Declaration public bool TrySkip() Returns Type Description bool true if there was enough data for the children to be skipped successfully; otherwise, false. Exceptions Type Condition JsonException An invalid JSON token was encountered while skipping, according to the JSON RFC. -or - The current depth exceeds the recursive limit set by the maximum depth. ValueTextEquals(ReadOnlySpan<byte>) Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match. Declaration public bool ValueTextEquals(ReadOnlySpan<byte> utf8Text) Parameters Type Name Description ReadOnlySpan<byte> utf8Text The UTF-8 encoded text to compare against. Returns Type Description bool true if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token is not a JSON string (that is, it is not String or PropertyName). ValueTextEquals(ReadOnlySpan<char>) Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match. Declaration public bool ValueTextEquals(ReadOnlySpan<char> text) Parameters Type Name Description ReadOnlySpan<char> text The text to compare against. Returns Type Description bool true if the JSON token value in the source matches the lookup text; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token is not a JSON string (that is, it is not String or PropertyName). ValueTextEquals(string?) Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match. Declaration public bool ValueTextEquals(string? text) Parameters Type Name Description string text The text to compare against. Returns Type Description bool true if the JSON token value in the source matches the lookup text; otherwise, false. Exceptions Type Condition InvalidOperationException The JSON token is not a JSON string (that is, it is not String or PropertyName)."
  },
  "api/System.Text.Json.Utf8JsonWriter.html": {
    "href": "api/System.Text.Json.Utf8JsonWriter.html",
    "title": "Class Utf8JsonWriter | CodeFactory for Windows",
    "keywords": "Class Utf8JsonWriter Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text. Inheritance object Utf8JsonWriter Implements IDisposable IAsyncDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Json Assembly: System.Text.Json.dll Syntax public sealed class Utf8JsonWriter : IDisposable, IAsyncDisposable Constructors Utf8JsonWriter(IBufferWriter<byte>, JsonWriterOptions) Initializes a new instance of the Utf8JsonWriter class using the specified IBufferWriter<T> to write the output to and customization options. Declaration public Utf8JsonWriter(IBufferWriter<byte> bufferWriter, JsonWriterOptions options = default) Parameters Type Name Description IBufferWriter<byte> bufferWriter The destination for writing JSON text. JsonWriterOptions options Defines the customized behavior of the Utf8JsonWriter. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC. Exceptions Type Condition ArgumentNullException bufferWriter is null. Utf8JsonWriter(Stream, JsonWriterOptions) Initializes a new instance of the Utf8JsonWriter class using the specified stream to write the output to and customization options. Declaration public Utf8JsonWriter(Stream utf8Json, JsonWriterOptions options = default) Parameters Type Name Description Stream utf8Json The destination for writing JSON text. JsonWriterOptions options Defines the customized behavior of the Utf8JsonWriter. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC. Exceptions Type Condition ArgumentNullException utf8Json is null. Properties BytesCommitted Gets the total number of bytes committed to the output by the current instance so far. Declaration public long BytesCommitted { get; } Property Value Type Description long The total number of bytes committed to the output by the Utf8JsonWriter so far. BytesPending Gets the number of bytes written by the Utf8JsonWriter so far that have not yet been flushed to the output and committed. Declaration public int BytesPending { get; } Property Value Type Description int The number of bytes written so far by the Utf8JsonWriter that have not yet been flushed to the output and committed. CurrentDepth Gets the depth of the current token. Declaration public int CurrentDepth { get; } Property Value Type Description int The depth of the current token. Options Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape. Declaration public JsonWriterOptions Options { get; } Property Value Type Description JsonWriterOptions The custom behavior of this instance of the writer for formatting, validating, and escaping. Methods Dispose() Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance. Declaration public void Dispose() DisposeAsync() Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task representing the asynchronous dispose operation. Flush() Commits the JSON text written so far, which makes it visible to the output destination. Declaration public void Flush() Exceptions Type Condition ObjectDisposedException This instance has been disposed. FlushAsync(CancellationToken) Asynchronously commits the JSON text written so far, which makes it visible to the output destination. Declaration public Task FlushAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task representing the asynchronous flush operation. Exceptions Type Condition ObjectDisposedException This instance has been disposed. Reset() Resets the internal state of this instance so that it can be reused. Declaration public void Reset() Exceptions Type Condition ObjectDisposedException This instance has been disposed. Reset(IBufferWriter<byte>) Resets the internal state of this instance so that it can be reused with a new instance of IBufferWriter<T>. Declaration public void Reset(IBufferWriter<byte> bufferWriter) Parameters Type Name Description IBufferWriter<byte> bufferWriter The destination for writing JSON text. Exceptions Type Condition ArgumentNullException bufferWriter is null. ObjectDisposedException This instance has been disposed. Reset(Stream) Resets the internal state of this instance so that it can be reused with a new instance of Stream. Declaration public void Reset(Stream utf8Json) Parameters Type Name Description Stream utf8Json The destination for writing JSON text. Exceptions Type Condition ArgumentNullException utf8Json is null. ObjectDisposedException This instance has been disposed. WriteBase64String(ReadOnlySpan<byte>, ReadOnlySpan<byte>) Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteBase64String(ReadOnlySpan<byte> utf8PropertyName, ReadOnlySpan<byte> bytes) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded name of the property to write. ReadOnlySpan<byte> bytes The binary data to write as Base64 encoded text. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteBase64String(ReadOnlySpan<char>, ReadOnlySpan<byte>) Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteBase64String(ReadOnlySpan<char> propertyName, ReadOnlySpan<byte> bytes) Parameters Type Name Description ReadOnlySpan<char> propertyName The property name of the JSON object to be transcoded and written as UTF-8. ReadOnlySpan<byte> bytes The binary data to write as Base64 encoded text. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteBase64String(string, ReadOnlySpan<byte>) Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteBase64String(string propertyName, ReadOnlySpan<byte> bytes) Parameters Type Name Description string propertyName The property name of the JSON object to be transcoded and written as UTF-8. ReadOnlySpan<byte> bytes The binary data to write as Base64 encoded text. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. ArgumentNullException The propertyName parameter is null. WriteBase64String(JsonEncodedText, ReadOnlySpan<byte>) Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteBase64String(JsonEncodedText propertyName, ReadOnlySpan<byte> bytes) Parameters Type Name Description JsonEncodedText propertyName The JSON-encoded name of the property to write. ReadOnlySpan<byte> bytes The binary data to write as Base64 encoded text. Exceptions Type Condition ArgumentException The specified value is too large. InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteBase64StringValue(ReadOnlySpan<byte>) Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array. Declaration public void WriteBase64StringValue(ReadOnlySpan<byte> bytes) Parameters Type Name Description ReadOnlySpan<byte> bytes The binary data to be written as a Base64 encoded JSON string element of a JSON array. Exceptions Type Condition ArgumentException The specified value is too large. InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteBoolean(ReadOnlySpan<byte>, bool) Writes a property name specified as a read-only span of bytes and a bool value (as a JSON literal true or false) as part of a name/value pair of a JSON object. Declaration public void WriteBoolean(ReadOnlySpan<byte> utf8PropertyName, bool value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. bool value The value to be written as a JSON literal true or false as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteBoolean(ReadOnlySpan<char>, bool) Writes a property name specified as a read-only character span and a bool value (as a JSON literal true or false) as part of a name/value pair of a JSON object. Declaration public void WriteBoolean(ReadOnlySpan<char> propertyName, bool value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. bool value The value to be written as a JSON literal true or false as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteBoolean(string, bool) Writes a property name specified as a string and a bool value (as a JSON literal true or false) as part of a name/value pair of a JSON object. Declaration public void WriteBoolean(string propertyName, bool value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. bool value The value to be written as a JSON literal true or false as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. ArgumentNullException The propertyName parameter is null. WriteBoolean(JsonEncodedText, bool) Writes the pre-encoded property name and bool value (as a JSON literal true or false) as part of a name/value pair of a JSON object. Declaration public void WriteBoolean(JsonEncodedText propertyName, bool value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. bool value The value to be written as a JSON literal true or false as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteBooleanValue(bool) Writes a bool value (as a JSON literal true or false) as an element of a JSON array. Declaration public void WriteBooleanValue(bool value) Parameters Type Name Description bool value The value to be written as a JSON literal true or false as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteCommentValue(ReadOnlySpan<byte>) Writes a UTF-8 text value as a JSON comment. Declaration public void WriteCommentValue(ReadOnlySpan<byte> utf8Value) Parameters Type Name Description ReadOnlySpan<byte> utf8Value The UTF-8 encoded value to be written as a JSON comment within /../. Exceptions Type Condition ArgumentException The specified value is too large. -or- utf8Value contains a comment delimiter (that is, */). WriteCommentValue(ReadOnlySpan<char>) Writes a UTF-16 text value as a JSON comment. Declaration public void WriteCommentValue(ReadOnlySpan<char> value) Parameters Type Name Description ReadOnlySpan<char> value The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /../. Exceptions Type Condition ArgumentException The specified value is too large. -or- value contains a comment delimiter (that is, */). WriteCommentValue(string) Writes a string text value as a JSON comment. Declaration public void WriteCommentValue(string value) Parameters Type Name Description string value The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /../. Exceptions Type Condition ArgumentException The specified value is too large. -or- value contains a comment delimiter (that is, */). ArgumentNullException The value parameter is null. WriteEndArray() Writes the end of a JSON array. Declaration public void WriteEndArray() Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteEndObject() Writes the end of a JSON object. Declaration public void WriteEndObject() Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteNull(ReadOnlySpan<byte>) Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object. Declaration public void WriteNull(ReadOnlySpan<byte> utf8PropertyName) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNull(ReadOnlySpan<char>) Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object. Declaration public void WriteNull(ReadOnlySpan<char> propertyName) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNull(string) Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object. Declaration public void WriteNull(string propertyName) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteNull(JsonEncodedText) Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object. Declaration public void WriteNull(JsonEncodedText propertyName) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. Exceptions Type Condition InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteNullValue() Writes the JSON literal null as an element of a JSON array. Declaration public void WriteNullValue() Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteNumber(ReadOnlySpan<byte>, decimal) Writes a property name specified as a read-only span of bytes and a decimal value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, decimal value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. decimal value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<byte>, double) Writes a property name specified as a read-only span of bytes and a double value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, double value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. double value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<byte>, int) Writes a property name specified as a read-only span of bytes and an int value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, int value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. int value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<byte>, long) Writes a property name specified as a read-only span of bytes and an long value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, long value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. long value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<byte>, float) Writes a property name specified as a read-only span of bytes and a float value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, float value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. float value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<byte>, uint) Writes a property name specified as a read-only span of bytes and a uint value (as a JSON number) as part of a name/value pair of a JSON object. Declaration [CLSCompliant(false)] public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, uint value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. uint value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<byte>, ulong) Writes a property name specified as a read-only span of bytes and a ulong value (as a JSON number) as part of a name/value pair of a JSON object. Declaration [CLSCompliant(false)] public void WriteNumber(ReadOnlySpan<byte> utf8PropertyName, ulong value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. ulong value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<char>, decimal) Writes a property name specified as a read-only character span and a decimal value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(ReadOnlySpan<char> propertyName, decimal value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. decimal value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<char>, double) Writes a property name specified as a read-only character span and a double value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(ReadOnlySpan<char> propertyName, double value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. double value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<char>, int) Writes a property name specified as a read-only character span and an int value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(ReadOnlySpan<char> propertyName, int value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. int value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<char>, long) Writes a property name specified as a read-only character span and an long value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(ReadOnlySpan<char> propertyName, long value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. long value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<char>, float) Writes a property name specified as a read-only character span and a float value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(ReadOnlySpan<char> propertyName, float value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. float value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<char>, uint) Writes a property name specified as a read-only character span and a uint value (as a JSON number) as part of a name/value pair of a JSON object. Declaration [CLSCompliant(false)] public void WriteNumber(ReadOnlySpan<char> propertyName, uint value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. uint value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(ReadOnlySpan<char>, ulong) Writes a property name specified as a read-only character span and a ulong value (as a JSON number) as part of a name/value pair of a JSON object. Declaration [CLSCompliant(false)] public void WriteNumber(ReadOnlySpan<char> propertyName, ulong value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. ulong value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteNumber(string, decimal) Writes a property name specified as a string and a decimal value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(string propertyName, decimal value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. decimal value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteNumber(string, double) Writes a property name specified as a string and a double value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(string propertyName, double value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. double value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteNumber(string, int) Writes a property name specified as a string and an int value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(string propertyName, int value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. int value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteNumber(string, long) Writes a property name specified as a string and an long value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(string propertyName, long value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. long value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteNumber(string, float) Writes a property name specified as a string and a float value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(string propertyName, float value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. float value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteNumber(string, uint) Writes a property name specified as a string and a uint value (as a JSON number) as part of a name/value pair of a JSON object. Declaration [CLSCompliant(false)] public void WriteNumber(string propertyName, uint value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. uint value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteNumber(string, ulong) Writes a property name specified as a string and a ulong value (as a JSON number) as part of a name/value pair of a JSON object. Declaration [CLSCompliant(false)] public void WriteNumber(string propertyName, ulong value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. ulong value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteNumber(JsonEncodedText, decimal) Writes the pre-encoded property name and decimal value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(JsonEncodedText propertyName, decimal value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. decimal value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteNumber(JsonEncodedText, double) Writes the pre-encoded property name and double value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(JsonEncodedText propertyName, double value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. double value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteNumber(JsonEncodedText, int) Writes the pre-encoded property name and int value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(JsonEncodedText propertyName, int value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. int value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteNumber(JsonEncodedText, long) Writes the pre-encoded property name and long value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(JsonEncodedText propertyName, long value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. long value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteNumber(JsonEncodedText, float) Writes the pre-encoded property name and float value (as a JSON number) as part of a name/value pair of a JSON object. Declaration public void WriteNumber(JsonEncodedText propertyName, float value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. float value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteNumber(JsonEncodedText, uint) Writes the pre-encoded property name and uint value (as a JSON number) as part of a name/value pair of a JSON object. Declaration [CLSCompliant(false)] public void WriteNumber(JsonEncodedText propertyName, uint value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. uint value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteNumber(JsonEncodedText, ulong) Writes the pre-encoded property name and ulong value (as a JSON number) as part of a name/value pair of a JSON object. Declaration [CLSCompliant(false)] public void WriteNumber(JsonEncodedText propertyName, ulong value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. ulong value The value to be written as a JSON number as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteNumberValue(decimal) Writes a decimal value (as a JSON number) as an element of a JSON array. Declaration public void WriteNumberValue(decimal value) Parameters Type Name Description decimal value The value to be written as a JSON number as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteNumberValue(double) Writes a double value (as a JSON number) as an element of a JSON array. Declaration public void WriteNumberValue(double value) Parameters Type Name Description double value The value to be written as a JSON number as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteNumberValue(int) Writes an int value (as a JSON number) as an element of a JSON array. Declaration public void WriteNumberValue(int value) Parameters Type Name Description int value The value to be written as a JSON number as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteNumberValue(long) Writes an long value (as a JSON number) as an element of a JSON array. Declaration public void WriteNumberValue(long value) Parameters Type Name Description long value The value to be written as a JSON number as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteNumberValue(float) Writes a float value (as a JSON number) as an element of a JSON array. Declaration public void WriteNumberValue(float value) Parameters Type Name Description float value The value to be written as a JSON number as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteNumberValue(uint) Writes a uint value (as a JSON number) as an element of a JSON array. Declaration [CLSCompliant(false)] public void WriteNumberValue(uint value) Parameters Type Name Description uint value The value to be written as a JSON number as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteNumberValue(ulong) Writes a ulong value (as a JSON number) as an element of a JSON array. Declaration [CLSCompliant(false)] public void WriteNumberValue(ulong value) Parameters Type Name Description ulong value The value to be written as a JSON number as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WritePropertyName(ReadOnlySpan<byte>) Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object. Declaration public void WritePropertyName(ReadOnlySpan<byte> utf8PropertyName) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and this write operation would produce invalid JSON. WritePropertyName(ReadOnlySpan<char>) Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object. Declaration public void WritePropertyName(ReadOnlySpan<char> propertyName) Parameters Type Name Description ReadOnlySpan<char> propertyName The property name of the JSON object to be transcoded and written as UTF-8. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and this write operation would produce invalid JSON. WritePropertyName(string) Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object. Declaration public void WritePropertyName(string propertyName) Parameters Type Name Description string propertyName The property name of the JSON object to be transcoded and written as UTF-8. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and this write operation would produce invalid JSON. ArgumentNullException propertyName is null. WritePropertyName(JsonEncodedText) Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object. Declaration public void WritePropertyName(JsonEncodedText propertyName) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. Exceptions Type Condition InvalidOperationException Validation is enabled, and this write operation would produce invalid JSON. WriteRawValue(ReadOnlySpan<byte>, bool) Writes the input as JSON content. It is expected that the input content is a single complete JSON value. Declaration public void WriteRawValue(ReadOnlySpan<byte> utf8Json, bool skipInputValidation = false) Parameters Type Name Description ReadOnlySpan<byte> utf8Json The raw JSON content to write. bool skipInputValidation false to validate if the input is an RFC 8259-compliant JSON payload; true otherwise. Exceptions Type Condition ArgumentException The length of the input is zero or equal to MaxValue. JsonException skipInputValidation is false, and the input is not a valid, complete, single JSON value according to the JSON RFC, or the input JSON exceeds a recursive depth of 64. WriteRawValue(ReadOnlySpan<char>, bool) Writes the input as JSON content. It is expected that the input content is a single complete JSON value. Declaration public void WriteRawValue(ReadOnlySpan<char> json, bool skipInputValidation = false) Parameters Type Name Description ReadOnlySpan<char> json The raw JSON content to write. bool skipInputValidation false to validate if the input is an RFC 8259-compliant JSON payload; true otherwise. Exceptions Type Condition ArgumentException The length of the input is zero or greater than 715,827,882 (MaxValue / 3). JsonException skipInputValidation is false, and the input is not a valid, complete, single JSON value according to the JSON RFC, or the input JSON exceeds a recursive depth of 64. WriteRawValue(string, bool) Writes the input as JSON content. It is expected that the input content is a single complete JSON value. Declaration public void WriteRawValue(string json, bool skipInputValidation = false) Parameters Type Name Description string json The raw JSON content to write. bool skipInputValidation false to validate if the input is an RFC 8259-compliant JSON payload; true otherwise. Exceptions Type Condition ArgumentNullException json is null. ArgumentException The length of the input is zero or greater than 715,827,882 (MaxValue / 3). JsonException skipInputValidation is false, and the input is not a valid, complete, single JSON value according to the JSON RFC, or the input JSON exceeds a recursive depth of 64. WriteStartArray() Writes the beginning of a JSON array. Declaration public void WriteStartArray() Exceptions Type Condition InvalidOperationException The depth of the JSON exceeds the maximum depth of 1,000. -or- Validation is enabled, and this write operation would produce invalid JSON. WriteStartArray(ReadOnlySpan<byte>) Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key. Declaration public void WriteStartArray(ReadOnlySpan<byte> utf8PropertyName) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON array to be written. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException The depth of the JSON exceeds the maximum depth of 1,000. -or- Validation is enabled, and this write operation would produce invalid JSON. WriteStartArray(ReadOnlySpan<char>) Writes the beginning of a JSON array with a property name specified as a read-only character span as the key. Declaration public void WriteStartArray(ReadOnlySpan<char> propertyName) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException The depth of the JSON exceeds the maximum depth of 1,000. -or- Validation is enabled, and this write operation would produce invalid JSON. WriteStartArray(string) Writes the beginning of a JSON array with a property name specified as a string as the key. Declaration public void WriteStartArray(string propertyName) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException The depth of the JSON exceeds the maximum depth of 1,000. -or- Validation is enabled, and this write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteStartArray(JsonEncodedText) Writes the beginning of a JSON array with a pre-encoded property name as the key. Declaration public void WriteStartArray(JsonEncodedText propertyName) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON array to be transcoded and written as UTF-8. Exceptions Type Condition InvalidOperationException The depth of the JSON has exceeded the maximum depth of 1,000. -or- Validation is enabled, and this method would result in writing invalid JSON. WriteStartObject() Writes the beginning of a JSON object. Declaration public void WriteStartObject() Exceptions Type Condition InvalidOperationException The depth of the JSON exceeds the maximum depth of 1,000. -or- Validation is enabled, and the operation would result in writing invalid JSON. WriteStartObject(ReadOnlySpan<byte>) Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key. Declaration public void WriteStartObject(ReadOnlySpan<byte> utf8PropertyName) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException The depth of the JSON exceeds the maximum depth of 1,000. -or- Validation is enabled, and this write operation would produce invalid JSON. WriteStartObject(ReadOnlySpan<char>) Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key. Declaration public void WriteStartObject(ReadOnlySpan<char> propertyName) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException The depth of the JSON exceeds the maximum depth of 1,000. -or- Validation is enabled, and this write operation would produce invalid JSON. WriteStartObject(string) Writes the beginning of a JSON object with a property name specified as a string as the key. Declaration public void WriteStartObject(string propertyName) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException The depth of the JSON exceeds the maximum depth of 1,000. -or- Validation is enabled, and this write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteStartObject(JsonEncodedText) Writes the beginning of a JSON object with a pre-encoded property name as the key. Declaration public void WriteStartObject(JsonEncodedText propertyName) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. Exceptions Type Condition InvalidOperationException The depth of the JSON has exceeded the maximum depth of 1,000. -or- Validation is enabled, and this method would result in writing invalid JSON. WriteString(ReadOnlySpan<byte>, DateTime) Writes a UTF-8 property name and a DateTime value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<byte> utf8PropertyName, DateTime value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. DateTime value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<byte>, DateTimeOffset) Writes a UTF-8 property name and a DateTimeOffset value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<byte> utf8PropertyName, DateTimeOffset value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. DateTimeOffset value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<byte>, Guid) Writes a UTF-8 property name and a Guid value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<byte> utf8PropertyName, Guid value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. Guid value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<byte>, ReadOnlySpan<byte>) Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<byte> utf8PropertyName, ReadOnlySpan<byte> utf8Value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. ReadOnlySpan<byte> utf8Value The UTF-8 encoded value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<byte>, ReadOnlySpan<char>) Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<byte> utf8PropertyName, ReadOnlySpan<char> value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. ReadOnlySpan<char> value The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<byte>, string?) Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<byte> utf8PropertyName, string? value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. string value The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<byte>, JsonEncodedText) Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<byte> utf8PropertyName, JsonEncodedText value) Parameters Type Name Description ReadOnlySpan<byte> utf8PropertyName The UTF-8 encoded property name of the JSON object to be written. JsonEncodedText value The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and this method would result in writing invalid JSON. WriteString(ReadOnlySpan<char>, DateTime) Writes a property name specified as a read-only character span and a DateTime value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<char> propertyName, DateTime value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. DateTime value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<char>, DateTimeOffset) Writes a property name specified as a read-only character span and a DateTimeOffset value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<char> propertyName, DateTimeOffset value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. DateTimeOffset value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<char>, Guid) Writes a property name specified as a read-only character span and a Guid value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<char> propertyName, Guid value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. Guid value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<char>, ReadOnlySpan<byte>) Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<char> propertyName, ReadOnlySpan<byte> utf8Value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. ReadOnlySpan<byte> utf8Value The UTF-8 encoded value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<char>, ReadOnlySpan<char>) Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<char> propertyName, ReadOnlySpan<char> value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. ReadOnlySpan<char> value The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<char>, string?) Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<char> propertyName, string? value) Parameters Type Name Description ReadOnlySpan<char> propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. string value The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(ReadOnlySpan<char>, JsonEncodedText) Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(ReadOnlySpan<char> propertyName, JsonEncodedText value) Parameters Type Name Description ReadOnlySpan<char> propertyName The property name of the JSON object to be transcoded and written as UTF-8. JsonEncodedText value The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(string, DateTime) Writes a property name specified as a string and a DateTime value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(string propertyName, DateTime value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. DateTime value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteString(string, DateTimeOffset) Writes a property name specified as a string and a DateTimeOffset value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(string propertyName, DateTimeOffset value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. DateTimeOffset value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteString(string, Guid) Writes a property name specified as a string and a Guid value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(string propertyName, Guid value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. Guid value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteString(string, ReadOnlySpan<byte>) Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(string propertyName, ReadOnlySpan<byte> utf8Value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. ReadOnlySpan<byte> utf8Value The UTF-8 encoded value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteString(string, ReadOnlySpan<char>) Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(string propertyName, ReadOnlySpan<char> value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. ReadOnlySpan<char> value The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteString(string, string?) Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(string propertyName, string? value) Parameters Type Name Description string propertyName The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8. string value The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name or value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteString(string, JsonEncodedText) Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(string propertyName, JsonEncodedText value) Parameters Type Name Description string propertyName The property name of the JSON object to be transcoded and written as UTF-8. JsonEncodedText value The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified property name is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. ArgumentNullException The propertyName parameter is null. WriteString(JsonEncodedText, DateTime) Writes the pre-encoded property name and DateTime value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(JsonEncodedText propertyName, DateTime value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. DateTime value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(JsonEncodedText, DateTimeOffset) Writes the pre-encoded property name and DateTimeOffset value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(JsonEncodedText propertyName, DateTimeOffset value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. DateTimeOffset value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(JsonEncodedText, Guid) Writes the pre-encoded property name and Guid value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(JsonEncodedText propertyName, Guid value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. Guid value The value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(JsonEncodedText, ReadOnlySpan<byte>) Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(JsonEncodedText propertyName, ReadOnlySpan<byte> utf8Value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. ReadOnlySpan<byte> utf8Value The UTF-8 encoded value to be written as a JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(JsonEncodedText, ReadOnlySpan<char>) Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(JsonEncodedText propertyName, ReadOnlySpan<char> value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. ReadOnlySpan<char> value The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(JsonEncodedText, string?) Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(JsonEncodedText propertyName, string? value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. string value The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition ArgumentException The specified value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteString(JsonEncodedText, JsonEncodedText) Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object. Declaration public void WriteString(JsonEncodedText propertyName, JsonEncodedText value) Parameters Type Name Description JsonEncodedText propertyName The JSON encoded property name of the JSON object to be transcoded and written as UTF-8. JsonEncodedText value The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair. Exceptions Type Condition InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteStringValue(DateTime) Writes a DateTime value (as a JSON string) as an element of a JSON array. Declaration public void WriteStringValue(DateTime value) Parameters Type Name Description DateTime value The value to be written as a JSON string as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteStringValue(DateTimeOffset) Writes a DateTimeOffset value (as a JSON string) as an element of a JSON array. Declaration public void WriteStringValue(DateTimeOffset value) Parameters Type Name Description DateTimeOffset value The value to be written as a JSON string as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteStringValue(Guid) Writes a Guid value (as a JSON string) as an element of a JSON array. Declaration public void WriteStringValue(Guid value) Parameters Type Name Description Guid value The value to be written as a JSON string as an element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the operation would result in writing invalid JSON. WriteStringValue(ReadOnlySpan<byte>) Writes a UTF-8 text value (as a JSON string) as an element of a JSON array. Declaration public void WriteStringValue(ReadOnlySpan<byte> utf8Value) Parameters Type Name Description ReadOnlySpan<byte> utf8Value The UTF-8 encoded value to be written as a JSON string element of a JSON array. Exceptions Type Condition ArgumentException The specified value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteStringValue(ReadOnlySpan<char>) Writes a UTF-16 text value (as a JSON string) as an element of a JSON array. Declaration public void WriteStringValue(ReadOnlySpan<char> value) Parameters Type Name Description ReadOnlySpan<char> value The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array. Exceptions Type Condition ArgumentException The specified value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteStringValue(string?) Writes a string text value (as a JSON string) as an element of a JSON array. Declaration public void WriteStringValue(string? value) Parameters Type Name Description string value The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array. Exceptions Type Condition ArgumentException The specified value is too large. InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. WriteStringValue(JsonEncodedText) Writes the pre-encoded text value (as a JSON string) as an element of a JSON array. Declaration public void WriteStringValue(JsonEncodedText value) Parameters Type Name Description JsonEncodedText value The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array. Exceptions Type Condition InvalidOperationException Validation is enabled, and the write operation would produce invalid JSON. Implements IDisposable IAsyncDisposable"
  },
  "api/System.Text.Json.html": {
    "href": "api/System.Text.Json.html",
    "title": "Namespace System.Text.Json | CodeFactory for Windows",
    "keywords": "Namespace System.Text.Json Classes JsonDocument Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values. JsonException Defines a custom exception object that is thrown when invalid JSON text is encountered, when the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object. JsonNamingPolicy Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format. JsonSerializer Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types. JsonSerializerOptions Provides options to be used with JsonSerializer. Utf8JsonWriter Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text. Structs JsonDocumentOptions Provides the ability for the user to define custom behavior when parsing JSON to create a JsonDocument. JsonElement Represents a specific JSON value within a JsonDocument. JsonElement.ArrayEnumerator Represents an enumerator for the contents of a JSON array. JsonElement.ObjectEnumerator Represents an enumerator for the properties of a JSON object. JsonEncodedText Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON. JsonProperty Represents a single property for a JSON object. JsonReaderOptions Provides the ability for the user to define custom behavior when reading JSON. JsonReaderState Defines an opaque type that holds and saves all the relevant state information, which must be provided to the Utf8JsonReader to continue reading after processing incomplete data. JsonWriterOptions Allows the user to define custom behavior when writing JSON using the Utf8JsonWriter. Utf8JsonReader Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text. Enums JsonCommentHandling Defines how the Utf8JsonReader struct handles comments. JsonSerializerDefaults Specifies scenario-based default serialization options that can be used to construct a JsonSerializerOptions instance. JsonTokenType Defines the various JSON tokens that make up a JSON text. JsonValueKind Specifies the data type of a JSON value."
  },
  "api/System.Text.Unicode.UnicodeRange.html": {
    "href": "api/System.Text.Unicode.UnicodeRange.html",
    "title": "Class UnicodeRange | CodeFactory for Windows",
    "keywords": "Class UnicodeRange Represents a contiguous range of Unicode code points. Inheritance object UnicodeRange Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: System.Text.Unicode Assembly: System.Text.Encodings.Web.dll Syntax public sealed class UnicodeRange Constructors UnicodeRange(int, int) Creates a new UnicodeRange that includes a specified number of characters starting at a specified Unicode code point. Declaration public UnicodeRange(int firstCodePoint, int length) Parameters Type Name Description int firstCodePoint The first code point in the range. int length The number of code points in the range. Exceptions Type Condition ArgumentOutOfRangeException <code class=\"paramref\">firstCodePoint</code> is less than zero or greater than 0xFFFF. -or- length is less than zero. -or- firstCodePoint plus length is greater than 0xFFFF. Properties FirstCodePoint Gets the first code point in the range represented by this UnicodeRange instance. Declaration public int FirstCodePoint { get; } Property Value Type Description int The first code point in the range. Length Gets the number of code points in the range represented by this UnicodeRange instance. Declaration public int Length { get; } Property Value Type Description int The number of code points in the range. Methods Create(char, char) Creates a new UnicodeRange instance from a span of characters. Declaration public static UnicodeRange Create(char firstCharacter, char lastCharacter) Parameters Type Name Description char firstCharacter The first character in the range. char lastCharacter The last character in the range. Returns Type Description UnicodeRange A range that includes all characters between firstCharacter and lastCharacter. Exceptions Type Condition ArgumentOutOfRangeException lastCharacter precedes firstCharacter."
  },
  "api/System.Text.Unicode.UnicodeRanges.html": {
    "href": "api/System.Text.Unicode.UnicodeRanges.html",
    "title": "Class UnicodeRanges | CodeFactory for Windows",
    "keywords": "Class UnicodeRanges Provides static properties that return predefined UnicodeRange instances that correspond to blocks from the Unicode specification. Inheritance object UnicodeRanges Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Text.Unicode Assembly: System.Text.Encodings.Web.dll Syntax public static class UnicodeRanges Properties All Gets a range that consists of the entire Basic Multilingual Plane (BMP), from U+0000 to U+FFFF). Declaration public static UnicodeRange All { get; } Property Value Type Description UnicodeRange A range that consists of the entire BMP. AlphabeticPresentationForms Gets the Alphabetic Presentation Forms Unicode block (U+FB00-U+FB4F). Declaration public static UnicodeRange AlphabeticPresentationForms { get; } Property Value Type Description UnicodeRange The Alphabetic Presentation Forms Unicode block (U+FB00-U+FB4F). Arabic Gets the Arabic Unicode block (U+0600-U+06FF). Declaration public static UnicodeRange Arabic { get; } Property Value Type Description UnicodeRange The Arabic Unicode block (U+0600-U+06FF). ArabicExtendedA Gets the Arabic Extended-A Unicode block (U+08A0-U+08FF). Declaration public static UnicodeRange ArabicExtendedA { get; } Property Value Type Description UnicodeRange The Arabic Extended-A Unicode block (U+08A0-U+08FF). ArabicPresentationFormsA Gets the Arabic Presentation Forms-A Unicode block (U+FB50-U+FDFF). Declaration public static UnicodeRange ArabicPresentationFormsA { get; } Property Value Type Description UnicodeRange The Arabic Presentation Forms-A Unicode block (U+FB50-U+FDFF). ArabicPresentationFormsB Gets the Arabic Presentation Forms-B Unicode block (U+FE70-U+FEFF). Declaration public static UnicodeRange ArabicPresentationFormsB { get; } Property Value Type Description UnicodeRange The Arabic Presentation Forms-B Unicode block (U+FE70-U+FEFF). ArabicSupplement Gets the Arabic Supplement Unicode block (U+0750-U+077F). Declaration public static UnicodeRange ArabicSupplement { get; } Property Value Type Description UnicodeRange The Arabic Supplement Unicode block (U+0750-U+077F). Armenian Gets the Armenian Unicode block (U+0530-U+058F). Declaration public static UnicodeRange Armenian { get; } Property Value Type Description UnicodeRange The Armenian Unicode block (U+0530-U+058F). Arrows Gets the Arrows Unicode block (U+2190-U+21FF). Declaration public static UnicodeRange Arrows { get; } Property Value Type Description UnicodeRange The Arrows Unicode block (U+2190-U+21FF). Balinese Gets the Balinese Unicode block (U+1B00-U+1B7F). Declaration public static UnicodeRange Balinese { get; } Property Value Type Description UnicodeRange The Balinese Unicode block (U+1B00-U+1B7F). Bamum Gets the Bamum Unicode block (U+A6A0-U+A6FF). Declaration public static UnicodeRange Bamum { get; } Property Value Type Description UnicodeRange The Bamum Unicode block (U+A6A0-U+A6FF). BasicLatin Gets the Basic Latin Unicode block (U+0021-U+007F). Declaration public static UnicodeRange BasicLatin { get; } Property Value Type Description UnicodeRange The Basic Latin Unicode block (U+0021-U+007F). Batak Gets the Batak Unicode block (U+1BC0-U+1BFF). Declaration public static UnicodeRange Batak { get; } Property Value Type Description UnicodeRange The Batak Unicode block (U+1BC0-U+1BFF). Bengali Gets the Bengali Unicode block (U+0980-U+09FF). Declaration public static UnicodeRange Bengali { get; } Property Value Type Description UnicodeRange The Bengali Unicode block (U+0980-U+09FF). BlockElements Gets the Block Elements Unicode block (U+2580-U+259F). Declaration public static UnicodeRange BlockElements { get; } Property Value Type Description UnicodeRange The Block Elements Unicode block (U+2580-U+259F). Bopomofo Gets the Bopomofo Unicode block (U+3100-U+312F). Declaration public static UnicodeRange Bopomofo { get; } Property Value Type Description UnicodeRange The Bopomofo Unicode block (U+3105-U+312F). BopomofoExtended Gets the Bopomofo Extended Unicode block (U+31A0-U+31BF). Declaration public static UnicodeRange BopomofoExtended { get; } Property Value Type Description UnicodeRange The Bopomofo Extended Unicode block (U+31A0-U+31BF). BoxDrawing Gets the Box Drawing Unicode block (U+2500-U+257F). Declaration public static UnicodeRange BoxDrawing { get; } Property Value Type Description UnicodeRange The Box Drawing Unicode block (U+2500-U+257F). BraillePatterns Gets the Braille Patterns Unicode block (U+2800-U+28FF). Declaration public static UnicodeRange BraillePatterns { get; } Property Value Type Description UnicodeRange The Braille Patterns Unicode block (U+2800-U+28FF). Buginese Gets the Buginese Unicode block (U+1A00-U+1A1F). Declaration public static UnicodeRange Buginese { get; } Property Value Type Description UnicodeRange The Buginese Unicode block (U+1A00-U+1A1F). Buhid Gets the Buhid Unicode block (U+1740-U+175F). Declaration public static UnicodeRange Buhid { get; } Property Value Type Description UnicodeRange The Buhid Unicode block (U+1740-U+175F). Cham Gets the Cham Unicode block (U+AA00-U+AA5F). Declaration public static UnicodeRange Cham { get; } Property Value Type Description UnicodeRange The Cham Unicode block (U+AA00-U+AA5F). Cherokee Gets the Cherokee Unicode block (U+13A0-U+13FF). Declaration public static UnicodeRange Cherokee { get; } Property Value Type Description UnicodeRange The Cherokee Unicode block (U+13A0-U+13FF). CherokeeSupplement Gets the Cherokee Supplement Unicode block (U+AB70-U+ABBF). Declaration public static UnicodeRange CherokeeSupplement { get; } Property Value Type Description UnicodeRange The Cherokee Supplement Unicode block (U+AB70-U+ABBF). CjkCompatibility Gets the CJK Compatibility Unicode block (U+3300-U+33FF). Declaration public static UnicodeRange CjkCompatibility { get; } Property Value Type Description UnicodeRange The CJK Compatibility Unicode block (U+3300-U+33FF). CjkCompatibilityForms Gets the CJK Compatibility Forms Unicode block (U+FE30-U+FE4F). Declaration public static UnicodeRange CjkCompatibilityForms { get; } Property Value Type Description UnicodeRange The CJK Compatibility Forms Unicode block (U+FE30-U+FE4F). CjkCompatibilityIdeographs Gets the CJK Compatibility Ideographs Unicode block (U+F900-U+FAD9). Declaration public static UnicodeRange CjkCompatibilityIdeographs { get; } Property Value Type Description UnicodeRange The CJK Compatibility Ideographs Unicode block (U+F900-U+FAD9). CjkRadicalsSupplement Gets the CJK Radicals Supplement Unicode block (U+2E80-U+2EFF). Declaration public static UnicodeRange CjkRadicalsSupplement { get; } Property Value Type Description UnicodeRange The CJK Radicals Supplement Unicode block (U+2E80-U+2EFF). CjkStrokes Gets the CJK Strokes Unicode block (U+31C0-U+31EF). Declaration public static UnicodeRange CjkStrokes { get; } Property Value Type Description UnicodeRange The CJK Strokes Unicode block (U+31C0-U+31EF). CjkSymbolsandPunctuation Gets the CJK Symbols and Punctuation Unicode block (U+3000-U+303F). Declaration public static UnicodeRange CjkSymbolsandPunctuation { get; } Property Value Type Description UnicodeRange The CJK Symbols and Punctuation Unicode block (U+3000-U+303F). CjkUnifiedIdeographs Gets the CJK Unified Ideographs Unicode block (U+4E00-U+9FCC). Declaration public static UnicodeRange CjkUnifiedIdeographs { get; } Property Value Type Description UnicodeRange The CJK Unified Ideographs Unicode block (U+4E00-U+9FCC). CjkUnifiedIdeographsExtensionA Gets the CJK Unitied Ideographs Extension A Unicode block (U+3400-U+4DB5). Declaration public static UnicodeRange CjkUnifiedIdeographsExtensionA { get; } Property Value Type Description UnicodeRange The CJK Unitied Ideographs Extension A Unicode block (U+3400-U+4DB5). CombiningDiacriticalMarks Gets the Combining Diacritical Marks Unicode block (U+0300-U+036F). Declaration public static UnicodeRange CombiningDiacriticalMarks { get; } Property Value Type Description UnicodeRange The Combining Diacritical Marks Unicode block (U+0300-U+036F). CombiningDiacriticalMarksExtended Gets the Combining Diacritical Marks Extended Unicode block (U+1AB0-U+1AFF). Declaration public static UnicodeRange CombiningDiacriticalMarksExtended { get; } Property Value Type Description UnicodeRange The Combining Diacritical Marks Extended Unicode block (U+1AB0-U+1AFF). CombiningDiacriticalMarksSupplement Gets the Combining Diacritical Marks Supplement Unicode block (U+1DC0-U+1DFF). Declaration public static UnicodeRange CombiningDiacriticalMarksSupplement { get; } Property Value Type Description UnicodeRange The Combining Diacritical Marks Supplement Unicode block (U+1DC0-U+1DFF). CombiningDiacriticalMarksforSymbols Gets the Combining Diacritical Marks for Symbols Unicode block (U+20D0-U+20FF). Declaration public static UnicodeRange CombiningDiacriticalMarksforSymbols { get; } Property Value Type Description UnicodeRange The Combining Diacritical Marks for Symbols Unicode block (U+20D0-U+20FF). CombiningHalfMarks Gets the Combining Half Marks Unicode block (U+FE20-U+FE2F). Declaration public static UnicodeRange CombiningHalfMarks { get; } Property Value Type Description UnicodeRange The Combining Half Marks Unicode block (U+FE20-U+FE2F). CommonIndicNumberForms Gets the Common Indic Number Forms Unicode block (U+A830-U+A83F). Declaration public static UnicodeRange CommonIndicNumberForms { get; } Property Value Type Description UnicodeRange The Common Indic Number Forms Unicode block (U+A830-U+A83F). ControlPictures Gets the Control Pictures Unicode block (U+2400-U+243F). Declaration public static UnicodeRange ControlPictures { get; } Property Value Type Description UnicodeRange The Control Pictures Unicode block (U+2400-U+243F). Coptic Gets the Coptic Unicode block (U+2C80-U+2CFF). Declaration public static UnicodeRange Coptic { get; } Property Value Type Description UnicodeRange The Coptic Unicode block (U+2C80-U+2CFF). CurrencySymbols Gets the Currency Symbols Unicode block (U+20A0-U+20CF). Declaration public static UnicodeRange CurrencySymbols { get; } Property Value Type Description UnicodeRange The Currency Symbols Unicode block (U+20A0-U+20CF). Cyrillic Gets the Cyrillic Unicode block (U+0400-U+04FF). Declaration public static UnicodeRange Cyrillic { get; } Property Value Type Description UnicodeRange The Cyrillic Unicode block (U+0400-U+04FF). CyrillicExtendedA Gets the Cyrillic Extended-A Unicode block (U+2DE0-U+2DFF). Declaration public static UnicodeRange CyrillicExtendedA { get; } Property Value Type Description UnicodeRange The Cyrillic Extended-A Unicode block (U+2DE0-U+2DFF). CyrillicExtendedB Gets the Cyrillic Extended-B Unicode block (U+A640-U+A69F). Declaration public static UnicodeRange CyrillicExtendedB { get; } Property Value Type Description UnicodeRange The Cyrillic Extended-B Unicode block (U+A640-U+A69F). CyrillicExtendedC A UnicodeRange corresponding to the 'Cyrillic Extended-C' Unicode block (U+1C80..U+1C8F). Declaration public static UnicodeRange CyrillicExtendedC { get; } Property Value Type Description UnicodeRange CyrillicSupplement Gets the Cyrillic Supplement Unicode block (U+0500-U+052F). Declaration public static UnicodeRange CyrillicSupplement { get; } Property Value Type Description UnicodeRange The Cyrillic Supplement Unicode block (U+0500-U+052F). Devanagari Gets the Devangari Unicode block (U+0900-U+097F). Declaration public static UnicodeRange Devanagari { get; } Property Value Type Description UnicodeRange The Devangari Unicode block (U+0900-U+097F). DevanagariExtended Gets the Devanagari Extended Unicode block (U+A8E0-U+A8FF). Declaration public static UnicodeRange DevanagariExtended { get; } Property Value Type Description UnicodeRange The Devanagari Extended Unicode block (U+A8E0-U+A8FF). Dingbats Gets the Dingbats Unicode block (U+2700-U+27BF). Declaration public static UnicodeRange Dingbats { get; } Property Value Type Description UnicodeRange The Dingbats Unicode block (U+2700-U+27BF). EnclosedAlphanumerics Gets the Enclosed Alphanumerics Unicode block (U+2460-U+24FF). Declaration public static UnicodeRange EnclosedAlphanumerics { get; } Property Value Type Description UnicodeRange The Enclosed Alphanumerics Unicode block (U+2460-U+24FF). EnclosedCjkLettersandMonths Gets the Enclosed CJK Letters and Months Unicode block (U+3200-U+32FF). Declaration public static UnicodeRange EnclosedCjkLettersandMonths { get; } Property Value Type Description UnicodeRange The Enclosed CJK Letters and Months Unicode block (U+3200-U+32FF). Ethiopic Gets the Ethiopic Unicode block (U+1200-U+137C). Declaration public static UnicodeRange Ethiopic { get; } Property Value Type Description UnicodeRange The Ethiopic Unicode block (U+1200-U+137C). EthiopicExtended Gets the Ethipic Extended Unicode block (U+2D80-U+2DDF). Declaration public static UnicodeRange EthiopicExtended { get; } Property Value Type Description UnicodeRange The Ethipic Extended Unicode block (U+2D80-U+2DDF). EthiopicExtendedA Gets the Ethiopic Extended-A Unicode block (U+AB00-U+AB2F). Declaration public static UnicodeRange EthiopicExtendedA { get; } Property Value Type Description UnicodeRange The Ethiopic Extended-A Unicode block (U+AB00-U+AB2F). EthiopicSupplement Gets the Ethiopic Supplement Unicode block (U+1380-U+1399). Declaration public static UnicodeRange EthiopicSupplement { get; } Property Value Type Description UnicodeRange The Ethiopic Supplement Unicode block (U+1380-U+1399). GeneralPunctuation Gets the General Punctuation Unicode block (U+2000-U+206F). Declaration public static UnicodeRange GeneralPunctuation { get; } Property Value Type Description UnicodeRange The General Punctuation Unicode block (U+2000-U+206F). GeometricShapes Gets the Geometric Shapes Unicode block (U+25A0-U+25FF). Declaration public static UnicodeRange GeometricShapes { get; } Property Value Type Description UnicodeRange The Geometric Shapes Unicode block (U+25A0-U+25FF). Georgian Gets the Georgian Unicode block (U+10A0-U+10FF). Declaration public static UnicodeRange Georgian { get; } Property Value Type Description UnicodeRange The Georgian Unicode block (U+10A0-U+10FF). GeorgianExtended A UnicodeRange corresponding to the 'Georgian Extended' Unicode block (U+1C90..U+1CBF). Declaration public static UnicodeRange GeorgianExtended { get; } Property Value Type Description UnicodeRange GeorgianSupplement Gets the Georgian Supplement Unicode block (U+2D00-U+2D2F). Declaration public static UnicodeRange GeorgianSupplement { get; } Property Value Type Description UnicodeRange The Georgian Supplement Unicode block (U+2D00-U+2D2F). Glagolitic Gets the Glagolitic Unicode block (U+2C00-U+2C5F). Declaration public static UnicodeRange Glagolitic { get; } Property Value Type Description UnicodeRange The Glagolitic Unicode block (U+2C00-U+2C5F). GreekExtended Gets the Greek Extended Unicode block (U+1F00-U+1FFF). Declaration public static UnicodeRange GreekExtended { get; } Property Value Type Description UnicodeRange The Greek Extended Unicode block (U+1F00-U+1FFF). GreekandCoptic Gets the Greek and Coptic Unicode block (U+0370-U+03FF). Declaration public static UnicodeRange GreekandCoptic { get; } Property Value Type Description UnicodeRange The Greek and Coptic Unicode block (U+0370-U+03FF). Gujarati Gets the Gujarti Unicode block (U+0A81-U+0AFF). Declaration public static UnicodeRange Gujarati { get; } Property Value Type Description UnicodeRange The Gujarti Unicode block (U+0A81-U+0AFF). Gurmukhi Gets the Gurmukhi Unicode block (U+0A01-U+0A7F). Declaration public static UnicodeRange Gurmukhi { get; } Property Value Type Description UnicodeRange The Gurmukhi Unicode block (U+0A01-U+0A7F). HalfwidthandFullwidthForms Gets the Halfwidth and Fullwidth Forms Unicode block (U+FF00-U+FFEE). Declaration public static UnicodeRange HalfwidthandFullwidthForms { get; } Property Value Type Description UnicodeRange The Halfwidth and Fullwidth Forms Unicode block (U+FF00-U+FFEE). HangulCompatibilityJamo Gets the Hangul Compatibility Jamo Unicode block (U+3131-U+318F). Declaration public static UnicodeRange HangulCompatibilityJamo { get; } Property Value Type Description UnicodeRange The Hangul Compatibility Jamo Unicode block (U+3131-U+318F). HangulJamo Gets the Hangul Jamo Unicode block (U+1100-U+11FF). Declaration public static UnicodeRange HangulJamo { get; } Property Value Type Description UnicodeRange The Hangul Jamo Unicode block (U+1100-U+11FF). HangulJamoExtendedA Gets the Hangul Jamo Extended-A Unicode block (U+A960-U+A9F). Declaration public static UnicodeRange HangulJamoExtendedA { get; } Property Value Type Description UnicodeRange The Hangul Jamo Extended-A Unicode block (U+A960-U+A97F). HangulJamoExtendedB Gets the Hangul Jamo Extended-B Unicode block (U+D7B0-U+D7FF). Declaration public static UnicodeRange HangulJamoExtendedB { get; } Property Value Type Description UnicodeRange The Hangul Jamo Extended-B Unicode block (U+D7B0-U+D7FF). HangulSyllables Gets the Hangul Syllables Unicode block (U+AC00-U+D7AF). Declaration public static UnicodeRange HangulSyllables { get; } Property Value Type Description UnicodeRange The Hangul Syllables Unicode block (U+AC00-U+D7AF). Hanunoo Gets the Hanunoo Unicode block (U+1720-U+173F). Declaration public static UnicodeRange Hanunoo { get; } Property Value Type Description UnicodeRange The Hanunoo Unicode block (U+1720-U+173F). Hebrew Gets the Hebrew Unicode block (U+0590-U+05FF). Declaration public static UnicodeRange Hebrew { get; } Property Value Type Description UnicodeRange The Hebrew Unicode block (U+0590-U+05FF). Hiragana Gets the Hiragana Unicode block (U+3040-U+309F). Declaration public static UnicodeRange Hiragana { get; } Property Value Type Description UnicodeRange The Hiragana Unicode block (U+3040-U+309F). IdeographicDescriptionCharacters Gets the Ideographic Description Characters Unicode block (U+2FF0-U+2FFF). Declaration public static UnicodeRange IdeographicDescriptionCharacters { get; } Property Value Type Description UnicodeRange The Ideographic Description Characters Unicode block (U+2FF0-U+2FFF). IpaExtensions Gets the IPA Extensions Unicode block (U+0250-U+02AF). Declaration public static UnicodeRange IpaExtensions { get; } Property Value Type Description UnicodeRange The IPA Extensions Unicode block (U+0250-U+02AF). Javanese Gets the Javanese Unicode block (U+A980-U+A9DF). Declaration public static UnicodeRange Javanese { get; } Property Value Type Description UnicodeRange The Javanese Unicode block (U+A980-U+A9DF). Kanbun Gets the Kanbun Unicode block (U+3190-U+319F). Declaration public static UnicodeRange Kanbun { get; } Property Value Type Description UnicodeRange The Kanbun Unicode block (U+3190-U+319F). KangxiRadicals Gets the Kangxi Radicals Supplement Unicode block (U+2F00-U+2FDF). Declaration public static UnicodeRange KangxiRadicals { get; } Property Value Type Description UnicodeRange The Kangxi Radicals Supplement Unicode block (U+2F00-U+2FDF). Kannada Gets the Kannada Unicode block (U+0C81-U+0CFF). Declaration public static UnicodeRange Kannada { get; } Property Value Type Description UnicodeRange The Kannada Unicode block (U+0C81-U+0CFF). Katakana Gets the Katakana Unicode block (U+30A0-U+30FF). Declaration public static UnicodeRange Katakana { get; } Property Value Type Description UnicodeRange The Katakana Unicode block (U+30A0-U+30FF). KatakanaPhoneticExtensions Gets the Katakana Phonetic Extensions Unicode block (U+31F0-U+31FF). Declaration public static UnicodeRange KatakanaPhoneticExtensions { get; } Property Value Type Description UnicodeRange The Katakana Phonetic Extensions Unicode block (U+31F0-U+31FF). KayahLi Gets the Kayah Li Unicode block (U+A900-U+A92F). Declaration public static UnicodeRange KayahLi { get; } Property Value Type Description UnicodeRange The Kayah Li Unicode block (U+A900-U+A92F). Khmer Gets the Khmer Unicode block (U+1780-U+17FF). Declaration public static UnicodeRange Khmer { get; } Property Value Type Description UnicodeRange The Khmer Unicode block (U+1780-U+17FF). KhmerSymbols Gets the Khmer Symbols Unicode block (U+19E0-U+19FF). Declaration public static UnicodeRange KhmerSymbols { get; } Property Value Type Description UnicodeRange The Khmer Symbols Unicode block (U+19E0-U+19FF). Lao Gets the Lao Unicode block (U+0E80-U+0EDF). Declaration public static UnicodeRange Lao { get; } Property Value Type Description UnicodeRange The Lao Unicode block (U+0E80-U+0EDF). Latin1Supplement Gets the Latin-1 Supplement Unicode block (U+00A1-U+00FF). Declaration public static UnicodeRange Latin1Supplement { get; } Property Value Type Description UnicodeRange The Latin-1 Supplement Unicode block (U+00A1-U+00FF). LatinExtendedA Gets the Latin Extended-A Unicode block (U+0100-U+017F). Declaration public static UnicodeRange LatinExtendedA { get; } Property Value Type Description UnicodeRange The Latin Extended-A Unicode block (U+0100-U+017F). LatinExtendedAdditional Gets the Latin Extended Additional Unicode block (U+1E00-U+1EFF). Declaration public static UnicodeRange LatinExtendedAdditional { get; } Property Value Type Description UnicodeRange The Latin Extended Additional Unicode block (U+1E00-U+1EFF). LatinExtendedB Gets the Latin Extended-B Unicode block (U+0180-U+024F). Declaration public static UnicodeRange LatinExtendedB { get; } Property Value Type Description UnicodeRange The Latin Extended-B Unicode block (U+0180-U+024F). LatinExtendedC Gets the Latin Extended-C Unicode block (U+2C60-U+2C7F). Declaration public static UnicodeRange LatinExtendedC { get; } Property Value Type Description UnicodeRange The Latin Extended-C Unicode block (U+2C60-U+2C7F). LatinExtendedD Gets the Latin Extended-D Unicode block (U+A720-U+A7FF). Declaration public static UnicodeRange LatinExtendedD { get; } Property Value Type Description UnicodeRange The Latin Extended-D Unicode block (U+A720-U+A7FF). LatinExtendedE Gets the Latin Extended-E Unicode block (U+AB30-U+AB6F). Declaration public static UnicodeRange LatinExtendedE { get; } Property Value Type Description UnicodeRange The Latin Extended-E Unicode block (U+AB30-U+AB6F). Lepcha Gets the Lepcha Unicode block (U+1C00-U+1C4F). Declaration public static UnicodeRange Lepcha { get; } Property Value Type Description UnicodeRange The Lepcha Unicode block (U+1C00-U+1C4F). LetterlikeSymbols Gets the Letterlike Symbols Unicode block (U+2100-U+214F). Declaration public static UnicodeRange LetterlikeSymbols { get; } Property Value Type Description UnicodeRange The Letterlike Symbols Unicode block (U+2100-U+214F). Limbu Gets the Limbu Unicode block (U+1900-U+194F). Declaration public static UnicodeRange Limbu { get; } Property Value Type Description UnicodeRange The Limbu Unicode block (U+1900-U+194F). Lisu Gets the Lisu Unicode block (U+A4D0-U+A4FF). Declaration public static UnicodeRange Lisu { get; } Property Value Type Description UnicodeRange The Lisu Unicode block (U+A4D0-U+A4FF). Malayalam Gets the Malayalam Unicode block (U+0D00-U+0D7F). Declaration public static UnicodeRange Malayalam { get; } Property Value Type Description UnicodeRange The Malayalam Unicode block (U+0D00-U+0D7F). Mandaic Gets the Mandaic Unicode block (U+0840-U+085F). Declaration public static UnicodeRange Mandaic { get; } Property Value Type Description UnicodeRange The Mandaic Unicode block (U+0840-U+085F). MathematicalOperators Gets the Mathematical Operators Unicode block (U+2200-U+22FF). Declaration public static UnicodeRange MathematicalOperators { get; } Property Value Type Description UnicodeRange The Mathematical Operators Unicode block (U+2200-U+22FF). MeeteiMayek Gets the Meetei Mayek Unicode block (U+ABC0-U+ABFF). Declaration public static UnicodeRange MeeteiMayek { get; } Property Value Type Description UnicodeRange The Meetei Mayek Unicode block (U+ABC0-U+ABFF). MeeteiMayekExtensions Gets the Meetei Mayek Extensions Unicode block (U+AAE0-U+AAFF). Declaration public static UnicodeRange MeeteiMayekExtensions { get; } Property Value Type Description UnicodeRange The Meetei Mayek Extensions Unicode block (U+AAE0-U+AAFF). MiscellaneousMathematicalSymbolsA Gets the Miscellaneous Mathematical Symbols-A Unicode block (U+27C0-U+27EF). Declaration public static UnicodeRange MiscellaneousMathematicalSymbolsA { get; } Property Value Type Description UnicodeRange The Miscellaneous Mathematical Symbols-A Unicode block (U+27C0-U+27EF). MiscellaneousMathematicalSymbolsB Gets the Miscellaneous Mathematical Symbols-B Unicode block (U+2980-U+29FF). Declaration public static UnicodeRange MiscellaneousMathematicalSymbolsB { get; } Property Value Type Description UnicodeRange The Miscellaneous Mathematical Symbols-B Unicode block (U+2980-U+29FF). MiscellaneousSymbols Gets the Miscellaneous Symbols Unicode block (U+2600-U+26FF). Declaration public static UnicodeRange MiscellaneousSymbols { get; } Property Value Type Description UnicodeRange The Miscellaneous Symbols Unicode block (U+2600-U+26FF). MiscellaneousSymbolsandArrows Gets the Miscellaneous Symbols and Arrows Unicode block (U+2B00-U+2BFF). Declaration public static UnicodeRange MiscellaneousSymbolsandArrows { get; } Property Value Type Description UnicodeRange The Miscellaneous Symbols and Arrows Unicode block (U+2B00-U+2BFF). MiscellaneousTechnical Gets the Miscellaneous Technical Unicode block (U+2300-U+23FF). Declaration public static UnicodeRange MiscellaneousTechnical { get; } Property Value Type Description UnicodeRange The Miscellaneous Technical Unicode block (U+2300-U+23FF). ModifierToneLetters Gets the Modifier Tone Letters Unicode block (U+A700-U+A71F). Declaration public static UnicodeRange ModifierToneLetters { get; } Property Value Type Description UnicodeRange The Modifier Tone Letters Unicode block (U+A700-U+A71F). Mongolian Gets the Mongolian Unicode block (U+1800-U+18AF). Declaration public static UnicodeRange Mongolian { get; } Property Value Type Description UnicodeRange The Mongolian Unicode block (U+1800-U+18AF). Myanmar Gets the Myanmar Unicode block (U+1000-U+109F). Declaration public static UnicodeRange Myanmar { get; } Property Value Type Description UnicodeRange The Myanmar Unicode block (U+1000-U+109F). MyanmarExtendedA Gets the Myanmar Extended-A Unicode block (U+AA60-U+AA7F). Declaration public static UnicodeRange MyanmarExtendedA { get; } Property Value Type Description UnicodeRange The Myanmar Extended-A Unicode block (U+AA60-U+AA7F). MyanmarExtendedB Gets the Myanmar Extended-B Unicode block (U+A9E0-U+A9FF). Declaration public static UnicodeRange MyanmarExtendedB { get; } Property Value Type Description UnicodeRange The Myanmar Extended-B Unicode block (U+A9E0-U+A9FF). NKo Gets the NKo Unicode block (U+07C0-U+07FF). Declaration public static UnicodeRange NKo { get; } Property Value Type Description UnicodeRange The NKo Unicode block (U+07C0-U+07FF). NewTaiLue Gets the New Tai Lue Unicode block (U+1980-U+19DF). Declaration public static UnicodeRange NewTaiLue { get; } Property Value Type Description UnicodeRange The New Tai Lue Unicode block (U+1980-U+19DF). None Gets an empty Unicode range. Declaration public static UnicodeRange None { get; } Property Value Type Description UnicodeRange A Unicode range with no elements. NumberForms Gets the Number Forms Unicode block (U+2150-U+218F). Declaration public static UnicodeRange NumberForms { get; } Property Value Type Description UnicodeRange The Number Forms Unicode block (U+2150-U+218F). Ogham Gets the Ogham Unicode block (U+1680-U+169F). Declaration public static UnicodeRange Ogham { get; } Property Value Type Description UnicodeRange The Ogham Unicode block (U+1680-U+169F). OlChiki Gets the Ol Chiki Unicode block (U+1C50-U+1C7F). Declaration public static UnicodeRange OlChiki { get; } Property Value Type Description UnicodeRange The Ol Chiki Unicode block (U+1C50-U+1C7F). OpticalCharacterRecognition Gets the Optical Character Recognition Unicode block (U+2440-U+245F). Declaration public static UnicodeRange OpticalCharacterRecognition { get; } Property Value Type Description UnicodeRange The Optical Character Recognition Unicode block (U+2440-U+245F). Oriya Gets the Oriya Unicode block (U+0B00-U+0B7F). Declaration public static UnicodeRange Oriya { get; } Property Value Type Description UnicodeRange The Oriya Unicode block (U+0B00-U+0B7F). Phagspa Gets the Phags-pa Unicode block (U+A840-U+A87F). Declaration public static UnicodeRange Phagspa { get; } Property Value Type Description UnicodeRange The Phags-pa Unicode block (U+A840-U+A87F). PhoneticExtensions Gets the Phonetic Extensions Unicode block (U+1D00-U+1D7F). Declaration public static UnicodeRange PhoneticExtensions { get; } Property Value Type Description UnicodeRange The Phonetic Extensions Unicode block (U+1D00-U+1D7F). PhoneticExtensionsSupplement Gets the Phonetic Extensions Supplement Unicode block (U+1D80-U+1DBF). Declaration public static UnicodeRange PhoneticExtensionsSupplement { get; } Property Value Type Description UnicodeRange The Phonetic Extensions Supplement Unicode block (U+1D80-U+1DBF). Rejang Gets the Rejang Unicode block (U+A930-U+A95F). Declaration public static UnicodeRange Rejang { get; } Property Value Type Description UnicodeRange The Rejang Unicode block (U+A930-U+A95F). Runic Gets the Runic Unicode block (U+16A0-U+16FF). Declaration public static UnicodeRange Runic { get; } Property Value Type Description UnicodeRange The Runic Unicode block (U+16A0-U+16FF). Samaritan Gets the Samaritan Unicode block (U+0800-U+083F). Declaration public static UnicodeRange Samaritan { get; } Property Value Type Description UnicodeRange The Samaritan Unicode block (U+0800-U+083F). Saurashtra Gets the Saurashtra Unicode block (U+A880-U+A8DF). Declaration public static UnicodeRange Saurashtra { get; } Property Value Type Description UnicodeRange The Saurashtra Unicode block (U+A880-U+A8DF). Sinhala Gets the Sinhala Unicode block (U+0D80-U+0DFF). Declaration public static UnicodeRange Sinhala { get; } Property Value Type Description UnicodeRange The Sinhala Unicode block (U+0D80-U+0DFF). SmallFormVariants Gets the Small Form Variants Unicode block (U+FE50-U+FE6F). Declaration public static UnicodeRange SmallFormVariants { get; } Property Value Type Description UnicodeRange The Small Form Variants Unicode block (U+FE50-U+FE6F). SpacingModifierLetters Gets the Spacing Modifier Letters Unicode block (U+02B0-U+02FF). Declaration public static UnicodeRange SpacingModifierLetters { get; } Property Value Type Description UnicodeRange The Spacing Modifier Letters Unicode block (U+02B0-U+02FF). Specials Gets the Specials Unicode block (U+FFF0-U+FFFF). Declaration public static UnicodeRange Specials { get; } Property Value Type Description UnicodeRange The Specials Unicode block (U+FFF0-U+FFFF). Sundanese Gets the Sundanese Unicode block (U+1B80-U+1BBF). Declaration public static UnicodeRange Sundanese { get; } Property Value Type Description UnicodeRange The Sundanese Unicode block (U+1B80-U+1BBF). SundaneseSupplement Gets the Sundanese Supplement Unicode block (U+1CC0-U+1CCF). Declaration public static UnicodeRange SundaneseSupplement { get; } Property Value Type Description UnicodeRange The Sundanese Supplement Unicode block (U+1CC0-U+1CCF). SuperscriptsandSubscripts Gets the Superscripts and Subscripts Unicode block (U+2070-U+209F). Declaration public static UnicodeRange SuperscriptsandSubscripts { get; } Property Value Type Description UnicodeRange The Superscripts and Subscripts Unicode block (U+2070-U+209F). SupplementalArrowsA Gets the Supplemental Arrows-A Unicode block (U+27F0-U+27FF). Declaration public static UnicodeRange SupplementalArrowsA { get; } Property Value Type Description UnicodeRange The Supplemental Arrows-A Unicode block (U+27F0-U+27FF). SupplementalArrowsB Gets the Supplemental Arrows-B Unicode block (U+2900-U+297F). Declaration public static UnicodeRange SupplementalArrowsB { get; } Property Value Type Description UnicodeRange The Supplemental Arrows-B Unicode block (U+2900-U+297F). SupplementalMathematicalOperators Gets the Supplemental Mathematical Operators Unicode block (U+2A00-U+2AFF). Declaration public static UnicodeRange SupplementalMathematicalOperators { get; } Property Value Type Description UnicodeRange The Supplemental Mathematical Operators Unicode block (U+2A00-U+2AFF). SupplementalPunctuation Gets the Supplemental Punctuation Unicode block (U+2E00-U+2E7F). Declaration public static UnicodeRange SupplementalPunctuation { get; } Property Value Type Description UnicodeRange The Supplemental Punctuation Unicode block (U+2E00-U+2E7F). SylotiNagri Gets the Syloti Nagri Unicode block (U+A800-U+A82F). Declaration public static UnicodeRange SylotiNagri { get; } Property Value Type Description UnicodeRange The Syloti Nagri Unicode block (U+A800-U+A82F). Syriac Gets the Syriac Unicode block (U+0700-U+074F). Declaration public static UnicodeRange Syriac { get; } Property Value Type Description UnicodeRange The Syriac Unicode block (U+0700-U+074F). SyriacSupplement A UnicodeRange corresponding to the 'Syriac Supplement' Unicode block (U+0860..U+086F). Declaration public static UnicodeRange SyriacSupplement { get; } Property Value Type Description UnicodeRange Tagalog Gets the Tagalog Unicode block (U+1700-U+171F). Declaration public static UnicodeRange Tagalog { get; } Property Value Type Description UnicodeRange The Tagalog Unicode block (U+1700-U+171F). Tagbanwa Gets the Tagbanwa Unicode block (U+1760-U+177F). Declaration public static UnicodeRange Tagbanwa { get; } Property Value Type Description UnicodeRange The Tagbanwa Unicode block (U+1760-U+177F). TaiLe Gets the Tai Le Unicode block (U+1950-U+197F). Declaration public static UnicodeRange TaiLe { get; } Property Value Type Description UnicodeRange The Tai Le Unicode block (U+1950-U+197F). TaiTham Gets the Tai Tham Unicode block (U+1A20-U+1AAF). Declaration public static UnicodeRange TaiTham { get; } Property Value Type Description UnicodeRange The Tai Tham Unicode block (U+1A20-U+1AAF). TaiViet Gets the Tai Viet Unicode block (U+AA80-U+AADF). Declaration public static UnicodeRange TaiViet { get; } Property Value Type Description UnicodeRange The Tai Viet Unicode block (U+AA80-U+AADF). Tamil Gets the Tamil Unicode block (U+0B80-U+0BFF). Declaration public static UnicodeRange Tamil { get; } Property Value Type Description UnicodeRange The Tamil Unicode block (U+0B82-U+0BFA). Telugu Gets the Telugu Unicode block (U+0C00-U+0C7F). Declaration public static UnicodeRange Telugu { get; } Property Value Type Description UnicodeRange The Telugu Unicode block (U+0C00-U+0C7F). Thaana Gets the Thaana Unicode block (U+0780-U+07BF). Declaration public static UnicodeRange Thaana { get; } Property Value Type Description UnicodeRange The Thaana Unicode block (U+0780-U+07BF). Thai Gets the Thai Unicode block (U+0E00-U+0E7F). Declaration public static UnicodeRange Thai { get; } Property Value Type Description UnicodeRange The Thai Unicode block (U+0E00-U+0E7F). Tibetan Gets the Tibetan Unicode block (U+0F00-U+0FFF). Declaration public static UnicodeRange Tibetan { get; } Property Value Type Description UnicodeRange The Tibetan Unicode block (U+0F00-U+0FFF). Tifinagh Gets the Tifinagh Unicode block (U+2D30-U+2D7F). Declaration public static UnicodeRange Tifinagh { get; } Property Value Type Description UnicodeRange The Tifinagh Unicode block (U+2D30-U+2D7F). UnifiedCanadianAboriginalSyllabics Gets the Unified Canadian Aboriginal Syllabics Unicode block (U+1400-U+167F). Declaration public static UnicodeRange UnifiedCanadianAboriginalSyllabics { get; } Property Value Type Description UnicodeRange The Unified Canadian Aboriginal Syllabics Unicode block (U+1400-U+167F). UnifiedCanadianAboriginalSyllabicsExtended Gets the Unified Canadian Aboriginal Syllabics Extended Unicode block (U+18B0-U+18FF). Declaration public static UnicodeRange UnifiedCanadianAboriginalSyllabicsExtended { get; } Property Value Type Description UnicodeRange The Unified Canadian Aboriginal Syllabics Extended Unicode block (U+18B0-U+18FF). Vai Gets the Vai Unicode block (U+A500-U+A63F). Declaration public static UnicodeRange Vai { get; } Property Value Type Description UnicodeRange The Vai Unicode block (U+A500-U+A63F). VariationSelectors Gets the Variation Selectors Unicode block (U+FE00-U+FE0F). Declaration public static UnicodeRange VariationSelectors { get; } Property Value Type Description UnicodeRange The Variation Selectors Unicode block (U+FE00-U+FE0F). VedicExtensions Gets the Vedic Extensions Unicode block (U+1CD0-U+1CFF). Declaration public static UnicodeRange VedicExtensions { get; } Property Value Type Description UnicodeRange The Vedic Extensions Unicode block (U+1CD0-U+1CFF). VerticalForms Gets the Vertical Forms Unicode block (U+FE10-U+FE1F). Declaration public static UnicodeRange VerticalForms { get; } Property Value Type Description UnicodeRange The Vertical Forms Unicode block (U+FE10-U+FE1F). YiRadicals Gets the Yi Radicals Unicode block (U+A490-U+A4CF). Declaration public static UnicodeRange YiRadicals { get; } Property Value Type Description UnicodeRange The Yi Radicals Unicode block (U+A490-U+A4CF). YiSyllables Gets the Yi Syllables Unicode block (U+A000-U+A48F). Declaration public static UnicodeRange YiSyllables { get; } Property Value Type Description UnicodeRange The Yi Syllables Unicode block (U+A000-U+A48F). YijingHexagramSymbols Gets the Yijing Hexagram Symbols Unicode block (U+4DC0-U+4DFF). Declaration public static UnicodeRange YijingHexagramSymbols { get; } Property Value Type Description UnicodeRange The Yijing Hexagram Symbols Unicode block (U+4DC0-U+4DFF)."
  },
  "api/System.Text.Unicode.html": {
    "href": "api/System.Text.Unicode.html",
    "title": "Namespace System.Text.Unicode | CodeFactory for Windows",
    "keywords": "Namespace System.Text.Unicode Classes UnicodeRange Represents a contiguous range of Unicode code points. UnicodeRanges Provides static properties that return predefined UnicodeRange instances that correspond to blocks from the Unicode specification."
  },
  "api/System.Threading.Tasks.Sources.IValueTaskSource-1.html": {
    "href": "api/System.Threading.Tasks.Sources.IValueTaskSource-1.html",
    "title": "Interface IValueTaskSource<TResult> | CodeFactory for Windows",
    "keywords": "Interface IValueTaskSource<TResult> Namespace: System.Threading.Tasks.Sources Assembly: System.Threading.Tasks.Extensions.dll Syntax public interface IValueTaskSource<out TResult> Type Parameters Name Description TResult Methods GetResult(short) Declaration TResult GetResult(short token) Parameters Type Name Description short token Returns Type Description TResult GetStatus(short) Declaration ValueTaskSourceStatus GetStatus(short token) Parameters Type Name Description short token Returns Type Description ValueTaskSourceStatus OnCompleted(Action<object>, object, short, ValueTaskSourceOnCompletedFlags) Declaration void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags) Parameters Type Name Description Action<object> continuation object state short token ValueTaskSourceOnCompletedFlags flags"
  },
  "api/System.Threading.Tasks.Sources.IValueTaskSource.html": {
    "href": "api/System.Threading.Tasks.Sources.IValueTaskSource.html",
    "title": "Interface IValueTaskSource | CodeFactory for Windows",
    "keywords": "Interface IValueTaskSource Namespace: System.Threading.Tasks.Sources Assembly: System.Threading.Tasks.Extensions.dll Syntax public interface IValueTaskSource Methods GetResult(short) Declaration void GetResult(short token) Parameters Type Name Description short token GetStatus(short) Declaration ValueTaskSourceStatus GetStatus(short token) Parameters Type Name Description short token Returns Type Description ValueTaskSourceStatus OnCompleted(Action<object>, object, short, ValueTaskSourceOnCompletedFlags) Declaration void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags) Parameters Type Name Description Action<object> continuation object state short token ValueTaskSourceOnCompletedFlags flags"
  },
  "api/System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore-1.html": {
    "href": "api/System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore-1.html",
    "title": "Struct ManualResetValueTaskSourceCore<TResult> | CodeFactory for Windows",
    "keywords": "Struct ManualResetValueTaskSourceCore<TResult> Provides the core logic for implementing a manual-reset IValueTaskSource or IValueTaskSource<TResult>. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Threading.Tasks.Sources Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax public struct ManualResetValueTaskSourceCore<TResult> Type Parameters Name Description TResult Properties RunContinuationsAsynchronously Gets or sets whether to force continuations to run asynchronously. Declaration public bool RunContinuationsAsynchronously { readonly get; set; } Property Value Type Description bool Remarks Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true. Version Gets the operation version. Declaration public short Version { get; } Property Value Type Description short Methods GetResult(short) Gets the result of the operation. Declaration public TResult GetResult(short token) Parameters Type Name Description short token Opaque value that was provided to the ValueTask's constructor. Returns Type Description TResult GetStatus(short) Gets the status of the operation. Declaration public ValueTaskSourceStatus GetStatus(short token) Parameters Type Name Description short token Opaque value that was provided to the ValueTask's constructor. Returns Type Description ValueTaskSourceStatus OnCompleted(Action<object>, object, short, ValueTaskSourceOnCompletedFlags) Schedules the continuation action for this operation. Declaration public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags) Parameters Type Name Description Action<object> continuation The continuation to invoke when the operation has completed. object state The state object to pass to continuation when it's invoked. short token Opaque value that was provided to the ValueTask's constructor. ValueTaskSourceOnCompletedFlags flags The flags describing the behavior of the continuation. Reset() Resets to prepare for the next operation. Declaration public void Reset() SetException(Exception) Complets with an error. Declaration public void SetException(Exception error) Parameters Type Name Description Exception error SetResult(TResult) Completes with a successful result. Declaration public void SetResult(TResult result) Parameters Type Name Description TResult result The result."
  },
  "api/System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.html": {
    "href": "api/System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.html",
    "title": "Enum ValueTaskSourceOnCompletedFlags | CodeFactory for Windows",
    "keywords": "Enum ValueTaskSourceOnCompletedFlags Namespace: System.Threading.Tasks.Sources Assembly: System.Threading.Tasks.Extensions.dll Syntax [Flags] public enum ValueTaskSourceOnCompletedFlags Fields Name Description FlowExecutionContext None UseSchedulingContext"
  },
  "api/System.Threading.Tasks.Sources.ValueTaskSourceStatus.html": {
    "href": "api/System.Threading.Tasks.Sources.ValueTaskSourceStatus.html",
    "title": "Enum ValueTaskSourceStatus | CodeFactory for Windows",
    "keywords": "Enum ValueTaskSourceStatus Namespace: System.Threading.Tasks.Sources Assembly: System.Threading.Tasks.Extensions.dll Syntax public enum ValueTaskSourceStatus Fields Name Description Canceled Faulted Pending Succeeded"
  },
  "api/System.Threading.Tasks.Sources.html": {
    "href": "api/System.Threading.Tasks.Sources.html",
    "title": "Namespace System.Threading.Tasks.Sources | CodeFactory for Windows",
    "keywords": "Namespace System.Threading.Tasks.Sources Structs ManualResetValueTaskSourceCore<TResult> Provides the core logic for implementing a manual-reset IValueTaskSource or IValueTaskSource<TResult>. Interfaces IValueTaskSource IValueTaskSource<TResult> Enums ValueTaskSourceOnCompletedFlags ValueTaskSourceStatus"
  },
  "api/System.Threading.Tasks.TaskAsyncEnumerableExtensions.html": {
    "href": "api/System.Threading.Tasks.TaskAsyncEnumerableExtensions.html",
    "title": "Class TaskAsyncEnumerableExtensions | CodeFactory for Windows",
    "keywords": "Class TaskAsyncEnumerableExtensions Provides a set of static methods for configuring Task-related behaviors on asynchronous enumerables and disposables. Inheritance object TaskAsyncEnumerableExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: System.Threading.Tasks Assembly: Microsoft.Bcl.AsyncInterfaces.dll Syntax public static class TaskAsyncEnumerableExtensions Methods ConfigureAwait(IAsyncDisposable, bool) Configures how awaits on the tasks returned from an async disposable will be performed. Declaration public static ConfiguredAsyncDisposable ConfigureAwait(this IAsyncDisposable source, bool continueOnCapturedContext) Parameters Type Name Description IAsyncDisposable source The source async disposable. bool continueOnCapturedContext Whether to capture and marshal back to the current context. Returns Type Description ConfiguredAsyncDisposable The configured async disposable. ConfigureAwait<T>(IAsyncEnumerable<T>, bool) Configures how awaits on the tasks returned from an async iteration will be performed. Declaration public static ConfiguredCancelableAsyncEnumerable<T> ConfigureAwait<T>(this IAsyncEnumerable<T> source, bool continueOnCapturedContext) Parameters Type Name Description IAsyncEnumerable<T> source The source enumerable being iterated. bool continueOnCapturedContext Whether to capture and marshal back to the current context. Returns Type Description ConfiguredCancelableAsyncEnumerable<T> The configured enumerable. Type Parameters Name Description T The type of the objects being iterated. WithCancellation<T>(IAsyncEnumerable<T>, CancellationToken) Sets the CancellationToken to be passed to GetAsyncEnumerator(CancellationToken) when iterating. Declaration public static ConfiguredCancelableAsyncEnumerable<T> WithCancellation<T>(this IAsyncEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description IAsyncEnumerable<T> source The source enumerable being iterated. CancellationToken cancellationToken The CancellationToken to use. Returns Type Description ConfiguredCancelableAsyncEnumerable<T> The configured enumerable. Type Parameters Name Description T The type of the objects being iterated."
  },
  "api/System.Threading.Tasks.ValueTask-1.html": {
    "href": "api/System.Threading.Tasks.ValueTask-1.html",
    "title": "Struct ValueTask<TResult> | CodeFactory for Windows",
    "keywords": "Struct ValueTask<TResult> Provides a value type that wraps a and a TResult, only one of which is used. Implements IEquatable<ValueTask<TResult>> Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Threading.Tasks Assembly: System.Threading.Tasks.Extensions.dll Syntax public readonly struct ValueTask<TResult> : IEquatable<ValueTask<TResult>> Type Parameters Name Description TResult The result. Constructors ValueTask(IValueTaskSource<TResult>, short) Declaration public ValueTask(IValueTaskSource<TResult> source, short token) Parameters Type Name Description IValueTaskSource<TResult> source short token ValueTask(Task<TResult>) Initializes a new instance of the class using the supplied task that represents the operation. Declaration public ValueTask(Task<TResult> task) Parameters Type Name Description Task<TResult> task The task. Exceptions Type Condition ArgumentNullException The task argument is null. ValueTask(TResult) Initializes a new instance of the class using the supplied result of a successful operation. Declaration public ValueTask(TResult result) Parameters Type Name Description TResult result The result. Properties IsCanceled Gets a value that indicates whether this object represents a canceled operation. Declaration public bool IsCanceled { get; } Property Value Type Description bool true if this object represents a canceled operation; otherwise, false. IsCompleted Gets a value that indicates whether this object represents a completed operation. Declaration public bool IsCompleted { get; } Property Value Type Description bool true if this object represents a completed operation; otherwise, false. IsCompletedSuccessfully Gets a value that indicates whether this object represents a successfully completed operation. Declaration public bool IsCompletedSuccessfully { get; } Property Value Type Description bool true if this object represents a successfully completed operation; otherwise, false. IsFaulted Gets a value that indicates whether this object represents a failed operation. Declaration public bool IsFaulted { get; } Property Value Type Description bool true if this object represents a failed operation; otherwise, false. Result Gets the result. Declaration public TResult Result { get; } Property Value Type Description TResult The result. Methods AsTask() Retrieves a object that represents this . Declaration public Task<TResult> AsTask() Returns Type Description Task<TResult> The object that is wrapped in this if one exists, or a new object that represents the result. ConfigureAwait(bool) Configures an awaiter for this value. Declaration public ConfiguredValueTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext) Parameters Type Name Description bool continueOnCapturedContext true to attempt to marshal the continuation back to the captured context; otherwise, false. Returns Type Description ConfiguredValueTaskAwaitable<TResult> The configured awaiter. Equals(object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides ValueType.Equals(object) Equals(ValueTask<TResult>) Determines whether the specified object is equal to the current object. Declaration public bool Equals(ValueTask<TResult> other) Parameters Type Name Description ValueTask<TResult> other The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. GetAwaiter() Creates an awaiter for this value. Declaration public ValueTaskAwaiter<TResult> GetAwaiter() Returns Type Description ValueTaskAwaiter<TResult> The awaiter. GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int The hash code for the current object. Overrides ValueType.GetHashCode() Preserve() Declaration public ValueTask<TResult> Preserve() Returns Type Description ValueTask<TResult> ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides ValueType.ToString() Operators operator ==(ValueTask<TResult>, ValueTask<TResult>) Compares two values for equality. Declaration public static bool operator ==(ValueTask<TResult> left, ValueTask<TResult> right) Parameters Type Name Description ValueTask<TResult> left The first value to compare. ValueTask<TResult> right The second value to compare. Returns Type Description bool true if the two values are equal; otherwise, false. operator !=(ValueTask<TResult>, ValueTask<TResult>) Determines whether two values are unequal. Declaration public static bool operator !=(ValueTask<TResult> left, ValueTask<TResult> right) Parameters Type Name Description ValueTask<TResult> left The first value to compare. ValueTask<TResult> right The seconed value to compare. Returns Type Description bool true if the two values are not equal; otherwise, false. Implements IEquatable<T>"
  },
  "api/System.Threading.Tasks.ValueTask.html": {
    "href": "api/System.Threading.Tasks.ValueTask.html",
    "title": "Struct ValueTask | CodeFactory for Windows",
    "keywords": "Struct ValueTask Implements IEquatable<ValueTask> Inherited Members ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: System.Threading.Tasks Assembly: System.Threading.Tasks.Extensions.dll Syntax public readonly struct ValueTask : IEquatable<ValueTask> Constructors ValueTask(IValueTaskSource, short) Declaration public ValueTask(IValueTaskSource source, short token) Parameters Type Name Description IValueTaskSource source short token ValueTask(Task) Declaration public ValueTask(Task task) Parameters Type Name Description Task task Properties IsCanceled Declaration public bool IsCanceled { get; } Property Value Type Description bool IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description bool IsCompletedSuccessfully Declaration public bool IsCompletedSuccessfully { get; } Property Value Type Description bool IsFaulted Declaration public bool IsFaulted { get; } Property Value Type Description bool Methods AsTask() Declaration public Task AsTask() Returns Type Description Task ConfigureAwait(bool) Declaration public ConfiguredValueTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) Parameters Type Name Description bool continueOnCapturedContext Returns Type Description ConfiguredValueTaskAwaitable Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) Equals(ValueTask) Declaration public bool Equals(ValueTask other) Parameters Type Name Description ValueTask other Returns Type Description bool GetAwaiter() Declaration public ValueTaskAwaiter GetAwaiter() Returns Type Description ValueTaskAwaiter GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Preserve() Declaration public ValueTask Preserve() Returns Type Description ValueTask Operators operator ==(ValueTask, ValueTask) Declaration public static bool operator ==(ValueTask left, ValueTask right) Parameters Type Name Description ValueTask left ValueTask right Returns Type Description bool operator !=(ValueTask, ValueTask) Declaration public static bool operator !=(ValueTask left, ValueTask right) Parameters Type Name Description ValueTask left ValueTask right Returns Type Description bool Implements IEquatable<T>"
  },
  "api/System.Threading.Tasks.html": {
    "href": "api/System.Threading.Tasks.html",
    "title": "Namespace System.Threading.Tasks | CodeFactory for Windows",
    "keywords": "Namespace System.Threading.Tasks Classes TaskAsyncEnumerableExtensions Provides a set of static methods for configuring Task-related behaviors on asynchronous enumerables and disposables. Structs ValueTask ValueTask<TResult> Provides a value type that wraps a and a TResult, only one of which is used."
  },
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System | CodeFactory for Windows",
    "keywords": "Namespace System Classes MemoryExtensions Structs Memory<T> ReadOnlyMemory<T> ReadOnlySpan<T> ReadOnlySpan<T>.Enumerator SequencePosition Span<T> Span<T>.Enumerator Interfaces IAsyncDisposable Provides a mechanism for releasing unmanaged resources asynchronously."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | CodeFactory for Windows",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | CodeFactory for Windows",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | CodeFactory for Windows",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}